language: scala
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings match\
    \ {\n            case Nil => None\n            case _ => {\n                var\
    \ longest = \"\"\n                var maxLength = 0\n                strings.foreach(s\
    \ => {\n                    if (s.length() > maxLength)\n                    \
    \    maxLength = s.length()\n                })\n                strings.foreach(s\
    \ => {\n                    if (s.length() == maxLength) {\n                 \
    \       if (s.length() > longest.length()) {\n                            longest\
    \ = s\n                        }\n                    } else {\n             \
    \           if (s.length > longest.length()) {\n                            longest\
    \ = s\n                        }\n                    }\n                })\n\
    \                if (longest.length() == maxLength) {\n                    Some(longest)\n\
    \                } else {\n                    None\n                }\n     \
    \       }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg5kdcfzb.scala:43)\n\tat Problem.main(tmpg5kdcfzb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            strings.sortWith(_ < _)\n          \
    \  strings.last // Return the longest string in case of multiple strings of the\
    \ same length\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjo31x06y.scala:16:20\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.last \e[34m//\
    \ Return the longest string in case of multiple strings of the same length\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  Found:    String\n\e[31m   |\e[0m            Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            var maxLen = -1\n            var maxString\
    \ = strings.head\n            for (str <- strings) {\n                if (str.length\
    \ >maxLen) {\n                    maxLen = str.length\n                    maxString\
    \ = str\n                }\n            }\n            Some(maxString)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpusbtht_2.scala:28)\n\tat Problem.main(tmpusbtht_2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.map(x\
    \ => if(strings.size <= 1 || x.size <= 1) None else x).reduce(_ ++ _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptylmkniv.scala:13:84 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.map(\e[36mx\e[0m => \e[33mif\e[0m(strings.size\
    \ <= \e[31m1\e[0m || x.size <= \e[31m1\e[0m) None \e[33melse\e[0m x).reduce(_\
    \ ++ _)\n\e[31m\e[31m   |\e[0m                                               \
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                       value ++ is not a member of Object\n1 error found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ < 1) None\n        val maxLength = strings.map(_.length).max\n        if (maxLength\
    \ > 0) strings.find(_.length == maxLength)\n        else strings.headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.longest(tmp8z0zgrh7.scala:14)\n\tat Problem$.main(tmp8z0zgrh7.scala:19)\n\
    \tat Problem.main(tmp8z0zgrh7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.flatten\
    \ match {\n            case Nil => None\n            case x :: rest => Some(x.max)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmvtc_nwe.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x\
    \ :: rest => Some(x.max)\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Char => Char\n\e[31m   |\e[0m                                   Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        } else {\n            strings.groupBy(_.length).mapValues(_.map(_.length)).maxBy(_._2).flatMap(_._1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7_bi9bd3.scala:16:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.groupBy(_.length).mapValues(_.map(_.length)).maxBy(_._2).flatMap(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for List[Int]..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mList[Int]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[List[Int]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[List[Int]].\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m\
    \   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ if (strings.head ==\
    \ strings.last) => strings.head\n            case _ => strings.sortWith(_ < _).last\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp49ssukwc.scala:15:64\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _\
    \ \e[33mif\e[0m (strings.head == strings.last) => strings.head\n\e[31m\e[31m \
    \  |\e[0m                                                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ String\n\e[31m   |\e[0m                                                Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp49ssukwc.scala:16:46 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _ => strings.sortWith(_ <\
    \ _).last\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m  \
    \                    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ < 2) None\n        else if (strings.length == 1) Some(strings.headOption)\n\
    \        else strings.sortWith(compareBy[(Int)](_.length, _)).lastOption\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd99vzank.scala:14:51\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (strings.length == \e[31m1\e[0m) Some(strings.headOption)\n\e[31m\e[31m  \
    \ |\e[0m                                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                           Found:    \e[1m\e[31mOption\e\
    [0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                 \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpd99vzank.scala:15:30 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m strings.sortWith(compareBy[(Int)](_.length,\
    \ _)).lastOption\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Wrong number of parameters,\
    \ expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.sortBy(_.length).take(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd8f7wtqy.scala:14:42\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.sortBy(_.length).take(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    \e[1m\e[31mList\e[0m[String]\n\e[31m\
    \   |\e[0m             Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(\"\
    \") { (max, curr) => if(curr.length >  max.length) max else curr}\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr399plks.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(\e[31m\"\
    \"\e[0m) { (\e[36mmax\e[0m, \e[36mcurr\e[0m) => \e[33mif\e[0m(curr.length >  max.length)\
    \ max \e[33melse\e[0m curr}\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ {\n            None\n        } else {\n            strings.groupBy(s => s.length).maxBy(_.size).map(_._1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1_zx2cm8.scala:16:61 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.groupBy(\e[36ms\e[0m => s.length).maxBy(_.size).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2._1.\n1 error found\n"
  stdout: ''
  timestamp: 1660029217
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Keep track\
    \ of longest length\n        var longest : Option[Int] = None\n        // Keep\
    \ track of list of strings with same length\n        var list : List[String] =\
    \ Nil\n        // Recursively call longest on all strings\n        strings.foreach\
    \ { string =>\n            longest = longest match {\n                case Some(oldLongest)\
    \ if string.length > oldLongest => Some(string.length)\n                case Some(oldLongest)\
    \ => Some(oldLongest)\n                case None => None\n            }\n    \
    \        if (longest == None) list = list ::: List(string)\n        }\n      \
    \  // Return first longest string in case of multiple strings of the same length\n\
    \        longest.map { len =>\n            list.find { s => s.length == len }\n\
    \        }.getOrElse(None)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppt7ixvff.scala:33)\n\tat Problem.main(tmppt7ixvff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Use a mutable\
    \ data structure to keep track of the longest string\n        var longest = List.empty[String]\n\
    \        // Iterate over each string in the list to find the longest\n       \
    \ strings.map { string => if (string.length > longest.length) longest :+= string\
    \ }\n        // If no strings were found, return the empty list\n        if (longest.isEmpty)\
    \ None\n        else longest.maxOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpltr7xdmx.scala:23)\n\tat Problem.main(tmpltr7xdmx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ None\n        else strings.foldLeft((\"\", List[String]())) {\n            case\
    \ ((maxLength, currentList), currentString) => {\n                val newLength\
    \ = currentString.length\n                val newList = if(newLength > maxLength)\
    \ List(currentString) else currentList :+ currentString\n                ((newLength,\
    \ newList))\n            }\n        }._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpu04pso_o.scala:17:43 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mnewList\e[0m = \e\
    [33mif\e[0m(newLength > maxLength) List(currentString) \e[33melse\e[0m currentList\
    \ :+ currentString\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m>\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float): Boolean\n\e[31m   |\e[0m\
    \  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\e[31m   |\e[0m  (x:\
    \ Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e[31m   |\e[0m  (x: Byte):\
    \ Boolean\n\e[31m   |\e[0m match arguments ((maxLength : String))\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu04pso_o.scala:18:18 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                ((newLength, newList))\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (newLength : Int)\n\e[31m   |\e[0m                  Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ return None\n        strings.foldLeft(List[String]()) { (list, str) => if (str.length\
    \ > list.length) list :+ str }\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0thzi20m.scala:14:58\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()) { (\e[36mlist\e[0m, \e[36mstr\e[0m) => \e[33mif\e[0m (str.length\
    \ > list.length) list :+ str }\n\e[31m\e[31m   |\e[0m                        \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    Unit\n\e[31m   |\e[0m         \
    \        Required: List[String]\n\e[31m   |\e[0m                 Maybe you are\
    \ missing an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Create a hash\
    \ map of {length : list of strings containing this length}\n        val map =\
    \ strings.groupBy(_.length)\n                .map(kv => kv._1 -> kv._2.toList)\n\
    \                .toMap\n        val maxLength = math.max(map.keys.toList)\n \
    \       // Filter out all the strings of length greater than maxLength\n     \
    \   map.filter(_._1 == maxLength).values.headOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpot8utxex.scala:17:29 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = math.max(map.keys.toList)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((Iterable[Int]#toList : => List[Int]))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpot8utxex.scala:19:45 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        map.filter(_._1 == maxLength).values.headOption\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    Option[\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m]\n\e[31m   |\e[0m        Required: Option[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Using fold\
    \ to keep track of the length of the longest string so far\n        // and to\
    \ return the first one in case of a tie. \n        strings.foldLeft(Option.empty[String])((a,b)\
    \ => a match {\n            case Some(longest_string) if a.length < b.length =>\
    \ Some(longest_string)\n            case _ => b\n        }).orElse(None)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6k0ac023.scala:16:43 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m Some(longest_string) \e[33mif\e\
    [0m a.length < b.length => Some(longest_string)\n\e[31m\e[31m   |\e[0m       \
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              value length is not a member of Option[String]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6k0ac023.scala:17:22 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m _ => b\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Found: \
    \   (b : String)\n\e[31m   |\e[0m                      Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Solution using\
    \ foldLeft\n        // Solution using filter\n        strings.length match {\n\
    \            case 0 => None\n            case 1 => strings.headOption\n      \
    \      case _ =>\n                strings.foldLeft(List[String]())(\n        \
    \            acc => acc :: acc.tail max _\n                ) match {\n       \
    \             case Nil => None\n                    case head :: tail => Some(head)\n\
    \                }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcqdv6xkz.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[36macc\e[0m => acc :: acc.tail\
    \ max _\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Wrong number of parameters, expected:\
    \ 2\n1 error found\n"
  stdout: ''
  timestamp: 1660029216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.headOption)\n\
    \            case _ => strings.groupBy(_.length).maxBy(_.key).map(_._1).getOrElse(None)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpakr0l9p0.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e\
    [31m1\e[0m => Some(strings.headOption)\n\e[31m\e[31m   |\e[0m                \
    \           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \  Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e\
    [31m   |\e[0m                           Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpakr0l9p0.scala:16:56 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _ => strings.groupBy(_.length).maxBy(_.key).map(_._1).getOrElse(None)\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value key is not a member of (Int,\
    \ List[String])\n\e[31m\e[31m-- Error: /tmp/tmpakr0l9p0.scala:16:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _ => strings.groupBy(_.length).maxBy(_.key).map(_._1).getOrElse(None)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ <= 1) None\n        else {\n            val longest = strings.length\n     \
    \       val maxIndex = strings.zipWithIndex.maxBy(_._1)._2\n            strings.lift(maxIndex)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp985bkme2.scala:22)\n\tat Problem.main(tmp985bkme2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Some(List[String]()))\
    \ {\n            list =>\n                list.headOption.map(s => {\n       \
    \             if (s.length() > list.head.length) list else list.head\n       \
    \         })\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp2d544w8l.scala:14:17 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[36mlist\e[0m =>\n\e[31m\e[31m   |\e[0m\
    \            ^\e[0m\n\e[31m   |\e[0m            Wrong number of parameters, expected:\
    \ 2\n\e[31m15 |\e[0m                list.headOption.map(\e[36ms\e[0m => {\n\e\
    [31m16 |\e[0m                    \e[33mif\e[0m (s.length() > list.head.length)\
    \ list \e[33melse\e[0m list.head\n\e[31m17 |\e[0m                })\n1 error found\n"
  stdout: ''
  timestamp: 1660029215
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        }\n        else {\n            val maxLength\
    \ = strings.foldLeft(0)(_ + _.length)\n            strings.find(_.length == maxLength)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7l5j8jmf.scala:23)\n\tat Problem.main(tmp7l5j8jmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortBy(s\
    \ => s.length).last\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ojyrus0.scala:13:38\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.sortBy(\e[36ms\e\
    [0m => s.length).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        var longest =\
    \ strings(0)\n        var length = 0\n        for (string <- strings) {\n    \
    \        if (string.length == length) {\n                longest = string\n  \
    \          } else {\n                length += 1\n            }\n        }\n \
    \       longest\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjqfxyfyf.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        longest\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (longest : String)\n\
    \e[31m   |\e[0m        Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\n\
    \            None\n        else {\n            val max_len = strings(0).length\n\
    \            val results: List[String] = strings.tail.filter{ s => s.length ==\
    \ max_len }\n            if (results.isEmpty)\n                None\n        \
    \    else\n                Some(results(0).length)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxg3rjjbb.scala:21:21\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                Some(results(\e\
    [31m0\e[0m).length)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ return None\n        val longest = strings.maxBy(_.length)\n        strings.map(_.substring(longest.length,\
    \ longest.length + strings.last.length)) match {\n            case List() => None\n\
    \            case x => Some(x.mkString(\"\"))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 2, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.longest$$anonfun$1(tmphe0dmss_.scala:15)\n\tat scala.collection.immutable.List.map(List.scala:246)\n\
    \tat Problem$.longest(tmphe0dmss_.scala:15)\n\tat Problem$.main(tmphe0dmss_.scala:22)\n\
    \tat Problem.main(tmphe0dmss_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.headOption\n\
    \            case _ => {\n                var max = 0\n                var maxString\
    \ = \"\"\n                strings.foreach(s => {\n                    if (s.length\
    \ < max) {\n                        max = s.length\n                        maxString\
    \ = s\n                    }\n                })\n                if (maxString.isEmpty)\
    \ None else Some(maxString)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj0_wcyik.scala:31)\n\tat Problem.main(tmpj0_wcyik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.reduceLeftOption( _ ++ _ ).foldLeft(None: Option[String]){\
    \ case (l, x) => if (l.length == x.length) Some(x) else None}\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv165qozq.scala:14:101 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.reduceLeftOption( _ ++\
    \ _ ).foldLeft(None: Option[String]){ \e[33mcase\e[0m (l, x) => \e[33mif\e[0m\
    \ (l.length == x.length) Some(x) \e[33melse\e[0m None}\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \   value length is not a member of Option[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else if (strings.size == 1) strings(0)\n        else {\n     \
    \       val (a, b) = strings.span(_ == strings(0))\n            if (a.length >=\
    \ b.length) Some(a.dropRight(b.length).max)\n            else Some(b.dropRight(a.length).max)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8m0ssl8.scala:14:43\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (strings.size == \e[31m1\e[0m) strings(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                            Found:    String\n\e[31m   |\e[0m               \
    \                     Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   var maxLen = -1\n                var res = strings(0)\n                for\
    \ {\n                    i <- 1 until strings.length\n                    currLen\
    \ <- strings.length - i\n                    if (currLen > maxLen) {\n       \
    \                 maxLen = currLen\n                        res = strings(i)\n\
    \                    }\n                } yield res\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppcl21026.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    currLen <- strings.length - i\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value withFilter is not a member of\
    \ Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.map(_.length).maxOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ft48tk.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.map(_.length).maxOption\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Option[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        } else {\n            val sortedList = strings.toList.sortBy(s\
    \ => s.length)\n            val longest = sortedList.last\n            longest.headOption\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphpeoqjht.scala:18:20\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            longest.headOption\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m            Required:\
    \ Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings ==\
    \ null || strings.length == 0)\n            None\n        else if (strings.length\
    \ == 1)\n            Some(strings(0))\n        else {\n            val longestString\
    \ = strings(0)\n            var currentLongestLength = longestString.length\n\
    \            for (i <- 1 to strings.length) {\n                if (strings(i).length\
    \ > currentLongestLength) {\n                    currentLongestLength = strings(i).length\n\
    \                    longestString = strings(i)\n                }\n         \
    \   }\n            longestString\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpti0g_rcd.scala:23:34 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    longestString = strings(i)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val longestString\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpti0g_rcd.scala:26:12 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            longestString\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (longestString\
    \ : String)\n\e[31m   |\e[0m            Required: Option[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)((max,\
    \ s) => {\n            if (max != null) {\n                s.size >= max.size\
    \ ? s : max\n            } else {\n                Some(s)\n            }\n  \
    \      })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbb9p5reo.scala:15:41 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                s.size >= max.size ? s : \e[35mmax\e\
    [0m\n\e[31m\e[31m   |\e[0m                                         ^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: type max\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbb9p5reo.scala:15:35\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m                s.size >=\
    \ max.size ? s : \e[35mmax\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value ? is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb9p5reo.scala:17:20\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                Some(s)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Some[String]\n\e[31m   |\e[0m                Required: None.type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ > 1) {\n            val max = strings.foldLeft(strings(0), 0)(_ < _) match {\n\
    \                case (true, idx) => idx\n                case (false, idx) =>\
    \ idx\n            }\n            Some(strings(max))\n        }\n        else\
    \ None\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbcrt9f6l.scala:14:56 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mmax\e[0m = strings.foldLeft(strings(\e\
    [31m0\e[0m), \e[31m0\e[0m)(_ < _) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m  \
    \                                                    ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of (String, Int), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcrt9f6l.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e[0m (\e[31mtrue\e[0m, idx)\
    \ => idx\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    (\e[31mtrue\e[0m : Boolean)\n\e[31m   |\e[0m\
    \                      Required: String\n\e[31m   |\e[0m                     \
    \ pattern type is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbcrt9f6l.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m (\e[31mfalse\e[0m, idx)\
    \ => idx\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (\e[31mfalse\e[0m : Boolean)\n\e[31m   |\e\
    [0m                      Required: String\n\e[31m   |\e[0m                   \
    \   pattern type is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ None\n        else strings.map(s => s.length).foldLeft(Integer.MIN_VALUE){\n\
    \            case (max, s) => if(s > max) s else None\n        }.for{\n      \
    \      case x if x != Integer.MIN_VALUE => Some(string.substring(0,x)) //case\
    \ x if x > 0 => Some(string.substring(0,x))\n            case _ => None\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpui3dbcwc.scala:16:10 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        }.\e[33mfor\e[0m{\n\e[31m\e[31m   |\e[0m    \
    \      ^^^\e[0m\n\e[31m   |\e[0m          an identifier expected, but 'for' found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpui3dbcwc.scala:15:48\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m (max,\
    \ s) => \e[33mif\e[0m(s > max) s \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m \
    \                                               ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                             Found:    None.type\n\e[31m   |\e\
    [0m                                                Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ > 0) {\n            val longest = strings.maxBy(_.length).toString.trim\n  \
    \          if (strings.length == 1 && strings(0) == longest) {\n             \
    \   return Some(strings(0))\n            }\n            longest\n        }\n \
    \       else None\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp67eovbzn.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            longest\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (longest\
    \ : String)\n\e[31m   |\e[0m            Required: Option[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   // Make a HashSet so that we only compare the first String with the others\n\
    \                val hashSet = strings.map(s => s -> true).toSet\n           \
    \     strings.head match {\n                    case \"a\" => hashSet.filter(_._2\
    \ == \"a\").map(_._1).toOption\n                    case \"b\" => hashSet.filter(_._2\
    \ == \"b\").map(_._1).toOption\n                    case \"c\" => hashSet.filter(_._2\
    \ == \"c\").map(_._1).toOption\n                    case \"bb\" => hashSet.filter(_._2\
    \ == \"b\").filter(_._2 == \"b\").map(_._1).toOption\n                    case\
    \ \"ccc\" => hashSet.filter(_._2 == \"c\").filter(_._2 == \"c\").map(_._1).toOption\n\
    \                    case _ => strings.head\n                }\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpflv519b6.scala:19:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    \e[33mcase\e[0m \e[31m\"a\"\e[0m\
    \ => hashSet.filter(_._2 == \e[31m\"a\"\e[0m).map(_._1).toOption\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m     Values of types Boolean and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpflv519b6.scala:20:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mcase\e[0m \e[31m\"b\"\e[0m\
    \ => hashSet.filter(_._2 == \e[31m\"b\"\e[0m).map(_._1).toOption\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m     Values of types Boolean and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpflv519b6.scala:21:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mcase\e[0m \e[31m\"c\"\e[0m\
    \ => hashSet.filter(_._2 == \e[31m\"c\"\e[0m).map(_._1).toOption\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m     Values of types Boolean and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpflv519b6.scala:22:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m\"bb\"\e[0m\
    \ => hashSet.filter(_._2 == \e[31m\"b\"\e[0m).filter(_._2 == \e[31m\"b\"\e[0m).map(_._1).toOption\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types Boolean and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpflv519b6.scala:22:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m\"bb\"\e[0m\
    \ => hashSet.filter(_._2 == \e[31m\"b\"\e[0m).filter(_._2 == \e[31m\"b\"\e[0m).map(_._1).toOption\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     Values of types Boolean and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpflv519b6.scal"
  stdout: ''
  timestamp: 1660029233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None else strings.filter(s => s.length == strings.head.length).head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbs9qn_5p.scala:13:92\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (strings.isEmpty)\
    \ None \e[33melse\e[0m strings.filter(\e[36ms\e[0m => s.length == strings.head.length).head\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    String\n\e\
    [31m   |\e[0m                                       Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029231
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None:\
    \ Option[String])( (max, str) =>\n            max match {\n                case\
    \ None =>\n                    Some(str)\n                case Some(maxStr) =>\n\
    \                    val len = str.length\n                    if (len > maxStr.length)\n\
    \                        Some(str)\n                    else\n               \
    \         None\n            })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hqs6yxb.scala:27)\n\tat Problem.main(tmp9hqs6yxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Initialize\
    \ list of character frequencies for each string\n        var freqs : mutable.Map[String,\
    \ Int] = mutable.Map[String, Int]()\n        for (str <- strings)\n          \
    \  freqs += (str -> 1)\n        // Sort the frequencies in decreasing order\n\
    \        freqs ++= strings.zipWithIndex.sortWith((s1,s2) => s2._2 - s1._2).map{case\
    \ (str,index) => (str,index.toLong)}\n        // If all frequencies are equal,\
    \ return first string\n        if (strings.size == freqs.size)\n            Some(freqs.toList.last._1)\n\
    \        // Else, return all strings whose frequencies are equal\n        else\n\
    \            freqs.toList.takeWhile(x => strings.count(_ == x._1)).lastOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ytasdy1.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfreqs\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4ytasdy1.scala:14:47 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfreqs\e[0m : mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.reduceLeft(_.length.toInt).map\
    \ { x =>\n            strings.reverse.find(_.length == x).map(_.length)\n    \
    \    }.getOrElse(None)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdvxtpwte.scala:13:27 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.reduceLeft(_.length.toInt).map { \e[36mx\e\
    [0m =>\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Wrong number of parameters, expected:\
    \ 2\n1 error found\n"
  stdout: ''
  timestamp: 1660029228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None \n        else {\n            val maxLength = strings.getOrElse(-1).length\n\
    \            strings.foldLeft(maxLength)(Math.max)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1u7zhytr.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mmaxLength\e[0m = strings.getOrElse(-\e\
    [31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value getOrElse is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1u7zhytr.scala:16:45\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.foldLeft(maxLength)(Math.max)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e\
    [0m in \e[33mobject\e[0m \e[35mMath\e[0m with types\n\e[31m   |\e[0m (x$0: Double,\
    \ x$1: Double): Double\n\e[31m   |\e[0m (x$0: Float, x$1: Float): Float\n\e[31m\
    \   |\e[0m (x$0: Long, x$1: Long): Long\n\e[31m   |\e[0m (x$0: Int, x$1: Int):\
    \ Int\n\e[31m   |\e[0mmatch expected type (B, String) => B\n2 errors found\n"
  stdout: ''
  timestamp: 1660029231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.nonEmpty)\n\
    \            strings.foldLeft((None, \"\", \"\", strings.length)) { (max, s) =>\n\
    \                val len = s.length\n                val newLen = math.max(len,\
    \ max.get._2)\n                (max (newLen, s), max.get._1, s, newLen)\n    \
    \        }\n            else\n            None\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpht5xm3mj.scala:16:47 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnewLen\e[0m = math.max(len,\
    \ max.get._2)\n\e[31m\e[31m   |\e[0m                                         \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m           value get is not a member of (None.type,\
    \ String, String, Int)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpht5xm3mj.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                (max (newLen,\
    \ s), max.get._1, s, newLen)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (Nothing, String)\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpht5xm3mj.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                (max (newLen, s), max.get._1, s, newLen)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m           value get is not a member of (None.type, String, String, Int)\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None else Some(strings.sortWith(_.length < _.length).last)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp18f0eq36.scala:17)\n\tat Problem.main(tmp18f0eq36.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ <= 0) None\n        else strings.head :: longest(strings.tail)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp07j6h7zb.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.head :: longest(strings.tail)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value :: is not a member of Option[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(strings(0))\
    \ {\n            (_ max _ _) => (_.length)(_ < _) && (_ > _)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_j3rfm39.scala:14:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (_ max _ _) => (_.length)(_ < _) && (_ >\
    \ _)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \       not a legal formal parameter\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp_j3rfm39.scala:14:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            (_ max _\
    \ _) => (_.length)(_ < _) && (_ > _)\n\e[31m\e[31m   |\e[0m                  \
    \          ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m   |\e[0m   _$3 => _$3.length.\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmp_j3rfm39.scala:14:38 -----------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m            (_ max _ _) => (_.length)(_ < _) && (_ > _)\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   (_$4, _$5) =>\
    \ _$4 < _$5.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp_j3rfm39.scala:14:42 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (_ max _ _) => (_.length)(_ < _) && (_ >\
    \ _)\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$5 of expanded function:\n\e[31m   |\e\
    [0m   (_$4, _$5) => _$4 < _$5.\n4 errors found\n"
  stdout: ''
  timestamp: 1660029234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        val maxLength\
    \ = strings.foldLeft(0)(_+_.length)\n        strings.find(_.length==maxLength)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbc4o55ht.scala:18)\n\tat Problem.main(tmpbc4o55ht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.headOption.map\
    \ { s =>\n            strings.sortWith(_ == s) // sort by length\n        }.maxOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpj_p09tb_.scala:14:29 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            strings.sortWith(_ == s) \e[34m// sort by\
    \ length\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Wrong number of parameters, expected:\
    \ 2\n1 error found\n"
  stdout: ''
  timestamp: 1660029236
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        val maxLen = strings.map(_\
    \ => strings.map(_ => 1).reduce((x,y) => Math.max(x,y))).max\n\n        strings.find(s\
    \ => s.length == maxLen)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.longest(tmp42zf06fq.scala:13)\n\tat Problem$.main(tmp42zf06fq.scala:18)\n\
    \tat Problem.main(tmp42zf06fq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldRight(Some(\"\
    \"))( (longest, cur) => {\n            if(longest.isDefined) {\n             \
    \   val curLength = cur.length\n                if(curLength > longest.get.length)\
    \ longest\n            } else Some(cur)\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0kihc014.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(longest.isDefined) {\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     value isDefined is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp0kihc014.scala:15:36 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m                \e[33mval\e[0m \e[36mcurLength\e[0m = cur.length\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            value length is not a member of Some[String]\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kihc014.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m(curLength > longest.get.length)\
    \ longest\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m   |\e[0m          \
    \      Required: Some[String]\n\e[31m   |\e[0m                Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0kihc014.scala:17:24 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            } \e[33melse\e[0m Some(cur)\n\e[31m\e[31m   |\e[0m       \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                        Found:    (cur\
    \ : Some[String])\n\e[31m   |\e[0m                        Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        val res = strings.foldLeft(Option.empty[String])\
    \ {\n            (res, string) => res.map(_ + string).filterNot(_.equals(string))\n\
    \        }\n        res.flatten.map(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxkejvfxz.scala:16:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        res.flatten.map(_.length)\n\e[31m\e[31m   |\e\
    [0m                   ^\e[0m\n\e[31m   |\e[0m                   Cannot prove that\
    \ String <:< Option[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0m                   where:\
    \    B is a type variable\n\e[31m   |\e[0m                   .\n1 error found\n"
  stdout: ''
  timestamp: 1660029239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.headOption.map(_.length).maxOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkkzddb7p.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.headOption.map(_.length).maxOption\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    Option[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m\
    \        Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longestString = strings.length\n     \
    \       val longestStrings = strings.filter(_ == longestString)\n            if\
    \ (longestStrings.size == 1) Some(strings(0))\n            else longestStrings.headOption\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg6ed84ns.scala:16:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mlongestStrings\e[0m\
    \ = strings.filter(_ == longestString)\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \     Values of types String and Int cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None:\
    \ Option[String]){\n            case (Some(m), s) =>\n                if (m.length\
    \ < s.length) Some(s) else None\n            case (None, _) => None\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvqxpze1g.scala:21)\n\tat Problem.main(tmpvqxpze1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft((\"\
    \", \"\", List[String]())){\n            case ((prefix1, prefix2, strings), s)\
    \ =>\n                if (s.length() > prefix1.length) {\n                   \
    \ prefix1, prefix2, strings\n                } else {\n                    prefix2,\
    \ prefix1, strings\n                }\n        }._3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmh4ne1p8.scala:16:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    prefix1, prefix2, strings\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             end of statement expected but ',' found\n\e[31m\e[31m-- Error: /tmp/tmpmh4ne1p8.scala:18:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \             prefix2, prefix1, strings\n\e[31m\e[31m   |\e[0m               \
    \            ^\e[0m\n\e[31m   |\e[0m                           end of statement\
    \ expected but ',' found\n2 errors found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ < 1) None\n        else {\n            var max_length = strings.length\n   \
    \         var curr_string = strings.head\n            strings.tail.foreach(str\
    \ => {\n                if (str.length > max_length) max_length = str.length\n\
    \            })\n            if (max_length == curr_string.length) return Some(curr_string)\n\
    \            else None\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0xx_w80q.scala:26)\n\tat Problem.main(tmp0xx_w80q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.max match\
    \ {\n            case None => None\n            case Some(str) => Some(str.toUpper)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph6s_uf9z.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m None\
    \ => None\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m  \
    \               Found:    None.type\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m                 pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph6s_uf9z.scala:15:39\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e\
    [0m Some(str) => Some(str.toUpper)\n\e[31m\e[31m   |\e[0m                    \
    \               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \       value toUpper is not a member of Any\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Find all combinations\
    \ of the elements in the list\n        val (combos, rest) = strings.span(x =>\
    \ x != strings(strings.indexOf(x) + 1))\n        // If there are no more elements\
    \ in the list, return None\n        if (rest.size == 0) Some(strings.max)\n  \
    \      // Otherwise find the longest substring\n        else {\n            //\
    \ The longest substring starts where the strings combos end\n            def longestSubstringStart(strings:\
    \ List[String], stringIndex : Int) : Int = {\n                val index = stringIndex(stringIndex\
    \ + 1)\n                if (index < 0) index else longestSubstringStart(strings,\
    \ index)\n            }\n            // The longest substring ends where the strings\
    \ combos start\n            def longestSubstringEnd(strings: List[String], stringIndex\
    \ : Int) : Int = {\n                val index = stringIndex(stringIndex + 1)\n\
    \                if (index < 0) index else longestSubstringEnd(strings, index)\n\
    \            }\n            // The longest substring that starts and ends at a\
    \ given index\n            def longestSubstring(strings: List[String], stringIndex\
    \ : Int) : (Int, Int) = {\n                (longestSubstringStart(strings, stringIndex),\
    \ longestSubstringEnd(strings, stringIndex))\n            }\n            // Find\
    \ the longest substring\n            val longestSubstring = longest_substring_from(combos,\
    \ rest)\n            // Return the first one if there are multiple longest substrings\n\
    \            if (longestSubstring.size >= 2) longestSubstring.head\n         \
    \   else None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf4x6zoxy.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36mlongestSubstring\e[0m\
    \ = longest_substring_from(combos, rest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlongestSubstring is already defined as \e[33mmethod\e[0m \e\
    [35mlongestSubstring\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpf4x6zoxy.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mindex\e[0m = stringIndex(stringIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          \e[33mparameter\e[0m \e[35mstringIndex\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpf4x6zoxy.scala:26:28 -----------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                \e[33mval\e[0m \e[36mindex\e[0m = stringIndex(stringIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          \e[33mparameter\e[0m \e[35mstringIndex\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpf4x6zoxy.scala:36:33 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m            \e[33mif\e[0m (longestSubstring.size >= \e[31m2\e[0m) longestSubstring.head\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m         value size is not a member of (List[String], Int) => (Int, Int)\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpf4x6zoxy.scala:36:61 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mif\e[0m (longestSubstring.size >= \e\
    [31m2\e[0m) longestSubstring.head\n\e[31m\e[31m   |\e[0m                     \
    \                       ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660029242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val maxLength: Int = -1\n          \
    \      strings.map(_.length).reduce((x, y) => if (x > y) { x } else { y }).\n\
    \                    zipWithIndex.filter(_._1 == maxLength).map(_._2).head match\
    \ {\n                        case None => strings.head\n                     \
    \   case Some(x) => x\n                    }\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpginjs71v.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                strings.map(_.length).reduce((\e[36mx\e\
    [0m, \e[36my\e[0m) => \e[33mif\e[0m (x > y) { x } \e[33melse\e[0m { y }).\n\e\
    [31m19 |\e[0m                    zipWithIndex.filter(_._1 == maxLength).map(_._2).head\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e\
    [0m                value zipWithIndex is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpginjs71v.scala:20:45 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                        \e[33mcase\e[0m None => strings.head\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    String\n\e[31m   |\e\
    [0m                                     Required: \e[1m\e[32mOption\e[0m\e[1m\e\
    [32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpginjs71v.scala:21:40 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                        \e[33mcase\e[0m Some(x) => x\n\e[31m\e[31m   |\e[0m\
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                           Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.maxBy(length\
    \ => strings.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxpbxnads.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.maxBy(\e[36mlength\e\
    [0m => strings.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.headOption.map\
    \ { longest(longest(strings.tail)) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzt3bt65f.scala:13:48\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.headOption.map\
    \ { longest(longest(strings.tail)) }\n\e[31m\e[31m   |\e[0m                  \
    \                       ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    \e[1m\e[31mOption\e[0m[String]\n\e[31m\
    \   |\e[0m                                         Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) return None\n        var maxLength = 0\n        strings.foreach {s =>\n\
    \            if (s.length() > maxLength) {\n                maxLength = s.length()\n\
    \            }\n        }\n        strings.find(s => s.length() == maxLength)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsow2bn71.scala:24)\n\tat Problem.main(tmpsow2bn71.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029243
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.toList.sortWith(_\
    \ < _).headOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8u68edkd.scala:17)\n\tat Problem.main(tmp8u68edkd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft((None,\
    \ strings.length)) {\n            case ((longest, length), string) =>\n      \
    \          if (string.length > length) (strings.updated(longest, string), length)\n\
    \                else { (longest, length) }\n        }._1.getOrElse((None, strings.length))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe51i2qjd.scala:15:61\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m\
    \ (string.length > length) (strings.updated(longest, string), length)\n\e[31m\e\
    [31m   |\e[0m                                                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (longest\
    \ : None.type)\n\e[31m   |\e[0m                                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe51i2qjd.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        }._1.getOrElse((None,\
    \ strings.length))\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (None.type, Int)\n\e[31m\
    \   |\e[0m                       Required: Option[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029243
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // A simple O(N)\
    \ algorithm to find the longest string in input\n        if (strings.isEmpty)\
    \ {\n            None\n        } else {\n            strings.sortWith(_ > _)\n\
    \                .takeWhile(_ < strings.max)\n                .headOption\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp69x0r_t_.scala:24)\n\tat Problem.main(tmp69x0r_t_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ return None\n        val longest = strings.foldLeft(List[String]())((res, str)\
    \ => res match {\n            case Nil => List(str)\n            case _ => {\n\
    \                if (str.length() > res.length()) res :+ str\n               \
    \ else str\n            }\n        })\n        if (longest.length == strings.length)\
    \ longest.head else longest.lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpp0hprxqt.scala:17:39 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (str.length() > res.length())\
    \ res :+ str\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    \e[33mmethod\e[0m \e[35mlength\e[0m in\
    \ \e[33mclass\e[0m \e[35mList\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp0hprxqt.scala:18:21 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33melse\e[0m str\n\e[31m\e[31m   |\e\
    [0m                     ^^^\e[0m\n\e[31m   |\e[0m                     Found: \
    \   (str : String)\n\e[31m   |\e[0m                     Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp0hprxqt.scala:21:54\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (longest.length\
    \ == strings.length) longest.head \e[33melse\e[0m longest.lastOption\n\e[31m\e\
    [31m   |\e[0m                                              ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    String\n\
    \e[31m   |\e[0m                                              Required: \e[1m\e\
    [32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwckpf2ec.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029244
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.headOption\n\
    \            case _ => {\n                val (_longest, _first) = strings.partition(_.length\
    \ == strings.length)\n                _longest.maxOption\n            }\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvl54dpqv.scala:24)\n\tat Problem.main(tmpvl54dpqv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029247
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.headOption\n\
    \            .map(s => strings.map(s => s match {\n                case x @ _\
    \ if x == s => x\n                case _ => s\n            }).maxBy(_.length))\n\
    \            .orElse(None)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo_jp4_ol.scala:22)\n\tat Problem.main(tmpo_jp4_ol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.maxBy(_.length)\
    \ match {\n            case None => None\n            case Some(s) => s\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7yc6qd00.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m None\
    \ => None\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m  \
    \               Found:    None.type\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m                 pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7yc6qd00.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m Some(s)\
    \ => s\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (s : Any)\n\e[31m   |\e[0m          \
    \                  Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None,\
    \ mutable.ListBuffer[(Int, String)])((acc, el) => {\n            if (el.length\
    \ <= acc._1._1)\n                Some((el.length, el))\n            else {\n \
    \               val candidate = acc._2.lastOption\n                if (candidate.isDefined\
    \ && candidate._1 == el.length)\n                    Some(candidate._2, el)\n\
    \                else\n                    Some((el.length, el), acc._2)\n   \
    \         }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q2f3k2h.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(None, mutable.ListBuffer[(\e\
    [35mInt\e[0m, \e[35mString\e[0m)])((\e[36macc\e[0m, \e[36mel\e[0m) => {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5q2f3k2h.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (el.length <= acc._1._1)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value _1 is not a member of object None\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5q2f3k2h.scala:15:20 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                Some((el.length, el))\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       Found:    Some[(Int, String)]\n\e[31m   |\e[0m                Required:\
    \ (None.type, Any)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5q2f3k2h.scala:17:39\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e\
    [0m \e[36mcandidate\e[0m = acc._2.lastOption\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 value lastOption is not a member of Any\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5q2f3k2h.scala:19:24 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                    Some(candidate._2, el)\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                Found:    Some[(Nothing, String)]\n\e[31m   |\e[0m          \
    \          Required: (None.type, Any)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5q2f3k2h.scala:21:24 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m      "
  stdout: ''
  timestamp: 1660029249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwckpf2ec.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n      val lengths = strings.map(_.length).toList\n\
    \      strings.maxBy(lengths)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbevxm3vs.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m      strings.maxBy(lengths)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Found:    (lengths : List[Int])\n\e[31m   |\e[0m               \
    \     Required: String => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbevxm3vs.scala:14:28\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m      strings.maxBy(lengths)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigInt\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter cmp of \e[33mmethod\e\
    [0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.nonEmpty)\
    \ {\n            var longest = strings(0)\n            for (index <- 1 until strings.length)\
    \ {\n                if (strings(index).length == strings(index-1).length) {\n\
    \                    if (strings(index).length > longest.length) longest = strings(index)\n\
    \                } else {\n                    if (strings(index).length < longest.length)\
    \ longest = strings(index)\n                }\n            }\n            if (longest\
    \ != strings(0)) longest\n            else Some(strings(0))\n        }\n     \
    \   else None\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa35ca_4w.scala:22:39\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (longest\
    \ != strings(\e[31m0\e[0m)) longest\n\e[31m\e[31m   |\e[0m                   \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \            Found:    (longest : String)\n\e[31m   |\e[0m                   \
    \                    Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortBy(x\
    \ => x.length).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp84ybp5oa.scala:17)\n\tat Problem.main(tmp84ybp5oa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None else strings.map(_.length).max.toOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfusls_ub.scala:13:69 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (strings.length == \e[31m0\e[0m)\
    \ None \e[33melse\e[0m strings.map(_.length).max.toOption\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value toOption is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.length\
    \ == 0)\n            None\n        else\n            strings.foldLeft(Option.empty[String])\
    \ { (option, current) => {\n                if(current.length() > option.get.length)\n\
    \                    option = Some(current)\n                else\n          \
    \          option\n            }}.getOrElse(None)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpty9wfgz3.scala:18:27 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    option = Some(current)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Reassignment to val option\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029247
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ {\n            None\n        } else {\n            var largest = strings.head\n\
    \n            // Search strings in reversed order\n            for (i <- strings.reverse)\
    \ {\n                if (i <= largest || largest.equals(i)) {\n              \
    \      largest = i\n                }\n            }\n            Some(largest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpueyj9qtr.scala:29)\n\tat Problem.main(tmpueyj9qtr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sizeMatchOrElse({\
    \ (n: Int, ls: List[String]) => ls match {\n                case h :: t => if\
    \ (h.length == n) Some(h) else longest(t)\n                case Nil => None\n\
    \                }\n            }, None)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppiak846x.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.sizeMatchOrElse({ (\e[36mn\e[0m: \e[35mInt\e\
    [0m, \e[36mls\e[0m: \e[35mList\e[0m[\e[35mString\e[0m]) => ls \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value sizeMatchOrElse is not a member of List[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660029252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n      strings.toList.groupBy(s\
    \ => s.length).maxBy(_._1).getOrElse(None)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjo743zgd.scala:13:56 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      strings.toList.groupBy(\e[36ms\e[0m => s.length).maxBy(_._1).getOrElse(None)\n\
    \e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value getOrElse is not a member of (Int, List[String])\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft((List.empty,\
    \ List.empty)) {\n            (accum: (List[String], List[String]), current: String)\
    \ =>\n                accum._1 diff accum._2 exists { currentString => current.length\
    \ < currentString.length }\n                    match {\n                    \
    \    case (true, left) => (current :: left, List.empty)\n                    \
    \    case (true, right) => left.tail diff right.tail exists { currentString =>\
    \ current.length < currentString.length }\n                            match {\n\
    \                                case (true, left) => (current :: left, right)\n\
    \                                case (true, right) => (left.head :: current,\
    \ right.head :: right)\n                                case (false, left) =>\
    \ left.tail\n                                case (false, right) => right.head\n\
    \                            }\n                        case (false, left) =>\
    \ (List.empty, current :: left)\n                        case (false, right) =>\
    \ (left :+ current, right)\n                    }\n        }._2.head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpueifpzl4.scala:17:54 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                        \e[33mcase\e[0m (\e[31mtrue\e\
    [0m, left) => (current :: left, List.empty)\n\e[31m\e[31m   |\e[0m           \
    \                                           ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                     value :: is not a member of Any\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpueifpzl4.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        \e[33mcase\e[0m (\e[31mtrue\e\
    [0m, right) => left.tail diff right.tail exists { currentString => current.length\
    \ < currentString.length }\n\e[31m\e[31m   |\e[0m                            \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                                \
    \              Not found: left\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpueifpzl4.scala:20:65 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                                \e[33mcase\e[0m (\e[31mtrue\e[0m, left) =>\
    \ (current :: left, right)\n\e[31m\e[31m   |\e[0m                            \
    \                                     ^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                            Not found: left\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpueifpzl4.scala:21:65 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                                \e[33mcase\e[0m (\e[31mtrue\e\
    [0m, right) => (left.head :: current, right.head :: right)\n\e[31m\e[31m   |\e\
    [0m                                                                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value :: is not a member\
    \ of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpueifpzl4.scala:21:55\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                        \
    \        \e[33mcase\e[0m (\e[31mtrue\e[0m, right) => (left.head :: current, right.head\
    \ :: right)\n\e[31m\e[31m   |\e[0m                                     "
  stdout: ''
  timestamp: 1660029253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ =>\n               \
    \ strings.sortWith(_.length < _.length) match {\n                    case x ::\
    \ y => Some(x.head)\n                    case x => None\n                }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvzhghzj0.scala:17:42\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                    \e[33mcase\e\
    [0m x :: y => Some(x.head)\n\e[31m\e[31m   |\e[0m                            \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \    Found:    Char\n\e[31m   |\e[0m                                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        var longest =\
    \ strings(0)\n        var count = 0\n        for (str <- strings) {\n        \
    \    count = str.length\n            if (count > longest.length) {\n         \
    \       longest = str\n            }\n        }\n        if (count > longest.length)\
    \ {\n            None\n        } else {\n            Some(longest)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.longest(tmprbbqqc04.scala:13)\n\tat Problem$.main(tmprbbqqc04.scala:28)\n\
    \tat Problem.main(tmprbbqqc04.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldRight[Option[String]](None)((x,\
    \ y) => {\n            if (x.length <= y.length) x else y\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ckck2jv.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (x.length <= y.length) x \e\
    [33melse\e[0m y\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value length is not a member of Option[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ckck2jv.scala:14:38 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (x.length <= y.length) x \e\
    [33melse\e[0m y\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    (x : String)\n\
    \e[31m   |\e[0m                                      Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   var result = strings(0)\n                for (i = 1 until strings.length)\
    \ if (!strings(i).equals(result)) result = strings(i)\n                Some(result)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ir4_ioh.scala:17:23 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mfor\e[0m (i = \e[31m1\e[0m until\
    \ strings.length) \e[33mif\e[0m (!strings(i).equals(result)) result = strings(i)\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp8ir4_ioh.scala:17:49 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m                \e[33mfor\e[0m (i = \e[31m1\e[0m until strings.length)\
    \ \e[33mif\e[0m (!strings(i).equals(result)) result = strings(i)\n\e[31m\e[31m\
    \   |\e[0m                                                 ^^\e[0m\n\e[31m   |\e\
    [0m                                           '<-' expected, but 'if' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ir4_ioh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            '<-' expected, but '}' found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8ir4_ioh.scala:17:100 -----------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                \e[33mfor\e[0m (i = \e[31m1\e[0m until strings.length)\
    \ \e[33mif\e[0m (!strings(i).equals(result)) result = strings(i)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                 ^\e[0m\n\e[31m   |\e[0mvalue foreach is not\
    \ a member of Null, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert"
  stdout: ''
  timestamp: 1660029255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val len = strings(0).length\n      \
    \      val res = strings.filter(_ => _.length == len)\n            if (res.length\
    \ == 1) res.head\n            else longest(res)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpp5r9xad0.scala:16:42 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mres\e[0m = strings.filter(_\
    \ => _.length == len)\n\e[31m\e[31m   |\e[0m                                 \
    \         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == len.\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp5r9xad0.scala:17:37 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mif\e[0m (res.length == \e[31m1\e[0m) res.head\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sizeOption\
    \ match {\n            case 0 => None\n            case size => strings.sortWith((s1,\
    \ s2) => s1.length < s2.length).lastOption\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw9codcg6.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.sizeOption \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sizeOption\
    \ is not a member of List[String] - did you mean strings.minOption?\n1 error found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            var bestLength = 1\n            var\
    \ maxString: String = strings.head\n            var maxStringLen: Int = maxString.length\n\
    \            strings.foreach { string =>\n                var stringLen = string.length\n\
    \                if (stringLen > maxStringLen) {\n                    maxStringLen\
    \ = stringLen\n                    maxString = string\n                }\n   \
    \         }\n            if (maxStringLen > bestLength) {\n                bestLength\
    \ = maxStringLen\n                Some(maxString)\n            } else {\n    \
    \            longest(strings.tail)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph23k0vfd.scala:35)\n\tat Problem.main(tmph23k0vfd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        } else if (strings.length == 1) {\n     \
    \       Some(strings.head)\n        } else {\n            strings.foldRight(List[String]())((xs,\
    \ ys) => {\n                if (xs.size == 0) Some(ys) else xs\n            }).maxBy(length\
    \ => length).getOrElse(None)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb16f5wtq.scala:19:38\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m\
    \ (xs.size == \e[31m0\e[0m) Some(ys) \e[33melse\e[0m xs\n\e[31m\e[31m   |\e[0m\
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                      Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mList[String\e\
    [1m\e[31m]\e[0m]\n\e[31m   |\e[0m                                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb16f5wtq.scala:19:48\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m\
    \ (xs.size == \e[31m0\e[0m) Some(ys) \e[33melse\e[0m xs\n\e[31m\e[31m   |\e[0m\
    \                                                ^^\e[0m\n\e[31m   |\e[0m    \
    \                                            Found:    (xs : String)\n\e[31m \
    \  |\e[0m                                                Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.head match{\n            case \"a\"| \"b\"| \"c\"\
    | \"d\"| \"e\"| \"f\"| \"g\"| \"h\"| \"i\"| \"j\"| \"k\"| \"l\"| \"m\"| \"n\"\
    | \"o\"| \"p\"| \"q\"| \"r\"| \"s\"| \"t\"| \"u\"| \"v\"| \"x\"| \"y\"| \"z\"\
    \ => Some(strings.head)\n            case _ => longest(strings.tail).maxBy(strings.head)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3b7_vw8j.scala:16:58\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _\
    \ => longest(strings.tail).maxBy(strings.head)\n\e[31m\e[31m   |\e[0m        \
    \                                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                 Found:    String\n\e[31m   |\e\
    [0m                                                 Required: String\e[1m\e[32m\
    \ \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0m\e[1m\e[32mAny\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp3b7_vw8j.scala:16:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _ => longest(strings.tail).maxBy(strings.head)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        } else {\n            strings.reduceLeft((a,\
    \ b) => (a.length >= b.length ? a : b)).headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyc5g8wm1.scala:16:69 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.reduceLeft((\e[36ma\e[0m, \e[36mb\e\
    [0m) => (a.length >= b.length ? a : \e[35mb\e[0m)).headOption\n\e[31m\e[31m  \
    \ |\e[0m                                                                     ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyc5g8wm1.scala:16:63\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.reduceLeft((\e\
    [36ma\e[0m, \e[36mb\e[0m) => (a.length >= b.length ? a : \e[35mb\e[0m)).headOption\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          value ? is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660029255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0)\n            None\n        else\n            strings.foldLeft(None)((max,\
    \ current) => if (current.length() > max.length) max else current)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5j_zg7s1.scala:16:80 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.foldLeft(None)((\e[36mmax\e[0m, \e\
    [36mcurrent\e[0m) => \e[33mif\e[0m (current.length() > max.length) max \e[33melse\e\
    [0m current)\n\e[31m\e[31m   |\e[0m                                          \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                   value length is not a member of object None\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5j_zg7s1.scala:16:97 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.foldLeft(None)((\e[36mmax\e[0m, \e\
    [36mcurrent\e[0m) => \e[33mif\e[0m (current.length() > max.length) max \e[33melse\e\
    [0m current)\n\e[31m\e[31m   |\e[0m                                          \
    \                                                       ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                            Found:    (current : String)\n\
    \e[31m   |\e[0m                                            Required: None.type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 1 => Some(strings(0))\n            case _ =>\n   \
    \             val longest = strings.sortBy(s => s.length).head\n             \
    \   val remainingToBeFound = strings.filterNot(longest.equals(s))\n          \
    \      longest.exists(s => longest.equals(s))\n                        .getOrElse(longest.exists(remainingToBeFound.forall(s\
    \ => longest.equals(s))))\n                        .getOrElse(strings.length ==\
    \ 1)\n                        .getOrElse(strings(0))\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1kcff273.scala:17:74 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mremainingToBeFound\e\
    [0m = strings.filterNot(longest.equals(s))\n\e[31m\e[31m   |\e[0m            \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                            Not found:\
    \ s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1kcff273.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                longest.exists(\e\
    [36ms\e[0m => longest.equals(s))\n\e[31m19 |\e[0m                        .getOrElse(longest.exists(remainingToBeFound.forall(\e\
    [36ms\e[0m => longest.equals(s))))\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\
    \e[31m   |\e[0m                value getOrElse is not a member of Boolean\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1kcff273.scala:19:75 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                        .getOrElse(longest.exists(remainingToBeFound.forall(s\
    \ => longest.equals(s))))\n\e[31m\e[31m   |\e[0m                             \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                               Found:    Boolean\n\
    \e[31m   |\e[0m                                               Required: \e[1m\e\
    [32mChar\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        val n = strings.length\n\
    \        if (n == 0) None\n        else {\n            var maxLength = 0\n   \
    \         var longestString = None\n            for (s <- strings) {\n       \
    \         val length = s.length\n                if (length >= maxLength) {\n\
    \                    if (length == maxLength) {\n                        longestString\
    \ = s\n                    }\n                    else { // A shorter string with\
    \ the same length is duplicated, therefore return the first one encountered.\n\
    \                        longestString = Some(s)\n                        break\n\
    \                    }\n                }\n                maxLength = length\n\
    \            }\n            longestString\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp07njgdam.scala:22:40\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                        longestString\
    \ = s\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    (s : String)\n\e\
    [31m   |\e[0m                                        Required: None.type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp07njgdam.scala:25:44 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                        longestString = Some(s)\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Found:    Some[String]\n\e[31m   |\e\
    [0m                                        Required: None.type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp07njgdam.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ {\n            None\n        } else {\n            // Sort the list by length\n\
    \            val sorted = strings.sortBy(_.length)\n            // return the\
    \ first string in the sorted list\n            if(sorted.length == 1) {\n    \
    \            Some(sorted.head)\n            } else { // return longest\n     \
    \           val lastIndex = sorted.length-1\n                val longest = sorted.take(lastIndex).last\n\
    \                Some(longest)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvfhw95yv.scala:30)\n\tat Problem.main(tmpvfhw95yv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) return None\n        if (strings.size <= 1) return strings.headOption\n\
    \        strings.foldLeft(List[String]())( (list, item) => list match {\n    \
    \        case head :: tail => if (head.length <= item.length) item :: head else\
    \ head :: tail\n            case _ => list :+ item\n        }).lastOption\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphvka8bt.scala:16:70 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m head :: tail => \e[33mif\e\
    [0m (head.length <= item.length) item :: head \e[33melse\e[0m head :: tail\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \   value :: is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            var maxLength = 0\n            var maxString:\
    \ String = null\n            strings.foreach(str => {\n                if (str.length\
    \ > maxLength) {\n                    maxLength = str.length\n               \
    \     maxString = str\n                }\n            })\n            if (maxLength\
    \ > 0) Some(maxString)\n            else longest(strings.tail)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7o39fy6t.scala:29)\n\tat Problem.main(tmp7o39fy6t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ None // No strings\n        else {\n            val maxLen = strings.map(_.length).max\n\
    \            val longest = strings.find(_.length == maxLen)\n            longest.map(_.toString)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbe66187o.scala:22)\n\tat Problem.main(tmpbe66187o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(\"\
    \") {\n            (x: String, y: String) => if (x.length > y.length) x else y\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiri_pstj.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(\e[31m\"\
    \"\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            (\e[36mx\e[0m: \e[35mString\e\
    [0m, \e[36my\e[0m: \e[35mString\e[0m) => \e[33mif\e[0m (x.length > y.length) x\
    \ \e[33melse\e[0m y\n\e[31m15 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.toList\
    \ match {\n            case Nil => None\n            case x :: rest => x.length.maxOption\
    \ match {\n                case Some(i) if i == x.length => Some(x)\n        \
    \        case _ => longest(rest)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn9wkg5ny.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x :: rest => x.length.maxOption\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value maxOption is not a member\
    \ of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn9wkg5ny.scala:16:32\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m Some(i) \e[33mif\e[0m i == x.length => Some(x)\n\e[31m\e[31m   |\e[0m    \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \       Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029262
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortBy(-_.length).lastOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm4n7wy7g.scala:17)\n\tat Problem.main(tmpm4n7wy7g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029265
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        var maxSize =\
    \ -1\n        var maxString = \"\"\n        var maxStringSize = 0\n        for\
    \ (str <- strings) {\n            val newSize = str.size\n            if (maxSize\
    \ == -1)\n                maxString = str\n            if (newSize > maxStringSize)\n\
    \                maxStringSize = newSize\n            if (newSize > maxSize)\n\
    \                maxSize = newSize\n        }\n        maxStringSize match {\n\
    \            case 1 => Some(maxString)\n            case _ => longest(strings.dropRight(1))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660029269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.maxBy(strings.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbviqhrbp.scala:13:30\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.maxBy(strings.length)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Int\n\e[31m   |\e[0m                      Required:\
    \ String => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbviqhrbp.scala:13:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ strings.maxBy(strings.length)\n\e[31m\e[31m   |\e[0m                       \
    \              ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case n => {\n                val res = strings.sortBy(x => x.length).take(n)\n\
    \                res.forall(_.length == n)\n                    ? Some(res.max)\n\
    \                    : longest(res)\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6wmih2wb.scala:20:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    : longest(res)\n\e[31m\e[31m   |\e\
    [0m                             ^\e[0m\n\e[31m   |\e[0m                      \
    \       end of statement expected but '(' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6wmih2wb.scala:19:20 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                res.forall(_.length == n)\n\e[31m19 |\e[0m           \
    \         ? Some(res.max)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m            value ? is not a member of Boolean.\n\e[31m   |\e[0m   \
    \         Note that `?` is treated as an infix operator in Scala 3.\n\e[31m  \
    \ |\e[0m            If you do not want that, insert a `;` or empty line in front\n\
    \e[31m   |\e[0m            or drop any spaces behind the operator.\n2 errors found\n"
  stdout: ''
  timestamp: 1660029262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.toSet.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptczprtc3.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.toSet.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        val longest =\
    \ strings.foldLeft(List[String]())(_:::_).maxBy(strings.length)\n        if (longest.length\
    \ > 0) longest else None \n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpky1vuh01.scala:13:56 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlongest\e[0m = strings.foldLeft(List[\e\
    [35mString\e[0m]())(_:::_).maxBy(strings.length)\n\e[31m\e[31m   |\e[0m      \
    \                                                  ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value ::: is not a member of String\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpky1vuh01.scala:13:76 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlongest\e[0m = strings.foldLeft(List[\e\
    [35mString\e[0m]())(_:::_).maxBy(strings.length)\n\e[31m\e[31m   |\e[0m      \
    \                                                              ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  Int\n\e[31m   |\e[0m                                                 Required:\
    \ String => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpky1vuh01.scala:13:83\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlongest\e[0m = strings.foldLeft(List[\e[35mString\e[0m]())(_:::_).maxBy(strings.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mDeprecatedFloatOrdering\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter cmp of \e[33mmethod\e\
    [0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None else strings.maxBy(s => s.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp02jebch9.scala:13:39\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (strings.isEmpty)\
    \ None \e[33melse\e[0m strings.maxBy(\e[36ms\e[0m => s.length)\n\e[31m\e[31m \
    \  |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    String\n\e\
    [31m   |\e[0m                                       Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\n\
    \            None\n        else {\n            val longest = strings.foldRight((0,\"\
    \"))((x, y) => if (x.length > y.length) x else y)\n            longest._1.length\
    \ > longest._2.length match {\n                case true => longest\n        \
    \        case false => longest._2\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe1qdgn2e.scala:16:79 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mlongest\e[0m = strings.foldRight((\e\
    [31m0\e[0m,\e[31m\"\"\e[0m))((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x.length\
    \ > y.length) x \e[33melse\e[0m y)\n\e[31m\e[31m   |\e[0m                    \
    \                                                         ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value length is not a member of (Int, String)\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe1qdgn2e.scala:16:87 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mlongest\e[0m = strings.foldRight((\e\
    [31m0\e[0m,\e[31m\"\"\e[0m))((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x.length\
    \ > y.length) x \e[33melse\e[0m y)\n\e[31m\e[31m   |\e[0m                    \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                 Found:    (\e[1m\e\
    [31mx\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m String)\n\e[31m   |\e[0m        \
    \                                         Required: (\e[1m\e[32mInt\e[0m\e[1m\e\
    [32m,\e[0m String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe1qdgn2e.scala:17:23\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            longest._1.length\
    \ > longest._2.length \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Int\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe1qdgn2e.scala:18:29 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31mtrue\e[0m => longest\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    (longest : (Int, String))\n\e[31m   |\e\
    [0m                             Required: Option[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe1qdgn2e.scala:19:38 --------------------\e\
    [0m\e[0m\n\e[31m19"
  stdout: ''
  timestamp: 1660029266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.groupBy(_.length).maxBy(_._2).headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5k6e1dzp.scala:13:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.groupBy(_.length).maxBy(_._2).headOption\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0mNo implicit Ordering defined for List[String]..\n\e[31m   |\e[0mI found:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mList[String]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[List[String]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[List[String]].\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m   |\e[0m\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0)\n            None\n        else strings.foldLeft(strings.headOption) {\n\
    \            (_, s) => if (s.toString.length == strings.length.max)\n        \
    \        s\n            else\n                None\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwi2dxsa6.scala:16:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (_, \e[36ms\e[0m) => \e[33mif\e[0m (s.toString.length\
    \ == strings.length.max)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types Int and Int => Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwi2dxsa6.scala:17:16\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                s\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Found:    (s\
    \ : String)\n\e[31m   |\e[0m                Required: Option[String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ =>\n               \
    \ val lengths : Seq[Int] = strings.map(_.length)\n                lengths match\
    \ {\n                    case 0 | 1 => strings.headOption\n                  \
    \  case 2 if lengths.last > lengths.head => strings.lastOption\n             \
    \       case _ =>\n                        val maxIndex = lengths.max\n      \
    \                  strings.find(_.length == maxIndex) match {\n              \
    \              case Some(string) => Some(string)\n                           \
    \ case _ => longest(strings.takeRight(maxIndex))\n                        }\n\
    \                }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxc2x34cz.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m\
    \ \e[36mlengths\e[0m : \e[35mSeq\e[0m[\e[35mInt\e[0m] = strings.map(_.length)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    List[Int]\n\e\
    [31m   |\e[0m                                   Required: collection.mutable.Seq[Int]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpxc2x34cz.scala:18:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    \e[33mcase\e[0m \e[31m0\e[0m | \e\
    [31m1\e[0m => strings.headOption\n\e[31m\e[31m   |\e[0m                      \
    \   ^\e[0m\n\e[31m   |\e[0mValues of types Int and collection.mutable.Seq[Int]\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpxc2x34cz.scala:18:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \             \e[33mcase\e[0m \e[31m0\e[0m | \e[31m1\e[0m => strings.headOption\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0mValues\
    \ of types Int and collection.mutable.Seq[Int] cannot be compared with == or !=\n\
    \e[31m\e[31m-- Error: /tmp/tmpxc2x34cz.scala:19:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    \e[33mcase\e[0m \e[31m2\e[0m \e[33mif\e\
    [0m lengths.last > lengths.head => strings.lastOption\n\e[31m\e[31m   |\e[0m \
    \                        ^\e[0m\n\e[31m   |\e[0mValues of types Int and collection.mutable.Seq[Int]\
    \ cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660029267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) return None\n        var longest = strings(0)\n        for (str <- strings)\
    \ {\n            if (longest.length < str.length) {\n                longest =\
    \ str\n            }\n        }\n        if (longest.length == 0) return None\n\
    \        longest\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp19gfkx4c.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        longest\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (longest : String)\n\
    \e[31m   |\e[0m        Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.sorted(lengthCompare).take(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1hmf6pg4.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.sorted(lengthCompare).take(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: lengthCompare\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ None else {\n            var maxLen = strings.head.length\n            var longest\
    \ = strings.head\n            for(s <- strings) {\n                val len = s.length\n\
    \                if(len > maxLen) {\n                    maxLen = len\n      \
    \              longest = s\n                }\n            }\n            longest\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplhpnxp95.scala:23:12\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            longest\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (longest\
    \ : String)\n\e[31m   |\e[0m            Required: Option[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft((\"\
    \", \"\"))((maxLen, str) => {\n            (str.length max maxLen) match {\n \
    \               case (len, maxLen) if len == maxLen => Some(str)\n           \
    \     case (len, maxLen) => None\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6l5bole6.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            (str.length max maxLen)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (maxLen : (String, String))\n\
    \e[31m   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6l5bole6.scala:15:59 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e[0m (len, maxLen) \e[33mif\e\
    [0m len == maxLen => Some(str)\n\e[31m\e[31m   |\e[0m                        \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                Found:    Some[String]\n\e[31m   |\e[0m     \
    \                                         Required: (String, String)\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6l5bole6.scala:16:38 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m (len, maxLen) => None\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^\e[0m\n\e[31m \
    \  |\e[0m                                      Found:    None.type\n\e[31m   |\e\
    [0m                                      Required: (String, String)\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings match\
    \ {\n            case Nil => None\n            case _ =>\n                // Find\
    \ maximum\n                var maxIndex = 0\n                var maxLength = strings(0)\n\
    \                var maxStrings = List[String]()\n                for (x <- strings)\
    \ {\n                    if (x.length > maxLength) {\n                       \
    \ maxLength = x.length\n                        maxIndex = x\n               \
    \     }\n                    if (x.length == maxLength) {\n                  \
    \      maxStrings = maxStrings :+ x\n                    }\n                }\n\
    \                // If maximum length is 1, just return the first one\n      \
    \          if (maxStrings.length == 1) {\n                    Some(maxStrings(0))\n\
    \                } else {\n                    // Else, return the longest one\n\
    \                    Some(maxStrings(maxIndex))\n                }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmps8zngzh5.scala:21:33 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mif\e[0m (x.length > maxLength)\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\
    \e[31m   |\e[0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e\
    [31m   |\e[0m  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m\
    \   |\e[0m  (x: Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m \
    \  |\e[0m match arguments ((maxLength : String))\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8zngzh5.scala:22:36 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                        maxLength = x.length\n\e[31m\e[31m   |\e[0m  \
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                        Found:    Int\n\e[31m   |\e[0m                      \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8zngzh5.scala:23:35 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                        maxIndex = x\n\e[31m\e[31m   |\e[0m          \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    (x : String)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmps8zngzh5.scala:25:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \             \e[33mif\e[0m (x.length == maxLength) {\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values\
    \ of types Int and String cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660029271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n      strings match {\n\
    \        case Nil => None\n        case _ =>\n          strings.foldRight(\"\"\
    )((acc, string) => if (string.length() > acc.length) string else acc)\n      }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_lqfginp.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m          strings.foldRight(\e\
    [31m\"\"\e[0m)((\e[36macc\e[0m, \e[36mstring\e[0m) => \e[33mif\e[0m (string.length()\
    \ > acc.length) string \e[33melse\e[0m acc)\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Found:    String\n\e[31m   |\e[0m          Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n      strings.foldRight(Option.empty[String])(longest(_.length))(_\
    \ max _)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpj81gt9rk.scala:13:54 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      strings.foldRight(Option.empty[\e[35mString\e[0m])(longest(_.length))(_\
    \ max _)\n\e[31m\e[31m   |\e[0m                                              \
    \        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => _$1.length.\n1 error found\n"
  stdout: ''
  timestamp: 1660029268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            var max = \"\"\n            var maxLength\
    \ = 0\n            var i = 0\n            while (i < strings.length && !max.isEmpty)\
    \ {\n                max = strings.tail.filterNot(x => x == max).foldLeft[String](\"\
    \"){ (result, x) => if (result.length < x.length) result else x; x }\n       \
    \         maxLength = strings.length - strings.length.filter(x => x == max).length\n\
    \                i += 1\n            }\n            if (maxLength > strings.length)\
    \ Some(max)\n            else longest(strings.init)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw99e7msm.scala:20:60 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                maxLength = strings.length - strings.length.filter(\e\
    [36mx\e[0m => x == max).length\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                         value filter is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None else\n            strings.head match {\n                case x if\
    \ strings.length == 1  => Some(x)\n                case x if strings.length ==\
    \ 2 => Some(x.substring(0,strings.length-1))\n                case x if strings.length\
    \ == 3 => Some(x.substring(0,strings.length-2))\n                case x if strings.length\
    \ == 4 => Some(x.substring(0,strings.length-3))\n                case x if strings.length\
    \ == 5 => Some(x.substring(0,strings.length-4))\n                case x if strings.length\
    \ == 6 => Some(x.substring(0,strings.length-5))\n                case x if strings.length\
    \ == 7 => Some(x.substring(0,strings.length-6))\n                case x if strings.length\
    \ == 8 => Some(x.substring(0,strings.length-7))\n                case x if strings.length\
    \ >= 9 => Some(x.substring(0,strings.length-8))\n                case x if strings.length\
    \ >= 10 => Some(x.substring(0,strings.length-9))\n                case x if strings.length\
    \ >= 11 => Some(x.substring(0,strings.length-10))\n                case x if strings.length\
    \ >= 12 => Some(x.substring(0,strings.length-11))\n                case x if strings.length\
    \ >= 13 => Some(x.substring(0,strings.length-12))\n                case x if strings.length\
    \ >= 14 => Some(x.substring(0,strings.length-13))\n                case x if strings.length\
    \ >= 15 => Some(x.substring(0,strings.length-14))\n                case x if strings.length\
    \ >= 16 => Some(x.substring(0,strings.length-15))\n                case x if strings.length\
    \ >= 17 => Some(x.substring(0,strings.length-16))\n                case x if strings.length\
    \ >= 18 => Some(x.substring(0,strings.length-17))\n                case x if strings.length\
    \ >= 19 => Some(x.substring(0,strings.length-18))\n                case x if strings.length\
    \ >= 20 => Some(x.substring(0,strings.length-19))\n                case x if strings.length\
    \ >= 21 => Some(x.substring(0,strings.length-20))\n                case x if strings.length\
    \ >= 22 => Some(x.substring(0,strings.length-21))\n                case x if strings.length\
    \ >= 23 => Some(x.substring(0,strings.length-22))\n                case x if strings.length\
    \ >= 24 => Some(x.substring(0,strings.length-23))\n                case x if strings.length\
    \ >= 25 => Some(x.substring(0,strings.length-24))\n                case x if strings.length\
    \ >= 26 => Some(x.substring(0,strings.length-25))\n                case x if strings.length\
    \ >= 27 => Some(x.substring(0,strings.length-26))\n                case x if strings.length\
    \ >= 28 => Some(x.substring(0,strings.length-27))\n                case x \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeuvnbj8a.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeuvnbj8a.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpeuvnbj8a.scala:51:1 ---------------------\e[0m\e[0m\n\
    \e[31m51 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpeuvnbj8a.scala:45:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None else Some(max(strings))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_zbl88uk.scala:13:48 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (strings.length == \e[31m0\e[0m)\
    \ None \e[33melse\e[0m Some(max(strings))\n\e[31m\e[31m   |\e[0m             \
    \                                   ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((strings : List[String]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Create empty\
    \ mutable string list to hold longest string\n        val longest = mutable.StringBuilder(\"\
    \")\n        for (s <- strings) {\n            if (s.length >= longest.length)\
    \ {\n                longest.clear()\n                longest.append(s)\n    \
    \        } else {\n                longest.append(s)\n            }\n        }\n\
    \        longest.headOption\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28d9rqtu.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlongest\e[0m = mutable.StringBuilder(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ return None\n        if (strings.size <= 1) return strings.headOption\n    \
    \    val longest = strings.length\n        val sorted = strings.toArray.sortWith((s1,\
    \ s2) => s1.length < s2.length)\n        Some(sorted(0, longest).last)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmygjwgs7.scala:17:20\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        Some(sorted(\e[31m0\e\
    [0m, longest).last)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Found:    (Int, Int)\n\e[31m   |\e[0m     \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case n => {\n                val mn = strings.map(_.length).max\n\
    \                strings.find(_.length == mn) match {\n                    case\
    \ None => None\n                    case Some(i) => Some(strings.take(1).head(i))\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx10widex.scala:20:62\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    \e[33mcase\e\
    [0m Some(i) => Some(strings.take(\e[31m1\e[0m).head(i))\n\e[31m\e[31m   |\e[0m\
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    (i : String)\n\
    \e[31m   |\e[0m                                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None else strings.sortWith(_.length < _.length).last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0bb03rag.scala:13:77\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (strings.isEmpty)\
    \ None \e[33melse\e[0m strings.sortWith(_.length < _.length).last\n\e[31m\e[31m\
    \   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    String\n\e\
    [31m   |\e[0m                                       Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        val m = strings.foldLeft(List[Int]()){\
    \ (res, x) => res :+ x.length }\n        val indexList = m.map(m => m._2).indexWhere(_\
    \ == m.max)\n        val max = m.max\n        if (indexList.size > 0) {\n    \
    \        val result = strings.lift(indexList(1))\n            Some(result)\n \
    \       }\n        else {\n            None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl7b5lstn.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mindexList\e[0m = m.map(\e\
    [36mm\e[0m => m._2).indexWhere(_ == m.max)\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \        value _2 is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpl7b5lstn.scala:16:22 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mif\e[0m (indexList.size > \e[31m0\e[0m) {\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value size is not\
    \ a member of Int\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpl7b5lstn.scala:17:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mresult\e[0m = strings.lift(indexList(\e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                \e[33mvalue\e[0m \e[35mindexList\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl7b5lstn.scala:18:17\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Some(result)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \    Found:    (result : Option[String])\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   strings.sortWith( (s1, s2) => s2.length < s1.length )\n                strings(0)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo7jes8yt.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                strings(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \              Found:    String\n\e[31m   |\e[0m                Required: \e[1m\e\
    [32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ > 0) {\n            val longest = strings.groupBy(_.length).map(_._2.max).head\n\
    \            if (longest == strings.last.length) {\n                Some(strings.last)\n\
    \            } else {\n                longest\n            }\n        } else\
    \ {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6ntyq6s_.scala:15:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (longest == strings.last.length)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m         Values of types String and Int cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ntyq6s_.scala:18:16\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                longest\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (longest : String)\n\e[31m   |\e[0m                Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sizeOption\
    \ match {\n            case None => None\n            case _ => {\n          \
    \      val max = strings.toList.sortBy(_.length).last\n                if (max.length\
    \ == strings.size) {\n                    Some(max)\n                } else {\n\
    \                    strings.toList.filter(_.length == max.length).headOption\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp055lyo6z.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.sizeOption \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sizeOption\
    \ is not a member of List[String] - did you mean strings.minOption?\n1 error found\n"
  stdout: ''
  timestamp: 1660029277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\n\
    \            None\n        else\n            strings.find(_.length == strings.map(_.length).max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0m5mjdus.scala:20)\n\tat Problem.main(tmp0m5mjdus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // The idea is\
    \ simple: find the longest string, and see whether any other string shares the\
    \ same length\n        // If they do, we just use that one\n        strings.sortBy\
    \ { _.length }.lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5fdg_sv.scala:19)\n\tat Problem.main(tmpw5fdg_sv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List.empty[String])\
    \ { case (a, b) =>\n            if (a.length < b.length) a :: b else b :: a\n\
    \        }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwecb0cjp.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (a.length < b.length) a ::\
    \ b \e[33melse\e[0m b :: a\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ :: is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029276
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // We will store\
    \ the longest string in the result list and keep a map of seen lengths (so\n \
    \       // that the longest string will be the first one in the result list).\n\
    \        val longest = scala.collection.mutable.ListBuffer[String]()\n       \
    \ val seen = scala.collection.mutable.Map[Int, String]()\n        // We first\
    \ add all the strings in the list and sort them by their length in descending\
    \ order\n        // and we only keep strings with the same length into the result\
    \ list.\n        strings.sortBy(s => -s.length)\n            .filterNot(s => seen(s.length)\
    \ == null)\n            .foreach { s =>\n                if (s.length == seen(s.length).length)\
    \ {\n                    // If the length of the string is equal to the previously\
    \ seen length, we are done\n                    // with this string. Otherwise\
    \ we keep the previous string, and add the current string\n                  \
    \  // with the new length.\n                    seen.update(s.length, s)\n   \
    \                 longest += s\n                } else {\n                   \
    \ // If the length of the string is different, we keep the current string, with\
    \ the length\n                    // equal to the previously seen length. We keep\
    \ this string if the current string is\n                    // longer than the\
    \ previous one.\n                    seen.update(s.length, s)\n              \
    \      longest += seen(s.length)\n                }\n            }\n        //\
    \ In case the length of the longest string is equal to the length of any of the\
    \ previous\n        // strings in the list, we return the last one. We return\
    \ the string with the highest length\n        // to make sure the longest string\
    \ is returned in the event of having multiple strings of the\n        // same\
    \ length.\n        if (longest.forall(s => seen(s.length) == s) && longest.size\
    \ == strings.size) {\n            Some(longest.max)\n        } else {\n      \
    \      None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.longest(tmpwx59opq3.scala:41)\n\tat Problem$.main(tmpwx59opq3.scala:47)\n\
    \tat Problem.main(tmpwx59opq3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sizeOption\
    \ match {\n            case 0 => None\n            case x if x == 1 => strings.headOption\n\
    \            case x => strings.groupBy(_.length).mapValues(_.size).maxBy(_._2)._2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwuwr7eth.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.sizeOption \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sizeOption\
    \ is not a member of List[String] - did you mean strings.minOption?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpwuwr7eth.scala:16:78 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x => strings.groupBy(_.length).mapValues(_.size).maxBy(_._2)._2\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Int\n\e[31m   |\e[0m     \
    \                 Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ {\n            None\n        } else {\n            val longest = strings.foldLeft(\"\
    \"){\n                case(maxValue, rest) => rest.length >= maxValue.length ?\
    \ (rest -> maxValue) : ((rest -> maxValue).length); \n            }._1\n     \
    \       if(longest == strings(0)) {\n                Some(strings(0))\n      \
    \      } else {\n                Some(longest)\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8xwyx0n3.scala:17:113 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m(maxValue, rest) => rest.length\
    \ >= maxValue.length ? (rest -> maxValue) : ((rest -> maxValue).length); \n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                             ')' expected, but '.' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8xwyx0n3.scala:17:101 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m(maxValue, rest) => rest.length\
    \ >= maxValue.length ? (rest -> maxValue) : ((rest -> maxValue).length); \n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                           ^^\e[0m\n\e[31m   |\e[0m         \
    \                                             Not found: type ->\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8xwyx0n3.scala:17:71 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m(maxValue, rest) => rest.length\
    \ >= maxValue.length ? (rest -> maxValue) : ((rest -> maxValue).length); \n\e\
    [31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          value ? is not a\
    \ member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660029279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft((\"\
    \", \"\")) { ((lon, cur) , (cur, s) ) =>\n            if(cur.length < s.length)\n\
    \                (cur, s)\n            else if(cur.length > s.length)\n      \
    \          (lon, s)\n            else\n                (lon, cur)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgvf2aw40.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft((\e[31m\"\"\e[0m, \e[31m\"\"\
    \e[0m)) { ((lon, cur) , (cur, s) ) =>\n\e[31m\e[31m   |\e[0m                 \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \               not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpgvf2aw40.scala:13:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ strings.foldLeft((\e[31m\"\"\e[0m, \e[31m\"\"\e[0m)) { ((lon, cur) , (cur, s)\
    \ ) =>\n\e[31m\e[31m   |\e[0m                                                \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \ not a legal formal parameter\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvf2aw40.scala:14:15\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(cur.length\
    \ < s.length)\n\e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m \
    \              Not found: cur\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgvf2aw40.scala:15:17 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m                (cur, s)\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e\
    [31m   |\e[0m                 Not found: cur\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgvf2aw40.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                (cur, s)\n\e[31m\e[31m   |\e[0m     \
    \                 ^\e[0m\n\e[31m   |\e[0m                      Not found: s\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvf2aw40.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m(cur.length > s.length)\n\e[31m\e[31m   |\e[0m              \
    \      ^^^\e[0m\n\e[31m   |\e[0m                    Not found: cur\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] N"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft((\"\
    \", List[String]())) { case ((longest, current), string) => {\n            if\
    \ (string.length() > longest.length)\n                (longest, string :: current)\n\
    \            else {\n                if (string.length() == longest.length)\n\
    \                    Some(string)\n                else\n                    (longest,\
    \ current)\n            }\n        }}._2.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfwzqxijv.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    Some(string)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  Found:    Some[String]\n\e[31m   |\e[0m                   \
    \ Required: (String, List[String])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.sortWith(_ < _).last \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ybjj30j.scala:14:37\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.sortWith(_\
    \ < _).last \n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.toList\
    \ match {\n            case Nil => None\n            case head :: tail => {\n\
    \                val longestString = head :: tail.foldLeft(head)(_.length max\
    \ _)\n                val duplicates = tail.filter(x => x.length sameElements\
    \ longestString.length)\n                val sameLength = tail.filter(x => x.length\
    \ sameElements longestString.length)\n                if (duplicates.nonEmpty)\
    \ longestString\n                else if (sameLength.nonEmpty) sameLength.head\n\
    \                else longestString\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7w67tk2u.scala:16:77\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m\
    \ \e[36mlongestString\e[0m = head :: tail.foldLeft(head)(_.length max _)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \        Found:    (_$2 : String)\n\e[31m   |\e[0m                           \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7w67tk2u.scala:17:59 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                \e[33mval\e[0m \e[36mduplicates\e[0m = tail.filter(\e[36mx\e\
    [0m => x.length sameElements longestString.length)\n\e[31m\e[31m   |\e[0m    \
    \                                              ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value sameElements is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7w67tk2u.scala:18:59\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36msameLength\e[0m = tail.filter(\e[36mx\e[0m => x.length sameElements\
    \ longestString.length)\n\e[31m\e[31m   |\e[0m                               \
    \                   ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                 value sameElements is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7w67tk2u.scala:20:57 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (sameLength.nonEmpty)\
    \ sameLength.head\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                Found:    String\n\e[31m   |\e[0m                           \
    \                   Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option[String](\"\
    \")) {\n          case (Some(longest), element) => longest.take(element.length).length\
    \ match {\n            case x if x < element.length => Some(element)\n       \
    \     case x => longest\n          }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppj7xtlne.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x\
    \ => longest\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (longest : String)\n\e[31m   |\e[0m\
    \                      Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        } else {\n            strings.maxBy(_.length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvogvyd4e.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    String\n\e[31m   |\e[0m            Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        var longest =\
    \ strings.head\n        var max_len = longest.length\n        var max_len_index\
    \ = -1\n        for {\n            s <- strings\n            i <- 0 until s.length\n\
    \            if max_len < s.length\n        } yield {\n            longest = s\n\
    \            max_len = s.length\n            max_len_index = i\n        }\n  \
    \      if (max_len == 0) return None\n        Some(longest.substring(0, max_len_index))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.longest(tmpauzhzeq8.scala:13)\n\
    \tat Problem$.main(tmpauzhzeq8.scala:29)\n\tat Problem.main(tmpauzhzeq8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0)\n            None\n        else strings.foldLeft((None,\"\")) { (res,\
    \ string) =>\n            val (longest, longestLength) = res._1\n            val\
    \ (newLon, newLonLength) = longest.length.max(string.length)\n            if (newLonLength\
    \ == string.length)\n                (res, new String + string)\n            else\
    \ if (newLonLength < string.length)\n                (res, new String + string\
    \ + strings.last)\n            else\n                (longest, new String + string)\n\
    \        }._2\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2i0rulyv.scala:17:49 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (newLon, newLonLength) = longest.length.max(string.length)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Any\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2i0rulyv.scala:17:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m (newLon, newLonLength) = longest.length.max(string.length)\n\e[31m\e[31m \
    \  |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e\
    [33mvalue\e[0m \e[35m$2$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2i0rulyv.scala:17:25 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (newLon, newLonLength) = longest.length.max(string.length)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35m$2$\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2i0rulyv.scala:19:17 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                (res, \e[33mnew\e[0m \e[35mString\e[0m\
    \ + string)\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m \
    \                Found:    (res : (None.type, String))\n\e[31m   |\e[0m      \
    \           Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2i0rulyv.scala:21:17 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                (res, \e[33mnew\e[0m \e[35mString\e[0m + string + strings.last)\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    (res : (None.type, String))\n\e[31m   |\e[0m                 Required:\
    \ None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m"
  stdout: ''
  timestamp: 1660029284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwckpf2ec.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings = strings\
    \ match {\n            case Nil => None\n            case stringList => stringList\n\
    \        }\n        strings.sortWith((s1, s2) => s1.length < s2.length)\n    \
    \    strings.get(strings.length - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjfd_5p3c.scala:14:24\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m Nil\
    \ => None\n\e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e\
    [0m                        Found:    None.type\n\e[31m   |\e[0m              \
    \          Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjfd_5p3c.scala:18:16 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        strings.get(strings.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of List[String],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ =>\n               \
    \ var longest = \"\"\n                var index = 0\n                for (i <-\
    \ 0 until strings.length) yield {\n                    if (longest.length < strings(i).length)\
    \ {\n                        longest = strings(i)\n                        index\
    \ = i\n                    }\n                }\n                longest\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrrbecvb.scala:24:16\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                longest\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (longest : String)\n\e[31m   |\e[0m                Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.size.toDouble\
    \ match {\n            case 0.0 => None\n            case size if size < strings.size.toDouble\
    \ => Some(strings.sorted.last)\n            case size if size >= strings.size.toDouble\
    \ => longest(List.fill(size)(strings.last))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv390ql0d.scala:16:76\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m size\
    \ \e[33mif\e[0m size >= strings.size.toDouble => longest(List.fill(size)(strings.last))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                 Found:    (size : Double)\n\e[31m   |\e[0m                 \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ =>\n               \
    \ val len = strings.foldLeft(0)(_ + _.length)\n                strings.map(_.length).indexOf(len)\
    \ match {\n                    case -1 => None\n                    case i =>\
    \ Some(strings(i))\n                }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1b2k6udv.scala:25)\n\tat Problem.main(tmp1b2k6udv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => strings.foldLeft(None)((max,\
    \ string) =>\n                if (string.length > max.length) Some(string) else\
    \ None\n                )\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn_5j6ht6.scala:16:40 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (string.length > max.length)\
    \ Some(string) \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m                   \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \  value length is not a member of object None\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn_5j6ht6.scala:16:52 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                \e[33mif\e[0m (string.length > max.length) Some(string)\
    \ \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m                                \
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                      Found:    Some[String]\n\e[31m   |\e[0m               \
    \                                 Required: None.type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.head\n  \
    \          case _ =>\n                val sorted = strings.sortWith(_ < _)\n \
    \               sorted.takeWhile(s => strings.count(_ == s) > 1).maxBy(strings.size)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyysnq_q4.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e\
    [31m1\e[0m => strings.head\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m  \
    \                    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyysnq_q4.scala:18:79\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                sorted.takeWhile(\e\
    [36ms\e[0m => strings.count(_ == s) > \e[31m1\e[0m).maxBy(strings.size)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \              Found:    Int\n\e[31m   |\e[0m                                \
    \                 Required: String => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpyysnq_q4.scala:18:84 -----------------------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                sorted.takeWhile(\e[36ms\e[0m => strings.count(_\
    \ == s) > \e[31m1\e[0m).maxBy(strings.size)\n\e[31m\e[31m   |\e[0m           \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mShort\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0)\n            None\n        else {\n            strings.sortWith(_ < _).lastOption\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrzhfv6u.scala:21)\n\tat Problem.main(tmpbrzhfv6u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        var longest =\
    \ \"\"\n        var longest_length = 0\n        var current_longest = \"\"\n\n\
    \        strings.foreach{\n            string => {\n                val length\
    \ = string.length\n                if (length > longest_length) {\n          \
    \          longest_length = length\n                    current_longest = string\n\
    \                }\n            }\n        }\n\n        if (longest_length ==\
    \ 0)\n            None\n        else if (longest_length == strings(0).length)\n\
    \            current_longest\n        else\n            longest(List.tail(strings).filter{s\
    \ => s.length == longest_length})\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprm9kjq5_.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            current_longest\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Found:    (current_longest : String)\n\e[31m   |\e[0m            Required:\
    \ Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprm9kjq5_.scala:32:25\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            longest(List.tail(strings).filter{\e\
    [36ms\e[0m => s.length == longest_length})\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue tail is not a member of object scala.collection.immutable.List\
    \ - did you mean List.wait?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        stringList.sortWith(_.length\
    \ compare _.length).lastOption\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9h3dloq.scala:13:8 -------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        stringList.sortWith(_.length compare _.length).lastOption\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_.length\
    \ < _.length).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsflgv0g0.scala:17)\n\tat Problem.main(tmpsflgv0g0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortBy(_.length).take(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpszax29on.scala:13:37\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.sortBy(_.length).take(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\e[31m   |\e[0m\
    \        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.lengthOption\
    \ match {\n            case None => None\n            case Some(length) => strings.find(length\
    \ <= strings.length).map(s => s.take(length)).orElse(strings.head)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbm3sjbuw.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.lengthOption \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value lengthOption\
    \ is not a member of List[String]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbm3sjbuw.scala:15:46\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e\
    [0m Some(length) => strings.find(length <= strings.length).map(s => s.take(length)).orElse(strings.head)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Not found: length\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbm3sjbuw.scala:15:88\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e\
    [0m Some(length) => strings.find(length <= strings.length).map(s => s.take(length)).orElse(strings.head)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                       Not found: length\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbm3sjbuw.scala:15:112 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m Some(length) => strings.find(length\
    \ <= strings.length).map(s => s.take(length)).orElse(strings.head)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                           Found:    String\n\e[31m   |\e[0m\
    \                                                Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_.length\
    \ < _.length) match {\n            case Nil => None\n            case x :: xs\
    \ => Some(xs.headOption)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8x_ei9jr.scala:15:36\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => Some(xs.headOption)\n\e[31m\e[31m   |\e[0m                        \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        var longest :\
    \ Option[String] = None\n        for (str <- strings) {\n            if (longest\
    \ == None) longest = str\n            else longest = str.takeWhile(_.length ==\
    \ longest.length).getOrElse(longest)\n        }\n        longest\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeiyni0_l.scala:15:43\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (longest\
    \ == None) longest = str\n\e[31m\e[31m   |\e[0m                              \
    \             ^^^\e[0m\n\e[31m   |\e[0m                                      \
    \     Found:    (str : String)\n\e[31m   |\e[0m                              \
    \             Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpeiyni0_l.scala:16:43 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33melse\e[0m longest = str.takeWhile(_.length\
    \ == longest.length).getOrElse(longest)\n\e[31m\e[31m   |\e[0m               \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                value length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660029290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldRight((None,\
    \ List[String]())){case ((max, strings), string) => if (string.length <= max._1)\
    \ (Some(string), List[String]()) else if (string.length == max._1) (Some(max),\
    \ string::strings) else (Some(max), string::string::strings)}\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchj76ud_.scala:13:94 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.foldRight((None, List[\e[35mString\e\
    [0m]())){\e[33mcase\e[0m ((max, strings), string) => \e[33mif\e[0m (string.length\
    \ <= max._1) (Some(string), List[\e[35mString\e[0m]()) \e[33melse\e[0m \e[33mif\e\
    [0m (string.length == max._1) (Some(max), string::strings) \e[33melse\e[0m (Some(max),\
    \ string::string::strings)}\n\e[31m\e[31m   |\e[0m                           \
    \                                                            ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m               value length is not a member of (None.type, List[String])\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpchj76ud_.scala:13:117 -------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.foldRight((None, List[\e[35mString\e\
    [0m]())){\e[33mcase\e[0m ((max, strings), string) => \e[33mif\e[0m (string.length\
    \ <= max._1) (Some(string), List[\e[35mString\e[0m]()) \e[33melse\e[0m \e[33mif\e\
    [0m (string.length == max._1) (Some(max), string::strings) \e[33melse\e[0m (Some(max),\
    \ string::string::strings)}\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    Some[(None.type, List[String])]\n\e[31m   |\e[0m                        \
    \       Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpchj76ud_.scala:13:159 -----------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        strings.foldRight((None, List[\e[35mString\e[0m]())){\e[33mcase\e[0m\
    \ ((max, strings), string) => \e[33mif\e[0m (string.length <= max._1) (Some(string),\
    \ List[\e[35mString\e[0m]()) \e[33melse\e[0m \e[33mif\e[0m (string.length == max._1)\
    \ (Some(max), string::strings) \e[33melse\e[0m (Some(max), string::string::strings)}\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                    ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.getOrElse(List[String]())\n\
    \            .zipWithIndex\n            .maxBy(_._2.length).getOrElse(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjkntcfri.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.getOrElse(List[\e[35mString\e[0m]())\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ getOrElse is not a member of List[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660029290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.reduce(List.empty,\
    \ (a: String, b: String) =>\n            if (a.length < b.length) a else b)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmecie73.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.reduce(List.empty,\
    \ (\e[36ma\e[0m: \e[35mString\e[0m, \e[36mb\e[0m: \e[35mString\e[0m) =>\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \ Found:    (\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m\e[1m\e[31mNothing\e[0m\e[1m\e\
    [31m]\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m(\e[0mString, String) =>\
    \ String\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                   Required: (String,\
    \ String) => String\n\e[31m14 |\e[0m            \e[33mif\e[0m (a.length < b.length)\
    \ a \e[33melse\e[0m b)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Make a list\
    \ of strings sorted by length\n        val stringLengths = strings.map(_.length).sort\n\
    \n        // Return the first element of listLengths that is equal to the greatest\
    \ length so far\n        // If no such element exists, return None\n        stringLengths.takeWhile(_.length\
    \ > stringLengths.last).headOption\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9wmm6gt8.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mstringLengths\e[0m = strings.map(_.length).sort\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Int] - did you mean List[Int].sortBy?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ {\n            None\n        } else if(strings.length == 1) {\n            Some(strings.head)\n\
    \        } else {\n            val longest = strings.foldRight(Some(strings.head)){\
    \ case (acc, elem) =>\n                if(acc.length < elem.length) {\n      \
    \              Some(elem)\n                } else if(acc.length == elem.length)\
    \ {\n                    Some(acc.getOrElse(\"\") + elem)\n                } else\
    \ {\n                    None\n                }\n            }\n            if(longest.isDefined)\
    \ {\n                longest\n            } else {\n                None\n   \
    \         }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmdwh8i8o.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m(acc.length < elem.length)\
    \ {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value length is not a member of Some[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmdwh8i8o.scala:20:25 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    Some(elem)\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (elem : Some[String])\n\e[31m   |\e[0m                         Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmdwh8i8o.scala:21:45\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                } \e[33melse\e\
    [0m \e[33mif\e[0m(acc.length == elem.length) {\n\e[31m\e[31m   |\e[0m        \
    \                                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 value length is not a member of Some[String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmdwh8i8o.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    Some(acc.getOrElse(\e[31m\"\"\e[0m)\
    \ + elem)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         value getOrElse is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmdwh8i8o.scala:24:20 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    None\n\e[31m\e[31m   |\e[0m     \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                    Found:    None.type\n\
    \e[31m   |\e[0m                    Required: Some[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings(0)\n    \
    \        case _ => {\n                var m = strings.length\n               \
    \ var x = strings(0)\n                for (i <- 1 until m) {\n               \
    \     if (strings(i).length <= x.length) x = strings(i)\n                }\n \
    \               Some(x)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjc03xuc.scala:15:29\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e\
    [31m1\e[0m => strings(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    String\n\e\
    [31m   |\e[0m                      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        }\n        else {\n            val m = strings.foldLeft(List.empty[String])((acc,\
    \ curr) =>\n            if (acc.length < curr.length) {\n                acc +\
    \ curr\n            }\n            else {\n                acc\n            }\n\
    \            )\n            if (m.length == strings.length) {\n              \
    \  Some(m(0))\n            }\n            else {\n                val longest_string\
    \ = m.max\n                Some(longest_string)\n            }\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxw9a6gl.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                acc + curr\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[String],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ < 1) None\n        else {\n            var longest : String = \"\"\n       \
    \     var longestIndex : Int = 0\n            for (i <- 0 until strings.length)\
    \ {\n                if (strings(i).length >= longest.length) {\n            \
    \        longest = strings(i)\n                    longestIndex = i\n        \
    \        }\n            }\n            longest\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfluf6vk4.scala:23:12\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            longest\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (longest\
    \ : String)\n\e[31m   |\e[0m            Required: Option[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        }\n        val longest = strings.toList.sortWith(_.length\
    \ == _.length)\n        val result = longest.lastOption\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzqvw1h6_.scala:22)\n\tat Problem.main(tmpzqvw1h6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortBy(_.length).lastOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkf2kqo0n.scala:17)\n\tat Problem.main(tmpkf2kqo0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None else strings.head.takeWhile(x => strings.map(_.length).max == x.length).headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmjlyiake.scala:13:98 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (strings.isEmpty) None \e[33melse\e\
    [0m strings.head.takeWhile(\e[36mx\e[0m => strings.map(_.length).max == x.length).headOption\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                              value length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660029296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None else\n            strings.sortBy(_.length).reverse.headOption\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv4hn_p4t.scala:18)\n\tat Problem.main(tmpv4hn_p4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortBy(_.length)\n\
    \        strings.lastOption\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9j2c4e42.scala:18)\n\tat Problem.main(tmp9j2c4e42.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ {\n            None\n        } else {\n            var maxLen : Int = Int.MaxValue\n\
    \            strings.foreach { str =>\n                val len  = str.length\n\
    \                if(len > maxLen) {\n                    maxLen = len\n      \
    \          }\n            }\n            strings.find( str => str.length == maxLen)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt34edtuu.scala:28)\n\tat Problem.main(tmpt34edtuu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\n\
    \            None\n        else if (strings.nonEmpty)\n            strings.find(_.length\
    \ == strings.head.len).map { i => strings(i).length }\n        else\n        \
    \    None\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpit69e7s9.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.find(_.length == strings.head.len).map\
    \ { \e[36mi\e[0m => strings(i).length }\n\e[31m\e[31m   |\e[0m               \
    \                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                     value len is not a member of String\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpit69e7s9.scala:16:74 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            strings.find(_.length == strings.head.len).map\
    \ { \e[36mi\e[0m => strings(i).length }\n\e[31m\e[31m   |\e[0m               \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                  Found:    (i : String)\n\e\
    [31m   |\e[0m                                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   var longest = strings(0)\n                for (i <- 1 to strings.length -1)\
    \ {\n                    if (strings(i).length <= longest.length)\n          \
    \              longest = strings(i)\n                }\n                Some(longest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1zv60ue.scala:27)\n\tat Problem.main(tmpc1zv60ue.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        var max = 0\n\
    \        var longest = List.empty[String]\n        strings.foreach{s =>\n    \
    \        if (s.length > (max = s.length) && s.nonEmpty) {\n                longest\
    \ = longest :+ s\n            }\n        }\n        longest.exists(longest.length\
    \ <= max) ? longest else None\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpadonn_kq.scala:20:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        longest.exists(longest.length <= max) ? longest\
    \ \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m                                \
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                          \
    \    end of statement expected but 'else' found\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpadonn_kq.scala:16:25 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mif\e[0m (s.length > (max = s.length) && s.nonEmpty)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\e[31m \
    \  |\e[0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e[31m  \
    \ |\e[0m  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m   |\e\
    [0m  (x: Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m\
    \ match arguments (Int)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadonn_kq.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        longest.exists(longest.length\
    \ <= max) ? longest \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Boolean\n\e[31m   |\e[0m                       Required: \e[1m\e[32mString\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case x if x > 0 => Some(strings.max)\n\
    \            case x if x < 0 => longest(strings.reverse)\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpop1l3rys.scala:21)\n\tat Problem.main(tmpop1l3rys.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\n\
    \            None\n        else\n            strings.fold(None, strings.length\
    \ => strings.takeRight(strings.length))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5ypxnpbm.scala:16:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.fold(None, strings.length => strings.takeRight(strings.length))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               not a legal formal parameter\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n      if (strings.length\
    \ < 1) None // Empty list is a valid input\n      else {\n        strings.length\
    \ match {\n          case 1 => strings.headOption // single element\n        \
    \  case _ => strings.foldLeft(ListBuffer[String]()) { (buffer, s) =>\n       \
    \     if (buffer.length < s.length) buffer += s\n            else buffer\n   \
    \       }.lastOption\n        }\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_uhavc5l.scala:26)\n\tat Problem.main(tmp_uhavc5l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val stringSet = mutable.HashSet[String]()\n\
    \                strings.foreach(s => {\n                    if (stringSet.contains(s))\
    \ {\n                        stringSet += s\n                    } else {\n  \
    \                      stringSet = stringSet :+ s\n                    }\n   \
    \             })\n                stringSet match {\n                    case\
    \ Nil => None\n                    case stringSet => Some(stringSet.max)\n   \
    \             }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuus6rphv.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mstringSet\e[0m =\
    \ mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpuus6rphv.scala:22:34\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                   \
    \     stringSet = stringSet :+ s\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Reassignment\
    \ to val stringSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.sortWith(_ > _).head\n\
    \            longest.isEmpty match {\n                case true => None\n    \
    \            case false => longest\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpga2dogpe.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e\
    [0m \e[31mfalse\e[0m => longest\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Found:    (longest\
    \ : String)\n\e[31m   |\e[0m                              Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldRight(strings.headOption):\
    \ Option[String] => strings.headOption match {\n            case None => None\n\
    \            case Some(first) => strings.head :: strings.tail.foldRight(first)\
    \ match {\n                case None => None\n                case Some(first)\
    \ => Some(first)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpahax4elh.scala:13:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.foldRight(strings.headOption): \e[35mOption\e\
    [0m[\e[35mString\e[0m] => strings.headOption \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                                                              ^\e[0m\n\
    \e[31m   |\e[0mparentheses are required around the parameter of a lambda\n\e[31m\
    \   |\e[0mThis construct can be rewritten automatically under -rewrite -source\
    \ 3.0-migration.\n\e[31m\e[31m-- Error: /tmp/tmpahax4elh.scala:13:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.foldRight(strings.headOption): \e[35mOption\e\
    [0m[\e[35mString\e[0m] => strings.headOption \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        not a legal formal parameter\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpahax4elh.scala:15:45 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            \e[33mcase\e[0m Some(first) => strings.head :: strings.tail.foldRight(first)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ :: is not a member of ((String, String) => String) => String\n3 errors found\n"
  stdout: ''
  timestamp: 1660029300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_._2.length\
    \ == _.length).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8yrs6qw3.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.sortWith(_._2.length == _.length).lastOption\n\
    \e[31m\e[31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    value _2 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortBy(length\
    \ => length).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6c6cbm9k.scala:17)\n\tat Problem.main(tmp6c6cbm9k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) {\n            None\n        }\n        else {\n            val longestStrings\
    \ : List[String] = strings.foldLeft(List[String]())((a,b) => {\n             \
    \   val length : Int = b.length\n                if (a.length < length) {\n  \
    \                  a :+ b\n                }\n                else {\n       \
    \             a\n                }\n            })\n            longestStrings.reverse.headOption\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi3ofqac7.scala:31)\n\tat Problem.main(tmpi3ofqac7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft((\"\
    \", List[String]())){case (acc, elem) => elem match {\n            case (lastElem,\
    \ lastList) => acc match {\n                case (\"aaa\" :: lastList, _) => lastElem\n\
    \                case (_ :: lastList, _) => \"bbb\" :: lastElem\n            \
    \    case (_, _) => \"ccc\" :: lastElem\n                case _ => throw new IllegalArgumentException(\"\
    Unexpected input\")\n            }\n            case _ => throw new IllegalArgumentException(\"\
    Unexpected input\")\n        }}\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmsswm6yw.scala:15:47\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m (\e[31m\"aaa\"\e[0m :: lastList, _) => lastElem\n\e[31m\e[31m   |\e[0m   \
    \                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                      Found:    (lastElem : Any)\n\e[31m   |\e\
    [0m                                        Required: (String, List[String])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmsswm6yw.scala:16:49\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m (_ :: lastList, _) => \e[31m\"bbb\"\e[0m :: lastElem\n\e[31m\e[31m   |\e[0m\
    \                                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         value :: is not a member of Any\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmsswm6yw.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m (_, _) => \e[31m\"ccc\"\
    \e[0m :: lastElem\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value :: is not a member\
    \ of Any\n3 errors found\n"
  stdout: ''
  timestamp: 1660029304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldRight(None)((s,\
    \ t) => t.length match {\n            case l if l > s.length => Some(t)\n    \
    \        case _ => Some(s)\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcu9ih1f_.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.foldRight(None)((\e[36ms\e[0m, \e[36mt\e\
    [0m) => t.length \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                   \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      value length is not a member of object None\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpcu9ih1f_.scala:14:42 --------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m            \e[33mcase\e[0m l \e[33mif\e[0m l > s.length => Some(t)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Found:    \e[1m\e[31mSome\e[0m\e\
    [1m\e[31m[\e[0mNone.type\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                   \
    \                   Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcu9ih1f_.scala:15:26 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _ => Some(s)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    Some[String]\n\e[31m   |\e[0m                      Required: None.type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.head\n  \
    \          case _ =>\n                var max_string = \"\"\n                var\
    \ max_string_len = -1\n                var found_longest_string = False\n    \
    \            strings.foreach { s =>\n                    val len = s.length\n\
    \                    if (len > max_string_len) {\n                        found_longest_string\
    \ = True\n                        max_string = s\n                        max_string_len\
    \ = len\n                    }\n                }\n                if (found_longest_string)\
    \ {\n                    Some(max_string)\n                } else {\n        \
    \            None\n                }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0l8554p5.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e\
    [31m1\e[0m => strings.head\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m  \
    \                    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l8554p5.scala:19:43\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mvar\e\
    [0m \e[36mfound_longest_string\e[0m = False\n\e[31m\e[31m   |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                          Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0l8554p5.scala:23:47 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        found_longest_string = True\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^\e[0m\n\
    \e[31m   |\e[0m                                               Not found: True\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        def longestRec(strings:\
    \ List[String], longest: String) = {\n            if(strings.length == 0) {\n\
    \                Some(longest)\n            }\n            else if(strings.length\
    \ > 0 ) {\n                val currentLongest = strings.head\n               \
    \ val otherStrings = strings.tail\n                val otherLongest = longestRec(otherStrings,\
    \ currentLongest)\n                if(otherLongest.isDefined) {\n            \
    \        if(currentLongest.length < otherLongest.get.length) { \n            \
    \            Some(currentLongest)\n                    }\n                   \
    \ else { \n                        val first = strings.head\n                \
    \        val rest = strings.tail\n                        val second = longestRec(rest,first)\n\
    \                        if(second.isDefined) { \n                           \
    \ Some(second.get) \n                        } else { \n                     \
    \       None \n                        }\n                    }\n            \
    \    }\n                else { \n                    None \n                }\n\
    \            }\n            else { \n                None \n            }\n  \
    \      }\n\n        longestRec(strings,\"\") \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmp5_ltl32m.scala:20:35 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36motherLongest\e[0m\
    \ = longestRec(otherStrings, currentLongest)\n\e[31m\e[31m   |\e[0m          \
    \                         ^\e[0m\n\e[31m   |\e[0m             Overloaded or recursive\
    \ \e[33mmethod\e[0m \e[35mlongestRec\e[0m needs return type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E044] Cyclic Error: /tmp/tmp5_ltl32m.scala:28:37 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                        \e[33mval\e[0m \e[36msecond\e\
    [0m = longestRec(rest,first)\n\e[31m\e[31m   |\e[0m                          \
    \           ^\e[0m\n\e[31m   |\e[0m             Overloaded or recursive \e[33mmethod\e\
    [0m \e[35mlongestRec\e[0m needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ > 0) {\n            val lens = strings.map( s => s.length )\n            lens.max\n\
    \        }\n        else None\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7fojd0au.scala:15:12\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            lens.max\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Int\n\
    \e[31m   |\e[0m            Required: Option[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029304
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ =>\n               \
    \ strings.head match {\n                    case null | \"\" => longest(strings.tail)\n\
    \                    case s => longest(strings.tail :+ s)\n                }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660029309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft((\"\
    \", List[String]())) { \n            case ((longest, current), s) => {\n     \
    \           if (s.length > longest.length)\n                    (longest, current)\n\
    \                else if (s.length == longest.length)\n                    (current\
    \ :+ s, longest)\n                else\n                    (\"\", List[String]())\n\
    \            }\n        }._1.headOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuwxr5s15.scala:18:21\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    (current\
    \ :+ s, longest)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                     Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuwxr5s15.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    (current\
    \ :+ s, longest)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (longest : String)\n\
    \e[31m   |\e[0m                                   Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.length\
    \ == 0) None else Some(strings.maxBy(_.length))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps6fethh6.scala:17)\n\tat Problem.main(tmps6fethh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ return None\n        val counts = strings.map(s => 1 -> s.toDouble).foldLeft(Map[String,\
    \ Double]())((m, s) => if (m.contains(s)) m else m + (s -> m.get(s) + 1.0))\n\
    \        strings.map(s => s.toDouble).maxBy(x => counts(x) + 1.0).toString ->\
    \ strings.size\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpubtb9ur1.scala:14:112\
    \ -------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounts\e\
    [0m = strings.map(\e[36ms\e[0m => \e[31m1\e[0m -> s.toDouble).foldLeft(Map[\e\
    [35mString\e[0m, \e[35mDouble\e[0m]())((\e[36mm\e[0m, \e[36ms\e[0m) => \e[33mif\e\
    [0m (m.contains(s)) m \e[33melse\e[0m m + (s -> m.get(s) + \e[31m1.0\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                           Found:    (s : (Int, Double))\n\e\
    [31m   |\e[0m                                           Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpubtb9ur1.scala:14:139 -------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = strings.map(\e\
    [36ms\e[0m => \e[31m1\e[0m -> s.toDouble).foldLeft(Map[\e[35mString\e[0m, \e[35mDouble\e\
    [0m]())((\e[36mm\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (m.contains(s)) m \e[33melse\e\
    [0m m + (s -> m.get(s) + \e[31m1.0\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                        Found:    (s : (Int, Double))\n\e[31m\
    \   |\e[0m                                           Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpubtb9ur1.scala:15:55 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        strings.map(\e[36ms\e[0m => s.toDouble).maxBy(\e\
    [36mx\e[0m => counts(x) + \e[31m1.0\e[0m).toString -> strings.size\n\e[31m\e[31m\
    \   |\e[0m                                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    (x : Double)\n\
    \e[31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available wh"
  stdout: ''
  timestamp: 1660029306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.sortBy\
    \ { s => (s.length, s) }.lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0r4o1xrx.scala:17)\n\tat Problem.main(tmp0r4o1xrx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if(strings.isEmpty)\
    \ {\n            None\n        } else {\n            val longest = strings.headOption\n\
    \            val others = strings.tail\n\n            val sameLength = others.foldLeft(longest)\
    \ {\n                case (longest, next) => (next.length < longest.length) ?\
    \ next : longest\n            }\n\n            if(others.size == 1) {\n      \
    \          Some(sameLength)\n            } else {\n                Some(longest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppe7711ut.scala:20:80 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m (longest, next) => (next.length\
    \ < longest.length) ? next : longest\n\e[31m\e[31m   |\e[0m                  \
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                 Not found: type\
    \ longest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppe7711ut.scala:20:63\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e\
    [0m (longest, next) => (next.length < longest.length) ? next : longest\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value length is not a member of\
    \ Option[String]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppe7711ut.scala:24:21\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                Some(sameLength)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Found:    (sameLength : Option[String])\n\e[31m   |\e[0m  \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppe7711ut.scala:26:21 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                Some(longest)\n\e[31m\e[31m   |\e[0m     \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:    (longest\
    \ : Option[String])\n\e[31m   |\e[0m                     Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        // Sort the strings\
    \ according to length\n        strings.sortWith(_.length < _.length)\n       \
    \     // Get the length of each string in strings\n            .toList.flatMap\
    \ { s => s.length }\n            // Get the length of the longest string in strings\n\
    \            .max\n            // Return the longest string if length of longest\
    \ string in strings is equal to length of the\n            // longest string in\
    \ strings\n            .ifPresent { lengthOfLongest =>\n                // If\
    \ length of the longest string in strings is equal to the length of the longest\
    \ string in\n                // strings, then return the longest string in strings\n\
    \                if (lengthOfLongest == strings.last.length) {\n             \
    \       strings.last\n                } else {\n                    // If length\
    \ of the longest string in strings is different from the length of the longest\n\
    \                    // string in strings, then return None\n                \
    \    None\n                }\n            }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl7e41nlm.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            .toList.flatMap {\
    \ s => s.length }\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    Int\n\e[31m \
    \  |\e[0m                                   Required: IterableOnce[Any]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpl7e41nlm.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            .max\n\e[31m\e[31m   |\e[0m             \
    \   ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e\
    [35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings ==\
    \ Nil) {\n            None\n        } else {\n            val lengths = strings.map(_.length).toArray\n\
    \            if (lengths.sorted.last == lengths.last)\n                strings.find(_.length\
    \ == lengths.last).getOrElse(Nil)\n            else\n                strings.find(_.length\
    \ == lengths.sorted.last).getOrElse(Nil)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp78ibr8v7.scala:18:64\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                strings.find(_.length\
    \ == lengths.last).getOrElse(Nil)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Object\n\e[31m   |\e[0m        \
    \        Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp78ibr8v7.scala:20:71 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                strings.find(_.length == lengths.sorted.last).getOrElse(Nil)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Object\n\e[31m   |\e[0m        \
    \        Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.headOption\n\
    \            case _ => {\n                var longest = strings(0)\n         \
    \       for ((string1, string2) <- strings.zipWithIndex) {\n                 \
    \   if (string1.length <= longest.length && string2.length <= longest.length)\
    \ {\n                        longest = string1\n                    }\n      \
    \          }\n                longest\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiiyssnuq.scala:19:68 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    \e[33mif\e[0m (string1.length <=\
    \ longest.length && string2.length <= longest.length) {\n\e[31m\e[31m   |\e[0m\
    \                                                            ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiiyssnuq.scala:23:16\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                longest\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (longest : String)\n\e[31m   |\e[0m                Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029307
