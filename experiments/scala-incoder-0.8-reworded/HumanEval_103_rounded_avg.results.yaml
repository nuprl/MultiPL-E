language: scala
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n > m) Left(s\"$n is greater than $m\")\n        else\
    \ if(n <= m) Right((n.toString + m.toString + n%m.toString.reverse).replaceAll(\"\
    (\\\\d+?)\\\\1\", \"0b$1\"))\n        else Left(-1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5pp906a8.scala:19:58 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(n <= m) Right((n.toString\
    \ + m.toString + n%m.toString.reverse).replaceAll(\e[31m\"(\\\\d+?)\\\\1\"\e[0m,\
    \ \e[31m\"0b$1\"\e[0m))\n\e[31m\e[31m   |\e[0m                               \
    \                          ^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m%\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((scala.collection.StringOps#reverse : => String))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5pp906a8.scala:20:18 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n\n        val m1 = m\n        if(n1 > m){\n   \
    \         Right(-1)\n        }else{\n            val list = List(n1 until m1)\n\
    \            val newList = list.map {x => \n                if (x < n) x - n\n\
    \                else if (x > m) m - x\n                else x \n            }\n\
    \            val sum = newList.reduce((x, y) => x + y)\n            val avg =\
    \ sum / newList.size\n            val rightBin = Integer.toBinaryString(avg)\n\
    \            val leftBin = Integer.toBinaryString(-avg)\n            val leftBin2\
    \ = leftBin.take(8 - rightBin.size)\n            val rightBin2 = rightBin.take(8\
    \ - leftBin.size)\n            Right(rightBin2 + leftBin2)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps15u26cv.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (x < n) x - n\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of scala.collection.immutable.NumericRange.Exclusive[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e\
    [0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmps15u26cv.scala:25:29 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (x < n) x - n\n\e[31m\e\
    [31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0mvalue - is not\
    \ a member of scala.collection.immutable.NumericRange.Exclusive[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmps15u26cv.scala:26:27 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (x > m)\
    \ m - x\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e\
    [0mvalue > is not a member of scala.collection.immutable.NumericRange.Exclusive[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmps15u26cv.scala:26:34 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (x"
  stdout: ''
  timestamp: 1660009571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var ans : Long = 0l\n        var sum : Long = 0l\n      \
    \  var avg : Long = 0l\n        for (i <- n until m) {\n            sum += i\n\
    \        }\n        ans = sum / m.toDouble\n        avg = ans.toBinaryString\n\
    \        Either.cond(avg < 0 || avg > 1) match {\n            case Right(r) =>\n\
    \                Right(ans)\n            case Left(e) => Left(e)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspsg_eno.scala:24:14\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        ans = sum / m.toDouble\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \          Found:    Double\n\e[31m   |\e[0m              Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspsg_eno.scala:25:18 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        avg = ans.toBinaryString\n\e[31m\e[31m   |\e\
    [0m              ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:\
    \    String\n\e[31m   |\e[0m              Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpspsg_eno.scala:26:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        Either.cond(avg < \e[31m0\e[0m || avg > \e[31m1\e\
    [0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter right of \e[33mmethod\e[0m\
    \ \e[35mcond\e[0m in \e[33mobject\e[0m \e[35mEither\e[0m: (test: Boolean, right:\
    \ => B, left: => A): Either[A, B]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspsg_eno.scala:29:33\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e\
    [0m Left(e) => Left(e)\n\e[31m\e[31m   |\e[0m                                \
    \ ^\e[0m\n\e[31m   |\e[0m                                 Not found: e\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n == 0) Left(-1)\n        else if (m == 0) Right(-1)\n\
    \        else n to m map (_ + _) reduceLeft (_ + _) / 2.0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcafsmsdq.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n == \e\
    [31m0\e[0m) Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^\e[0m\n\e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m :\
    \ Int)\n\e[31m   |\e[0m                         Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcafsmsdq.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m n to m map (_ + _) reduceLeft\
    \ (_ + _) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpcafsmsdq.scala:20:44 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m n to m map (_ + _) reduceLeft\
    \ (_ + _) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \                ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m   |\e[0m   (_$3, _$4) => _$3 + _$4.\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpcafsmsdq.scala:20:48 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33melse\e[0m n to m map (_ + _) reduceLeft (_ +\
    \ _) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$4 of expanded\
    \ function:\n\e[31m   |\e[0m   (_$3, _$4) => _$3 + _$4.\n4 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n >= m) {\n            Right(-1L)\n        }\n      \
    \  else {\n            var sum = n + m\n            var count = 0\n          \
    \  var sumAndCount = 0\n            var avg = 0.0\n            // Sum from n to\
    \ m\n            for (x<-sum to m by -1) {\n                sum += x\n       \
    \         count += 1\n                // Sum & count is equal to sum + count \n\
    \                // because both sum and count are the same in the loop\n    \
    \            sumAndCount += sum + count\n            }\n            // Average\
    \ is equal to sum / count\n            avg = sumAndCount / count\n           \
    \ // Round the average to nearest integer\n            val rAvg = math.round(avg)\n\
    \            val res = rAvg << 1\n            // Convert that to binary\n    \
    \        val binStr = res.toBinaryString\n            // If n < m, return -1\n\
    \            if (n < m) {\n                Right(binStr)\n            }\n    \
    \        // Otherwise, return binStr\n            else {\n                Left(binStr)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhcd97dz.scala:32:28 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                sumAndCount += sum + count\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplhcd97dz.scala:43:22 --------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m                Right(binStr)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:   \
    \ (binStr : String)\n\e[31m   |\e[0m                      Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n == m)\n            Right(n)\n        else if (n < m)\n\
    \            Left(s\"${n} > ${m}\")\n        else {\n            val total = (n\
    \ - m).toInt\n            val remainder = m % total\n            val count = total\
    \ - remainder\n            val bits = Integer.toString(count + (remainder * 2),\
    \ 2).padToMax(64, \"0\")\n            Right(s\"${n & m}b${bits}\")\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqwcm0e_.scala:26:40\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e\
    [36mbits\e[0m = Integer.toString(count + (remainder * \e[31m2\e[0m), \e[31m2\e\
    [0m).padToMax(\e[31m64\e[0m, \e[31m\"0\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        Found:    Long\n\e[31m   |\e[0m     \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgqwcm0e_.scala:27:18 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            Right(\e[31ms\"\e[0m${n & m}\e[31mb\e[0m${bits}\e\
    [31m\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    String\n\e[31m   |\e[0m           \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n > m) {\n            Right(-1)\n        } else if (n\
    \ == m) {\n            Right(n.toBinaryString)\n        } else {\n           \
    \ val n = n.toInt\n            val m = m.toInt\n            if (n > m) {\n   \
    \             Right(-1)\n            } else {\n                val diff = m -\
    \ n\n                val rn = n >> diff\n                val rm = m >> diff\n\
    \                if (rm == 0) {\n                    Right(rn.toBinaryString)\n\
    \                } else {\n                    Right(Long.MaxValue.toBinaryString)\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwo5joyy.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Right(n.toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    String\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprwo5joyy.scala:23:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mn\e[0m = n.toInt\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e\
    [31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprwo5joyy.scala:24:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e\
    [31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwo5joyy.scala:34:40\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m                    Right(Long.MaxValue.toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    String\n\e[31m   |\e[0m\
    \                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val l = n - m\n        if (l < 1l) Right(l)\n        else\
    \ if (l > 3l) Left(-1)\n        else Right(math.round(l).toInt + m)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfz9745ud.scala:20:30\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (l > \e[31m3l\e[0m) Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                   ^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // Write your code here\n        val n = n.toBinaryString\n\
    \        val m = m.toBinaryString\n        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) Right(-1)\n        else if (n == m) Right(n)\n        else\
    \ Left(\"Binary conversion of \" + n + \" and \" + m + \" produces different numbers\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc08muoa9.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc08muoa9.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc08muoa9.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toBinaryString\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpc08muoa9.scala:20:16 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toBinaryString\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(m1\
    \ < n1) Left(s\"$n is less than $m\")\n        else {\n            val n = (n1..m1).filter(x\
    \ => x > 0 && x < n1).sum / 2\n            val m = (m1..n1).filter(x => x > 0\
    \ && x < m1).sum / 2\n            Right(n.toString + m.toBinary)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph73yjs7z.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = (n1..m1).filter(\e\
    [36mx\e[0m => x > \e[31m0\e[0m && x < n1).sum / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        an identifier\
    \ expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph73yjs7z.scala:23:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mm\e[0m = (m1..n1).filter(\e[36mx\e[0m => x > \e[31m0\e[0m && x < m1).sum\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        an identifier expected, but '.' found\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n < m) Left(-1)\n        if(n < m) Right(-1)\n       \
    \ val avg = (n to m).sum / 2\n        val ans = math.round(avg * 2).toInt\n  \
    \      if(ans < 0 || ans >= 21) Right(ans)\n        if(ans == 0) Left(-1)\n  \
    \      Left(ans.toBinaryString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6sbfo95h.scala:27)\n\tat Problem.main(tmp6sbfo95h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n > m) return Right(-1)\n        val arr = new Array[Long](m+1)\n\
    \        arr(0) = n\n        for (i <- 1 to m) {\n            arr(i) = arr(i-1)\
    \ + i\n        }\n        // Find the average of the middle m elements and round\
    \ it to nearest integer\n        val mid = math.ceil((m/2.0).toDouble).toInt\n\
    \        val average = math.ceil((arr(mid)/m).toDouble)\n        val res = (average\
    \ * Integer.parseInt(Integer.toBinaryString(average))).asInstanceOf[Long]\n  \
    \      return Right(res)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wcxm2j4.scala:19:34\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](m+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^\e[0m\n\e[31m   |\e[0m     \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3wcxm2j4.scala:21:23 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (m : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wcxm2j4.scala:27:69 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = (average * Integer.parseInt(Integer.toBinaryString(average))).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                          Found:    (average : Double)\n\e[31m   |\e[0m     \
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n >= m, \"n is greater than m\")\n        // get\
    \ the numbers to compute them from\n        var nums = Vector.tabulate(n to m)\n\
    \        // get the sum\n        var sum = nums.sum\n        // get the count\n\
    \        var count = nums.count\n        // get the average\n        var average\
    \ = sum / count\n        // round to nearest integer\n        val rounded = math.round(average).asInstanceOf[Long]\n\
    \        // convert to binary\n        val binary = Integer.toBinaryString(rounded)\n\
    \        // return either -1 or binary string\n        val left = binary.left\n\
    \        if (rounded == 0) {\n            Left(left)\n        } else {\n     \
    \       Right(left)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ynryu7q.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mnums\e\
    [0m = Vector.tabulate(n to m)\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m       Found:    scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0m       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9ynryu7q.scala:22:23 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mvar\e[0m \e[36msum\e[0m = nums.sum\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value sum is not\
    \ a member of (Int => Any) => Vector[Any]\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9ynryu7q.scala:24:25 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mvar\e[0m \e[36mcount\e[0m = nums.count\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue count is not a member\
    \ of (Int => Any) => Vector[Any] - did you mean (Int => Any) => Vector[Any].clone?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ynryu7q.scala:32:26 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = binary.left\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \  value left is not a member of String - did you mean binary.length?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      val nMax = math.max(n.toInt, m.toInt)\n      val nMin = math.min(n.toInt,\
    \ m.toInt)\n      val remaining = n.toInt - nMin\n      val remainder = 1l.remainder(remaining)\n\
    \      val remainderString = \"0b\" + remainder.toBinaryString\n      if(remainderString.length\
    \ < m) Left(\"-1 too large\")\n      else if(remainderString.length > m) Right(-1)\n\
    \      else {\n        val intPart = remainderString.substring(0, m)\n       \
    \ val avg = (nMax - nMin).toDouble * (intPart.toLong / remainderString.length).toLong\
    \ + nMin\n        Right(avg)\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgt5gz5dn.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mremainder\e[0m = \e[31m1l\e\
    [0m.remainder(remaining)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue remainder is not a member of Long, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgt5gz5dn.scala:26:51\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mintPart\e\
    [0m = remainderString.substring(\e[31m0\e[0m, m)\n\e[31m\e[31m   |\e[0m      \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                           Found:    (m : Long)\n\e[31m   |\e\
    [0m                                                   Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgt5gz5dn.scala:28:14 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        Right(avg)\n\e[31m\e[31m   |\e[0m           \
    \   ^^^\e[0m\n\e[31m   |\e[0m              Found:    (avg : Double)\n\e[31m  \
    \ |\e[0m              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n >= m) Right(-1)\n        val n = n.toInt\n        val\
    \ m = m.toInt\n        val mid = (n + m) / 2\n        val nums = Vector.range(n,\
    \ m).map(_ - mid).filter(_ > 0)\n        val counts = Vector.range(n, m).map(_\
    \ - mid)\n        val bins = Vector.range(n.toInt, m.toInt).map(_.toBinaryString).filter(_\
    \ != '0')\n        val sum = nums.sum + counts.sum\n        var count = 0\n  \
    \      for(i <- bins){\n            if(sum % 2 == 0){\n                count +=\
    \ counts(bins.indexOf(i))\n            }\n        }\n        \n        if(count\
    \ == 0) Right(-1)\n        val avg = count / bins.length\n        val binNums\
    \ = bins.map(_ - mid)\n        val avg = binNums.sum / binNums.length\n      \
    \  val avgBinNums = binNums.map(_ - mid)\n        val finalCount = count\n   \
    \     val finalBin = bins\n        Right(s\"0b${avgBinNums(0)}${avgBinNums(1)}\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgxafaz8j.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = binNums.sum /\
    \ binNums.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpgxafaz8j.scala:19:16 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpgxafaz8j.scala:20:16 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpgxafaz8j.scala:22:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnums\e[0m = Vector.range(n, m).map(_ - mid).filter(_ >\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mByteIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Integral[A] of parameter\
    \ evidence$3 of \e[33mmethod\e[0m \e[35mrange\e[0m in \e[33mtrait\e[0m \e[35mIterableFactory\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmpgxafaz8j.scala:23:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = Vector.range(n,\
    \ m).map(_ - mid)\n\e[31m\e[31m   |\e[0m                                     \
    \  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35m"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBin = n.toBinary.dropRight(n.toBinary.length)\n    \
    \    val mBin = m.toBinary.dropRight(m.toBinary.length)\n        val result =\
    \ (nBin ++ mBin) / Double(n.toBinary.length)\n        Right(math.round(result))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxnmk_jwp.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnBin\e[0m = n.toBinary.dropRight(n.toBinary.length)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value toBinary is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpxnmk_jwp.scala:19:21 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmBin\e[0m = m.toBinary.dropRight(m.toBinary.length)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value toBinary is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum : Long = n.toLong + m.toLong\n        val average\
    \ = sum / 2\n        if (average < n.toLong || average > m.toLong) {\n       \
    \     Left(-1)\n        } else {\n            Right(math.round(sum.toBinaryString).padTo(\"\
    0\", 8, \"0\") + \"0\" + average.toBinaryString)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0521v12f.scala:21:17\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0521v12f.scala:23:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Right(math.round(sum.toBinaryString).padTo(\e\
    [31m\"0\"\e[0m, \e[31m8\e[0m, \e[31m\"0\"\e[0m) + \e[31m\"0\"\e[0m + average.toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m\
    \   |\e[0m (x: Float): Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((scala.runtime.RichLong#toBinaryString : => String))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n >= m) Left(-1)\n        else {\n            val sum\
    \ : Long = n to m by -1\n            val sumAsString = String.format(\"%b\", sum)\n\
    \            Right(Long.parseByte(sumAsString).get)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptz9ibecp.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m(n >= m)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptz9ibecp.scala:20:29 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m : \e[35mLong\e\
    [0m = n to m by -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    scala.collection.immutable.NumericRange[Long]\n\
    \e[31m   |\e[0m                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptz9ibecp.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Right(Long.parseByte(sumAsString).get)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value parseByte is not a member of object Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var nBits = n.toBinaryString\n        var mBits = m.toBinaryString\n\
    \        var nBitsLength = mBits.length\n        var mBitsLength = nBits.length\n\
    \        var nStartPos = nBitsLength - mBitsLength\n        var mStartPos = nBitsLength\
    \ + mBitsLength\n        var nLastPos : Int = nBitsLength - 1\n        var mLastPos\
    \ : Int = mBitsLength - 1\n        while (nLastPos >= 0 && mLastPos >= 0 && nBitsLength\
    \ > mBitsLength) {\n            if (nBits(nLastPos) & mBits(mLastPos) > 0)\n \
    \               nBits += \"1\"\n            else\n                mBits += \"\
    1\"\n            nLastPos -= 1\n            mLastPos -= 1\n        }\n       \
    \ if (nBitsLength >= mBitsLength)\n            return Right(mBits.substring(0,\
    \ mBitsLength) + \"0\" * (nStartPos - mStartPos))\n        else\n            return\
    \ Left(nBits.substring(0, nBitsLength) + \"0\" * (mStartPos - nStartPos))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmcfn44yd.scala:27:32 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (nBits(nLastPos) & mBits(mLastPos)\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m&\e\
    [0m in \e[33mclass\e[0m \e[35mChar\e[0m with types\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\e[31m\
    \   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Boolean)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmcfn44yd.scala:35:25\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mreturn\e[0m\
    \ Right(mBits.substring(\e[31m0\e[0m, mBitsLength) + \e[31m\"0\"\e[0m * (nStartPos\
    \ - mStartPos))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    String\n\e[31m   |\e[0m\
    \                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n < m) {\n            Left(-1)\n        }\n        else\
    \ {\n            val mInc = m + n\n            val nInc = n + m\n            val\
    \ nToM = n + m\n            val avg = (nInc + mInc) / mToM\n            val bin\
    \ = math.signum(avg).toBinaryString\n            Right(bin)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqeankhb2.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqeankhb2.scala:25:38\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mavg\e[0m = (nInc + mInc) / mToM\n\e[31m\e[31m   |\e[0m               \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \           Not found: mToM\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n >= m) Left(-1)\n        else Right(round(n / 2l) + round(m\
    \ / 2l))\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7abecbh.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m(n >= m)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n & 0x1\n        val m = m & 0x1\n        if (n >\
    \ m) {\n            Left(-1l)\n        } else if (n == m) {\n            Right(n\
    \ & 0x1)\n        } else {\n            val num = (n - m) + 1\n            val\
    \ rem = m & n\n            val quotient = num / rem\n            val remainder\
    \ = num % rem\n            Right(quotient | remainder)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp793708zr.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n & \e[31m0x1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp793708zr.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m & \e[31m0x1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp793708zr.scala:21:17 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1l\e[0m)\n\e[31m\e[31m   |\e\
    [0m                 ^^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1L\e\
    [0m : Long)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum = 0l\n        var count = 0l\n        for (x <- n\
    \ until m) {\n            sum = sum + x\n            count = count + 1\n     \
    \   }\n        if (n == m) {\n            return Right(sum.toString.length.toBinary)\n\
    \        }\n        val round = Math.ceil(sum.toDouble / (count * 8));\n     \
    \   if (round < sum) {\n            return Right(sum.toString.length.toBinary)\n\
    \        }\n        val ret = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        val remainder = sum - round\n        for (x <- 0 until count) {\n   \
    \         val s = remainder / (count - 1) - remainder / (count - 2)\n        \
    \    ret.insert(0, round)\n            ret.insert(1, s)\n            remainder\
    \ -= s\n        }\n        val retString = ret.toList.foldLeft(\"0\")((a, b) =>\
    \ a + b + \"0\")\n        return Left(retString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprld_0ozz.scala:25:45 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mreturn\e[0m Right(sum.toString.length.toBinary)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         value toBinary is not a member of Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprld_0ozz.scala:29:45 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mreturn\e[0m Right(sum.toString.length.toBinary)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         value toBinary is not a member of Int\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprld_0ozz.scala:33:26 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mfor\e[0m (x <- \e[31m0\e[0m until count)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (count : Long)\n\e[31m   |\e[0m         \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprld_0ozz.scala:35:26 --------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m            ret.insert(\e[31m0\e[0m, round)\n\e[31m\e[31m   |\e[0m   \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    (round : Double)\n\e[31m   |\e[0m                          Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprld_0ozz.scala:36:26\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            ret.insert(\e[31m1\e\
    [0m, s)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (s : Double)\n\e[31m   |\e[0m           \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprld_0ozz.scala:37:22 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m            remainder -= s\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n > m) return Left(\"Nope\")\n        val average = BigDecimal(n).divide(BigDecimal(m),\
    \ 2).toLong\n        // Add 0b prefix to convert back to binary\n        Right(average.toBinaryString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd4mcookh.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36maverage\e[0m = BigDecimal(n).divide(BigDecimal(m),\
    \ \e[31m2\e[0m).toLong\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value divide is not a member of BigDecimal\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = (0 until n).toIterator.map(n => (0 to m)).flatMap(m\
    \ => \n            (0 to m).map(n => (n to m)).toIterator.flatMap(n => \n    \
    \            List(math.abs(n div m) + math.abs(n mod m))\n            ).sum\n\
    \        )\n        val div = (0 until n).toIterator.map(n => (0 to m)).flatMap(m\
    \ => \n            (0 to m).map(n => (n to m)).toIterator.flatMap(n => \n    \
    \            List(math.abs(n div m) + math.abs(n mod m))\n            ).sum\n\
    \        ).toList\n        val mod = (0 until n).toIterator.map(n => (0 to m)).flatMap(m\
    \ => \n            (0 to m).map(n => (n to m)).toIterator.flatMap(n => \n    \
    \            List(math.abs(n div m) + math.abs(n mod m))\n            ).sum\n\
    \        ).toList\n        val avg = (0 until n).toIterator.map(n => (0 to m)).flatMap(m\
    \ => \n            (0 to m).map(n => (n to m)).toIterator.flatMap(n => \n    \
    \            List(math.abs(n div m) + math.abs(n mod m))\n            ).sum\n\
    \        ).toList\n        val left = (0 until n).toIterator.map(n => (0 to m)).flatMap(m\
    \ => \n            (0 to m).map(n => (n to m)).toIterator.flatMap(n => \n    \
    \            List(math.abs(n div m) + math.abs(n mod m))\n            ).sum\n\
    \        ).toList\n        val right = (0 until n).toIterator.map(n => (0 to m)).flatMap(m\
    \ => \n            (0 to m).map(n => (n to m)).toIterator.flatMap(n => \n    \
    \            List(math.abs(n div m) + math.abs(n mod m))\n            ).sum\n\
    \        ).toList\n        val left = sum.zip(div).zip(mod).zip(avg).zip(left).flatMap(n\
    \ => \n            n._1._1.toString + n._1._2.toString + n._2._1.toString + n._2._2.toString\
    \ + n._3.toString + n._4.toString\n        ).foldLeft(\"\")(_ + _)\n        val\
    \ right = sum.zip(div).zip(mod).zip(avg).zip(right).flatMap(n => \n          \
    \  n._1._1.toString + n._1._2.toString + n._2._1.toString + n._2._2.toString +\
    \ n._3.toString + n._4.\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpve4e732j.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but unindent found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpve4e732j.scala:48:12 ---------------------------\e[0m\e[0m\n\e\
    [31m48 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = sum.zip(div).zip(mod).zip(avg).zip(left).flatMap(\e\
    [36mn\e[0m => \n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mleft is already\
    \ defined as \e[33mvalue\e[0m \e[35mleft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m49 |\e[0m            n._1._1.toString + n._1._2.toString + n._2._1.toString\
    \ + n._2._2.toString + n._3.toString + n._4.toString\n\e[31m50 |\e[0m        ).foldLeft(\e\
    [31m\"\"\e[0m)(_ + _)\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve4e732j.scala:51:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m\
    \ \e[36mright\e[0m = sum.zip(div).zip(mod).zip(avg).zip(right).flatMap(\e[36mn\e\
    [0m => \n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mright is already\
    \ defined as \e[33mvalue\e[0m \e[35mright\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m52 |\e[0m            n._1._1.toString + n._1._2.toString\
    \ + n._2._1.toString + n._2._2.toString + n._3.toString + n._4.\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpve4e732j.scala:18:27 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = (\e[31m0\e[0m\
    \ until n).toIterator.map(\e[36mn\e[0m => (\e[31m0\e[0m to m)).flatMap(\e[36mm\e\
    [0m => \n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpve4e732j.scala:18:56 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = (\e[31m0\e[0m until n).toIte"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(m > n) Left(-1)\n        else if(n < 0) Right(-1)\n  \
    \      else Right(scala.math.round(n/2).asBinary.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp31mqtaoq.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m(m > n)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (\e[31m-1\e[0m : Int)\n\e[31m  \
    \ |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp31mqtaoq.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m Right(scala.math.round(n/\e[31m2\e\
    [0m).asBinary.toInt)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value asBinary is not a member of Long\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n.toInt > m.toInt) Left(-1)\n        if (n.toInt < m.toInt)\
    \ Left(-1)\n        val mid = (n.toInt + m.toInt) / 2\n        if (n.toInt < m.toInt)\
    \ {\n            val bin1 = n.toString.reverse.foldLeft(\"\")((x, c) => (x + (c\
    \ x)) + (if (c > 0) \"1\" : \"0\"))\n            val bin2 = m.toString.reverse.foldLeft(\"\
    \")((x, c) => (x + (c x)) + (if (c > 0) \"1\" : \"0\"))\n            Right(bin1\
    \ + bin2 + mid.toString.reverse)\n        } else {\n            val bin1 = n.toString.reverse.foldLeft(\"\
    \")((x, c) => (x + (c x)) + (if (c > 0) \"1\" : \"0\"))\n            val bin2\
    \ = m.toString.reverse.foldLeft(\"\")((x, c) => (x + (c x)) + (if (c > 0) \"1\"\
    \ : \"0\"))\n            Left(bin1 + bin2 + mid.toString.reverse)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvld0anpf.scala:22:74 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mbin1\e[0m = n.toString.reverse.foldLeft(\e\
    [31m\"\"\e[0m)((\e[36mx\e[0m, \e[36mc\e[0m) => (x + (c x)) + (\e[33mif\e[0m (c\
    \ > \e[31m0\e[0m) \e[31m\"1\"\e[0m : \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpvld0anpf.scala:23:74 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mval\e[0m \e[36mbin2\e[0m = m.toString.reverse.foldLeft(\e\
    [31m\"\"\e[0m)((\e[36mx\e[0m, \e[36mc\e[0m) => (x + (c x)) + (\e[33mif\e[0m (c\
    \ > \e[31m0\e[0m) \e[31m\"1\"\e[0m : \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpvld0anpf.scala:26:74 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            \e[33mval\e[0m \e[36mbin1\e[0m = n.toString.reverse.foldLeft(\e\
    [31m\"\"\e[0m)((\e[36mx\e[0m, \e[36mc\e[0m) => (x + (c x)) + (\e[33mif\e[0m (c\
    \ > \e[31m0\e[0m) \e[31m\"1\"\e[0m : \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpvld0anpf.scala:27:74 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mval\e[0m \e[36mbin2\e[0m = m.toString.reverse.foldLeft(\e\
    [31m\"\"\e[0m)((\e[36mx\e[0m, \e[36mc\e[0m) => (x + (c x)) + (\e[33mif\e[0m (c\
    \ > \e[31m0\e[0m) \e[31m\"1\"\e[0m : \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \   "
  stdout: ''
  timestamp: 1660009582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n >= m, \"n must be greater than m\")\n        val\
    \ r = n.toInt\n        val s = m.toInt\n        val len = r - s + 1\n        if\
    \ (len == 0) Left(\"0\")\n        else {\n            val sum : Long = 0\n   \
    \         val sums : mutable.MutableList[Long] = new mutable.MutableList[Long](len)\n\
    \            val m = 0\n            while (m <= r) {\n                val x =\
    \ r - m\n                val y = s - m\n                val z = y + x\n      \
    \          val r = z / (z + 1)\n                sums.update(0, r)\n          \
    \      val i = sums.size - 1\n                val s = sums(i) / 2\n          \
    \      sum = sum + s\n                m = m + x\n            }\n            Right(scala.math.ceil(sum.toBinaryString).toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvvn8407.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36msums\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m](len)\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfvvn8407.scala:25:55 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36msums\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m](len)\n\e\
    [31m\e[31m   |\e[0m                                                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfvvn8407.scala:35:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                sum\
    \ = sum + s\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                Reassignment to val sum\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpfvvn8407.scala:36:18 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                m = m + x\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfvvn8407.scala:38:38\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m            Right(scala.math.ceil(sum.toBinaryString).toLong)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    String\n\e[31m   |\e\
    [0m                                  Required: Double\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compilin"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var avg = 0.0;\n        var count = m.toLong;\n        if\
    \ (n.toLong > m.toLong) {\n            avg = -1.0;\n            count = m.toLong\
    \ - n.toLong;\n        }\n        else {\n            val min: Int = ((n.toLong\
    \ + m.toLong) / 2);\n            for (i: Int = n.toInt + 1; i.toInt <= min.toInt;\
    \ i += 2)\n                avg += i.toLong\n        }\n        Either.left(\"\
    invalid input\") match {\n            case Right(right) => Either.right(avg);\n\
    \            case Left(left) => Either.left(left)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0sabmxfm.scala:26:24 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e[0m (i: \e[35mInt\e[0m = n.toInt\
    \ + \e[31m1\e[0m; i.toInt <= min.toInt; i += \e[31m2\e[0m)\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0sabmxfm.scala:26:59\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e\
    [0m (i: \e[35mInt\e[0m = n.toInt + \e[31m1\e[0m; i.toInt <= min.toInt; i += \e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \       '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0sabmxfm.scala:26:67\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e\
    [0m (i: \e[35mInt\e[0m = n.toInt + \e[31m1\e[0m; i.toInt <= min.toInt; i += \e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \               '<-' expected, but ')' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0sabmxfm.scala:25:28 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mval\e[0m \e[36mmin\e[0m: \e[35mInt\e[0m = ((n.toLong\
    \ + m.toLong) / \e[31m2\e[0m);\n\e[31m\e[31m   |\e[0m                        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \   Found:    Long\n\e[31m   |\e[0m                            Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0sabmxfm.scala:26:37\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e[0m\
    \ (i: \e[35mInt\e[0m = n.toInt + \e[31m1\e[0m; i.toInt <= min.toInt; i += \e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the prob"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum : Long = (m+n)/2\n        if(sum == 0) Right(\"0b0\"\
    )\n        else if(sum == 1) Right(\"0b1\")\n        else if(sum > 1) { \n   \
    \         val bin = scala.util.BigDecimal(sum).divide(new scala.util.BigDecimal(2),\
    \ 2, RoundingMode.HALF_UP).toBinary() \n            Right(\"0b\"+bin)\n      \
    \  } else { \n            Left(s\"Average of $n to $m is invalid\")\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog07gj9r.scala:19:27\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(sum ==\
    \ \e[31m0\e[0m) Right(\e[31m\"0b0\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:  \
    \  (\e[32m\"0b0\"\e[0m : String)\n\e[31m   |\e[0m                           Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog07gj9r.scala:20:32\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m(sum == \e[31m1\e[0m) Right(\e[31m\"0b1\"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \           Found:    (\e[32m\"0b1\"\e[0m : String)\n\e[31m   |\e[0m         \
    \                       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpog07gj9r.scala:22:33 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mbin\e[0m = scala.util.BigDecimal(sum).divide(\e\
    [33mnew\e[0m scala.util.BigDecimal(\e[31m2\e[0m), \e[31m2\e[0m, RoundingMode.HALF_UP).toBinary()\
    \ \n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      value BigDecimal is not a member of util\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog07gj9r.scala:23:18 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Right(\e[31m\"0b\"\e[0m+bin)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    String\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nDigits = math.min(math.log10(n), math.log10(m))\n  \
    \      val nToTen = math.pow(n, math.ceil(nDigits / 10))\n        val mToTen =\
    \ math.pow(m, math.ceil(math.log10(m) / nDigits))\n        val average = (nToTen\
    \ + mToTen) / 2\n        val decimal = math.pow(10, nDigits)\n        if (math.round(average\
    \ * decimal) == average) {\n            Right(average * decimal)\n        } else\
    \ {\n            Left(s\"${math.round(average, decimal)}${math.pow(2, nDigits\
    \ - math.round(average * decimal))}\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57i1uztx.scala:24:18\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            Right(average * decimal)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Double\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp57i1uztx.scala:26:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            Left(\e\
    [31ms\"\e[0m${math.round(average, decimal)}${math.pow(\e[31m2\e[0m, nDigits -\
    \ math.round(average * decimal))}\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((Double,\
    \ Double))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if ( n > m ) {\n            Left(-1)\n        } else if (\
    \ n == m ) {\n            Right(m)\n        } else {\n            val avg = math.ceil((m\
    \ + n) / 2)\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6lreaq5i.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6lreaq5i.scala:24:45\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36mbin\e[0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \                           Found:    (avg : Double)\n\e[31m   |\e[0m        \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6lreaq5i.scala:25:18 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n       val sum = 0l\n       val nSum = 0l\n       val mSum = 0l\n\
    \       for (i <- n until m)\n          if(i <= m)\n             nSum += i\n \
    \         else\n             mSum += i\n       if(mSum > 0l && nSum > 0l) {\n\
    \         val avg = nSum / mSum\n         if (avg < 10l) Right(avg.toBinaryString)\
    \ else Left(s\"$avg cannot be represented in binary\")\n       }\n       else\
    \ Left(s\"${nSum / mSum} cannot be represented in binary\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptplbitu0.scala:23:18 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m             nSum += i\n\e[31m\e[31m   |\e[0m       \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not a member of Long\
    \ - did you mean nSum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptplbitu0.scala:25:18\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m             mSum += i\n\e\
    [31m\e[31m   |\e[0m             ^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ += is not a member of Long - did you mean mSum.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmptplbitu0.scala:28:34 --------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m         \e[33mif\e[0m (avg < \e[31m10l\e[0m) Right(avg.toBinaryString)\
    \ \e[33melse\e[0m Left(\e[31ms\"\e[0m$avg\e[31m cannot be represented in binary\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    String\n\e[31m   |\e\
    [0m                              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      require(n>=0 && m>0)\n      val counts = (0 until n).map(n\
    \ => m+1)\n      val total = counts\n        .foldLeft(1l)((acc, _) => acc*(_\
    \ + 1))\n        .map(x => math.ceil(x/2))\n        .toVector\n      val remainder\
    \ = total % 2\n      val leftCount = total - remainder\n      val right = total\
    \ - leftCount\n      if (leftCount>0)\n        Left(s\"0b$total\")\n      else\
    \ if (right>0)\n        Right(s\"0b$(remainder+2)\")\n      else\n        Right(s\"\
    0b0\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphy28jkcm.scala:30:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        Right(\e[31ms\"0b$(remainder+2)\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0minvalid string interpolation:\
    \ `$$`, `$\"`, `$`ident or `$`BlockExpr expected\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphy28jkcm.scala:19:28 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m      \e[33mval\e[0m \e[36mcounts\e[0m = (\e[31m0\e[0m until n).map(\e\
    [36mn\e[0m => m+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \   ^\e[0m\n\e[31m   |\e[0m                            Found:    (n : Long)\n\e\
    [31m   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmphy28jkcm.scala:21:37 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        .foldLeft(\e[31m1l\e[0m)((acc, _) => acc*(_ +\
    \ \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                  ^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch\
    \ arguments (<?> => <?>)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphy28jkcm.scala:32:14\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        Right(\e[31ms\"0b0\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    String\n\e[31m   |\e[0m              Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n > m) Left(-1)\n        else Right(n.toBinaryString()\
    \ + m.toBinaryString).replaceFirst(\"1\",\"0\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqwi7_1h.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m(n > m)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (\e[31m-1\e[0m : Int)\n\e[31m  \
    \ |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpeqwi7_1h.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m Right(n.toBinaryString() + m.toBinaryString).replaceFirst(\e\
    [31m\"1\"\e[0m,\e[31m\"0\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum : Long = n until m\n        val diff = Math.abs((sum\
    \ - n until m).sum)\n        val avg = (sum - diff) / diff.toDouble\n        val\
    \ bin = Integer.toBinaryString(avg)\n        val left = bin.substring(0, bin.size\
    \ - diff)\n        val right = bin.substring(bin.size - diff, bin.size)\n    \
    \    if (right.length == 0)\n            Right(left)\n        else if (right.length\
    \ == 1)\n            Left(right.toLong)\n        else\n            Left(left)\
    \ ||| Right(right.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphf9r5v30.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m : \e[35mLong\e[0m = n until m\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       Found:    scala.collection.immutable.NumericRange.Exclusive[Long]\n\
    \e[31m   |\e[0m       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphf9r5v30.scala:21:41 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = Integer.toBinaryString(avg)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^\e[0m\n\e[31m\
    \   |\e[0m                                         Found:    (avg : Double)\n\e\
    [31m   |\e[0m                                         Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphf9r5v30.scala:22:36 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = bin.substring(\e\
    [31m0\e[0m, bin.size - diff)\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \       Found:    Long\n\e[31m   |\e[0m                                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphf9r5v30.scala:23:34\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mright\e\
    [0m = bin.substring(bin.size - diff, bin.size)\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphf9r5v30.scala:25:18 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            Right(left)\n\e[31m\e[31m   |\e[0m                  ^^^"
  stdout: ''
  timestamp: 1660009584
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n == 0 || m == 0) Right(-1)\n        else if (n <= m)\
    \ Right(n)\n        else Left(\"-1\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptcsapdc6.scala:23)\n\tat Problem.main(tmptcsapdc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (m > n) return Left(s\"The sum cannot be greater than\
    \ the difference (${m} > ${n})\")\n        // round the average number to nearest\
    \ integer\n        val avg = scala.math.round(n/(m+1.0)*16)*16\n        // convert\
    \ binary string to decimal\n        val avg = java.lang.Long.parseLong(scala.math.binary.BigInt(avg).toString(2)).toString.toLong\n\
    \        // compare the sum and difference (return 0 if both are same)\n     \
    \   if (avg == m) Right(avg) else Left(s\"The sum cannot be greater than the difference\
    \ (${avg} > ${m})\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ma1uwwe.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = java.lang.Long.parseLong(scala.math.binary.BigInt(avg).toString(\e\
    [31m2\e[0m)).toString.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        if (sum < 0 || sum\
    \ > Integer.MAX_VALUE)\n            Left(-1)\n        else\n            Right(sum\
    \ / (n.toLong + m.toLong))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppmu_rhuc.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val m = m + n - 1\n        if (n == 0) Right(-1)\n      \
    \  else if (m == 0) Right(-1)\n        else if (m >= n) Right(-1)\n        else\
    \ Right(n.toBinary.reverse.foldLeft(0)((acc, x) => acc * 2 + (x shr 1))/m)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1ep90jaq.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m + n - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1ep90jaq.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m Right(n.toBinary.reverse.foldLeft(\e\
    [31m0\e[0m)((acc, x) => acc * \e[31m2\e[0m + (x shr \e[31m1\e[0m))/m)\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \      value toBinary is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        n to m match {\n            case (first, rest) => \n    \
    \            val avg = first + (rest - 1).toDouble / 2\n                if (rest\
    \ < m) Left(s\"${avg}l\")\n                else if (avg < n) Right(avg)\n    \
    \            else Right(-1)\n            case _ => Right(-1)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptbzkbb_2.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mavg\e[0m = first\
    \ + (rest - \e[31m1\e[0m).toDouble / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptbzkbb_2.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mavg\e[0m = first\
    \ + (rest - \e[31m1\e[0m).toDouble / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptbzkbb_2.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (rest < m) Left(\e[31ms\"\
    \e[0m${avg}\e[31ml\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        def getSum : Long = n to m map { i => (i.toLong + i.toLong)\
    \ }\n        def getCount : Int = n to m size + 1\n        def getSum2 : Long\
    \ = n to m map { i => (i.toLong / 2).toLong}\n        def getSum3 : Long = n to\
    \ m map { i => (i.toLong * 2).toLong}\n        def getSum4 : Long = n to m map\
    \ { i => i.toLong * 2L}\n        def getSum5 : Long = n to m map { i => (2 * i).toLong}\n\
    \        def getSum6 : Long = n to m map { i => (i * 2L).toLong}\n        def\
    \ getSum7 : Long = n to m map { i => ((i * 2L).toLong + i.toLong).toLong}\n  \
    \      def getSum8 : Long = n to m map { i => ((i * 2L).toLong / 2).toLong}\n\
    \        def getSum9 : Long = n to m map { i => ((i * 2L).toLong / 2).toLong}\n\
    \        def getSum10 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum11 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum12 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum13 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum14 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum15 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum16 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum17 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum18 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum19 : Long = n to m map { i => ((i * 2L).toLong * 2L).toLong}\n\
    \        def getSum20 : Long = n to m map { i => ((i * 2L).toLong\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pyt5c9m.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pyt5c9m.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp0pyt5c9m.scala:18:28 --------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mdef\e[0m \e[36mgetSum\e[0m : \e[35mLong\e[0m = n\
    \ to m map { \e[36mi\e[0m => (i.toLong + i.toLong) }\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Found:    IndexedSeq[Long]\n\e[31m  \
    \ |\e[0m                            Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmp0pyt5c9m.scala:19:36 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[36mgetCount\e[0m : \e[35mInt\e\
    [0m = n to m size + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \e[33mmethod\e[0m\
    \ \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pyt5c9m.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mdef\e[0m \e[36mgetSum2\e\
    [0m : \e[35mLong\e[0m = n to m map { \e[36mi\e[0m => (i.toLong / \e[31m2\e[0m).toLong}\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    IndexedSeq[Long]\n\e\
    [31m   |\e[0m                             Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pyt5c9m.scala:21:29 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mdef\e[0m \e[36mgetSum3\e[0m : \e[35mL"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum : Long = 0\n        var sum2 : Long = 0\n       \
    \ var cnt = 0\n        var cnt : Int = 0\n        val m = n.toInt\n        val\
    \ n = m.toInt\n        for(i <- 1 to m) {\n            sum = sum + i\n       \
    \     sum2 = sum2 + i.toBinaryString\n            cnt += 1\n        }\n      \
    \  if(sum != 0l && sum2 == sum) {\n            val left = \"\"\n            val\
    \ right = sum2.toInt\n            val right2 = right.toBinaryString\n        \
    \    val right3 = right2.substring(1, right2.length-1)\n            if(right ==\
    \ 0 && right3 == 1) {\n                Left(left)\n            } else {\n    \
    \            Right(left+right3)\n            }\n        } else {\n           \
    \ Left(\"\"+sum2)\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpml2cz0q2.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mcnt\e[0m : \e[35mInt\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcnt is already defined as \e[33mvariable\e[0m \e[35mcnt\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpml2cz0q2.scala:23:16 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = m.toInt\n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpml2cz0q2.scala:26:19 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            sum2 = sum2 + i.toBinaryString\n\e[31m\e[31m   |\e[0m    \
    \               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \   Found:    String\n\e[31m   |\e[0m                   Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpml2cz0q2.scala:34:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m(right == \e[31m0\e[0m && right3\
    \ == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpml2cz0q2.scala:37:22\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m                Right(left+right3)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    String\n\e[31m   |\e[0m                      Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = m\n        val count = m\n        var sumB : Long\
    \ = 0\n        var countB : Long = 0\n        while (n <= m) {\n            if\
    \ (countB == 0 || sumB % 2 != 0) {\n                sumB += 1\n              \
    \  countB += 1\n            } else {\n                sumB += 2\n            \
    \    countB += 1\n            }\n            sum += n\n            n += 1\n  \
    \      }\n        if (sum < sumB) {\n            val x = sum\n            val\
    \ y = sumB\n            Right(BigDecimal(x / y.toDouble).toString(2))\n      \
    \  } else {\n            val x = sumB\n            val y = sum\n            Left(BigDecimal(x\
    \ / y.toDouble).toString(2))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplvjsop1g.scala:30:16 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplvjsop1g.scala:31:14\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            n += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- Error: /tmp/tmplvjsop1g.scala:36:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m36 |\e[0m       \
    \     Right(BigDecimal(x / y.toDouble).toString(\e[31m2\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                      ^\e[0m\n\e[31m\
    \   |\e[0m  too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e\
    [33mclass\e[0m \e[35mBigDecimal\e[0m: (): String\n\e[31m\e[31m-- Error: /tmp/tmplvjsop1g.scala:40:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m40 |\e[0m       \
    \     Left(BigDecimal(x / y.toDouble).toString(\e[31m2\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                     ^\e[0m\n\e[31m  \
    \ |\e[0m  too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e\
    [0m \e[35mBigDecimal\e[0m: (): String\n4 errors found\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val ans = math.ceil((n + m) / 2)\n        val num = ans.toBinaryString\n\
    \        Right(if (num.length < 8) -1 else num)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpowltgtr1.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = ans.toBinaryString\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value toBinaryString is not a member of Double\n1 error found\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n > m) return Left(-1l).asInstanceOf[Either[String, Long]]\n\
    \        var sum = 0l\n        var count = 0l\n        for (i <- n until m) {\n\
    \            sum += i\n            count += 1\n        }\n        val avg = sum\
    \ / count\n        val str = new DecimalFormat(new DecimalFormatSymbols(Locale.US)).maximumFractionDigits(2).format(avg)\n\
    \        return Right(str.asInstanceOf[String]).asInstanceOf[Either[String, Long]]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcqvyqj0.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstr\e[0m = \e[33mnew\e[0m\
    \ \e[35mDecimalFormat\e[0m(\e[33mnew\e[0m \e[35mDecimalFormatSymbols\e[0m(Locale.US)).maximumFractionDigits(\e\
    [31m2\e[0m).format(avg)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: type DecimalFormat\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (m >= n) return Left(-1l)\n        val m = m.toInt\n \
    \       val n = n.toInt\n        if (n == m) Right(math.round(n/2.0).toBinary)\n\
    \        else Left(-1l)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9krjgh7w.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9krjgh7w.scala:18:32 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (m >= n) \e[33mreturn\e[0m Left(-\e\
    [31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^\e[0m\n\e\
    [31m   |\e[0m                                Found:    (\e[31m-1L\e[0m : Long)\n\
    \e[31m   |\e[0m                                Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9krjgh7w.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9krjgh7w.scala:22:18 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33melse\e[0m Left(-\e[31m1l\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (\e[31m-1L\e[0m : Long)\n\e[31m   |\e[0m                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n < m) Left(-1)\n        else {\n            var avg\
    \ : Long = 0l\n            var i : Long = 0l\n            var j : Long = 0l\n\
    \            while (i < m && j < n) {\n                avg = avg + i\n       \
    \         i = i + 1\n                j = j + 1\n            }\n            avg\
    \ = avg / n\n            val bits = Integer.toBinaryString(avg)\n            if\
    \ (bits.size == 1) Left(\"0b\" + bits.toUpperCase)\n            else Right(\"\
    0b\" + bits.toUpperCase)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvr7g8z3t.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n < m)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvr7g8z3t.scala:29:46 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mbits\e[0m = Integer.toBinaryString(avg)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (avg : Long)\n\
    \e[31m   |\e[0m                                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvr7g8z3t.scala:31:23\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33melse\e[0m Right(\e\
    [31m\"0b\"\e[0m + bits.toUpperCase)\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    String\n\e[31m   |\e[0m                       Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n < m) Left(s\"$n is less than $m\")\n        n + (m\
    \ - (n + m)) * ((0.5).toLong).toBinary\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbcmw6xe9.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        n + (m - (n + m)) * ((\e[31m0.5\e[0m).toLong).toBinary\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value toBinary is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val bin = new StringBuilder()\n        var sum = 0\n    \
    \    var sumOfDigits = 0\n        var nextSum = 0\n        var nextSumOfDigits\
    \ = 0\n        var first = 0\n        var second = 0\n        var firstOfDigits\
    \ = 0\n        var secondOfDigits = 0\n        var firstSum = 0\n        var secondSum\
    \ = 0\n        var tempSum = 0\n        var tempSumOfDigits = 0\n        for(i\
    \ <- n to m) {\n            if(i / 10 == 0)\n                sum += i\n      \
    \      else\n                sumOfDigits += i.toInt\n        }\n        firstOfDigits\
    \ = sumOfDigits % 10\n        secondOfDigits = sum / 10\n        tempSumOfDigits\
    \ = sumOfDigits % 10\n        tempSum = sum / 10\n        for(i <- n to m) {\n\
    \            if(i / 10 == 0) {\n                firstSum += i\n              \
    \  firstOfDigits += i.toInt\n                firstSumOfDigits = firstOfDigits\
    \ % 10\n                secondSum = firstSum / 10\n                secondOfDigits\
    \ = secondSum % 10\n                for(j <- i to m) {\n                    nextSum\
    \ += j\n                    nextSumOfDigits += j.toInt\n                }\n  \
    \              if(nextSumOfDigits % 2 == 1) {\n                    bin.append(\"\
    0b\").append(bin.deleteCharAt(bin.length-1).toString).append(bin.deleteCharAt(bin.length-1).toString).toString\n\
    \                }\n                else {\n                    bin.append(\"\
    0b\").append(bin.deleteCharAt(bin.length-1).toString).append(bin.deleteCharAt(bin.length-1).toString).toString\n\
    \                }\n            }\n            else {\n                secondSum\
    \ += i\n                secondOfDigits += i.toInt\n                secondSumOfDigits\
    \ = secondOfDigits % 10\n                for(j <- i to m) {\n                \
    \    nextSum += j\n                    nextSumOfDigits += j.toInt\n          \
    \      }\n                if(nextSumOfDigits % 2 == 1) {\n                   \
    \ bin.append(\"0b\").append(bin.deleteCharAt(bin.length-1).toString).append(bin.deleteCharAt(bin.length-1).toString).toString\n\
    \                }\n                else {\n                    bin.append(\"\
    0b\").append(bin.deleteCharAt(bin.length-1).toString).append(bin.deleteCharAt(bin.length-1).toString).toString\n\
    \                }\n            }\n        }\n        if(tempSumOfDigits % 2 ==\
    \ 1) {\n            bin.append(\"0b\").append(bin.deleteCharAt(bin.length-1).toString).append(bin.deleteCharAt(bin.length-1).toString).toString\n\
    \        }\n        else {\n            bin.append(\"0b\").append(bin.deleteCharAt(bin.length-1).toString).append(bin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzwdatpfb.scala:80:4 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzwdatpfb.scala:97:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m97 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzwdatpfb.scala:33:20 ------------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzwdatpfb.scala:43:25\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                firstSum\
    \ += i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzwdatpfb.scala:45:16 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                firstSumOfDigits = firstOfDigits % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: firstSumOfDigits\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzwdatpfb.scala:49:28 ------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                    nextSum += j\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzwdatpfb.scala:60:26 ------------------------\e[0m\e[0m\n\
    \e[31m60 |\e[0m                secondSum += i\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzwdatpfb.scala:62:16\
    \ ------------------------\e[0m\e[0m\n\e[31m62 |\e[0m                secondSumOfDigits\
    \ = secondOfDigits % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n < m) Right(-1)\n        val mid = (n + m) / 2\n   \
    \     if (mid < n) Right(-1)\n        val result = binary(n, mid)\n        if\
    \ (n < m) Right(result)\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9yevzg5u.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = binary(n,\
    \ mid)\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: binary\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      val (n, m) = (n, m) match {\n        case (a, b) if a < b =>\
    \ (b, a)\n        case (a, b) => (a, b)\n      }\n      val avg = (n to m).foldLeft(0.0d)\
    \ { case (acc, next) => acc + next } / 2\n      val digits = math.ceil(math.log10(avg))\
    \ + 1\n      Right(s\"0${round(avg)}\".reverse.dropRight(digits))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphibewdsy.scala:18:11 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m (n, m) = (n, m) \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmphibewdsy.scala:18:14 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m (n, m) = (n, m) \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphibewdsy.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mcase\e[0m (a, b) \e[33mif\e[0m a < b =>\
    \ (b, a)\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.RoundingMode.ValueOrdering.mkOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphibewdsy.scala:24:48 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m      Right(\e[31ms\"0\e[0m${round(avg)}\e[31m\"\e[0m.reverse.dropRight(digits))\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (digits\
    \ : Double)\n\e[31m   |\e[0m                                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available "
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var count = 1\n        var sum = 0\n        for(i <- n until\
    \ m){\n            if(i < n) sum += i\n            if(i < m) count += 1\n    \
    \    }\n        if(count == 0) return Left(s\"${n} to ${m} doesn't contain any\
    \ numbers\")\n        val avg = sum / count\n        val result = math.round(avg).toBinaryString\n\
    \        if(result.length > 0) Right(result)\n        else Left(s\"${n} to ${m}\
    \ doesn't contain any numbers\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppwdfwrlw.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(i < n) sum += i\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppwdfwrlw.scala:27:36 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(result.length > \e[31m0\e[0m) Right(result)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                    Found:    (result : String)\n\e[31m\
    \   |\e[0m                                    Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n.toLong < m.toLong) {\n            Left(\"invalid input\"\
    )\n        } else {\n            val m1 = n + m\n            var n = n\n     \
    \       while (n <= m1)\n                n += n \n            Right(n.toBinary)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr5yshq0f.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mvar\e[0m \e[36mn\e[0m = n\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n <= m)\n        if (m == 0L) Right(-1)\n       \
    \ else {\n            val sum = n.toLong + (m - 1L).toLong\n            val remainder\
    \ = sum.toLong % 2\n            val remainderString = if (remainder == 0L) \"\
    0b0\" else toBinaryString(remainder)\n            val totalString = toBinaryString(sum)\n\
    \            Right(totalString + remainderString)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2hlp8sr.scala:23:66 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mremainderString\e[0m\
    \ = \e[33mif\e[0m (remainder == \e[31m0L\e[0m) \e[31m\"0b0\"\e[0m \e[33melse\e\
    [0m toBinaryString(remainder)\n\e[31m\e[31m   |\e[0m                         \
    \                                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                               Not found: toBinaryString\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2hlp8sr.scala:24:30\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mtotalString\e[0m = toBinaryString(sum)\n\e[31m\e[31m   |\e[0m        \
    \                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \            Not found: toBinaryString\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum = n.toLong + m.toLong\n        var n = n.toLong\n\
    \        var m = m.toLong\n        val diff = sum - m\n        val a = n / diff\n\
    \        val b = m / diff\n        val ans = a + b\n        val r = scala.math.ceil(ans.toDouble).toBinaryString\n\
    \        Right(r)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkm0wngyb.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpkm0wngyb.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkm0wngyb.scala:25:46 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = scala.math.ceil(ans.toDouble).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value toBinaryString is not a member of Double\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // Compute the average of the integers from n through m (including\
    \ n and m).\n        // The average is rounded towards zero to the nearest integer.\n\
    \        // Divide by (n + m) so that the average is never negative.\n       \
    \ val avg = scala.math.round((n + m)/2.0)\n        // Convert the average to binary.\
    \ \n        // If it is less than 2, just return a string containing the average\
    \ in binary.\n        // If it is greater than 2, return -1 as the final answer.\n\
    \        // If it is exactly 2, return a string containing two 1s.\n        if\
    \ (avg < 2L) {\n            return Left(s\"0b${avg}\")\n        } else if (avg\
    \ > 2L) {\n            return Right(-1)\n        } else {\n            return\
    \ Left(s\"0b${avg}\")\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq3dct18e.scala:35)\n\tat Problem.main(tmpq3dct18e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      var a : Long = 0\n      var c : Long = 0\n      var b : Long\
    \ = 0\n      var e : Long = 0\n      for(i <- n until m) {\n        a = i\n  \
    \      c = math.max(a,b)\n        b = c\n        e = a + b\n      }\n      if(n.toInt\
    \ == c.toInt)\n        Right(c.toHexString)\n      else\n        Left(s\"${c.toInt}\
    \ = $e\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp26rli3yg.scala:29:16\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        Right(c.toHexString)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \       Found:    String\n\e[31m   |\e[0m              Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n > m) Left(-1)\n        else if (n == m) Right(n)\n\
    \        else {\n            val list = List(n, m)\n            val a = list.toSet\n\
    \            val sum = list.sum\n            val count = (list.size - 1) * list.size\n\
    \            val average = sum / count\n\n            Right(average.toBinaryString).left.map(average.toBinaryString(_))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6_vdioim.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n > m)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6_vdioim.scala:27:50 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            Right(average.toBinaryString).left.map(average.toBinaryString(_))\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Either[Char, String]\n\e[31m   |\e[0m\
    \            Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n < m) Right(-1)\n        else if((n.toLong <= m.toLong)\
    \ && (n.toLong > 0)) Right(n.toLong + m.toLong / 2)\n        else Left(-1)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2x2d6cj0.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m Left(-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m \
    \                 Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m           \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n > m) Left(-1)\n        else Right(math.ceil((n - m)\
    \ / math.pow(10.0, 1.0)))\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5fq0_8zc.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n > m)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5fq0_8zc.scala:19:28 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m Right(math.ceil((n - m) / math.pow(\e\
    [31m10.0\e[0m, \e[31m1.0\e[0m)))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Double\n\e[31m   |\e[0m     \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val m1 = m + n\n        if(m1 <= 0) {\n            Left(\"\
    Invalid input\")\n        } else {\n            val n1 = n - m\n            val\
    \ binary = math.round(n1 * 2l).toString(2)\n            Right(binary + m1.toString(2))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprhw5ujg3.scala:23:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = math.round(n1\
    \ * \e[31m2l\e[0m).toString(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                                         ^\e[0m\n\e[31m   |\e[0m         too\
    \ many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m\
    \ \e[35mAny\e[0m: (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n >= 0 && m >= 0)\n        if (n > m) {\n       \
    \     return Left(-1)\n        }\n        val result = n + m + 1\n        val\
    \ bits = toBinary(result.toInt)\n        Right(bits.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp70zfmww7.scala:20:24\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mreturn\e[0m\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp70zfmww7.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbits\e[0m = toBinary(result.toInt)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \            Not found: toBinary\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val result = n.toInt + (m toInt)\n        result > m ? Right(result)\
    \ : Left(s\"Error: ${result} is greater than ${m}\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqm7e5vm6.scala:18:39 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = n.toInt +\
    \ (m toInt)\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpqm7e5vm6.scala:19:41\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ result > m ? Right(result) : \e[35mLeft\e[0m(\e[31ms\"Error: \e[0m${result}\e\
    [31m is greater than \e[0m${m}\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \           end of statement expected but '(' found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n < m){\n            Left(\"invalid input\")\n      \
    \  }\n        val left = n.toLong\n        val right = m.toLong\n        if (left\
    \ < right){\n            val l = n.toLong\n            val r = m.toLong\n    \
    \        if (left >= r){\n                Right((left.toInt + right).toLong)\n\
    \            }\n            else{\n                Right(-1)\n            }\n\
    \        }\n        else{\n            Right(-1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpds3ufsk5.scala:38)\n\tat Problem.main(tmpds3ufsk5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      if(n > m) Left(-1)\n      else if (n < m) Right(-1)\n     \
    \ else n to m map {\n        case n if (n < 0) => (n << 1) + 1\n        case n\
    \ => (n << 1) + 0\n      }.sum / 2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbrdx_1pv.scala:18:21\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mif\e[0m(n > m) Left(-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m       \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpbrdx_1pv.scala:21:8 ------------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mcase\e[0m n \e[33mif\e[0m (n < \e[31m0\e[0m) => (n << \e\
    [31m1\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter x$1 of expanded function:\n\e[31m   |\e[0m   x$1 =>\
    \ \n\e[31m   |\e[0m     x$1\e[33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m\
    \   |\e[0m         \e[33mcase \e[0mn\e[33m if \e[0m(n < 0) => \n\e[31m   |\e[0m\
    \           (n << 1) + 1\n\e[31m   |\e[0m         \e[33mcase \e[0mn => \n\e[31m\
    \   |\e[0m           (n << 1) + 0\n\e[31m   |\e[0m       }.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      if (n < 0 || m < 0) {\n        return Right(-1l)\n      }\n\
    \      if (n == m && n == 0) {\n        return Right(1l)\n      }\n      var sum\
    \ : Long = 0\n      var n : Long = math.min(m, n)\n      var i : Long = 0\n  \
    \    while (i < n) {\n        sum += i\n        i += 1\n      }\n      sum.toRight(\"\
    Can't compute\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvy11naez.scala:31:10 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m      sum.toRight(\e[31m\"Can't compute\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value toRight is not\
    \ a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum : Long = 0\n        val count = m + 1 - n\n     \
    \   if (count <= 0) {\n            Left(s\"$count <= 0\")\n        } else {\n\
    \            sum = (sum + n + m) / count\n            Right(Long.bitCount(sum).toHexString)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5rli8zr8.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Right(Long.bitCount(sum).toHexString)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             value bitCount is not a member of object Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val min = (n) min m\n        val max = (m) max n\n      \
    \  val result = (min to max).filter(_ % 2 == 0).sum / 2\n        val hexString\
    \ = result.toString.reverse leftPad(result, 6)\n        Right(hexString)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpngamxqq1.scala:21:48 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexString\e[0m = result.toString.reverse\
    \ leftPad(result, \e[31m6\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \  value leftPad is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val num = 0\n        var sum : Long = 0\n        if (n ==\
    \ 0)\n            Left(-1)\n        else if (m == 0)\n            Right(-1)\n\
    \        else { \n            for (i = n to m; i > 0; i = i / 2)\n           \
    \     sum = sum + i\n            sum = sum / 2\n            val string = sum.toString\
    \ \n            Right(string.dropRight(string.size).reverse)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplby0jn42.scala:25:19 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m (i = n to m; i > \e[31m0\e\
    [0m; i = i / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   ')' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmplby0jn42.scala:25:34 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m (i = n to m; i > \e[31m0\e[0m;\
    \ i = i / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                               \
    \   ^\e[0m\n\e[31m   |\e[0m                                  '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E020] Syntax Error: /tmp/tmplby0jn42.scala:25:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e\
    [0m (i = n to m; i > \e[31m0\e[0m; i = i / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                     \e[33myield\e[0m or \e[33mdo\e[0m expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplby0jn42.scala:21:17\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplby0jn42.scala:25:27\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m\
    \ (i = n to m; i > \e[31m0\e[0m; i = i / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                           ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member\
    \ of Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  impo"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var n = n.toInt\n        var m = m.toInt\n        var sum\
    \ = m + ((n + m) / 2)\n        if (n > m) {\n            sum = sum.asInstanceOf[Long]\n\
    \            n = sum - sum * 2\n        }\n        if (sum < 0l){\n          \
    \  return Left(\"\")\n        }\n        else {\n            val string = (sum\
    \ & 0xffffffff00000000).asInstanceOf[String]\n            val s = string.substring(0,\
    \ string.length-1)\n            val m = string.toLong\n            if (m == 0l){\n\
    \                Right(Right(s))\n            }\n            else {\n        \
    \        val b = (s + \"1\").asInstanceOf[Byte]\n                Right(Right(String.valueOf(b)))\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg14r_hyl.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpg14r_hyl.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg14r_hyl.scala:33:27 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                Right(Right(s))\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    Right[Nothing, Nothing]\n\e[31m   |\e[0m                      Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg14r_hyl.scala:37:27\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m                Right(Right(String.valueOf(b)))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    Right[Nothing, Nothing]\n\e[31m   |\e\
    [0m                      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val average = n + (m - 1) / 2\n        val remainder = average\
    \ % 2\n        if(remainder == 0){\n            Right(average.toBinaryString().toLong)\n\
    \        } else {\n            Left(\"-1\")\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnpkwrigc.scala:21:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Right(average.toBinaryString().toLong)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n1 error found\n"
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        n match {\n            when {\n                when {m >\
    \ n => Left(s\"$m is greater than $n\")}\n                m == n => Right(n)\n\
    \                else => Right(m)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpepgx2yje.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            when {\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            'case' expected, but identifier found\n\
    \e[31m\e[31m-- Error: /tmp/tmpepgx2yje.scala:23:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0m          Values of types Null and Long cannot be compared\
    \ with == or !=\n\e[31m24 |\e[0m        }\n2 errors found\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val average = Math.round(sum\
    \ / 2).toInt * 2\n        val result = average match {\n            case n if\
    \ n < m => Left(s\"$average is too large\")\n            case n if n == m => Right(average)\n\
    \            case n => Left(s\"$average is not a whole number\")\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpec6qupj0.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mInt\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (m > n) return Right(-1)\n        val bin = BigInt(n)\n\
    \        val binM1 = BigInt(m)\n        var sum : Long = 0\n        for (i <-\
    \ bin.upTo[binM1]) {\n            sum += i\n        }\n        val avg = math.round(sum\
    \ * 1.0f / binM1.toDouble)\n        val result = (sum / (binM1.toDouble - 1))\
    \ & \"0\" \n        val binRes = BigInt(result)\n        if (binRes > binM1) Right(-1)\n\
    \        else Right(result)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn48mvwn1.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- bin.upTo[\e[35mbinM1\e[0m])\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: type binM1\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn48mvwn1.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- bin.upTo[\e[35mbinM1\e[0m])\
    \ {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               value upTo is not a member of BigInt\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpn48mvwn1.scala:26:50 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = (sum / (binM1.toDouble\
    \ - \e[31m1\e[0m)) & \e[31m\"0\"\e[0m \n\e[31m\e[31m   |\e[0m                \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  value & is not a member of Double\n3 errors found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      val sum = (n to m).sum\n      val diff = (n to m).count\n \
    \     val avg = math.round(sum / diff)\n      if (avg >= math.pow(10, 9)) {\n\
    \        val b = math.pow(10, 9).toBinaryString(avg).reverse\n        Right(s\"\
    ${b.slice(0, b.length / 2)}1\")\n      } else {\n        Left(\"Invalid Input\"\
    )\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpwp9ad1yr.scala:20:31 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mavg\e[0m = math.round(sum\
    \ / diff)\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m/\e[0m\
    \ in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ ((diff : (Long => Boolean) => Int))\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwp9ad1yr.scala:22:32 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mb\e[0m = math.pow(\e[31m10\e[0m, \e[31m9\e[0m).toBinaryString(avg).reverse\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value toBinaryString is not a member of Double\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpwp9ad1yr.scala:23:14 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        Right(\e[31ms\"\e[0m${b.slice(\e[31m0\e[0m, b.length\
    \ / \e[31m2\e[0m)}\e[31m1\"\e[0m)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    String\n\e[31m   |\e[0m          \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        def sum(n: Long, m: Long): Long = n + m\n        def divide(n:\
    \ Long, m: Long, d: Long): Long = n * d / d\n\n        val n = n.toDouble\n  \
    \      val m = m.toDouble\n        val d = m * 2 - n\n        val d = if (d <\
    \ 0.5) d else d - (1 - d)\n        val r = sum(n, m)\n        val q = divide(n,\
    \ r, d)\n        Right(math.abs(q).roundBinary)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4tb789ti.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mif\e[0m (d\
    \ < \e[31m0.5\e[0m) d \e[33melse\e[0m d - (\e[31m1\e[0m - d)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already\
    \ defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4tb789ti.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toDouble\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp4tb789ti.scala:22:16 ---------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toDouble\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4tb789ti.scala:27:26 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        Right(math.abs(q).roundBinary)\n\e[31m\e[31m   |\e\
    [0m              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value\
    \ roundBinary is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nums = Iterator.from(n.toInt).takeWhile(_ < m).map(_.toInt).take(m\
    \ + 2 - n)\n        if (nums.isEmpty) Left(-1)\n        else Right(nums.sum.toInt\
    \ - n + m.toInt.toBinary)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnf9gscly.scala:18:77\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = Iterator.from(n.toInt).takeWhile(_ < m).map(_.toInt).take(m + \e[31m2\e\
    [0m - n)\n\e[31m\e[31m   |\e[0m                                              \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                            Found:    Long\n\e[31m   |\e[0m \
    \                                                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnf9gscly.scala:19:31 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (nums.isEmpty) Left(-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e\
    [0m                               Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnf9gscly.scala:20:48 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m Right(nums.sum.toInt - n + m.toInt.toBinary)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value toBinary is not a\
    \ member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      val n = n.toLong\n      val m = m.toLong\n      if (n < m)\
    \ Right(-1)\n      else Left(\n        s\"$n is greater than $m, so cannot compute\
    \ average from $n to $m\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphkl871u3.scala:18:14 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphkl871u3.scala:19:14 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m      \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e[31m   |\e[0m  \
    \            ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m \e\
    [35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(m > n) return Left(s\"${m} is bigger than ${n}\")\n  \
    \      if(n > m) return Right(-1)\n        val avg = ((n + m) toLong).toBinaryString\n\
    \        Right(s\"0b${avg}\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpaley2_o8.scala:20:33 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = ((n + m) toLong).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaley2_o8.scala:21:14\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        Right(\e[31ms\"0b\e[0m${avg}\e\
    [31m\"\e[0m)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              Found:    String\n\e[31m   |\e[0m              Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg =  n.toDouble / m.toDouble * Math.ceil \n       \
    \ Right(avg.toBinaryString)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmph648wity.scala:18:43 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m =  n.toDouble /\
    \ m.toDouble * Math.ceil \n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m*\e[0m in \e[33mclass\e[0m \e[35mDouble\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Double\n\e[31m   |\e[0m (x: Long):\
    \ Double\n\e[31m   |\e[0m (x: Int): Double\n\e[31m   |\e[0m (x: Char): Double\n\
    \e[31m   |\e[0m (x: Short): Double\n\e[31m   |\e[0m (x: Byte): Double\n\e[31m\
    \   |\e[0mmatch arguments (Double => Double)\n1 error found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val bits = math.log(n, 2).toInt\n        if (bits < 0 ||\
    \ bits > 32) {\n            return Left(s\"Invalid number n or m: ${n} or ${m}\"\
    )\n        }\n        var sum = 0\n        for (i <- n to m) {\n            sum\
    \ += i\n        }\n        val avg = sum / 32\n        val bitString = binary(avg)\n\
    \        val result = Right(bitString) \n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9tzgk9n.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbits\e\
    [0m = math.log(n, \e[31m2\e[0m).toInt\n\e[31m\e[31m   |\e[0m                 \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                            Found:    (Long,\
    \ Int)\n\e[31m   |\e[0m                            Required: Double\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd9tzgk9n.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd9tzgk9n.scala:27:24\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mbitString\e[0m = binary(avg)\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: binary\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val total = (n to m).foldLeft(1l) {\n            case (acc,\
    \ x) => acc * 2l\n            case (acc, y) => acc + y\n        }\n\n        val\
    \ decimalResult = total.toInt.asInstanceOf[Double]\n        if (decimalResult\
    \ == total) {\n            Right(math.round(decimalResult))\n        } else {\n\
    \            Left(s\"$decimalResult\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp834bzo84.scala:31)\n\tat Problem.main(tmp834bzo84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nNums = n.toInt * m\n        val mNums = n.toInt * m\n\
    \        if(mNums > nNums) {\n            Right(-1l)\n        } else {\n     \
    \       val nSum = n.toInt\n            val mSum = m.toInt\n            val totalSum\
    \ = nSum + mSum\n            val totalInt = n.toInt + m.toInt\n            val\
    \ total = totalSum + totalInt\n            Right(total.toString.toLong)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxwqoytn.scala:32)\n\tat Problem.main(tmpqxwqoytn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n >= m) Left(-1)\n        else {\n            val total\
    \ = (n-m +1) * (n+m)/2\n            val count = n - m\n            val s = scala.math.round(total.toDouble).toBinaryString\n\
    \            Right(s)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmsr55vv.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n >= m)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjmsr55vv.scala:23:18 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Right(s)\n\e[31m\e[31m   |\e[0m         \
    \         ^\e[0m\n\e[31m   |\e[0m                  Found:    (s : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val m1 = m + n\n        val binary = m1.toString (2).toCharArray.map(x\
    \ => if(x =='1') '0' else ' ').mkString\n        val str = binary + ((m1 - n).abs\
    \ % 2).map (x => if(x =='1') '0' else ' ').mkString\n        if(str.startsWith(\"\
    0b\")) {\n          Right(str.drop(1))\n        } else {\n          Left(str)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp017n7pqt.scala:19:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = m1.toString\
    \ (\e[31m2\e[0m).toCharArray.map(\e[36mx\e[0m => \e[33mif\e[0m(x ==\e[31m'1'\e\
    [0m) \e[31m'0'\e[0m \e[33melse\e[0m \e[31m' '\e[0m).mkString\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m         too many\
    \ arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e\
    [0m: (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = n.toFloat / m\n        val result = (avg + 0.5).toInt\n\
    \        if (result > Integer.MAX_VALUE) return Left(\"-1\")\n        if (result\
    \ < 0) return Right(-1l)\n        Right(result.toString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4u3b_rwp.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        Right(result.toString)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \         Found:    String\n\e[31m   |\e[0m              Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum = m.toLong\n        if(n.toLong > sum){\n       \
    \     sum = n.toLong\n        }\n        if(m.toLong > sum){\n            sum\
    \ = m.toLong\n        }\n        val remainder = (sum >>> 1) - (n << 1)\n    \
    \    val remainder2 = (remainder << 1) | (sum & 1)\n        return if(remainder\
    \ != 0) Right(remainder2) else Left(\"No integers\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpddyboddz.scala:30)\n\tat Problem.main(tmpddyboddz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n.toLong <= m && m.toLong >= n) Right((n.toLong+m.toLong)/2l)\n\
    \        else Left(\"-1l\")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpywqr7wrd.scala:22)\n\tat Problem.main(tmpywqr7wrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var n1 : Long = 0\n        var n2 : Long = 0\n        var\
    \ n3 : Long = 0\n        var n4 : Long = 0\n        var n5 : Long = 0\n      \
    \  var n6 : Long = 0\n        var n7 : Long = 0\n        var n8 : Long = 0\n \
    \       var n9 : Long = 0\n        var n10 : Long = 0\n        var n11 : Long\
    \ = 0\n        var n12 : Long = 0\n        var n13 : Long = 0\n        var n14\
    \ : Long = 0\n        var n15 : Long = 0\n        var n16 : Long = 0\n       \
    \ var n17 : Long = 0\n        var n18 : Long = 0\n        var n19 : Long = 0\n\
    \        var n20 : Long = 0\n        var n21 : Long = 0\n        var n22 : Long\
    \ = 0\n        var n23 : Long = 0\n        var n24 : Long = 0\n        var n25\
    \ : Long = 0\n        var n26 : Long = 0\n        var n27 : Long = 0\n       \
    \ var n28 : Long = 0\n        var n29 : Long = 0\n        var n30 : Long = 0\n\
    \        var n31 : Long = 0\n        var n32 : Long = 0\n        var n33 : Long\
    \ = 0\n        var n34 : Long = 0\n        var n35 : Long = 0\n        var n36\
    \ : Long = 0\n        var n37 : Long = 0\n        var n38 : Long = 0\n       \
    \ var n39 : Long = 0\n        var n40 : Long = 0\n        var n41 : Long = 0\n\
    \        var n42 : Long = 0\n        var n43 : Long = 0\n        var n44 : Long\
    \ = 0\n        var n45 : Long = 0\n        var n46 : Long = 0\n        var n47\
    \ : Long = 0\n        var n48 : Long = 0\n        var n49 : Long = 0\n       \
    \ var n50 : Long = 0\n        var n51 : Long = 0\n        var n52 : Long = 0\n\
    \        var n53 : Long = 0\n        var n54 : Long = 0\n        var n55 : Long\
    \ = 0\n        var n56 : Long = 0\n        var n57 : Long = 0\n        var n58\
    \ : Long = 0\n        var n59 : Long = 0\n        var n60 : Long = 0\n       \
    \ var n61 : Long = 0\n        var n62 : Long = 0\n        var n63 : Long = 0\n\
    \        var n64 : Long = 0\n        var n65 : Long = 0\n        var n66 : Long\
    \ = 0\n        var n67 : Long = 0\n        var n68 : Long = 0\n        var n69\
    \ : Long = 0\n        var n70 : Long = 0\n        var n71 : Long = 0\n       \
    \ var n72 : Long = 0\n        var n73 : Long = 0\n        var \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxjacmhe3.scala:91:11 ---------------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjacmhe3.scala:92:5 ---------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Either[String, Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        def nextDigit(n : Long, m : Long) : String = {\n        \
    \    var str = n.toBinaryString\n            var i = 0\n            while (i <\
    \ m.toBinaryString.length) { str += \"0\" + m.toBinaryString(i) ; i += 1; }\n\
    \            return str\n        }\n        if (n <= m) Right(n.toBinaryString)\
    \ else Left(\"-1\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdkv22_bj.scala:24:28\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (n <= m)\
    \ Right(n.toBinaryString) \e[33melse\e[0m Left(\e[31m\"-1\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Found:    String\n\e[31m   |\e[0m                    \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val diff = Math.abs(n - m);\n        val diff = diff % 2\n\
    \        if (diff == 0)\n            Right(n.toInt)\n        else if (diff ==\
    \ 1)\n            Left(\"\")\n        else Right(-1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppkj3gkcc.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdiff\e[0m = diff % \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdiff\
    \ is already defined as \e[33mvalue\e[0m \e[35mdiff\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toInt + m.toInt\n        val avg = sum / 2\n\
    \        val bits = binary(avg)\n        val left = (sum.toString + bits.rightPadTo(bits.length,\
    \ 0)).dropRight(1)\n        val right = (sum.toString + bits.leftPadTo(bits.length,\
    \ 0)).dropLeft(1)\n        val sum = left.toLong + right.toLong\n        if(sum\
    \ > Long.MaxValue)\n            Left(s\"${avg} is too big, use -1 instead\")\n\
    \        else\n            Right(sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbvsac1p2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = left.toLong +\
    \ right.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbvsac1p2.scala:20:19 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mbits\e[0m = binary(avg)\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ binary\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvsac1p2.scala:22:68\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mright\e[0m = (sum.toString + bits.leftPadTo(bits.length, \e[31m0\e[0m)).dropLeft(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value dropLeft is not a member of String\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n+m)/2.0).toInt\n        if(avg > m){\n     \
    \       Left(s\"${Integer.toBinaryString(avg)} > ${Integer.toBinaryString(m)}\"\
    )\n        } else {\n            Right(avg)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnhob8p4d.scala:20:77\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Left(\e[31ms\"\e\
    [0m${Integer.toBinaryString(avg)}\e[31m > \e[0m${Integer.toBinaryString(m)}\e\
    [31m\"\e[0m)\n\e[31m\e[31m   |\e[0m                                          \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                                  Found:    (m : Long)\n\e[31m   |\e[0m     \
    \                                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        def rec(n : Long, m : Long, acc : Long, result : String)\
    \ : Either[String, Long] = {\n            if (n <= m) Right(acc)\n           \
    \ else {\n                if (n >= m) Left(s\"$acc is not a valid range\")\n \
    \               else {\n                    val r = n % 2\n                  \
    \  val r2 = (n / 2)\n                    if (r == 1) rec(n - 1, m-1, acc + r2,\
    \ s\"${acc}b${r2}\") else if (r == 0) rec(n - 1, r2, acc + r2, s\"${acc}b${r2}\"\
    ) else if (r == -1) rec(n - 1, m, acc, s\"${acc}b${r2}\") else rec(n - 1, m, r2,\
    \ s\"${acc}b${r}\")\n                }\n            }\n        }\n        rec(n,\
    \ m, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3p8k6p24.scala:29:21\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        rec(n, m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e\
    [0m                     Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      val (nToM, nToM) = (n, m) match {\n        case (n,m) => for\
    \ { _ <- n until m } yield (m, m)\n        case _ => throw new IllegalArgumentException(s\"\
    Arguments n and m should be positive integers\")\n      }\n      val avg = (nToM\
    \ - nToM.floor) / 2\n      if (avg < 0 || n <= m) Left(s\"Cannot compute average\
    \ between $n and $m, avg: ${avg}\")\n      else Right(s\"0b${math.abs(avg).asBinaryString.reverse}\"\
    .replaceFirst(\"0b\", \"\"))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E005] Naming Error: /tmp/tmpk4b8mbpi.scala:18:17 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m (nToM, nToM) = (n, m) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m      \
    \           duplicate pattern variable: nToM\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpk4b8mbpi.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      \e[33mval\e[0m \e[36mavg\e[0m = (nToM - nToM.floor)\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue - is not a member of Any, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4b8mbpi.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m      \e[33mval\e[0m \e[36mavg\e\
    [0m = (nToM - nToM.floor) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value floor\
    \ is not a member of Any\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk4b8mbpi.scala:24:74\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m      \e[33melse\e[0m Right(\e\
    [31ms\"0b\e[0m${math.abs(avg).asBinaryString.reverse}\e[31m\"\e[0m.replaceFirst(\e\
    [31m\"0b\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    String\n\e[31m   |\e[0m       \
    \          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if ((n>m)) {\n            return Left(\"-1\")\n        }\n\
    \        val count = (n-m).abs // How many numbers from n to m are present\n \
    \       val sum = ((n+m)*(n+1))/2 + n/2 + (m/2)\n        val quotient = sum.toLong/count.toLong\n\
    \        val remainder = sum.toLong - quotient*count.toLong\n        // This will\
    \ return -1 if n is greater than m\n        Right(quotient.toBinaryString.dropRight(remainder.toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdf49uvt6.scala:26:47\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        Right(quotient.toBinaryString.dropRight(remainder.toInt))\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    String\n\e[31m   |\e[0m          \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n <= m) Right((n.toBinaryString).padTo(32, \"0\"))\n\
    \        else Left(-1)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpacw85yc0.scala:18:50\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n <= m)\
    \ Right((n.toBinaryString).padTo(\e[31m32\e[0m, \e[31m\"0\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Found:    IndexedSeq[Matchable]\n\e[31m\
    \   |\e[0m                          Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpacw85yc0.scala:19:18 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val m = m.toInt\n        val n = n.toInt\n        if (m >\
    \ n) Left(s\"${m} is greater than ${n}\")\n        else if (n == m) Right(m+n)\n\
    \        else { val nm = n.until(m).sum.toDouble / (m.until(n).sum.toDouble +\
    \ 1.0)\n            Right(nm.toBinaryString) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfzf00xyo.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpfzf00xyo.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val l = List.range(n, m + 1)\n        if(l.isEmpty) Right(-1)\n\
    \        else {\n            val list = l.toList\n            val sum = list.reduce(_\
    \ + _)\n            val avg = sum / l.length\n            val res = (if (avg ==\
    \ 0) \"0\" else math.ceil(avg).toBinaryString).replace(\"0\", \"1\")\n       \
    \     Right(res)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptor8njim.scala:24:61 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mres\e[0m = (\e[33mif\e\
    [0m (avg == \e[31m0\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m math.ceil(avg).toBinaryString).replace(\e\
    [31m\"0\"\e[0m, \e[31m\"1\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value toBinaryString is not a member of Double\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptor8njim.scala:25:18 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            Right(res)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (res : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var count = 0L\n        var sum = 0L\n        for (i = n;\
    \ i >= m; i--) {\n            count = i + 1\n            sum = sum + i\n     \
    \   }\n        \n        if (count != 0L) {\n            sum = sum / count\n \
    \       }\n        \n        val str = if(sum == 0) \"0b0\" else Integer.toString(sum.toInt)\n\
    \        val bin = str.charAt(str.length - 1) - '0'\n        \n        Right(bin)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp33oxkn9g.scala:20:15 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i = n; i >= m; i--) {\n\e[31m\e\
    [31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp33oxkn9g.scala:20:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m\
    \ (i = n; i >= m; i--) {\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          '<-' expected, but ';' found\n\e[31m\e\
    [31m-- [E032] Syntax Error: /tmp/tmp33oxkn9g.scala:20:31 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i = n; i >= m; i--) {\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp33oxkn9g.scala:20:18 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i = n; i >= m; i--) {\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member\
    \ of Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n <= m)\n        val diff = m+1-n\n        val sum\
    \ = 0\n        val count = 0\n        while(diff>0) {\n            sum += n\n\
    \            count += 1\n            diff -= 1\n        }\n        require(count==0\
    \ && diff>0)\n        val avg = math.round(sum/count).toInt\n        val binary\
    \ = if (avg<0) \"0b\" + Integer.toBinaryString(-avg) else Integer.toBinaryString(avg)\n\
    \        Left(binary)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j9ag4ny.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j9ag4ny.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            count += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value += is not a member of Int - did you mean count.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2j9ag4ny.scala:25:17 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            diff -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean diff.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n.toInt() < m.toInt()) Left(-1l) else Right(m.toLong.toBinary)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp4jb7htkn.scala:18:14 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n.toInt() < m.toInt()) Left(-\e\
    [31m1l\e[0m) \e[33melse\e[0m Right(m.toLong.toBinary)\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m            \e[33mmethod\e[0m \e[35mtoInt\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4jb7htkn.scala:18:40 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n.toInt() < m.toInt()) Left(-\e\
    [31m1l\e[0m) \e[33melse\e[0m Right(m.toLong.toBinary)\n\e[31m\e[31m   |\e[0m \
    \                                       ^^^\e[0m\n\e[31m   |\e[0m            \
    \                            Found:    (\e[31m-1L\e[0m : Long)\n\e[31m   |\e[0m\
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4jb7htkn.scala:18:65 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n.toInt() < m.toInt()) Left(-\e\
    [31m1l\e[0m) \e[33melse\e[0m Right(m.toLong.toBinary)\n\e[31m\e[31m   |\e[0m \
    \                                                       ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value toBinary is not a member\
    \ of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if((n < m)){\n            Left(-1)\n        }else{\n    \
    \        val count = n.toInt\n            val bits = (count.toLong.toBinary)\n\
    \            val len = bits.length\n            val count2 = bits.toLong\n   \
    \         val count3 = 0l\n            val count4 = 0l\n            val count5\
    \ = 0l\n            val count6 = 0l\n            val count7 = 0l\n           \
    \ val count8 = 0l\n            val count9 = 0l\n            val count10 = 0l\n\
    \            val count11 = 0l\n            val count12 = 0l\n            val count13\
    \ = 0l\n            val count14 = 0l\n            val count15 = 0l\n         \
    \   val count16 = 0l\n            val count17 = 0l\n            val count18 =\
    \ 0l\n            val count19 = 0l\n            val count20 = 0l\n           \
    \ val count21 = 0l\n            val count22 = 0l\n            val count23 = 0l\n\
    \            val count24 = 0l\n            val count25 = 0l\n            val count26\
    \ = 0l\n            val count27 = 0l\n            val count28 = 0l\n         \
    \   val count29 = 0l\n            val count30 = 0l\n            val count31 =\
    \ 0l\n            val count32 = 0l\n            val count33 = 0l\n           \
    \ val count34 = 0l\n            val count35 = 0l\n            val count36 = 0l\n\
    \            val count37 = 0l\n            val count38 = 0l\n            val count39\
    \ = 0l\n            val count40 = 0l\n            val count41 = 0l\n         \
    \   val count42 = 0l\n            val count43 = 0l\n            val count44 =\
    \ 0l\n            val count45 = 0l\n            val count46 = 0l\n           \
    \ val count47 = 0l\n            val count48 = 0l\n            val count49 = 0l\n\
    \            val count50 = 0l\n            val count51 = 0l\n            val count52\
    \ = 0l\n            val count53 = 0l\n            val count54 = 0l\n         \
    \   val count55 = 0l\n            val count56 = 0l\n            val count57 =\
    \ 0l\n            val count58 = 0l\n            val count59 = 0l\n           \
    \ val count60 = 0l\n            val count61 = 0l\n            val count62 = 0l\n\
    \            val count63 = 0l\n            val count64 = 0l\n            val count65\
    \ = 0l\n            val count66 = 0l\n            val count67 = 0l\n         \
    \   val count68 = 0l\n            val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpovoxfpbp.scala:91:15 ---------------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpovoxfpbp.scala:109:0 ---------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpovoxfpbp.scala:22:37\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mbits\e[0m = (count.toLong.toBinary)\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \    value toBinary is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpovoxfpbp.scala:108:1 --------------------\e[0m\e[0m\n\e[31m108\
    \ |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:    Unit\n\e\
    [31m    |\e[0m Required: Either[String, Long]\n\e[31m    |\e[0m\n\e[31m    |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpovoxfpbp.scala:93:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m93 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toInt + m.toInt\n        val avg = sum / 2\n\
    \        val answer = avg.toBinary\n        if (answer < 0)\n            Left(s\"\
    $answer cannot be represented in binary notation\")\n        else\n          \
    \  Right(answer)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpolvjcybf.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36manswer\e[0m = avg.toBinary\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                    value toBinary is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum : Long = 0l\n        var min : Long = Long.MinValue\n\
    \        for (i <- n to m) {\n            sum += i\n            min = if (i <\
    \ min) i else min\n        }\n        if (min < 0) Left(s\"Negative min: ${min}\"\
    )\n        else Right(sum / m).asBin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcz_5tq6g.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m Right(sum / m).asBin\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \    value asBin is not a member of Right[Nothing, Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum = n.toLong + m.toLong\n        var mid = sum / 2\n\
    \        sum -= mid\n        val rem = sum / 2\n        val n1 = if (rem > 0)\
    \ rem else 0l\n        val m1 = if (rem > 0) rem else 0l\n        val left = if\
    \ (n1 < m1) n1 else m1\n        val right = if (n1 < m1) m1 else n1\n        val\
    \ result = if (left < right) left.toBinaryString + right.toBinaryString else left.toBinaryString\
    \ + right.dropRight(1)\n        return Right(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj71joie7.scala:26:115 -----------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (left < right) left.toBinaryString + right.toBinaryString \e[33melse\e[0m\
    \ left.toBinaryString + right.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value dropRight is not a member of Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpj71joie7.scala:27:21 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mreturn\e[0m Right(result)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \   Found:    (result : String)\n\e[31m   |\e[0m                     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nums = List(n, m)\n        val diff = nums.sum - nums.tail.head\n\
    \        if (diff == 0) Right(nums.sum)\n        else if (diff < 0 ) Left(s\"\
    $diff is too large\")\n        else Right(nums.sum.toBinaryString).asInstanceOf[Either[String,\
    \ Long]]\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgaao0wp6.scala:25)\n\tat Problem.main(tmpgaao0wp6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var avg :Long = n.toLong + m.toLong\n        if (n > m) {\n\
    \            avg = -1\n        }\n        return Either.left(avg)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5dlw0vvl.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mreturn\e[0m Either.left(avg)\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue left is not\
    \ a member of object scala.util.Either - did you mean Either.wait?\n1 error found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        n match {\n            case n if n > m => Left(-1)\n    \
    \        case n => Right(n / 2l + (n % 2l) / 2l)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnhibh247.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m n\
    \ \e[33mif\e[0m n > m => Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                          ^^\e[0m\n\e[31m   |\e[0m                          \
    \          Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                  \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        def average(xs : List[Long]) = {\n            def total(xs\
    \ : List[Long], total : Long) = total + xs.sum\n            val total = n.toInt\
    \ * m.toInt\n            if (total <= 0)\n                Left(s\"Cannot compute\
    \ the average for $n and $m because $n or $m is too small\")\n            else\n\
    \                Right(total / xs.length)\n        }\n        val xs = n.toInt.toList.drop(m).take(m).toList\n\
    \        average(xs)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0k8etg2j.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mtotal\e[0m = n.toInt\
    \ * m.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal is already defined as \e[33mmethod\e[0m \e[35mtotal\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0k8etg2j.scala:21:22 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mif\e[0m (total <= \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue <= is not a member\
    \ of (List[Long], Long) => Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0k8etg2j.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                Right(total / xs.length)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue / is not a\
    \ member of (List[Long], Long) => Long, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0k8etg2j.scala:26:25 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = n.toInt.toList.drop(m).take(m).toList\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \        value toList is not a member of Int - did you mean Int.toInt?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val total = ((n.toLong + m.toLong)/2).toInt\n        val\
    \ binary = total.toBinary(2)\n        return if(binary == \"0\") Right(total.toLong.toInt)\
    \ \n            else Left(s\"$total is not a valid integer.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpyb81cs.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = total.toBinary(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     value toBinary is not a member of Int\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if(n >\
    \ m) {\n            Right(\"-1\")\n        }\n        else {\n            val\
    \ s = n.toString.reverse.drop(1).dropRight(1)\n            val l = m.toString.reverse.drop(1).dropRight(1)\n\
    \            val nInt = new BigInteger(n)\n            val mInt = new BigInteger(m)\n\
    \            if(l.toString.length == 0 || nInt.toString.length == 0) {\n     \
    \           Right(-1)\n            }\n            else {\n                val\
    \ l = l.toString.reverse\n                val nStr = new BigInteger(s).mod(nInt)\n\
    \                val mStr = new BigInteger(l).mod(mInt)\n                val sum\
    \ = nStr.toString(2) + mStr.toString(2)\n                val len = sum.length\n\
    \                if(len == 0) {\n                    Right(-1)\n             \
    \   }\n                else {\n                    val str = sum.reverse.drop(len).reverse\n\
    \                    val rstr = new BigInteger(str)\n                    val ans\
    \ = rstr.divide(BigInteger.valueOf(2)).intValue()\n                    Right(ans.toBinaryString)\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqjmp5hve.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqjmp5hve.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqjmp5hve.scala:21:18 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Right(\e[31m\"-1\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (\e[32m\"\
    -1\"\e[0m : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqjmp5hve.scala:26:27 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mnInt\e[0m = \e[33mnew\e\
    [0m \e[35mBigInteger\e[0m(n)\n\e[31m\e[31m   |\e[0m                          \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: type BigInteger\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqjmp5hve.scala:27:27\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmInt\e[0m = \e[33mnew\e[0m \e[35mBigInteger\e[0m(m)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \            Not found: type BigInteger\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqjmp5hve.scala:32:24 ---------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                \e[33mv"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n >= m) {\n            Left(-1)\n        }\n        else\
    \ {\n            val total = n.toInt\n            val count = m.toInt\n      \
    \      val sum = Math.floor(total.toDouble / count).toInt\n            val binary\
    \ = sum.toBinaryString\n            Right(binary.padLeft(count.length, \"0\"))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3iykofwf.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3iykofwf.scala:26:25\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            Right(binary.padLeft(count.length,\
    \ \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value padLeft is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3iykofwf.scala:26:39 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(binary.padLeft(count.length, \e[31m\"\
    0\"\e[0m))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n + m\n        if (sum < 1l) Left(-1)\n       \
    \ else if (sum > 1l) Right(-1)\n        else {\n            val x = math.ceil(sum).toInt\n\
    \            val y = math.ceil(sum - x).toInt\n            val avg = math.floor(sum\
    \ - x / 2).toInt + (x % 2) * 2\n            Right((0b.toBinary(y) + 0b.toBinary(avg)).toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz9yja1q9.scala:25:21 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            Right((\e[31m0\e[0mb.toBinary(y) + \e[31m0\e\
    [0mb.toBinary(avg)).toLong)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     expression expected but \e[31m'.'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz9yja1q9.scala:19:27\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (sum <\
    \ \e[31m1l\e[0m) Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \         ^^\e[0m\n\e[31m   |\e[0m                           Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                           Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val l = n.toString.length\n        val ll = m.toString.length\n\
    \        val sum = ((n.toInt + m.toInt).toString + n.toString + m.toString).\n\
    \                substring((l + (n - ll)).ceil.toInt)\n        val left = sum.substring(0,\
    \ sum.length - 1)\n        val right = sum.substring(sum.length - 1)\n       \
    \ val a = (left.reverse.charAt(0) - '0') + (right.reverse.charAt(0) - '0') * (1\
    \ / (ll-l))\n        val b = left.reverse.charAt(0)\n        Right(a.toString\
    \ + b)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0hqw17fg.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                substring((l + (n - ll)).ceil.toInt)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      value ceil is not a member of Long.\n\e[31m   |\e[0m      An extension\
    \ method was tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          doubleWrapper(l.+(n.-(ll)))\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0hqw17fg.scala:26:14 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        Right(a.toString + b)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    String\n\e[31m   |\e[0m          \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        def sum(n: Int, m: Int): Long = {\n            if (n < m)\
    \ 0l\n            else\n                n.toLong + m.toLong\n        }\n     \
    \   val l = sum(n, m) + 2 * sum((n + m) / 2, 2 * n)\n        val s = (l / (m+n))\
    \ * 10\n\n        if (s > 10) Right(s\"0b$s\")\n        else Left(s\"$s is not\
    \ a power of 2\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktqkr8xu.scala:23:20\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36ml\e\
    [0m = sum(n, m) + \e[31m2\e[0m * sum((n + m) / \e[31m2\e[0m, \e[31m2\e[0m * n)\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Found:    (n : Long)\n\e[31m   |\e[0m                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktqkr8xu.scala:23:23\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36ml\e\
    [0m = sum(n, m) + \e[31m2\e[0m * sum((n + m) / \e[31m2\e[0m, \e[31m2\e[0m * n)\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Found:    (m : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktqkr8xu.scala:23:36\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36ml\e\
    [0m = sum(n, m) + \e[31m2\e[0m * sum((n + m) / \e[31m2\e[0m, \e[31m2\e[0m * n)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    Found:    Long\n\e[31m   |\e\
    [0m                                    Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpktqkr8xu.scala:23:49 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = sum(n, m) + \e\
    [31m2\e[0m * sum((n + m) / \e[31m2\e[0m, \e[31m2\e[0m * n)\n\e[31m\e[31m   |\e\
    [0m                                                 ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                 Found:    Long\n\e[31m   |\e\
    [0m                                                 Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktqkr8xu.scala:26:26 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      "
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (m >= n) Left(-1l) // n == m\n        else if (n > m)\
    \ Right(-1l) // n < m\n        else if (n == m) Right(n.toInt) \n        else\
    \ { \n            // first determine how many times n has moved across the interval\n\
    \            var count = 0\n            var nNew = 0\n            while (n > m)\
    \ {\n                n -= m // n has moved m times \n                nNew += m\n\
    \                count += 1 \n            }\n            if (count == 0) Right(-1l)\
    \ // n == m\n            else { \n                val m = nNew / count\n     \
    \           Right(n.toInt + m.toBinaryString) // add the m to n\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmploa6w_x3.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (m >= n)\
    \ Left(-\e[31m1l\e[0m) \e[34m// n == m\e[0m\n\e[31m\e[31m   |\e[0m           \
    \              ^^^\e[0m\n\e[31m   |\e[0m                         Found:    (\e\
    [31m-1L\e[0m : Long)\n\e[31m   |\e[0m                         Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmploa6w_x3.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                n -= m \e\
    [34m// n has moved m times \e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value -= is not a member of Long - did you\
    \ mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmploa6w_x3.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                nNew += m\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmploa6w_x3.scala:33:22 --------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                Right(n.toInt + m.toBinaryString) \e[34m//\
    \ add the m to n\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m  \
    \                    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // Round n to m by shifting n and m right by floor(log2(m))\n\
    \        // and shifting the bits of m right by ceil(log2(m))\n        val shift\
    \ = math.floor(math.log2(m))\n        val nShifted = n.shiftRight(shift)\n   \
    \     val mShifted = m.shiftRight(math.ceil(math.log2(m)))\n\n        // If n\
    \ is greater than m, return -1\n        if (nShifted > mShifted) {\n         \
    \   return Left(-1)\n        }\n\n        // Compute the sum of the digits in\
    \ m using recursion\n        val sum = recurse(nShifted, mShifted, m, shift)\n\
    \n        // If n is less than m, compute the sum of the digits in n using recursion\n\
    \        if (nShifted < mShifted) {\n            val newSum = recurse(nShifted,\
    \ m, m, shift) \n            val remainder = newSum - sum\n            val result\
    \ = sum + remainder\n            val resultStr = result.toBinaryString\n     \
    \       return Right(math.pow(2,m) - math.pow(2,shift) + resultStr)\n        }\n\
    \n        // If the sum of the digits in m is less than or equal to the\n    \
    \    // sum of the digits in n, then both sums are equal\n        return Right(-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnhvae_c2.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = math.floor(math.log2(m))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value log2 is not a member of math\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnhvae_c2.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnShifted\e[0m = n.shiftRight(shift)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value shiftRight is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpnhvae_c2.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmShifted\e[0m = m.shiftRight(math.ceil(math.log2(m)))\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value shiftRight is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpnhvae_c2.scala:22:51 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmShifted\e[0m = m.shiftRight(math.ceil(math.log2(m)))\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value log2 is not a\
    \ member of math\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnhvae_c2.scala:26:24\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mreturn\e[0m\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnhvae_c2.scala:30:18 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = recurse(nShifted,\
    \ mShifted, m, shift)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  Not found: recurse\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explana"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // Your code goes here\n        val result = new mutable.HashSet[Long]\n\
    \        var count = 0\n        var total = 0\n        if(n > m){\n          \
    \  return Left(s\"$n is greater than $m\")\n        }\n        while(n <= m){\n\
    \            total += n\n            count += 1\n            result += n\n   \
    \         n = n + n\n        }\n        val answer = (total/count).roundToInt\n\
    \        if(answer < 0){\n            answer = -1\n        }\n        Right(answer)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3f0bo7_b.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3f0bo7_b.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            total += n\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmp3f0bo7_b.scala:29:14 -----------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m            n = n + n\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3f0bo7_b.scala:31:35 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36manswer\e[0m = (total/count).roundToInt\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value roundToInt is not a member of Int\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp3f0bo7_b.scala:33:19 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            answer = -\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ answer\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n       val sum = n + m\n       if (sum > 0) Right(sum.abs.toBinaryString.reverse)\
    \ else Left(s\"Negative values are not allowed.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptvdn2huq.scala:19:49\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \e[33mif\e[0m (sum > \e\
    [31m0\e[0m) Right(sum.abs.toBinaryString.reverse) \e[33melse\e[0m Left(\e[31ms\"\
    Negative values are not allowed.\"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Found:    String\n\e[31m   |\e[0m                          Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum : Long = 0\n        var count : Long = 1\n      \
    \  var i : Long = 0\n        var avg : Long = 0\n        while (i<n || i<m) {\n\
    \            sum += i\n            count += 1\n            if (i<n) {\n      \
    \          i += 1\n            } else if (i<m) {\n                i +=1\n    \
    \        } else {\n                break\n            }\n        }\n        avg\
    \ = sum/count\n        if (count>1) {\n            return Left(Long.toBinaryString(avg))\n\
    \        } else {\n            return Right(avg)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp41u2xf42.scala:30:16 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp41u2xf42.scala:35:29 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mreturn\e[0m Left(Long.toBinaryString(avg))\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value toBinaryString is not a member of object\
    \ Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = 0L\n        var count = 0L\n        for (i <- n\
    \ until m) sum += i\n        val avg = sum / count\n        val binString = toBinString(avg)\n\
    \        if (binString.length > 7) Left(\"-1\")\n        else Right(binString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2b4ta_43.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <- n until m) sum += i\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2b4ta_43.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbinString\e[0m = toBinString(avg)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: toBinString\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      val count = new mutable.HashMap[Long, Long]\n      var sum\
    \ = 0L\n      var avg :Long = 0L\n      var min = 0L\n      var max = 0L\n   \
    \   var i = 0\n\n      while(i < n && i < m) {\n        if (i+1 >= n) {\n    \
    \      sum = sum + 1\n          count += 1\n          avg = sum / count.toDouble\n\
    \          i = i + 1\n        }\n        else {\n          if (i <= m) {\n   \
    \         sum = sum + i\n            count += 1\n            avg = sum / count.toDouble\n\
    \          }\n          else {\n            sum = sum + 1\n            count +=\
    \ 1\n            avg = sum / count.toDouble\n            i = i + 1\n         \
    \ }\n        }\n        if (i+1 > m) {\n          max = i\n        }\n       \
    \ if (i == m) {\n          min = i\n        }\n        i += 1\n      }\n     \
    \ if (n < m) {\n        Left(-1)\n      }\n      else {\n        if (min == max)\
    \ {\n          Right(max.toBinaryString)\n        }\n        else {\n        \
    \  val left = min.toBinaryString\n          val right = max.toBinaryString\n \
    \         Right(left + right)\n        }\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmtpjgk7.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmtpjgk7.scala:54:13\
    \ --------------------\e[0m\e[0m\n\e[31m54 |\e[0m        Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m             ^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m             Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmtpjgk7.scala:58:20 --------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m          Right(max.toBinaryString)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    String\n\e[31m   |\e[0m                Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmtpjgk7.scala:63:16 --------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m          Right(left + right)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    String\n\
    \e[31m   |\e[0m                Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n > 0, \"n must be positive\")\n        require(m\
    \ > 0, \"m must be positive\")\n        if (n == 0) Right(0) \n        else if\
    \ (m == 0 || n == m) Right(0)\n        else Right(((n - m) / Math.ceil(n / m))\
    \ + m + n - (m * Math.ceil(n / m)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfjw84oj9.scala:22:19\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m Right(((n\
    \ - m) / Math.ceil(n / m)) + m + n - (m * Math.ceil(n / m)))\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Double\n\e[31m   |\e[0m     \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // TODO: Fill this in.\n        val n = n.toInt\n       \
    \ val m = m.toInt\n        if (n <= m) {\n            Left(s\"${n} to $m average\
    \ is ${n.toBinaryString.reverse.foldLeft(0l){ (a, b) => if (a > b) a else b}}.\"\
    )\n        } else {\n            Right(-1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzcqafbfn.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzcqafbfn.scala:20:16 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(m == 0) {\n            return Right(-1l)\n        }\n\
    \        val i = 2l\n        val res = 0l\n        for(i <- 2 until m-1) {\n \
    \           res = (res + n) / i\n            i = i*2l\n        }\n        val\
    \ rightBin = Right(res.toBinaryString) // .toString doesn't work for Long\n  \
    \      return if(n.compareTo(m) == 0) {\n            rightBin\n        } else\
    \ {\n            Left(\"Error in the input\")\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbug7aj3x.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m until m-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m\
    \   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpbug7aj3x.scala:24:16 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            res = (res + n) / i\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val res\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbug7aj3x.scala:25:16\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            i = i*\e[31m2l\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbug7aj3x.scala:29:12 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            rightBin\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (rightBin : Right[Nothing,\
    \ String])\n\e[31m   |\e[0m            Required: Either[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toInt * m\n        val diff = sum - (m * m)\n\
    \        val diff2 = diff - (diff*diff) / 2\n        if (diff2 == 0) {\n     \
    \       Right(diff.toBinary)\n        } else if (diff2 < 0) {\n            Left(s\"\
    ${diff2.toBinary}b\")\n        } else {\n            val diff3 = diff2 - 1\n \
    \           val diff4 = diff3 - (diff3*diff3) / 2\n            val diff5 = diff4\
    \ - (diff4*diff4) / 2\n            val diff6 = diff5 - (diff5*diff5) / 2\n   \
    \         val diff7 = diff6 - (diff6*diff6) / 2\n            val diff8 = diff7\
    \ - (diff7*diff7) / 2\n            val diff9 = diff8 - (diff8*diff8) / 2\n   \
    \         val diff10 = diff9 - (diff9*diff9) / 2\n            val diff11 = diff10\
    \ - (diff10*diff10) / 2\n            val diff12 = diff11 - (diff11*diff11) / 2\n\
    \            val diff13 = diff12 - (diff12*diff12) / 2\n            val diff14\
    \ = diff13 - (diff13*diff13) / 2\n            val diff15 = diff14 - (diff14*diff14)\
    \ / 2\n            val diff16 = diff15 - (diff15*diff15) / 2\n            val\
    \ diff17 = diff16 - (diff16*diff16) / 2\n            val diff18 = diff17 - (diff17*diff17)\
    \ / 2\n            val diff19 = diff18 - (diff18*diff18) / 2\n            val\
    \ diff20 = diff19 - (diff19*diff19) / 2\n            val diff21 = diff20 - (diff20*diff20)\
    \ / 2\n            val diff22 = diff21 - (diff21*diff21) / 2\n            val\
    \ diff23 = diff22 - (diff22*diff22) / 2\n            val diff24 = diff23 - (diff23*diff23)\
    \ / 2\n            val diff25 = diff24 - (diff24*diff24) / 2\n            val\
    \ diff26 = diff25 - (diff25*diff25) / 2\n            val diff27 = diff26 - (diff26*diff26)\
    \ / 2\n            val diff28 = diff27 - (diff27*diff27) / 2\n            val\
    \ diff29 = diff28 - (diff28*diff28) / 2\n            val diff30 = diff29 - (diff29*diff29)\
    \ / 2\n            val diff31 = diff30 - (diff30*diff30) / 2\n            val\
    \ diff32 = diff31 - (diff31*diff31) / 2\n            val diff33 = diff32 - (diff32*diff32)\
    \ / 2\n            val diff34 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpioojxlpq.scala:57:24 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m            \e[33mval\e[0m \e[36mdiff34\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpioojxlpq.scala:75:0 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpioojxlpq.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Right(diff.toBinary)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               value toBinary is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpioojxlpq.scala:24:27 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            Left(\e[31ms\"\e[0m${diff2.toBinary}\e[31mb\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     value toBinary is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpioojxlpq.scala:74:1 ---------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmpioojxlpq.scala:59:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n >= m) Left(-1)\n        else {\n            val avg\
    \ = Math.ceil((n - m) / 2) // floor division\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9aam3_8.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n >= m)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpi9aam3_8.scala:21:45 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mbin\e[0m = Integer.toBinaryString(avg)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^\e[0m\n\e\
    [31m   |\e[0m                                             Found:    (avg : Double)\n\
    \e[31m   |\e[0m                                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9aam3_8.scala:22:18\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n < 0 || m < 0) {\n            return Left(s\"$n or $m\
    \ can't be negative\")\n        }\n        if (m > n) {\n            return Right(-1l)\n\
    \        }\n        val binary = n.toBinaryString\n        var sum : Long = 0\n\
    \        var n : Long = 1\n        while (n <= m) {\n            sum = sum + n\n\
    \            n = n + 2\n        }\n        sum = sum / 2\n        val result \
    \ = scala.math.BigInt(sum.toInt)\n        result.asBinary\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpizv5j4z4.scala:33:15 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        result.asBinary\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value asBinary is not a member\
    \ of BigInt\n1 error found\n"
  stdout: ''
  timestamp: 1660009630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      if(n > m) {\n        Left(-1l)\n      } else {\n        val\
    \ arr : mutable.ArrayBuilder[Long] = mutable.ArrayBuilder[Long]()\n        for(i\
    \ <- n to m) {\n          arr += i\n        }\n        Right(arr.sum.toBinaryString(2))\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpso3iwn6p.scala:19:13\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        Left(-\e[31m1l\e[0m)\n\
    \e[31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (\e[31m-1L\e[0m : Long)\n\e[31m   |\e[0m             Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpso3iwn6p.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36marr\e[0m : mutable.ArrayBuilder[\e[35mLong\e[0m] = mutable.ArrayBuilder[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpso3iwn6p.scala:21:47 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m : mutable.ArrayBuilder[\e\
    [35mLong\e[0m] = mutable.ArrayBuilder[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                               Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = if (n >= m) -1l else n.toLong\n        val binary\
    \ = scala.math.pow(2,avg % 4).toBinaryString\n        Right(binary.padTo(4,\"\
    0\"))\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_1h6rjvn.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = scala.math.pow(\e\
    [31m2\e[0m,avg % \e[31m4\e[0m).toBinaryString\n\e[31m\e[31m   |\e[0m         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   value toBinaryString is not a member of Double\n1 error found\n"
  stdout: ''
  timestamp: 1660009630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val mid = (m + n) / 2\n        val binMid = (mid / 2).toBinaryString\n\
    \        if (binMid.length < 2)\n            Right(mid / 2l).toLong\n        else\n\
    \            Left(\"0b\" + binMid.reverse.drop(binMid.length - 1).reverse)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpigpsqx1g.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Right(mid / \e[31m2l\e[0m).toLong\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Right[Nothing, Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = scala.math.pow(n, m) / 2\n        val remainder\
    \ = scala.math.pow(n, m) % 2\n        if (remainder == 0) {\n            Left(binary(sum))\n\
    \        } else {\n            Right(-1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_k0czdu_.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Left(binary(sum))\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: binary\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n.toInt < m.toInt) return Left(s\"invalid input: n <\
    \ m\")\n        val avg = n.toDouble/(m.toDouble - n.toDouble)\n        val ret\
    \ = (Math.round(avg).toString + if (avg == 1) \"0\" else \"\") + Long.toString(m)\n\
    \        Right(ret)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp35p9uhkd.scala:20:46 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mret\e[0m = (Math.round(avg).toString\
    \ + \e[33mif\e[0m (avg == \e[31m1\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m \e[31m\"\
    \"\e[0m) + Long.toString(m)\n\e[31m\e[31m   |\e[0m                           \
    \                   ^^\e[0m\n\e[31m   |\e[0m                                 \
    \       expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp35p9uhkd.scala:20:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mret\e[0m = (Math.round(avg).toString\
    \ + \e[33mif\e[0m (avg == \e[31m1\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m \e[31m\"\
    \"\e[0m) + Long.toString(m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m       too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m\
    \ in \e[33mobject\e[0m \e[35mLong\e[0m: (): String\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp35p9uhkd.scala:21:14 --------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        Right(ret)\n\e[31m\e[31m   |\e[0m              ^^^\e[0m\n\
    \e[31m   |\e[0m              Found:    (ret : String)\n\e[31m   |\e[0m       \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val l = n - m\n        if (l < 0)\n            Left(s\"$n\
    \ is greater than $m\")\n        else\n            Right(math.ceil(l / 2).toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp70weo2qf.scala:25)\n\tat Problem.main(tmp70weo2qf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum : Long = 0\n        var counter : Int = 0\n     \
    \   for(i <- n until m){\n            sum += i\n            counter += 1\n   \
    \     }\n        val avg = sum / counter\n        val s = Long.toString(avg)\n\
    \        val b = s.split(\"l\")\n        if(b.length == 1 && b(0).toInt == 0)\n\
    \            Right(-1)\n        else\n            Left(s\"0b$s\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmu6w36p4.scala:25:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = Long.toString(avg)\n\
    \e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e[31m   |\e[0m \
    \      too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mobject\e\
    [0m \e[35mLong\e[0m: (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = (n + m) / 2\n        val bin = BigInt(avg).toBinaryString\n\
    \        val l = bin.indexOf('1')\n        val r = bin.lastIndexOf('1')\n    \
    \    val ans = if (l > r)\n            Right(bin.substring(0, l))\n        else\n\
    \            Left(\"-1l\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopdgplma.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = BigInt(avg).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value toBinaryString is not a member of BigInt\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpopdgplma.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Either[String, Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if(n>m)\
    \ Right(-1l) else Right(n.toBinaryString+m.toBinaryString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_vvgb0cm.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp_vvgb0cm.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = 0l\n        val maxM = m % 2\n        val count\
    \ = new mutable.HashSet[Long]()\n\n        for(i <- n to maxM by -1){\n      \
    \      sum+= i\n            count.add(i)\n        }\n\n        if(sum > 0){\n\
    \            val rounded = math.round(sum/sum.toDouble).toBinaryString\n     \
    \       val sign = if (n>m) 1 else -1\n            if(rounded.length == 1) Right(\"\
    0b\"+rounded+\"0\")\n            else if(rounded.length == 2) Right(\"0b\"+rounded)\n\
    \            else Left(s\"The sum must be greater than 0 and is ${sum}.\")\n \
    \       }\n        else Left(s\"The sum must be greater than 0 and is ${sum}.\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc2pwn5jd.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc2pwn5jd.scala:23:15\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            sum+= i\n\e[31m\e\
    [31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc2pwn5jd.scala:30:42 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[33mif\e[0m(rounded.length == \e[31m1\e[0m) Right(\e[31m\"\
    0b\"\e[0m+rounded+\e[31m\"0\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Found:    String\n\e[31m   |\e[0m                \
    \                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpc2pwn5jd.scala:31:47 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(rounded.length ==\
    \ \e[31m2\e[0m) Right(\e[31m\"0b\"\e[0m+rounded)\n\e[31m\e[31m   |\e[0m      \
    \                                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                              Found:    String\n\e[31m   |\e\
    [0m                                               Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n > m) {\n            Left(-1)\n        } else {\n  \
    \          val n = math.min(m, math.max(0,n))\n            val r = n.toBinaryString\n\
    \            Right(n.toInt*(2l) + r.length*r)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbj_9gqnm.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbj_9gqnm.scala:21:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mn\e[0m = math.min(m, math.max(\e[31m0\e[0m,n))\n\e[31m\e[31m   |\e[0m\
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                 Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // TODO: Complete this function\n        val result = 0\n\
    \        var i = (n - 1)\n        var j = m\n        while (i > 0) {\n       \
    \     result += i\n            i -= 1\n        }\n        while (j > 0) {\n  \
    \          result += j\n            j -= 1\n        }\n        \n        val num\
    \ = math.round(result.toDouble).toBinaryString\n        if (num.length == 1) {\n\
    \            Right(num)\n        } else {\n            Left(num)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfmkp1pgr.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            result += i\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfmkp1pgr.scala:27:19\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            result += j\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean result.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpfmkp1pgr.scala:33:18 --------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m            Right(num)\n\e[31m\e[31m   |\e[0m                 \
    \ ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (num : String)\n\e[31m\
    \   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n < m) {\n            Right(-1)\n        } else {\n  \
    \          val sum = n.toLong + m.toLong\n            val avg = sum / 2\n    \
    \        val numBits = math.ceil(math.log2(sum)).toInt\n            if(numBits\
    \ < 6) {\n                // Convert to binary\n                var bin = \"\"\
    \n                for(i <- 0 until numBits) {\n                    bin += if(sum\
    \ & (1l << i) != 0) \"1\" else \"0\"\n                }\n                Right(bin)\n\
    \            } else {\n                Right(avg.toBinary)\n            }\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjyvvdn_e.scala:28:27 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    bin += \e[33mif\e[0m(sum & (\e[31m1l\e\
    [0m << i) != \e[31m0\e[0m) \e[31m\"1\"\e[0m \e[33melse\e[0m \e[31m\"0\"\e[0m\n\
    \e[31m\e[31m   |\e[0m                           ^^\e[0m\n\e[31m   |\e[0m     \
    \                      expression expected but \e[31mif\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjyvvdn_e.scala:23:41 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mnumBits\e[0m = math.ceil(math.log2(sum)).toInt\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value log2 is not a member of math\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjyvvdn_e.scala:30:22 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                Right(bin)\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                      Found:    (bin\
    \ : String)\n\e[31m   |\e[0m                      Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjyvvdn_e.scala:32:26 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                Right(avg.toBinary)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    value toBinary is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n >= m) Right(-1l)\n        else {\n            val m1\
    \ = m + 1 // n must be < m\n            val sum = n until m1 // n through m\n\
    \            val binary = sum.toArray.mkString(\"\").reverse.dropRight(1) + sum.toArray.mkString(\"\
    \").reverse\n            Right(scala.util.Right(scala.util.Success(math.round(math.pow(2,binary.length\
    \ - 1) * math.pow(10, math.ceil(math.log10(m) - math.floor(math.log10(m))) + math.ceil(math.log10(m)).toLong))))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpae1adnmt.scala:24:8 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpae1adnmt.scala:23:34 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            Right(scala.util.Right(scala.util.Success(math.round(math.pow(\e\
    [31m2\e[0m,binary.length - \e[31m1\e[0m) * math.pow(\e[31m10\e[0m, math.ceil(math.log10(m)\
    \ - math.floor(math.log10(m))) + math.ceil(math.log10(m)).toLong))))\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Right[Nothing, scala.util.Success[Long]]\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nM : mutable.MutableList[Long] = n to m by -1\n     \
    \   var sum = 0\n        var count = 0\n        nM.foreach{x => sum += x; count\
    \ += 1}\n        if ((count-1)%2 == 0) Left(format(sum/count).padLeft(4, \"0\"\
    )) else if (n>m) Right(-1)\n        else Right(format(sum/count).padLeft(4, \"\
    0\"))\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7kq8wb6.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnM\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = n to m by -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m              \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7kq8wb6.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m ((count-\e[31m1\e[0m)%\e[31m2\e\
    [0m == \e[31m0\e[0m) Left(format(sum/count).padLeft(\e[31m4\e[0m, \e[31m\"0\"\e\
    [0m)) \e[33melse\e[0m \e[33mif\e[0m (n>m) Right(-\e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                   ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                              Not found: format\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt7kq8wb6.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m Right(format(sum/count).padLeft(\e\
    [31m4\e[0m, \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: format\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n > m) {\n            Left(-1)\n        } else {\n   \
    \         val n = n - 1\n            val r = n % 2\n            val k = m + 1\
    \ - n\n            val m1 = m - k\n            val m2 = m + 1 - k\n          \
    \  val d1 = m1 - m\n            val d2 = m2 - m\n            val l = Math.min(n,\
    \ m2)\n            val d = Math.min(d1, d2)\n            val a = (n * d) / (k\
    \ + d)\n            val m = (l - a) / d\n            Right(m)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphsxwc9a0.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphsxwc9a0.scala:21:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mn\e[0m = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \ ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mn\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphsxwc9a0.scala:25:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mm2\e[0m = m + \e[31m1\e[0m - k\n\e[31m\e[31m   |\e[0m              \
    \       ^\e[0m\n\e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m\
    \ \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var n1 = n.toInt\n        var m1 = m.toInt\n        if ((n1\
    \ > m1) && (n1 < 0)) return Left(s\"$n is too large\")\n        if ((m1 > n1)\
    \ && (m1 < 0)) return Right(-1)\n        val binary = if (n1 > m1) \"0b\"+(n1-m1).getBinary()\
    \ else\n            if (m1 < n1) \"0b\"+m1.getBinary() else\n            if (m1\
    \ < n1) \"0b\"+(n1-m1).getBinary() else \"0b\"+(m1-l).getBinary()\n        Right(binary.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpto7npyz5.scala:22:47 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mif\e\
    [0m (n1 > m1) \e[31m\"0b\"\e[0m+(n1-m1).getBinary() \e[33melse\e[0m\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value getBinary is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpto7npyz5.scala:23:33\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (m1 < n1) \e[31m\"0b\"\e[0m+m1.getBinary() \e[33melse\e[0m\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                    value getBinary is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpto7npyz5.scala:24:38 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (m1 < n1) \e[31m\"0b\"\e[0m+(n1-m1).getBinary()\
    \ \e[33melse\e[0m \e[31m\"0b\"\e[0m+(m1-l).getBinary()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       value getBinary is not a member of Int\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpto7npyz5.scala:24:64 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (m1 < n1) \e[31m\"0b\"\e[0m+(n1-m1).getBinary()\
    \ \e[33melse\e[0m \e[31m\"0b\"\e[0m+(m1-l).getBinary()\n\e[31m\e[31m   |\e[0m\
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                                            Not found:\
    \ l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpto7npyz5.scala:25:21\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        Right(binary.reverse)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \        Found:    String\n\e[31m   |\e[0m              Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n >= m) {\n            Left(-1)\n        }\n        else\
    \ {\n            val list = Vector.fill(m){ n + i }.takeWhile(_ < m).reverse\n\
    \            val sum = list.reduceLeft(_ + _)\n            if (sum > m) {\n  \
    \              Left(-1)\n            }\n            else if (sum < n) {\n    \
    \            Right(sum.toBinaryString)\n            }\n            else {\n  \
    \              Right(sum.toBinaryString.padToExactLength(m.toBinaryString.length))\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbsblj3o6.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbsblj3o6.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36mlist\e[0m = Vector.fill(m){ n + i }.takeWhile(_ < m).reverse\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          Found:    (m : Long)\n\e[31m   |\e[0m             \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbsblj3o6.scala:22:43 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = Vector.fill(m){\
    \ n + i }.takeWhile(_ < m).reverse\n\e[31m\e[31m   |\e[0m                    \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \             Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbsblj3o6.scala:22:59 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mval\e[0m \e[36mlist\e[0m = Vector.fill(m){ n + i }.takeWhile(_\
    \ < m).reverse\n\e[31m\e[31m   |\e[0m                                        \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  impo"
  stdout: ''
  timestamp: 1660009643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = (n + m) / 2\n        val result = (sum.toString\
    \ + sum.toInt).dropRight(2)\n        result.length == 2 || Left(s\"$sum did not\
    \ have an even number\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqdz5oko2.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result.length == \e[31m2\e\
    [0m || Left(\e[31ms\"\e[0m$sum\e[31m did not have an even number\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Left[String, Nothing]\n\
    \e[31m   |\e[0m                              Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n>m) return Left(s\"$n is greater than $m\")\n       \
    \ var sum : Long = 0L\n        for(i <- n..m) sum += i\n        val avg = sum\
    \ / (m+n)\n        val bin = (math.round(avg)).asBinary.toLong\n        val result\
    \ = Right(bin.toHexString)\n        if(bin>0) result else Left(s\"$n must be at\
    \ least $m\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3acw090n.scala:20:19 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- n..m) sum += i\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   an identifier\
    \ expected, but '.' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3acw090n.scala:22:36\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbin\e[0m = (math.round(avg)).asBinary.toLong\n\e[31m\e[31m   |\e[0m      \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \  value asBinary is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nn = math.min(n.toInt,m.toInt)\n        if(nn.toInt >=\
    \ nn){\n            Right(nn.toBinary.reverse)\n        }\n        else{\n   \
    \         Left(-1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp46es5yro.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Right(nn.toBinary.reverse)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \  value toBinary is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp46es5yro.scala:23:17 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \  ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e[0m : Int)\n\e\
    [31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val leftSide = n.toString + m.toString.padLeft((m.toString.length\
    \ - n.toString.length))\n        val rightSide = n.toString.padRight((m.toString.length\
    \ - n.toString.length)) + m.toString.padLeft((m.toString.length - n.toString.length))\n\
    \        val binary = rightSide.split(\"\").map(_.asDigit.toInt).sum / 2\n   \
    \     val left = leftSide + binary.toString\n        val right = binary.toString\n\
    \        if (left.length >=  left.toString.length)\n            return Right(left)\n\
    \        else\n            return Left(\"-1\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplq27bvhd.scala:18:47 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mleftSide\e[0m = n.toString\
    \ + m.toString.padLeft((m.toString.length - n.toString.length))\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value padLeft is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplq27bvhd.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrightSide\e[0m = n.toString.padRight((m.toString.length\
    \ - n.toString.length)) + m.toString.padLeft((m.toString.length - n.toString.length))\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value padRight is not a member of String\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplq27bvhd.scala:24:25 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mreturn\e[0m Right(left)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (left : String)\n\e[31m   |\e[0m                         Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = n.toDouble/(m.toDouble+1)\n        if (avg > 1.toDouble)\
    \ Left(avg.toHexString)\n        else if (avg < 0.toDouble) Right(-1)\n      \
    \  else Right(avg.toBinaryString)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17ohyxoi.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (avg > \e[31m1\e[0m.toDouble) Left(avg.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toHexString is not a member of Double - did you mean avg.toString?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17ohyxoi.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(avg.toBinaryString)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value toBinaryString is not a member of Double\n2 errors found\n"
  stdout: ''
  timestamp: 1660009643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n > m) {\n            Left(-1)\n        } else {\n  \
    \          val sum = n + (m >>> 1)\n            val avg = sum / 2\n          \
    \  val bits = toBinary(avg)\n            Right(bits.reverse)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8yyc8qbb.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8yyc8qbb.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mbits\e[0m = toBinary(avg)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: toBinary\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n + m;\n        val avg = sum / 2\n        if (sum\
    \ > 0) {\n            if (n == m)\n                return Right(avg)\n       \
    \     else {\n                val bin = Integer.toBinaryString((avg + n | 1l <<\
    \ 48) - avg - n | 1l << 48)\n                val bin2 = bin.substring(bin.length\
    \ - 4)\n                return Right(bin2)\n            }\n        }\n       \
    \ else {\n            return Right(-1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0ckf27x.scala:24:49\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m\
    \ \e[36mbin\e[0m = Integer.toBinaryString((avg + n | \e[31m1l\e[0m << \e[31m48\e\
    [0m) - avg - n | \e[31m1l\e[0m << \e[31m48\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  Long\n\e[31m   |\e[0m                                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0ckf27x.scala:26:29\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mreturn\e\
    [0m Right(bin2)\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\
    \e[31m   |\e[0m                             Found:    (bin2 : String)\n\e[31m\
    \   |\e[0m                             Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n >= m) Right(-1l)\n        var sum: Long = n to m by\
    \ -1\n        val countOfAll = sum.size\n        val countOfEvens = sum.filter(x\
    \ => (x % 2 == 0)).size\n        var evenSum = sum.filter(x => x % 2 == 0).sum\n\
    \        var oddSum = sum.filter(x => x % 2 != 0).sum\n\n        if(countOfAll\
    \ > countOfEvens) {\n            evenSum = evenSum.dropRight(countOfAll)\n   \
    \     } else {\n            oddSum = oddSum.dropRight(countOfEvens)\n        }\n\
    \        Right((evenSum.toString.reverse.padTo(32, '0') + oddSum.toString.reverse.padTo(32,\
    \ '0')).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvov2o2_m.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36msum\e\
    [0m: \e[35mLong\e[0m = n to m by -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:   \
    \ scala.collection.immutable.NumericRange[Long]\n\e[31m   |\e[0m             \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvov2o2_m.scala:20:29\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mcountOfAll\e[0m = sum.size\n\e[31m\e[31m   |\e[0m                        \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value size is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvov2o2_m.scala:21:31\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mcountOfEvens\e[0m = sum.filter(\e[36mx\e[0m => (x % \e[31m2\e[0m == \e[31m0\e\
    [0m)).size\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           value filter is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvov2o2_m.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mevenSum\e[0m = sum.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ filter is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvov2o2_m.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e\
    [36moddSum\e[0m = sum.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m).sum\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  value filter is not a member of Long\n5 errors found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg: Double = (n.toDouble + m.toDouble)/2\n        val\
    \ bits: Double = (avg.toBinaryString).dropRight(1)\n        // Return error if\
    \ integer overflow\n        if(bits.indexOf(\"1\") < 0)\n            Left(\"Overflow\
    \ error\")\n        else\n            Right(bits.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwok_7c8o.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbits\e[0m: \e[35mDouble\e\
    [0m = (avg.toBinaryString).dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              value toBinaryString is not a member of Double\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwok_7c8o.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(bits.indexOf(\e[31m\"1\"\e[0m)\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m           value indexOf is not a member of Double\n2 errors found\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n == 0l) Right(\"0b0\")\n        if (m == 0l) Right(\"\
    0b0\")\n        if (n < m) Left(s\"$n < $m\")\n        if (n == m) Right(s\"$n\
    \ -> $m\")\n        val count = (m until (n - 1l)).length\n        if (count ==\
    \ 0l) Right(s\"$n -> $m\")\n        val sum = n until (m - 1l)\n        val total\
    \ = sum.foldLeft((0l, 0l))((sums, x) => sums + x)\n        val average = total\
    \ / count\n        Right(s\"$n -> ${(scala.math.round(average.doubleToLong * 2l)\
    \ * 2l).toBinaryString}\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2zrrmnnl.scala:25:61 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mtotal\e[0m = sum.foldLeft((\e\
    [31m0l\e[0m, \e[31m0l\e[0m))((\e[36msums\e[0m, \e[36mx\e[0m) => sums + x)\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (Long, Long), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2zrrmnnl.scala:26:28 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36maverage\e[0m = total / count\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ / is not a member of (Long, Long), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2zrrmnnl.scala:27:14 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        Right(\e[31ms\"\e[0m$n\e[31m -> \e[0m${(scala.math.round(average.doubleToLong\
    \ * \e[31m2l\e[0m) * \e[31m2l\e[0m).toBinaryString}\e[31m\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    String\n\e[31m   |\e[0m          \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.max(n, m)\n        val m = math.min(m, n)\n\
    \        if(n <= m){\n            Right(math.round(n + m/2))\n        } else {\n\
    \            Left(-1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp36vzj7cl.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(n, m)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp36vzj7cl.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(m, n)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp36vzj7cl.scala:19:28 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(m, n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp36vzj7cl.scala:23:17\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = (n.toDouble + m.toDouble) / 2\n        if (sum\
    \ > 0) Right(sum) else Left(\"Input must be greater than m\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd1wbyjp6.scala:19:27\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (sum >\
    \ \e[31m0\e[0m) Right(sum) \e[33melse\e[0m Left(\e[31m\"Input must be greater\
    \ than m\"\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\e\
    [31m   |\e[0m                           Found:    (sum : Double)\n\e[31m   |\e\
    [0m                           Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val result = new mutable.HashSet[Long]()\n        if(n >\
    \ m) return Right(-1)\n        for(i <- n until m) result += i\n        val avg\
    \ = result.sum / result.size\n        if(avg < 0L) return Right(-1)\n        val\
    \ ones = BigDecimal(avg).divide(BigDecimal(2l), 2, BigDecimal.RoundingMode.HALF_DOWN)\n\
    \        Right(ones.toBinaryString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_fhir8j.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var sum = n.toLong + m.toLong\n        var avg = sum / 2\n\
    \        if (sum > 0) {\n            avg = Math.round(avg)\n            if (avg\
    \ >= 1) {\n                avg /= 2\n                sum += avg\n            }\
    \ else {\n                sum *= 2\n                avg -= avg\n            }\n\
    \        }\n        val binary = sum.toString(2)\n        Right(binary.substring(0,\
    \ binary.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps9avcii9.scala:30:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = sum.toString(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e\
    [31m   |\e[0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e\
    [0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      val n = n.toBinaryString\n      val m = m.toBinaryString\n\
    \      val nPos = n.length - 1\n      val mPos = m.length - 1\n      val n = n.toCharArray.mkString.toLong\n\
    \      val m = m.toCharArray.mkString.toLong\n      if (n < m) Left(s\"$n is greater\
    \ than $m\")\n      else {\n        var total = 0\n        var i = 0\n       \
    \ var j = 0\n        while (i < nPos && j < mPos) {\n          total = total +\
    \ n(i) + m(j)\n          i = i + 1\n          j = j + 1\n        }\n        if\
    \ (total == 0) Left(s\"$n is greater than $m\")\n        else {\n          val\
    \ bits = BigDecimal(total).divide(BigDecimal(2).pow(mPos)).toInt.toBinaryString\n\
    \          if (bits.size == 0) Right(-1)\n          else {\n            Right(s\"\
    ${bits.reverse}${nPos - i}\".toLong)\n          }\n        }\n      }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjsc_bfp.scala:22:10 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      \e[33mval\e[0m \e[36mn\e[0m = n.toCharArray.mkString.toLong\n\
    \e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjsc_bfp.scala:23:10\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m      \e[33mval\e[0m \e\
    [36mm\e[0m = m.toCharArray.mkString.toLong\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpkjsc_bfp.scala:18:14 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m      \e[33mval\e[0m \e[36mn\e[0m = n.toBinaryString\n\e[31m\e[31m   |\e\
    [0m              ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpkjsc_bfp.scala:19:14 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m      \e[33mval\e[0m \e[36mm\e[0m = m.toBinaryString\n\e[31m\e[31m   |\e\
    [0m              ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e\
    [0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkjsc_bfp.scala:36:39 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m          \e[33mval\e[0m \e[36mbits\e[0m = BigDecimal(total).divide(BigDecimal(\e\
    [31m2\e[0m).pow(mPos)).toInt.toBinaryString\n\e[31m\e[31m   |\e[0m           \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \ value divide is not a member of BigDecimal\n5 errors found\n"
  stdout: ''
  timestamp: 1660009646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toInt + m.toInt\n        val diff = m - sum\n\
    \        if(diff < 0) Left(s\"$sum can't be calculated.\")\n        else if(diff\
    \ == 0) Left(s\"$sum is 0\")\n        else Right(roundToNearest(sum, diff).toBinary)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8j_4j69i.scala:22:19 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m Right(roundToNearest(sum, diff).toBinary)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                  Not found: roundToNearest\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (m > n) {\n            return Left(-1)\n        } else\
    \ if (m == n) {\n            return Right(m)\n        } else {\n            //\
    \ return -1\n            val sum = n to m by -1\n            var sum2 = sum.map(i\
    \ => math.pow(2, i)).toArray\n            val len = sum2.length\n            val\
    \ mask = (1l<<len)-1\n            var result = 0\n            val nums = 0 until\
    \ len\n            for(i <- 0 until len) {\n                if (sum2(i) & mask\
    \ > 0) {\n                    result += (math.pow(2, i) * nums(i))\n         \
    \           mask -= math.pow(2, i)\n                }\n            }\n       \
    \     val resultStr = result.toString\n            resultStr.charAt(0)\n     \
    \       if (resultStr.charAt(0) == '0') Right(result)\n            else Left(resultStr)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7jpind2.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mreturn\e[0m\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpe7jpind2.scala:31:28 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mif\e[0m (sum2(i) & mask > \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value & is not a member of Double\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpe7jpind2.scala:32:27 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                    result += (math.pow(\e[31m2\e[0m, i) *\
    \ nums(i))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe7jpind2.scala:33:25 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    mask -= math.pow(\e[31m2\e[0m, i)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         value -= is not a member of Long - did you mean mask.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var n = n\n        var m = m\n        if(n > m) \n      \
    \      return Left(-1l)\n        else if(n < m)\n            return Right(m+n)\n\
    \        else\n            return Right((n+m)/2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1xt1ju34.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp1xt1ju34.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = m\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvariable\e\
    [0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1xt1ju34.scala:21:24 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33mreturn\e[0m Left(-\e[31m1l\e[0m)\n\e[31m\e[31m   |\e\
    [0m                        ^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (\e[31m-1L\e[0m : Long)\n\e[31m   |\e[0m                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val l = n.toInt\n        val r = m.toInt\n        if(n<m)\
    \ Left(-1)\n        else Right(l + r).roundToBin.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tdq_rem.scala:20:21\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n<m) Left(-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m       \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3tdq_rem.scala:21:26 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33melse\e[0m Right(l + r).roundToBin.toLong\n\e[31m\e[31m   |\e\
    [0m             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ roundToBin is not a member of Right[Nothing, Int]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val count = n to m by -1\n        val sum = mutable.Map[Long,\
    \ Long]()\n        for (i <- 0 until count.length) {\n            val a = count(i)\n\
    \            val b = count(i + 1)\n            val c = count(i + 2)\n        \
    \    val d = count(i + 3)\n            val e = count(i + 4)\n            val f\
    \ = count(i + 5)\n            val g = count(i + 6)\n            val h = count(i\
    \ + 7)\n            val i = count(i + 8)\n            val j = count(i + 9)\n \
    \           val k = count(i + 10)\n            val l = count(i + 11)\n       \
    \     val m = count(i + 12)\n            val n = count(i + 13)\n            val\
    \ o = count(i + 14)\n            val p = count(i + 15)\n            val q = count(i\
    \ + 16)\n            val r = count(i + 17)\n            val s = count(i + 18)\n\
    \            val t = count(i + 19)\n            val u = count(i + 20)\n      \
    \      val v = count(i + 21)\n            val w = count(i + 22)\n            val\
    \ x = count(i + 23)\n            val y = count(i + 24)\n            val z = count(i\
    \ + 25)\n            val a = count(i + 26)\n            val b = count(i + 27)\n\
    \            val c = count(i + 28)\n            val d = count(i + 29)\n      \
    \      val e = count(i + 30)\n            val f = count(i + 31)\n            val\
    \ g = count(i + 32)\n            val h = count(i + 33)\n            val i = count(i\
    \ + 34)\n            val j = count(i + 35)\n            val k = count(i + 36)\n\
    \            val l = count(i + 37)\n            val m = count(i + 38)\n      \
    \      val n = count(i + 39)\n            val o = count(i + 40)\n            val\
    \ p = count(i + 41)\n            val q = count(i + 42)\n            val r = count(i\
    \ + 43)\n            val s = count(i + 44)\n            val t = count(i + 45)\n\
    \            val u = count(i + 46)\n            val v = count(i + 47)\n      \
    \      val w = count(i + 48)\n            val x = count(i + 49)\n            val\
    \ y = count(i + 50)\n            val z = count(i + 51)\n            val a = count(i\
    \ + 52)\n            val b = count(i + 53)\n            val c = count(i + 54)\n\
    \            val d = count(i + 55)\n            val e = count(i + 56)\n      \
    \      val f = count(i + 57)\n            val g = count(i + 58)\n            val\
    \ h = count(i + 59)\n            val i = count(i + 60)\n            val j = count(i\
    \ + 61)\n            val k = count(i + 62)\n            val l = count(i + 63)\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpkq9c97zm.scala:85:15 ---------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkq9c97zm.scala:103:0 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkq9c97zm.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msum\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkq9c97zm.scala:47:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m            \e[33mval\e\
    [0m \e[36ma\e[0m = count(i + \e[31m26\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined as \e[33mvalue\e\
    [0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpkq9c97zm.scala:48:16 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e[0m \e[36mb\e[0m = count(i + \e\
    [31m27\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mb is already defined as \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkq9c97zm.scala:49:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m49 |\e[0m            \e[33mval\e\
    [0m \e[36mc\e[0m = count(i + \e[31m28\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined as \e[33mvalue\e\
    [0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be"
  stdout: ''
  timestamp: 1660009656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n == 0 || m == 0) {\n            Left(\"\")\n       \
    \ } else if (n == m) {\n            Right(n)\n        } else if (n < m) {\n  \
    \          Left(s\"$n is greater than $m\")\n        } else {\n            val\
    \ leftSum = n + m;\n            val rightSum = n - m;\n            val numBits\
    \ = (leftSum + rightSum).bitLength;\n            val leftBin = leftSum >> numBits;\n\
    \            val rightBin = rightSum >> numBits;\n            val sum = leftBin\
    \ + rightBin;\n            val rounded = (sum >>> 1) + (sum & 1l);\n         \
    \   Right(rounded)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph7h6oru_.scala:27:47 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mnumBits\e[0m = (leftSum\
    \ + rightSum).bitLength;\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue bitLength is not a member of Long, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n >= m) {\n            return Left(-1)\n        }\n \
    \       val total = n.toInt\n        val length = m.toInt\n        if (total +\
    \ length < 2L * length) {\n            Left(-1)\n        } else {\n          \
    \  val remainder = total % length\n            val quotient = total / length\n\
    \            val remainderString = if (remainder > 0) s\"$remainder\" else \"\
    0\"\n            val quotientString = if (quotient < 2L) s\"$quotient\" else \"\
    0\"\n            Right(s\"${(2L << length) - remainderString} $quotientString\"\
    )\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mbgofky.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mreturn\e[0m\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (\e[31m-1\e[0m : Int)\n\e[31m \
    \  |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7mbgofky.scala:24:17 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmp7mbgofky.scala:30:37 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            Right(\e[31ms\"\e[0m${(\e[31m2L\e[0m << length)\
    \ - remainderString}\e[31m \e[0m$quotientString\e[31m\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e\
    [0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int):\
    \ Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e\
    [31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((remainderString\
    \ : String))\n3 errors found\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var ans : Long = 0\n        var sum : Long = 0\n        var\
    \ n : Long = n.toLong\n        var m : Long = m.toLong\n        var i : Long =\
    \ 1\n\n        while (i <= m && i <= n){\n            sum = sum + i\n        \
    \    i = i + 1\n        }\n\n        if (i == n){\n            if (sum > m){\n\
    \                return Right(-1)\n            }else{\n                ans = sum/(n-m)\n\
    \                ans = ans.toBinaryString\n                return Right(ans)\n\
    \            }\n        }else if (i == m){\n            if (sum > n){\n      \
    \          return Right(-1)\n            }else{\n                ans = sum/(n-m)\n\
    \                ans = ans.toBinaryString\n                return Right(ans)\n\
    \            }\n        }else{\n            if (sum > n){\n                return\
    \ Right(-1)\n            }else{\n                ans = sum/(n-m)\n           \
    \     ans = ans.toBinaryString\n                return Right(ans)\n          \
    \  }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8gzga2f.scala:34:26\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m                ans = ans.toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    String\n\e[31m   |\e[0m                   \
    \   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8gzga2f.scala:42:26\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m                ans = ans.toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    String\n\e[31m   |\e[0m                   \
    \   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8gzga2f.scala:50:26\
    \ --------------------\e[0m\e[0m\n\e[31m50 |\e[0m                ans = ans.toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    String\n\e[31m   |\e[0m                   \
    \   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n>m) Left(-1)\n        val count = n to m by -1\n   \
    \     val avg = count.reduceLeft(_+_)/count.size\n        val binary = avg.toBinaryString\n\
    \        if (binary.length == 0)\n            Right(avg)\n        else if (binary(binary.length-1)=='1')\n\
    \            Right(-1)\n        else\n            Left(binary.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.roundedAvg(tmp1wbwqiyw.scala:20)\n\
    \tat Problem$.main(tmp1wbwqiyw.scala:30)\n\tat Problem.main(tmp1wbwqiyw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (m > n)\n            Right(-1)\n        else {\n     \
    \       val sum = n to m by -1\n            val sum = sum.filter(x => x == x.toBinaryString).sum\n\
    \            val decimal = new BigDecimal(sum)\n            val decimal2 = decimal.setScale(2,\
    \ BigDecimal.RoundingMode.HALF_UP)\n            val binary = decimal2.toBinaryString\n\
    \            Right(binary)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6e1w3thi.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = sum.filter(\e\
    [36mx\e[0m => x == x.toBinaryString).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6e1w3thi.scala:23:41 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mval\e[0m \e[36mdecimal\e[0m = \e[33mnew\e[0m \e[35mBigDecimal\e\
    [0m(sum)\n\e[31m\e[31m   |\e[0m                                         ^^^\e\
    [0m\n\e[31m   |\e[0m         Found:    (sum : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: java.math.BigDecimal\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6e1w3thi.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = decimal2.toBinaryString\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      value toBinaryString is not a member of BigDecimal\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // Write your solution here\n        val sum = mutable.ListBuffer[Long]()\n\
    \        for (i <- n until m){\n            sum.append(i)\n        }\n       \
    \ val average = sum.sum / sum.size\n        val finalValue = if (average == 0)\
    \ Right(average) else Left(\"No numbers in range\")\n        finalValue\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpets2t6d7.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n == 0 || m == 0) Right(\"\")\n        else {\n     \
    \       val n = Math.max(n, m)\n            val s = n.toString.padLeft(m, \"0\"\
    ) + m.toString.padLeft(n, \"0\")\n            Right(s) match {\n            case\
    \ Right(s) => Right(BigInt(s).divide(BigInt(2) * BigInt(m).toLong * BigInt(n).toLong).toInt)\n\
    \            case Left(err) => Left(err)\n            }\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwp3e_g8i.scala:18:36\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n == \e\
    [31m0\e[0m || m == \e[31m0\e[0m) Right(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                    ^^\e[0m\n\e[31m   |\e[0m                \
    \                    Found:    (\e[32m\"\"\e[0m : String)\n\e[31m   |\e[0m   \
    \                                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpwp3e_g8i.scala:20:29 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = Math.max(n,\
    \ m)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpwp3e_g8i.scala:23:35 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m Right(s) => Right(BigInt(s).divide(BigInt(\e\
    [31m2\e[0m) * BigInt(m).toLong * BigInt(n).toLong).toInt)\n\e[31m\e[31m   |\e\
    [0m                                   ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e\
    [0m \e[35mBigInt\e[0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\
    \e[31m   |\e[0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String):\
    \ BigInt\n\e[31m   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m\
    \   |\e[0m (bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e\
    [31m   |\e[0m (signum: Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m (x:\
    \ Array[Byte]): BigInt\n\e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m (i:\
    \ Int): BigInt\n\e[31m   |\e[0mmatch arguments ((s : Nothing))\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwp3e_g8i.scala:24:35 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m Left(err) => Left(err)\n\e\
    [31m\e[31m   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m\
    \                             "
  stdout: ''
  timestamp: 1660009655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = (n.toInt + m.toInt) / 2\n        val binary = sum.toString(2)\n\
    \        if (binary.length < 6) -1\n        else binary.reverse.tail.foldLeft(0)((acc,\
    \ x) => acc + 2l ^ x)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpenvvlxio.scala:19:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = sum.toString(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e\
    [31m   |\e[0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e\
    [0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpenvvlxio.scala:20:31 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mif\e[0m (binary.length < \e[31m6\e[0m) -\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e\
    [0m                               Required: Either[String, Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n == 0 || m == 0)\n            return Left(\"\")\n  \
    \      val x = math.max(n, m)\n        val y = math.min(n, m)\n        val binary\
    \ = x.toBinary.padTo(y, \"0\")\n        val binStr = binary.mkString\n       \
    \ val binSum = binStr.length\n\n        if (binSum == 0)\n            return Right(\"\
    \")\n        val x = binStr.charAt(binSum - 1)\n        if (x != '1')\n      \
    \      return Left(binStr)\n        val bin = binStr.substring(binSum - 2)\n \
    \       val bin1 = bin.charAt(0).toLong\n        val bin2 = bin.charAt(1).toLong\n\
    \        val binSum = bin1 + bin2\n        if (binSum == x)\n            return\
    \ Right(bin)\n        else\n            return Left(binStr)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq62km6sa.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = binStr.charAt(binSum\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq62km6sa.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mbinSum\e[0m = bin1 + bin2\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbinSum is already\
    \ defined as \e[33mvalue\e[0m \e[35mbinSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq62km6sa.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbinary\e[0m = x.toBinary.padTo(y, \e[31m\"0\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value\
    \ toBinary is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpq62km6sa.scala:27:25 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \            \e[33mreturn\e[0m Right(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                        ^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (\e[32m\"\"\e[0m : String)\n\e[31m   |\e[0m                         Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(m == -1)\n            Left(-1)\n        if(m == 1L)\n\
    \            Right(n.toBinaryString)\n        if(m > n)\n            Left(-1)\n\
    \        val result = new mutable.ListBuffer[String]()\n        var remaining\
    \ = m\n        while(remaining > 1L) {\n            result.push(remaining.toBinaryString)\n\
    \            remaining -= 1L\n        }\n        result.push(remaining.toBinaryString)\n\
    \        Right(result.mkString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp32nssc6d.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n <= m)\n            Right(Long(n))\n        else {\n\
    \            val n = n.toBinaryString\n            val m = m.toBinaryString\n\
    \            val l = m.length - n.length\n            val ans = (1L + n.charAt(0)/2).ceil.pow(2).*(1L+n.charAt(l)/2).ceil\n\
    \            Right(Long(ans))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpo1w9m9ii.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Right(Long(n))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                  \e[33mobject\e[0m\
    \ \e[35mLong\e[0m in \e[33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo1w9m9ii.scala:21:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mn\e[0m = n.toBinaryString\n\e[31m\e[31m   |\e[0m                   \
    \ ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mn\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo1w9m9ii.scala:22:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mm\e[0m = m.toBinaryString\n\e[31m\e[31m   |\e[0m                   \
    \ ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mm\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpo1w9m9ii.scala:25:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            Right(Long(ans))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m            \
    \      \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mpackage\e[0m \e[35mscala\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val bins = mutable.Buffer[String]()\n        var i = 0\n\
    \        while(i < n) {\n            bins += Integer.toBinaryString(i)\n     \
    \       i += 1\n        }\n        i -= 1\n        val j = 0\n        while(j\
    \ < m) {\n            bins += Integer.toBinaryString(j)\n            j += 1\n\
    \        }\n        bins.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzyd3zmc5.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbins\e[0m = mutable.Buffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzyd3zmc5.scala:28:14 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            j += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean j.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n>m) Left(s\"n is greater than m\")\n        else Right(math.round(n/m)*m.toBinaryString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpe6w0h3et.scala:19:34 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m Right(math.round(n/m)*m.toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((scala.runtime.RichLong#toBinaryString\
    \ : => String))\n1 error found\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n <= m)\n        if(n > m) Left(-1)\n        else\
    \ {\n            def toBinary(x: Long) : String = x match {\n                case\
    \ 0 => \"0\"\n                case x => \"0b\" + toBinary(x / 2)\n           \
    \ }\n            val nn = toBinary(n)\n            val mm = toBinary(m)\n    \
    \        val nmm = nn + mm\n            val nmmLen = nm.length\n            val\
    \ mmLen = mm.length\n            val nnmm = nnn.length + mmLen\n            val\
    \ nnmmLen = nnmm.length\n            val maxLen = nmmLen + mmLen\n           \
    \ val nmmBin = nm.toInt * 2 \n            val mmBin = mm.toInt * 2\n         \
    \   val nnmmBin = nnmm.toInt\n            val nmmBinLen = nmmBin.length\n    \
    \        val mmBinLen = mmbBin.length\n            val nnmmBinLen = nnmmBin.length\n\
    \            val maxLenLen = maxLen + nnmmLen\n            val nmmBinLenLen =\
    \ nmmBinLen.length\n            val mmBinLenLen = mmBinLen.length\n          \
    \  val nnmmBinLenLen = nnmmBinLen.length\n            val maxLenLenLen = maxLen\
    \ + nnmmLenLen\n            val nmmBinLenLenLen = nmmBinLenLen.length\n      \
    \      val mmBinLenLenLen = mmBinLenLen.length\n            val nnmmBinLenLenLen\
    \ = nnmmBinLenLen.length\n            val nn = nm.toLong\n            val m =\
    \ m.toLong\n            val nn = n.toLong\n            val mm = mm.toLong\n  \
    \          val nmm = nnn.toLong\n            val nnmm = nnmm.toLong\n        \
    \    val nmmLen = nm.length\n            val mmLen = mm.length\n            val\
    \ nnmmLen = nnn.length\n            val maxLenLenLen = maxLen + nnmmLenLen\n \
    \           val nmmBin = nm.toLong * 2\n            val mmBin = mm.toLong * 2\n\
    \            val nnmmBin = nnmm.toLong\n            val nmmBinLen = nmmBin.length\n\
    \            val mmBinLen = mmbBin.length\n            val nnmmBinLen = nnmmBin.length\n\
    \            val maxLenLenLen = maxLen + nnmmLenLen\n            val nmmBinLenLen\
    \ = nmmBinLen.length\n            val mmBinLenLen = mmBinLen.length\n        \
    \    val nnmmBinLenLen = nnmmBin\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpae3jpq3y.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpae3jpq3y.scala:47:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m            \e[33mval\e\
    [0m \e[36mnn\e[0m = nm.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnn is already defined as \e[33mvalue\e[0m \e[35mnn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpae3jpq3y.scala:49:16 ---------------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m            \e[33mval\e[0m \e[36mnn\e[0m = n.toLong\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnn is already defined as\
    \ \e[33mvalue\e[0m \e[35mnn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpae3jpq3y.scala:50:16 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            \e[33mval\e[0m \e[36mmm\e[0m = mm.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmm is\
    \ already defined as \e[33mvalue\e[0m \e[35mmm\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpae3jpq3y.scala:51:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m51 |\e[0m            \e[33mval\e\
    [0m \e[36mnmm\e[0m = nnn.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnmm is already defined as \e[33mvalue\e[0m \e[35mnmm\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpae3jpq3y.scala:52:16 ---------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m            \e[33mval\e[0m \e[36mnnmm\e[0m = nnmm.toLong\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnnmm is already\
    \ defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1660009657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        var count = 0\n        var sum = 0.0\n        for(i <- n\
    \ to m) {\n            sum += i\n            count += 1\n        }\n        val\
    \ avg = sum / (count - 1)\n        val bin = avg.toString.reverse.charAt(0)\n\
    \        val left = Math.min(Math.max(n , 0l), Math.max(m, 0l))\n        Left(bin.rightPad\
    \ + bin.leftPad + left.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvi55bpd4.scala:27:17 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        Left(bin.rightPad + bin.leftPad + left.toString)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \    value rightPad is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660009656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toLong;\n        val m = m.toLong;\n        if\
    \ (n > m) {\n            Left(s\"$n > $m\")\n        } else {\n            val\
    \ total = math.ceil((n-m)/2).toInt;\n            val remainder = math.ceil((n-m)-total)/2;\n\
    \            Right(total + remainder.toBinary)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr9s_8ook.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong;\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpr9s_8ook.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong;\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpr9s_8ook.scala:25:36 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            Right(total + remainder.toBinary)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                         value toBinary is not a member of Double\n3 errors found\n"
  stdout: ''
  timestamp: 1660009656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val m = math.min(m, n)\n        if(n > m) {\n           \
    \ Right(-1)\n        } else if(m == n) {\n            Right(m)\n        } else\
    \ {\n            val m1 = m - math.min(m, n)\n            val m2 = m - (n - m)\n\
    \            val sum = mutable.ArrayBuffer(n + m)\n            val m1 = sum.slice(0,\
    \ n)\n            val m2 = sum.slice(n, sum.length)\n            val m3 = sum.slice(sum.length,\
    \ 0)\n            val m4 = sum.slice(0, sum.length)\n            val sum1 = m1.reduce(_\
    \ + _) / m1\n            val sum2 = m2.reduce(_ + _) / m2\n            val sum3\
    \ = m3.reduce(_ + _) / m3\n            val sum4 = m4.reduce(_ + _) / m4\n    \
    \        val sum = sum1 + sum2 + sum3 + sum4\n            val intSum = sum.toString.toInt\n\
    \            val binSum = math.pow(2,intSum).toBinaryString\n            Right(binSum)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw6dp3uzw.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(m, n)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw6dp3uzw.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mm1\e[0m = sum.slice(\e\
    [31m0\e[0m, n)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm1 is already defined as \e[33mvalue\e[0m \e[35mm1\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw6dp3uzw.scala:28:16 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = sum.slice(n, sum.length)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mm2 is already defined as \e[33mvalue\e[0m \e[35mm2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw6dp3uzw.scala:35:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e\
    [0m \e[36msum\e[0m = sum1 + sum2 + sum3 + sum4\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already defined\
    \ as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6dp3uzw.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = mutable.ArrayBuffer(n\
    \ + m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ ["
  stdout: ''
  timestamp: 1660009656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val result = scala.util.Either.Left(-1)\n        if (n >=\
    \ m) {\n            result\n        }\n        else {\n            val sum = 0L\n\
    \            val i = 0L\n            while (i < n || i < m) {\n              \
    \  if (i < n) sum += i\n                if (i < m) sum += i + 1\n            \
    \    i += 1\n            }\n            result(Long.toBinaryString(sum / 2l))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l3h9qcq.scala:18:39 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = scala.util.Either.Left(-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue Left is not a member of object scala.util.Either - did\
    \ you mean Either.wait?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l3h9qcq.scala:26:31\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e\
    [0m (i < n) sum += i\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l3h9qcq.scala:27:31\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m (i < m) sum += i + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                 value += is not a member\
    \ of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l3h9qcq.scala:28:18\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Long - did you mean i.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val min = math.min(n.toInt, m.toInt)\n        val max = math.max(n.toInt,\
    \ m.toInt)\n        var sum = 0L\n        var count = 0L\n        var sumOfBits\
    \ = 0L\n        for (x <- n until max) {\n            sum += x\n            count\
    \ += x != 0L\n            if (count > 1L) {\n                sumOfBits += sum.toInt\n\
    \                sum = 0L\n                count = 0L\n            }\n       \
    \ }\n        if (sumOfBits == sum) {\n            if (sumOfBits.toInt < max) {\n\
    \                Right((sum & 1).toString)\n            } else {\n           \
    \     Left(-1)\n            }\n        } else if (sumOfBits < sum) {\n       \
    \     Right((sumOfBits & 1).toString)\n        } else {\n            Left(-1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprlehq981.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            count += x != \e[31m0L\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprlehq981.scala:34:22 --------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m                Right((sum & \e[31m1\e[0m).toString)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \          Found:    String\n\e[31m   |\e[0m                      Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprlehq981.scala:36:21\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m                Left(-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m     \
    \                Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m            \
    \         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprlehq981.scala:39:18 --------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m            Right((sumOfBits & \e[31m1\e[0m).toString)\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              Found:    String\n\e[31m   |\e[0m                  Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprlehq981.scala:41:17\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n      val sum = (n to m).sum\n      val avg = sum / 2\n      val\
    \ left = (n to m diff 1).toList\n      val right = (m to n diff 1).toList\n  \
    \    (if (left.isEmpty) Left(s\"$avg\") else Right(avg)) match {\n        case\
    \ Right(avg) => Right(math.round(avg))\n        case Left(e) => Left(s\"${e.toBinaryString}\"\
    ) // or e.toBinaryString\n      }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp46t154sa.scala:20:30\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mleft\e\
    [0m = (n to m diff \e[31m1\e[0m).toList\n\e[31m\e[31m   |\e[0m               \
    \               ^\e[0m\n\e[31m   |\e[0m                              Found:  \
    \  (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                              Required:\
    \ scala.collection.Seq[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp46t154sa.scala:21:31 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m      \e[33mval\e[0m \e[36mright\e[0m = (m to n diff \e[31m1\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m\
    \                               Required: scala.collection.Seq[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp46t154sa.scala:24:35 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mcase\e[0m Left(e) => Left(\e[31ms\"\e[0m${e.toBinaryString}\e\
    [31m\"\e[0m) \e[34m// or e.toBinaryString\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             value toBinaryString is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val diff = m.toLong - n.toLong\n        val result: Long\
    \ = n.toLong + diff/2;\n        if(result.mod(2)==0) Right(Long.toBinaryString(result))\
    \ else Left(\"-1\");\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_6kq5ka.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(result.mod(\e[31m2\e[0m)==\e[31m0\e\
    [0m) Right(Long.toBinaryString(result)) \e[33melse\e[0m Left(\e[31m\"-1\"\e[0m);\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not\
    \ a member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_6kq5ka.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(result.mod(\e[31m2\e[0m)==\e[31m0\e\
    [0m) Right(Long.toBinaryString(result)) \e[33melse\e[0m Left(\e[31m\"-1\"\e[0m);\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toBinaryString is not a member\
    \ of object Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n < m){\n            Left(-1)\n        }\n        else\
    \ if(n >= m){\n            Right(-1l)\n        }\n        else{\n            val\
    \ low = n.toInt\n            val high = m.toInt\n            val nums = List[Long]()\n\
    \            var cur = 0l\n            while(high > low){\n                nums\
    \ match {\n                    case Nil => Right(-1l)\n                    case\
    \ head :: tail => {\n                        if(cur <= (high - low) / 2){\n  \
    \                          cur += low\n                            nums = head\
    \ :: tail\n                        }\n                        else if(cur > cur\
    \ * 2){\n                            cur += low\n                            nums\
    \ = head :: tail\n                        }\n                        else{\n \
    \                           Right(-1l)\n                        }\n          \
    \          }\n                }\n            }\n            nums match {\n   \
    \             case head :: tail => {\n                    val numStr = head.asBinary\n\
    \                    val len = numStr.length\n                    Right(len.toInt\
    \ * \"0b\" + numStr)\n                }\n            }\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1mv58xnh.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1mv58xnh.scala:35:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                   \
    \         nums = head :: tail\n\e[31m\e[31m   |\e[0m                         \
    \   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Reassignment\
    \ to val nums\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1mv58xnh.scala:39:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                   \
    \         nums = head :: tail\n\e[31m\e[31m   |\e[0m                         \
    \   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Reassignment\
    \ to val nums\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1mv58xnh.scala:49:38\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m                    \e[33mval\e\
    [0m \e[36mnumStr\e[0m = head.asBinary\n\e[31m\e[31m   |\e[0m                 \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        value asBinary is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // Write your logic here.\n        if (m > n) {\n       \
    \     return Left(s\"$n is greater than $m\")\n        }\n        val one = n.toLong\n\
    \        val two = m.toLong\n        val sum = one + two\n        val remainder\
    \ = sum % 2\n        if (remainder == 0) {\n            return Right(sum.toBinaryString)\n\
    \        }\n        return Left(sum.toBinaryString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4gbd4xb8.scala:27:29\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mreturn\e[0m\
    \ Right(sum.toBinaryString)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    String\n\e[31m   |\e[0m\
    \                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        // Your code goes here\n        val arr = (n to m).toArray\n\
    \        val count = (0 until arr.length).scanLeft(0){ case (x, i) => x + arr.length\
    \ }\n        val sum = (0 until arr.length).scanLeft(0){ case (x, i) => x + arr(i)\
    \ }\n        val avg = sum / count.reduce((a, b) => a + b)\n        val binary\
    \ = sum.toString + avg.toString\n        if (binary.length < m.toString.length)\
    \ Right(binary.toLong)\n        else if (n >= m) Left(-1)\n        else Left(binary)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqj08_7as.scala:21:67\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m = (\e[31m0\e[0m until arr.length).scanLeft(\e[31m0\e[0m){ \e[33mcase\e[0m\
    \ (x, i) => x + arr(i) }\n\e[31m\e[31m   |\e[0m                              \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                                   Found:    Long\n\e[31m   |\e\
    [0m                                                          Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqj08_7as.scala:22:22\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mavg\e[0m = sum / count.reduce((\e[36ma\e[0m, \e[36mb\e[0m) => a + b)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0mvalue / is not a member\
    \ of IndexedSeq[Int], but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqj08_7as.scala:25:30 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n >= m) Left(-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                              Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n <= m) return Right(n)\n        if (n < 0) Left(-1)\n\
    \        val mid = n + ((m - 1l) / 2l)\n        val leftHalf = Math.abs(n - (mid)\
    \ / 2l)\n        val rightHalf = Math.abs(mid)\n        val sum = 0l\n       \
    \ val average = 0l\n        for (x <- mid..m if x > mid) {\n            val y\
    \ = x + (mid-x)\n            sum += y\n        }\n        average = Math.round(sum/rightHalf).asInstanceOf[Long]\n\
    \        if (leftHalf == rightHalf && average == n) Left(n.toBinaryString)\n \
    \       else if (leftHalf < rightHalf) Left(-1l)\n        else Right(average.toBinaryString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb2pi2ndl.scala:25:22 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (x <- mid..m \e[33mif\e[0m x >\
    \ mid) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m \
    \                     an identifier expected, but '.' found\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpb2pi2ndl.scala:29:16 -----------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        average = Math.round(sum/rightHalf).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val average\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb2pi2ndl.scala:31:44 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (leftHalf < rightHalf)\
    \ Left(-\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                       \
    \     Found:    (\e[31m-1L\e[0m : Long)\n\e[31m   |\e[0m                     \
    \                       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpb2pi2ndl.scala:32:27 --------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m        \e[33melse\e[0m Right(average.toBinaryString)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Found:    String\n\e[31m   |\e[0m                   Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.max(m, n)\n        val l = n - m\n        if\
    \ (l < 0) Left(s\"$n is greater than $m\")\n        else Right(math.ceil(l / 2).map(math.pow(2,_)+\"\
    0\").foldLeft(0)(_+_)/2l*2l)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbhxa_u85.scala:18:28 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(m, n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbhxa_u85.scala:21:36\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(math.ceil(l\
    \ / \e[31m2\e[0m).map(math.pow(\e[31m2\e[0m,_)+\e[31m\"0\"\e[0m).foldLeft(\e[31m0\e\
    [0m)(_+_)/\e[31m2l\e[0m*\e[31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value map is\
    \ not a member of Double\n2 errors found\n"
  stdout: ''
  timestamp: 1660009662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n > m)\n            Left(-1)\n        else\n         \
    \   Right(n.toString.reverse.takeWhile( _.isDigit).reverse.foldLeft(0l) {\n  \
    \              case (a, b) => a + b.toLong\n            } / m.toString.reverse.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfu8aint.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n >= 0 && m >= 0, \"Negative number is not allowed\"\
    )\n        if (n >= m) {\n            Left(-1)\n        }\n        else {\n  \
    \          Right(scala.math.ceil(n / m).toIntBinary)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu_6w19za.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu_6w19za.scala:23:41\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Right(scala.math.ceil(n\
    \ / m).toIntBinary)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value toIntBinary is not a member of Double\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009663
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n > m) Left(s\"The value of n must be less than or equal\
    \ to m.\")\n        else if (n == m) Right(n)\n        else Left(s\"n must be\
    \ less than m.\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpruwhk5jq.scala:23)\n\tat Problem.main(tmpruwhk5jq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if (n <= m) Right(n)\n        else {\n            val rn\
    \ = Math.round(n/m)*m\n            Right(rn.toBinaryString) \n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2yp1swb.scala:21:21\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Right(rn.toBinaryString)\
    \ \n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Found:    String\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        require(n.toInt == n && m.toInt == m && n.toLong <= m.toLong)\n\
    \        val arr = new mutable.MutableList[Long]()\n        val arr2 = new mutable.MutableList[Long]()\n\
    \        for (i = n.toLong; i <= m.toLong; i += 1){\n            arr.add(i)\n\
    \        }\n        for (i = m.toLong; i >= n.toLong; i -= 1){\n            arr2.add(i)\n\
    \        }\n        arr.zipWithIndex.foreach {\n            case (l, idx) => arr(idx)\
    \ = l.toString + arr(idx).substring(0,1)\n        }\n        arr2.zipWithIndex.foreach\
    \ {\n            case (l, idx) => arr2(idx) = l.toString + arr2(idx).substring(0,1)\n\
    \        }\n        for (i = arr.size - 1; i >= 0; i -= 1){\n            arr(i)\
    \ match {\n                case c if c.length == 1 => arr2(i) = arr(i).replaceAll(\"\
    0\",\"1\")\n                case _ => arr2(i) = arr(i).replaceAll(\"0\",\"1\"\
    )\n            }\n        }\n        val arr = arr2.toList\n        val res =\
    \ arr.reverse.foldLeft(0)(_+_)/arr.size.toLong\n        if (res > Integer.MAX_VALUE)\
    \ Left(-1)\n        else Right(Integer.toBinaryString(res))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16dlrjpx.scala:21:15 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i = n.toLong; i <= m.toLong;\
    \ i += \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e\
    [0m               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp16dlrjpx.scala:21:40 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mfor\e[0m (i = n.toLong; i <= m.toLong; i += \e[31m1\e[0m){\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                        '<-' expected, but ';' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16dlrjpx.scala:21:48 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i = n.toLong; i <= m.toLong;\
    \ i += \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                                 \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \      '<-' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16dlrjpx.scala:24:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m\
    \ (i = m.toLong; i >= n.toLong; i -= \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m   \
    \            ^\e[0m\n\e[31m   |\e[0m               ')' expected, but '=' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16dlrjpx.scala:24:40 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i = m.toLong; i >= n.toLong;\
    \ i -= \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                                 \
    \       ^\e[0m\n\e[31m   |\e[0m                                        '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16dlrjpx.scala:24:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m\
    \ (i = m.toLong; i >= n.toLong; i -= \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m   \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                    '<-' expected, but ')' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp16dlrjpx.scala:33:15 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mfor\e[0m (i = arr.size - \e[31m1\e[0m;\
    \ i >"
  stdout: ''
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        if(n.toInt == m.toInt) {\n            if(n.toInt < m.toInt)\
    \ Right(-1)\n            else Right(0)\n        } else {\n            val s =\
    \ n.toInt\n            val e = m.toInt\n            val l = ((e - s) / 2 + s).toBinaryString\n\
    \            val l2 = l.toInt\n            val e = l2 % 2\n            val r =\
    \ ((l2 + 1) / 2)\n            val r = r.toBinaryString\n            val r2 = r.toInt\n\
    \            val r3 = r2 + e\n            val r4 = r3 % 2\n            val l3\
    \ = l + r3\n            val r5 = ((l3 + 2) / 2)\n            val r5 = r5.toBinaryString\n\
    \            val r6 = r5 % 2\n            val l4 = l3 + r5\n            val r7\
    \ = ((l4 + 2) / 2)\n            val r7 = r7.toBinaryString\n            val r8\
    \ = r7 % 2\n            val l5 = l4 + r7\n            val r9 = ((l5 + 2) / 2)\n\
    \            val r9 = r9.toBinaryString\n            val r10 = r9 % 2\n      \
    \      val l6 = l5 + r9\n            val r11 = ((l6 + 2) / 2)\n            val\
    \ r11 = r11.toBinaryString\n            val r12 = r11 % 2\n            val l7\
    \ = l6 + r11\n            val r13 = ((l7 + 2) / 2)\n            val r13 = r13.toBinaryString\n\
    \            val r14 = r13 % 2\n            val l8 = l7 + r13\n            val\
    \ r15 = ((l8 + 2) / 2)\n            val r15 = r15.toBinaryString\n           \
    \ val r16 = r15 % 2\n            val l9 = l8 + r15\n            val r17 = ((l9\
    \ + 2) / 2)\n            val r17 = r17.toBinaryString\n            val r18 = r17\
    \ % 2\n            val l10 = l9 + r17\n            val r19 = ((l10 + 2) / 2)\n\
    \            val r19 = r19.toBinaryString\n            val r20 = r19 % 2\n   \
    \         val l11 = l10 + r19\n            val r21 = ((l11 + 2) / 2)\n       \
    \     val r21 = r21.toBinaryString\n            val r22 = r21 % 2\n          \
    \  val l12 = l11 + r21\n            val r23 = ((l12 + 2) / 2)\n            val\
    \ r23 = r23.toBinaryString\n            val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpinhi1w2b.scala:71:15 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpinhi1w2b.scala:89:0 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpinhi1w2b.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36me\e[0m = l2 % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0me is already defined as \e[33mvalue\e[0m \e[35me\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpinhi1w2b.scala:28:16 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = r.toBinaryString\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already\
    \ defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpinhi1w2b.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36mr5\e[0m = r5.toBinaryString\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mr5 is already defined as \e[33mvalue\e[0m \e[35mr5\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpinhi1w2b.scala:38:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e\
    [0m \e[36mr7\e[0m = r7.toBinaryString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr7 is already defined as \e[33mvalue\e[0m \e[35mr7\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded m"
  stdout: ''
  timestamp: 1660009664
