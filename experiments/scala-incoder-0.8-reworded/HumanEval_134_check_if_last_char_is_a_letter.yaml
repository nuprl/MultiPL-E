name: HumanEval_134_check_if_last_char_is_a_letter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that returns true if the last character\n    // of a given\
  \ string is an alphabetical character and is not\n    // a part of a word, and false\
  \ otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n\
  \    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    //\
  \ (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n\
  \    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    //\
  \ >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt\
  \ : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
  apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) ==\
  \ (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  \")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  apple pi e \")) == (false));\n    }\n\n}\n"
completions: ["        if (txt.length < 1) return false\n        var word = txt.split(\"\
    \ \")\n        word.reverse\n        var result = false\n        word.reverse.foreach(t\
    \ => { \n            if (t.last == t.init) result = true\n        })\n       \
    \ return result", "        if (txt.length > 0) {\n            var lastChar = txt.last\n\
    \            var hasALetter = false\n            // if the last char is not a\
    \ space char and it is an alphabetic char\n            if (lastChar != '\\0' &&\
    \ lastChar >= 'a' && lastChar <= 'z') {\n                hasALetter = true\n \
    \           }\n            return !hasALetter\n        }\n        return false",
  "        val lastChar = txt.last\n        if(lastChar.isLetter) {\n            val\
    \ split = txt.split(\" \").map(_+lastChar)\n            val firstPart = split.head\n\
    \            val secondPart = split.tail\n            if(secondPart.forall(_.isLetter))\
    \ {\n                return false\n            }\n            else {\n       \
    \         return true\n            }\n        }\n        else {\n            return\
    \ true\n        }", "        val strArr = txt.split(\" \").map(_.toUpperCase)\n\
    \        val last = strArr.last\n        if (txt.length > 0 && strArr.exists(last.endsWith(_)))\
    \ {\n            return false\n        }\n        return true", "        def findLastChar(s\
    \ : String) : Option[String] = {\n            val index = s.lastIndexOf(' ', s.length-1)\n\
    \            index match {\n                case -1 => None\n                case\
    \ i => Some(s.substring(index+1, s.length))\n            }\n        }\n      \
    \  val words = mutable.ListBuffer.empty[String]\n        findLastChar(txt).foreach{\
    \ x => words.append(x.toString) }\n        words.foldLeft(false){ case (acc, x)\
    \ => acc && x.toUpperCase.isLetter }", "         val arr = txt.toCharArray\n \
    \        val lastChar = arr(arr.length - 1)\n         if (!lastChar.matches(\"\
    [a-zA-Z]+\")) false\n         else true", "        if (txt.length < 1) {\n   \
    \         println(\"txt.length < 1\")\n            return false\n        }\n \
    \       var charList = txt.split(\"\")\n        var lastChar = charList(txt.length-1)\n\
    \        var lastCharIsAlpha = true\n        charList.foreach(char => {\n    \
    \        if (char.isLetter) {\n                lastCharIsAlpha = true\n      \
    \          return\n            } else {\n                lastCharIsAlpha = false\n\
    \            }\n        })\n        return lastCharIsAlpha", "        if (txt.length\
    \ == 0 || txt.charAt(txt.length-1) == ' '){\n            false\n        }else{\n\
    \            if (txt.charAt(txt.length-1) == 'a' ||\n                txt.charAt(txt.length-1)\
    \ == 'e' ||\n                txt.charAt(txt.length-1) == 'i' ||\n            \
    \    txt.charAt(txt.length-1) == 'o' ||\n                txt.charAt(txt.length-1)\
    \ == 'u'){\n                false\n            }else{\n                true\n\
    \            }\n        }", "        // Find the last character and check if it's\
    \ an alphabetic character\n        val lastChar = txt.last\n        if(!lastChar.isLetter)\
    \ {\n            false\n        } else {\n            var charCounter = 1\n  \
    \          for(word <- txt.split){\n                if(charCounter == txt.length){\n\
    \                    return true\n                } else {\n                 \
    \   charCounter += word.last.length\n                }\n            }\n      \
    \      false\n        }", '        txt.last.forall(Character.isLetter)', "   \
    \      if(txt.nonEmpty) txt match {\n             case s @ s.last if (s.last >=\
    \ 'a' && s.last <= 'z') => true\n             case _ => false\n         }", '        txt.last.isLetter',
  "        val txtSplit = txt.split(\" \")\n        val firstWord = txtSplit(0).reverse\n\
    \        if(firstWord.last.exists(ch => ('A' <= ch && ch <= 'Z') || ('a' <= ch\
    \ && ch <= 'z'))) {\n            return true\n        }\n        return false",
  "        var lastChar = txt.last\n        while (!lastChar.matches(\"[a-zA-Z]\"\
    ))\n            lastChar = txt.dropRight(1).last\n        !lastChar.matches(\"\
    [a-zA-Z]\")", "      val newTxt = txt.dropRight(1)\n      val words = newTxt.split(\"\
    \ \").filter(_ != \"\")\n      words.last.isLetter", '        // Your code here',
  "      val lastChar = txt.last\n      if(lastChar.isLetter) {\n        if(txt.lastSeparateChar().isEmpty)\
    \ {\n          return true\n        } else {\n          return false\n       \
    \ }\n      } else {\n        return true\n      }", "        val letters = txt.last.trim.toList\n\
    \        letters.filter(_.isLetter).size != letters.size", "        var isALetter\
    \ = false\n        val regex = \"\"\"[a-z]\"\"\".r\n        var lastChar = txt(txt.length\
    \ - 1)\n        while (lastChar != regex.findFirstIn(txt).get) {\n           \
    \ lastChar = txt(txt.length - 2)\n        }\n        lastChar.toLowerCase match\
    \ {\n            case \"\" => false\n            case c => c.isLetter\n      \
    \  }", '        return !checkIfLastCharIsALetterWord(txt)', "        // Use scala.collection.mutable.StringBuilder\
    \ to get the last character\n        // of a string\n        val sb = new StringBuilder(txt)\n\
    \        // Get the last character of the StringBuilder\n        val lastChar\
    \ = sb.last\n        // Return true if the last character is a letter or not\n\
    \        lastChar match {\n            // If last character is a letter\n    \
    \        case letter if letter.toString.isLetter() => true\n            // If\
    \ last character is not a letter\n            case letter => false\n        }",
  "        val txtLastChar = txt.last\n        val txtLastCharIsAlpha = txtLastChar\
    \ != null && !txtLastChar.equals(\" \")\n        val txtLastCharIsALetter = txtLastChar\
    \ != null && !txtLastChar.equals(\" \") && !(txtLastChar.isLetter)\n        txtLastCharIsAlpha\
    \ && txtLastCharIsALetter", "        val last = txt.length-1\n        val words\
    \ = txt.split(\" \").toSet\n        val lastChar = txt(last)\n        if (lastChar\
    \ != \" \")\n            return words.contains(lastChar)\n        else\n     \
    \       return words.size > 1", "        if (txt.last == ' ' || txt.last == '.')\
    \ true\n        else false", "        if (txt.length == 0) return false\n    \
    \    var lastChar = txt.last\n        if (lastChar.isLetter) lastChar = lastChar.dropRight(1)\n\
    \        val words = txt.split(\"\\\\s+\") // split on whitespace\n        if\
    \ (words.length == 0) return false\n        var lastWord = words.last\n      \
    \  if (lastWord.isLetter) lastWord = lastWord.dropRight(1)\n        if (lastChar\
    \ != lastWord) return false\n        if (lastChar.isLower) lastChar = lastChar.toUpperCase\n\
    \        val lastChars = lastWord.split('')\n        if (lastChars.last != lastChar)\
    \ return false\n        return true", "        val s = txt.length()\n        val\
    \ last = txt.charAt(s.length-1)\n        val w = txt.substring(0,s.length-1)\n\
    \        val count = w.split(\" \").length\n        // If there are no spaces\n\
    \        // then the last character is also alphabetical\n        if (count ==\
    \ 0) {\n            true\n            // If the last character is alphabetical\n\
    \            // and the word is not empty\n        } else if (last.isLetter &&\
    \ count > 0) {\n            false\n            // If the last character is not\
    \ alphabetical\n            // and the word is not empty\n        } else {\n \
    \           true\n        }", "        val re = \"\"\"(\\S)$\"\"\".r\n       \
    \ txt match {\n            case re(a) => a.toString == txt.last.charAt(txt.length\
    \ - 1)\n            case _ => false\n        }", "      txt match {\n        \
    \  case \"\" => false\n          case x => x.toString.last == x.toString.last\
    \ && !x.toString.exists(_ == '-') && !x.toString.exists(_ == '_')\n      }", " \
    \       if (txt.length < 1) return false\n        val charArray = txt.toCharArray\n\
    \        val lastChar = charArray.length-1\n        var flag = false\n       \
    \ for (c<-charArray){\n            if (c.toString == lastChar.toString.toUpperCase())\
    \ {\n                flag = true\n            }\n        }\n        return flag",
  "        val str = txt.toLowerCase\n        val lastChar = str.last\n        if(lastChar\
    \ <= 'z' || lastChar >= 'a'){\n            false\n        }else{\n           \
    \ if(str.length == 1){\n                false\n            }else{\n          \
    \      var lastOne = str.tail.last\n                if(lastOne.matches(\"[a-zA-Z]+\"\
    )){\n                    return true\n                }else{\n               \
    \     return false\n                }\n            }\n        }", "        var\
    \ result = false\n        var lastChar = txt(txt.length - 1)\n        var isLetter\
    \ = false\n        for (letter <- \"abcdefghijklmnopqrstuvwxyz\") {\n        \
    \    if (lastChar == letter) {\n                isLetter = true\n            \
    \    break\n            } else {\n                isLetter = false\n         \
    \   }\n        }\n        if (isLetter) {\n            for (letter <- \" \") {\n\
    \                if (lastChar == letter) {\n                    result = true\n\
    \                    break\n                }\n            }\n        }\n    \
    \    return result", "        if (txt.length < 2 ) throw new Exception((\"String\
    \ too short\"))\n        var lastChar = txt.last\n        if (lastChar.equals(\"\
    \ \") || lastChar.isLetter) throw new Exception((\"Last character is a space\"\
    ))\n        var lastCharIsLetter = false\n        for (c <- txt.init)\n      \
    \  {\n            if (c.isLetter) lastCharIsLetter = true\n        }\n       \
    \ return !lastCharIsLetter", "        val lastChar = txt.last\n        val chars\
    \ = txt.split(\" \").last\n        chars.contains(lastChar) && chars.lastIndexOf(lastChar)\
    \ == chars.length - 1", "        val words = txt.split(\" \").map(_.toLowerCase)\n\
    \        val firstChar = txt.substring(0, txt.length-1)\n        val lastChar\
    \ = txt.substring(txt.length-1)\n        val isFirstCharALetter = (firstChar.toLowerCase\
    \ == firstChar)\n        val lastCharIsALetter = (lastChar.toLowerCase == lastChar)\n\
    \        val allAlphabetical = (words.map(_.toLowerCase).forall(_.toLowerCase\
    \ == _))\n        return isFirstCharALetter && !lastCharIsALetter && allAlphabetical",
  "        if (txt.length <= 0) return false\n        if (txt.length == 1) return\
    \ true\n        val last = txt.last\n        if (last == ' ') return true\n  \
    \      val lastChar = last.toChar\n        if (lastChar < 'a' || lastChar > 'z')\
    \ return false\n        var prevIdx = 0\n        for (idx <- 0 until txt.length)\
    \ {\n            if (txt(idx) != ' ') return false\n            prevIdx = idx\n\
    \        }\n        val firstChar = txt.first\n        if (firstChar < 'a' ||\
    \ firstChar > 'z') return false\n        return true", "        val txtArr = txt.split(\"\
    \ \").toArray\n        txtArr.reverse.head.toString.toCharArray.last match {\n\
    \            case c if c.isLetterOrDigit => true\n            case c if !c.isLetterOrDigit\
    \ => false\n            case _ => false\n        }", "        val lastChar = txt.last\n\
    \        val isAlpha = lastChar < Character.MAX_VALUE &&\n                   \
    \     lastChar >= Character.MIN_VALUE &&\n                        Character.isLetter(lastChar)\n\
    \        val isNotAlpha = !isAlpha\n        isNotAlpha", "        // Code Here\n\
    \        var re = scala.util.matching.Regex(\"[^a-zA-Z]\")\n        val newString\
    \ = txt filter { c => !re.findFirstIn(c).get.isEmpty }\n        txt = newString.length\
    \ == txt.length && newString.last == txt.last\n        return txt", "        val\
    \ txtArray = txt.toArray\n        if (txt.length < 2) {\n            return false\n\
    \        }\n        var lastChar = txtArray(-1)\n        var charsCount = txtArray.length\
    \ - 2\n        var inWord = true\n        for (i <- 0 until txtArray.length -\
    \ 1) {\n            var currentChar = txtArray(i)\n            if (currentChar\
    \ == \" \" && charsCount > 1) {\n                inWord = false\n            \
    \    break\n            }\n            if (currentChar == \" \") {\n         \
    \       charsCount -= 1\n            } else {\n                lastChar = currentChar\n\
    \            }\n        }\n        return !inWord && lastChar.toUpperCase != \"\
    \ \"", "        // Complete the function\n        if (txt.length == 0)\n     \
    \       return false\n        val lastChar = txt.last\n        if (lastChar.isLetter\
    \ && !(lastChar.isLetter || lastChar.isDigit))\n            return true\n    \
    \    else\n            return false", "        val s = txt\n        val words\
    \ = mutable.Set[String]()\n        for( x <- s.length ) {\n            if( s.charAt(x)\
    \ != ' ' ) {\n                words += s.substring(0,x)\n            }\n     \
    \   }\n        words.forall(x => char.IsLetter(x))", "        var result : Boolean\
    \ = false\n        var lastChar : String = \"\"\n\n        for(i <- 0 until txt.length)\
    \ {\n            lastChar = txt(i)\n            if (lastChar >= 'a' && lastChar\
    \ <= 'z')\n                return false\n        }\n        return true", "  \
    \      for (x <- txt.lastChar){\n            if (x.isLetter){\n              \
    \  return false\n            }\n        }\n        return true", "        if (txt.isEmpty\
    \ || txt.length <= 1)\n            return false\n        val lastChar = txt.last\n\
    \        if (lastChar.equals('_') || lastChar.isLetter)\n            return false\n\
    \        val words = txt.split(\" \")\n        for (word <- words)\n        {\n\
    \            val wordArray = word.split(' ')\n            if (wordArray.last ==\
    \ lastChar)\n                return false\n        }\n        return true", " \
    \       if (!txt.isEmpty) {\n            var isLastCharANumber = false\n     \
    \       if (txt.charAt(txt.length - 1) == ' ') {\n                txt = txt.slice(0,\
    \ txt.length - 1)\n            }\n            val words = txt.split(\" \").toList\n\
    \            var isLastCharAWord = false\n            words.foreach(word => {\n\
    \                val wordAsCharArray = word.toCharArray\n                isLastCharANumber\
    \ =\n                    isLastCharANumber || (wordAsCharArray(wordAsCharArray.length\
    \ - 1) >= 65 && wordAsCharArray(wordAsCharArray.length - 1) <= 90 || wordAsCharArray(wordAsCharArray.length\
    \ - 1) >= 97 && wordAsCharArray(wordAsCharArray.length - 1) <= 122)\n        \
    \        if (wordAsCharArray.length > 1 && word.charAt(word.length - 1) == ' ')\
    \ {\n                    isLastCharAWord = true\n                }\n         \
    \   })\n            isLastCharANumber && !isLastCharAWord\n        } else {\n\
    \            false\n        }", "        // Create empty array for checking\n\
    \        var charArray = new Array[Char](txt.length)\n        // Go through each\
    \ character in text and put in array\n        for ( i <- 0 until txt.length )\
    \ {\n            charArray(i)  = txt(i)\n        }\n        // Check if last character\
    \ is in array\n        if ( charArray.length == 1 ) {\n            return false\n\
    \        }\n        else {\n            var lastChar = charArray.length - 1\n\
    \            var lastChar = charArray.length\n            // Check char at last\
    \ position and check if it is an alphabet\n            if ( charArray(lastChar).isLetter\
    \ ) {\n                return false\n            }\n            else {\n     \
    \           return true\n            }\n        }", '        txt.tail.forall(_.isLetter)
    && !txt.contains(" ")', "        val lastChar = txt(txt.length-1)\n        val\
    \ spaceSeparated = txt.split(\" \").last\n\n        if ((lastChar != spaceSeparated)\
    \ && (lastChar != \" \") )\n            true\n        else\n            false",
  "        txt.length != txt.last.length && \n        (txt.last.forall(x => x.isLetter)\
    \ && \n        !txt.last.contains(\" \"))", "        val arr = txt.split(\" \"\
    ).toArray\n        arr(arr.length - 1) == txt.last", "        val firstChar =\
    \ txt(0)\n        val lastChar = txt(txt.length - 1)\n        val charSet = txt.substring(1,txt.length-1).toCharArray\n\
    \        val containsAlphabet = charSet.contains(firstChar) && charSet.contains(lastChar)\n\
    \        val containsWord = charSet.takeWhile(_.isLetter).isEmpty \n        return\
    \ !containsAlphabet && !containsWord", "        val lastChar = txt.last\n    \
    \    val alphabet = Set('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n\
    \        val noLetterWords = Set(\"apple\", \"pi\", \"i\", \"pie \")\n       \
    \ val isLetter : Boolean = alphabet(lastChar) || noLetterWords.contains(lastChar)\n\
    \        return isLetter", '        return (txt != null && txt.last.isLetter)
    && (txt.last != " ")', "        if (txt.length < 2) return false\n        else\
    \ if (!txt.last.isLetter) return true\n        else if (!txt.last.equalsIgnoreCase(\"\
    e\") && !txt.last.equalsIgnoreCase(\"i\") && !txt.last.equalsIgnoreCase(\"u\"\
    )) return true\n        else return false", "        def charLastIsALetter(c:Char):\
    \ Boolean = {\n            (c == 'a') || \n            (c == 'b') || \n      \
    \      (c == 'c') || \n            (c == 'd') || \n            (c == 'e') || \n\
    \            (c == 'f') || \n            (c == 'g') || \n            (c == 'h')\
    \ || \n            (c == 'i') || \n            (c == 'j') || \n            (c\
    \ == 'k') || \n            (c == 'l') || \n            (c == 'm') || \n      \
    \      (c == 'n') || \n            (c == 'o') || \n            (c == 'p') || \n\
    \            (c == 'q') || \n            (c == 'r') || \n            (c == 's')\
    \ || \n            (c == 't') || \n            (c == 'u') || \n            (c\
    \ == 'v') || \n            (c == 'w') || \n            (c == 'x') || \n      \
    \      (c == 'y') || \n            (c == 'z')\n        }\n        txt.charAt(txt.length-1)(0\
    \ until txt.length-1) foreach (c => {\n            if (!charLastIsALetter(c))\
    \ {\n                return false\n            }\n        })\n        true", " \
    \       // Your code here\n        var lastChar = txt(txt.length - 1)\n      \
    \  for(x <- txt.drop(txt.length - 1).split(\" \")){\n            if(x.last.isLetter){\n\
    \                lastChar = x.last\n            }\n        }\n        txt.last.isLetter\
    \ && !lastChar.contains(\" \")", "        var lastChar = txt.charAt(txt.length-1)\n\
    \        var isLastCharAlpha = lastChar.toUpper == lastChar\n        var isLastCharNotAlpha\
    \ = lastChar.matches(\"\\\\W\")\n        return isLastCharAlpha && !isLastCharNotAlpha",
  "        var isLastCharAlpha: Boolean = false\n        var isLastCharAlphaWord:\
    \ Boolean = false\n        var currentChar: String = txt.last\n        var currentWord:\
    \ String = txt.dropRight(1).mkString(\" \")\n        var currentWordList: mutable.Set[String]\
    \ = mutable.Set()\n        currentWordList.add(currentWord)\n        for(x <-\
    \ 0 to txt.length - 2) {\n            currentChar = txt.charAt(x)\n          \
    \  currentWord = currentWord.dropRight(1)\n            currentWordList.add(currentWord)\n\
    \            if(isLastCharAlpha && currentChar == currentWord.last) isLastCharAlphaWord\
    \ = true\n            if(!currentWordList.contains(currentWord)) isLastCharAlpha\
    \ = false\n        }\n        isLastCharAlpha", "        // Your code here\n \
    \       var count = 0\n        for (i <- 0 to txt.length-1) {\n            if\
    \ (txt(i) == txt(i+1))\n                count = count + 1\n        }\n       \
    \ if (count > 0)\n            return false\n        else\n            return true",
  "        txt.last.isLetter\n        // return false if lastChar is not a letter\n\
    \        if (!txt.last.isLetter) false\n        else txt.last.isLetter", "   \
    \     var isALetter = true\n        txt.last match {\n            case c if c\
    \ != ' ' =>\n                if (txt.indexOf(c) == txt.length-1)\n           \
    \         isALetter = true\n                else\n                    isALetter\
    \ = false\n            case _ =>\n        }\n        return isALetter", "    \
    \    if (txt.length > 0) {\n            if (txt.charAt(txt.length - 1) == ' ')\
    \ {\n                val word = \"abcdefghijklmnopqrstuvwxyz\".toList\n      \
    \          var lastChar = txt.charAt(txt.length - 1);\n                val words\
    \ = txt.split(\" \");\n                for (word <- words) {\n               \
    \     lastChar = word.charAt(word.length - 1);\n                    if (word.contains(lastChar))\
    \ {\n                        return false\n                    }\n           \
    \     }\n                return true\n            } else {\n                return\
    \ false\n            }\n        } else {\n            return false\n        }",
  "        val list = txt.split(' ')\n        var last = txt.last\n        for ( n\
    \ <- list ) {\n            if ( last.charAt( txt.length - 1 ) == n.charAt( 0 )\
    \ ) {\n                last = n\n            } else {\n                return\
    \ false\n            }\n        }\n        return true", "        // Split the\
    \ text by space\n        val words = txt.split(\" \")\n        var lastChar: Char\
    \ = ' '\n        // Iterate through the words and check the last character\n \
    \       for (wd <- words) {\n            lastChar = wd.last\n            if (lastChar\
    \ == ' ' || lastChar == '.' || lastChar == '!' || lastChar == '?' || lastChar\
    \ == '-' || lastChar == '/' || lastChar == '(' || lastChar == ')' || lastChar\
    \ == '-' || lastChar == '_' || lastChar == '=' || lastChar == '^' || lastChar\
    \ == '#' || lastChar == '@' || lastChar == '&' || lastChar == '*' || lastChar\
    \ == '~' || lastChar == '\\'' || lastChar == '?' || lastChar == '-' || lastChar\
    \ == '_' || lastChar == '=' || lastChar == '^' || lastChar == '#' || lastChar\
    \ == '@' || lastChar == '&' || lastChar == '*' || lastChar == '~' || lastChar\
    \ == '\\'' || lastChar == '?' || lastChar == '-' || lastChar == '_' || lastChar\
    \ == '=' || lastChar == '^' || lastChar == '#' || lastChar == '@' || lastChar\
    \ == '&' || lastChar == '*' || lastChar == '~' || lastChar == '\\'' || lastChar\
    \ == '?' || lastChar == '-' || lastChar == '_' || lastChar == '=' || lastChar\
    \ == '^' || lastChar == '#' || lastChar == '@' || lastChar == '&' || lastChar\
    \ == '*' || lastChar == '~' || lastChar == '\\'')\n                return false\n\
    \        }\n        return true", "        // Write your code here\n        var\
    \ isLastCharAlphabetic= false\n        var count=0\n        for(word <- txt.split(\"\
    \\\\s+\")) {\n            // Write your code here\n            for(letter <- word)\
    \ {\n                // Write your code here\n                if(!isLastCharAlphabetic)\
    \ {\n                    isLastCharAlphabetic = isLetter(letter)\n           \
    \     }\n            }\n        }\n        if(!isLastCharAlphabetic) {\n     \
    \       count++\n        }\n        return isLastCharAlphabetic && !count", '        return
    txt.last.isLetter', "        if(txt.length() > 1 && txt.charAt(txt.length() -\
    \ 1) < 'a' || 'z' < txt.charAt(txt.length() - 1))\n            return true\n \
    \       else\n            return false", "        txt match {\n            case\
    \ x if(txt.length >= 1) => \n                if((txt last == x.toLowerCase &&\
    \ !(txt.contains(x.toLowerCase))))\n                    true\n               \
    \ else\n                    false\n            case x => false\n        }", " \
    \     val lastChar = txt.last\n      val isAlphaNumeric = lastChar.matches(\"\
    [a-zA-Z0-9]+\")\n      if(!isAlphaNumeric)\n        false\n      else {\n    \
    \    var lastCharIndex = txt.length - 1;\n        var lastChar = txt.last\n  \
    \      var foundWord = false\n        while (lastCharIndex >= 0) {\n         \
    \ if (lastChar.isLetterOrDigit()) {\n            foundWord = true\n          \
    \  break\n          } else if (lastChar.isWhitespace) {\n            lastCharIndex\
    \ = txt.length\n            break\n          }\n          lastCharIndex -= 1\n\
    \        }\n        if(foundWord)\n          false\n        else\n          true\n\
    \      }", "    \tif (txt.length < 1) return false\n    \tval words = txt.split(\"\
    \ \")\n    \tval word = words(words.length - 1)\n    \tval chars = word.substring(1)\n\
    \    \tchars.forall(isLetter(_.toUpperCase))", "        def lastChar(txt : String)\
    \ : Char = {\n            txt(txt .length-1)\n        }\n\n        val words =\
    \ txt.split(\" \")\n        var count = 0\n\n        for(word <- words) {\n  \
    \          val currentChar = lastChar(word)\n\n            if(currentChar != 'a'\
    \ && currentChar != 'e' && currentChar != 'i' && currentChar != 'o' && currentChar\
    \ != 'u' && currentChar != 'A' && currentChar != 'E' && currentChar != 'I' &&\
    \ currentChar != 'O' && currentChar != 'U') {\n                count = count +\
    \ 1\n            }\n        }\n\n        if(count < words.length) {\n        \
    \    return false\n        } else {\n            return true\n        }", "  \
    \      if(txt.length <= 1) return false\n        var firstChar = txt.charAt(txt.length-1)\n\
    \        var foundWord = false\n        for(word <- txt.split(\" \")) {\n    \
    \        if(firstChar.equals(word.charAt(0)) && firstChar.equals(word.charAt(word.length-1)))\
    \ {\n                foundWord = true\n            }\n        }\n        val result\
    \ = foundWord\n        val correct = txt.length > 2\n        val trueOrFalse =\
    \ if (result) correct else \"Wrong input!\"\n        println(trueOrFalse)\n  \
    \      return result", "    \tif (txt.length != 0) {\n    \tval lastChar = txt(txt.length\
    \ - 1);\n    \tval notWord = txt.lastIndexOf(\" \")\n    \tval isWord = notWord\
    \ != -1\n    \tval isALetter = lastChar.isLetter\n    \tif (isALetter && !isWord)\
    \ {\n    \treturn true\n    \t} else {\n    \treturn false\n    \t}\n    \t}",
  "      if (txt.length < 1) return false\n      var isLastChar = txt.length-1\n \
    \     while (isLastChar >= 0) {\n        if (txt(isLastChar).isLetter)\n     \
    \     isLastChar = txt.length-1\n        else\n          return false\n      }\n\
    \      return true", "        val txtLength = txt.length\n        // The last\
    \ character is alphabetic\n        if(txtLength > 0 && txt(txtLength - 1) == txt(txtLength\
    \ - 1).toUpperCase()) {\n            // No word is found\n            if(txtLength\
    \ == 0 || txt(txtLength - 1) == \" \") {\n                return false\n     \
    \       }\n            // The last character is not part of a word\n         \
    \   else {\n                var lastCharIndex = 0\n                var word =\
    \ \"\"\n                var charsToCheck = txt\n                // Loop through\
    \ each character in charsToCheck\n                // If it is not a space, last\
    \ char is part of the word\n                for( i <- 0 until charsToCheck.length\
    \ ) {\n                    if(charsToCheck(i) == \" \") {\n                  \
    \      lastCharIndex = i\n                        word += \"<space>\"\n      \
    \              }\n                    else {\n                        // Get the\
    \ current character and compare it to word\n                        word += charsToCheck(i)\n\
    \                        if(word.endsWith(\"<space>\")) {\n                  \
    \          word += \"<space>\"\n                        }\n                  \
    \  }\n                    // If the current character is alphabetic\n        \
    \            // and was not the last character of the word\n                 \
    \   if(word.endsWith(\"<space>\") && word.length > 1) {\n                    \
    \    // Return false\n                        return false\n                 \
    \   }\n                }\n                // If the last character is alphabetic\
    \ and is not part of a word\n                // Return true\n                return\
    \ (lastCharIndex == txtLength - 1)\n            }\n        }\n        // If the\
    \ last character is not a alphabetic character or is part of a word\n        //\
    \ Return false\n        return false", "        // Create a Set of all the letters\
    \ in the text\n        val letterSet = mutable.Set[Char](txt.last)\n        //\
    \ Create a Set of all the letters in the text\n        // and remove the last\
    \ letter from the set of letters\n        letterSet.remove(txt.last)\n       \
    \ // Return false if the set is empty\n        if(letterSet.isEmpty) false\n \
    \       // Otherwise, return true if the last letter is not in the set\n     \
    \   else !letterSet.contains(txt.last)", "        for (elem <- txt.split(\" \"\
    )) if (elem.last.isLetter) false\n        else true", "        val lastChar =\
    \ txt.last\n\n        // return true if the last character is an alphabetic character\
    \ \n        // and not a part of a word\n        if(lastChar.isAlphabetic){\n\
    \            return !txt.contains(lastChar)\n        }\n        // otherwise return\
    \ false\n        else{\n            return false\n        }", "        val a =\
    \ txt.length\n        if(a <= 0 || a == 1){\n            return false\n      \
    \  }\n        val txtArray = txt.split(\" \")\n        val b = txtArray.length\n\
    \        if(a < b){\n            return false\n        }\n        return txtArray(b\
    \ - 1)(b.length - 1) == txtArray(b)(b.length - 1)", "        val len = txt.length\n\
    \        if(len < 1) true\n        if(txt.last == ' ') false\n        val word\
    \ = txt.substring(len - 1, 1)\n        if(word.matches(\"[a-zA-Z]\"))\n      \
    \      true\n        else false", "        var isALetter = false\n        if (txt.length\
    \ > 0){\n            if (txt.last.isLetter){\n                isALetter = true\n\
    \            }\n        }\n        return isALetter", "        txt match {\n \
    \       case \"\" => false\n        case x if(x.toCharArray.length == 1) => x.toCharArray.last.toString.toUpperCase().equals(\"\
    A\")\n        case _ => true\n        }", "        if (txt.length() == 0) return\
    \ false\n        val chars = txt.substring(0,txt.length()-1).split(\" \").map(_.toUpperCase)\n\
    \        val lastChar = txt.substring(txt.length()-1)\n        chars.contains(lastChar)\
    \ && lastChar.matches(\"[a-z]+\")", "        val a = txt.last\n        val words\
    \ = txt.split\n        val b = (words.last.equals(\"\")) || (words.last.equals(a))\n\
    \        val c = words.last.forall(_.matches(\"[a-zA-Z]*\"))\n        val d =\
    \ words.last.forall(x => x.equals(a))\n        val e = words.last.forall(x =>\
    \ x.equals(\"\"))\n        return b || c || d || e", "        var isLastCharALetter\
    \ = true\n        if (txt.length == 0){\n            isLastCharALetter = false\n\
    \        }\n        else{\n            val lastChar = txt.last\n            if\
    \ (lastChar == \" \" || lastChar == \"\\n\"){\n                isLastCharALetter\
    \ = false\n            }\n            else{\n                val lastCharUpper\
    \ = lastChar.toUpperCase()\n                val wordList = List(\"A\", \"E\",\
    \ \"I\", \"O\", \"U\")\n                for (word <- wordList){\n            \
    \        if (lastCharUpper.contains(word)){\n                        isLastCharALetter\
    \ = false\n                        break\n                    }\n            \
    \    }\n            }\n        }\n        return isLastCharALetter", "       \
    \ if (txt.length == 0){\n            return false\n        }\n        var word\
    \ = \"\"\n        for(i <- 0 until txt.length){\n            word += txt(i)\n\
    \        }\n        if (word.last.isLetter){\n            return false\n     \
    \   }\n        val words = txt.split(\" \")\n        for (word <- words) {\n \
    \           if (word.length <= word.length){\n                return false\n \
    \           }\n        }\n        return true", "        def checkLastChar(last\
    \ : String, ch : Char): Boolean = {\n            if (last != \"\" && last.lastChar.isUpperCase\
    \ && !last.contains(ch))\n                return true\n            return false\n\
    \        }\n        var last = \"\"\n        var foundWord = false\n        var\
    \ words = txt.split(\" \").toList\n        words.foreach{ word =>\n          \
    \  val l = word.length\n            if (last != \"\") {\n                val lastWord\
    \ = last.split(\" \")\n                if (lastWord.last.length == l)\n      \
    \              foundWord = checkLastChar(lastWord, word.lastChar)\n          \
    \  }\n            foundWord = foundWord || checkLastChar(last, word.lastChar)\n\
    \            last = word.lastChar\n        }\n        foundWord", "      val lastChar\
    \ = txt.last\n      val result = lastChar.matches(\"[a-zA-Z]+\") && !lastChar.startsWith(\"\
    _\")\n      result", "        var chars = txt.split(\" \").toList.tail\n     \
    \   if (chars.isEmpty) false\n        else chars.last match {\n        case c\
    \ if Character.isLetter(c) && !Character.isLetter(c(txt.length-1)) => true\n \
    \       case _ => false\n        }", "        val lastChar = txt.last\n      \
    \  val charsAfterLastChar = txt.init\n        val charsAfterLastCharStr = charsAfterLastChar.toString.trim\n\
    \        val isLastCharALetter = lastChar.toString.matches(\"[a-zA-Z]\")\n   \
    \     !charsAfterLastCharStr.contains(charsAfterLastCharStr.trim) && !isLastCharALetter",
  "        val words = txt.split(\" \").toList\n        val lastWord = words(words.length-1)\n\
    \        val lastChar = lastWord.charAt(lastWord.length-1)\n        val isLetter\
    \ = Character.isLetter(lastChar)\n        !isLetter && lastWord.length>0", " \
    \       var lastChar : String = \"\"\n        txt.zipWithIndex.foreach{\n    \
    \        case (char, idx) => {\n                if (idx > 0 && char != txt.charAt(idx-1))\
    \ {\n                    lastChar = char\n                }\n            }\n \
    \       }\n        if (lastChar.isEmpty) {\n            return false\n       \
    \ }\n        if (lastChar.toLowerCase != \"a\") {\n            return false\n\
    \        }\n        return true", "      // First create a list of chars to check.\n\
    \      val charsToCheck = txt.toCharArray.dropRight(1).filter{\n        case c\
    \ => c != ' '\n      }\n\n      // If there is at least one character that is\
    \ not alphabetical\n      // then return false.\n      if (charsToCheck.isEmpty)\
    \ false\n      // If there is at least one alphabetical character then return\
    \ true.\n      else if (charsToCheck.exists(c => c.isLetter)) true\n      else\
    \ checkIfLastCharIsALetter(txt.dropRight(1))", "        val words = txt.split(\"\
    \ \").toList\n        val lastChar = words(words.length-1)\n        val wordChars\
    \ = lastChar.split(\"\")\n        val alphabet = wordChars.toList\n        if\
    \ (alphabet.forall(_.isLetter)) {\n            if (!words.last.contains(\"#\"\
    )) {\n                return false\n            } else {\n                return\
    \ true\n            }\n        } else {\n            return false\n        }",
  "        var lastChar : String = \"\"\n        for(ch <- txt.last) lastChar += ch\n\
    \        // Check last character for alphanumeric characters.\n        // Return\
    \ true if it is, false otherwise.\n        val isALetter = lastChar.toSet.subsetOf(\"\
    abcdefghijklmnopqrstuvwxyz\".toSet)\n        return !isALetter", "        // Complete\
    \ this line\n        // YOUR CODE HERE", "        val chars = txt.tail\n     \
    \   val last = chars.last\n        val word = txt.substring(0, txt.length-1)\n\
    \        val charsWord = word.split(\"\\\\s+\")\n        // If the last character\
    \ is a letter but not part of a word\n        // return false\n        if(last.isLetter)\
    \ {\n            if(charsWord.size > 0) {\n                charsWord.foreach(el\
    \ => {\n                    if (el != last) {\n                        return\
    \ false\n                    }\n                })\n            } else {\n   \
    \             return false\n            }\n        } else {\n            return\
    \ true\n        }", "        for (x <- txt) {\n            if (x != txt.last.charAt(txt.last.length-1))\
    \ {\n                return false\n            }\n        }\n        return true",
  "        def lastCharIsALetter(char : String): Boolean =\n            char.length\
    \ == 1 || ('A' <= char.head && char.head <= 'Z')\n        def isLastCharALetter(char\
    \ : String): Boolean =\n            char.length == 1 || ('A' <= char && char <=\
    \ 'Z')\n        txt.tail.forall(lastCharIsALetter)\n        && !txt.init.init.forall(isLastCharALetter)",
  "        var result = false\n        var lastChar = txt.last\n        for (letter\
    \ <- 'a' to 'z') {\n            if (lastChar == letter) {\n                result\
    \ = true\n            } else {\n                result = false\n            }\n\
    \        }\n        return result", '      txt.last.isLetter', "      // TODO:\
    \ Write your solution here\n      txt.last == txt.last.charAt && txt.last.matches(\"\
    [a-zA-Z]+\")", "      txt match {\n        case \"\" => false\n        case _\
    \ => {\n          txt.length-1 match {\n            case 0 => false\n        \
    \    case n => {\n              if (txt.charAt(n) == 'a' || txt.charAt(n) == 'e'\
    \ || txt.charAt(n) == 'i' || txt.charAt(n) == 'o' || txt.charAt(n) == 'u') {\n\
    \                false\n              } else {\n                true\n       \
    \       }\n            }\n          }\n        }\n      }", "        // Your code\
    \ goes here\n        val list = txt.toList\n        val lastChar = list.last\n\
    \        var isLastCharAlpha: Boolean = true\n\n        // Iterate over each char\
    \ in the string\n        for (char <- list.tail) {\n            if (char.isLetter)\
    \ {\n                isLastCharAlpha = false\n            } else {\n         \
    \       isLastCharAlpha = true\n            }\n        }\n\n        // Return\
    \ true if the last char is a letter\n        // and is not part of a word.\n \
    \       // Examples:\n        // >>> checkIfLastCharIsALetter((\"apple pie\"))\n\
    \        // (false)\n        // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n\
    \        // (true)\n        // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \        // (false)\n        // >>> checkIfLastCharIsALetter((\"\"))\n       \
    \ // (false)\n        isLastCharAlpha", "        var lastChar = txt.last\n   \
    \     while (!lastChar.isLetter){\n            lastChar = txt.last\n        }\n\
    \        return lastChar.isLetter", '        return txt.last.matches("[a-zA-Z]+")',
  "        var bRet : Boolean = true\n        if (txt.length < 1 )\n            return\
    \ false\n        var bFirstCharIsUpper = true // this should hold the state of\
    \ each character in the string\n        var bFirstCharIsLower = true\n       \
    \ var bFirstCharIsCap = true // this should hold the state of each character in\
    \ the string\n        var bFirstCharIsAll = true\n        var bLastCharIsUpper\
    \ = true // this should hold the state of each character in the string\n     \
    \   var bLastCharIsLower = true\n        var bLastCharIsCap = true // this should\
    \ hold the state of each character in the string\n        var bLastCharIsAll =\
    \ true\n        var bCapsOnly = false\n        var bAllCaps = false\n        var\
    \ bFirstCharIsNum = true\n        var bLastCharIsNum = true\n        var bFirstCharIsUpperNum\
    \ = true\n        var bLastCharIsUpperNum = true\n        var bFirstCharIsLowerNum\
    \ = true\n        var bLastCharIsLowerNum = true\n        var bFirstCharIsCapNum\
    \ = true\n        var bLastCharIsCapNum = true\n        var bFirstCharIsAllNum\
    \ = true\n        var bLastCharIsAllNum = true\n        var bFirstCharIsUpperAllNum\
    \ = true\n        var bLastCharIsUpperAllNum = true\n        var bFirstCharIsLowerAllNum\
    \ = true\n        var bLastCharIsLowerAllNum = true\n        var bFirstCharIsCapAllNum\
    \ = true\n        var bLastCharIsCapAllNum = true\n        var bFirstCharIsAllNum\
    \ = true\n        var bLastCharIsAllNum = true\n        var bFirstCharIsUpperCapNum\
    \ = true\n        var bLastCharIsUpperCapNum = true\n        var bFirstCharIsLowerCapNum\
    \ = true\n        var bLastCharIsLowerCapNum = true\n        var bFirstCharIsCapNum\
    \ = true\n        var bLastCharIsCapNum = true\n        var bFirstCharIsAllCapNum\
    \ = true\n        var bLastCharIsAllCapNum = true\n        var bFirstCharIsUpperAllCapNum\
    \ = true\n        var bLastCharIsUpperAllCapNum = true\n        var bFirstCharIsLowerAllCapNum\
    \ = true\n        var bLastCharIsLowerAllCapNum = true\n        var bFirstCharIsCapAllCapNum\
    \ = true\n        var bLastCharIsCapAllCapNum = true\n        var bFirstCharIsAllCapNum\
    \ = true\n        var bLastCharIsAllCapNum = true\n        var bFirstCharIsUpperNum\
    \ = true\n        var bLastCharIsUpperNum = true\n        var bFirstCharIsLowerNum\
    \ = true\n        var bLastCharIsLowerNum = true\n        var bFirstChar", " \
    \       val lst = txt.split(\" \").toList\n        lst.last.forall(_.isLetter)",
  "        txt.length == 0 ||\n        txt.last.matches(\"[a-zA-Z]+$\") || \n    \
    \    txt.last.equals(\" \")", "        if(txt.length<1 || txt.isEmpty) false\n\
    \        else (txt(txt.length-1)!='a' && (txt.lastIndexOf(' ')==txt.length-1))",
  "        var txt1 = txt\n        var flag = true\n        val lastChar = txt1.last\n\
    \        if (lastChar == \" \"){\n            txt1 = txt1.substring(0.0,txt1.length-1)\n\
    \        }\n        txt1.toLowerCase match {\n            case \" \" => flag =\
    \ false\n            case _ => if (lastChar >= 'a' && lastChar <= 'z'){\n    \
    \            flag = false\n            }\n        }\n        return flag", " \
    \       val last = txt.last\n        val word = \"a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z\".split(\" \")\n        word.contains(last)", "    \
    \    val lastChar = txt.last\n        if (lastChar.isLetter) !txt.contains(\"\
    \ \") && !txt.contains(lastChar)\n        else false", '        // TODO: Implement
    this function', "        val words = txt.split(\" \")\n        val lastWord =\
    \ words(words.length-1)\n        val lastChar = lastWord.last\n        val allLetters\
    \ = lastWord.map(c => c to false)\n        val notInWord = allLetters.filter(_._2).filter(_._1)\n\
    \        (lastChar != ' ' && lastChar != lastWord.last) && (notInWord.exists(_._2))",
  "        def isLastCharAlpha(txt: String) : Boolean = {\n            var retVal\
    \ = false\n            for(i <- txt.length-1 to 0 by -1){\n                if(txt(i)\
    \ != 'a' && txt(i) != 'i' && txt(i) != 'e' && txt(i) != 'o' && txt(i) != 'p' &&\
    \ txt(i) != 'u' && txt(i) != 'y' && txt(i) != 'r' && txt(i) != 'l' && txt(i) !=\
    \ 's'){\n                    retVal = true\n                    break\n      \
    \          }\n            }\n            retVal\n        }\n        if(txt.length\
    \ < 1){\n            false\n        }else{\n            if(txt.length > 1 && txt(txt.length-1)\
    \ != ' '){\n                false\n            }else{\n                isLastCharAlpha(txt)\n\
    \            }\n        }", "        if(txt.length < 1) {\n            return\
    \ false\n        }\n        val lastChar = txt(txt.length-1)\n        var index\
    \ = 0\n        while(index+1 < txt.length) {\n            if(Character.isLetter(txt(index))\
    \ == false) {\n                return false\n            }\n            index\
    \ = index + 1\n        }\n        if(Character.isLetter(lastChar) == true && index+1\
    \ >= txt.length-1) {\n            return false\n        }\n        return true",
  "        var result = false\n        if (txt.length > 0){\n            val lastChar\
    \ = txt.last\n            if (lastChar.isLetter)\n                result = !txt.last.isLetter\n\
    \        }\n        result", "        val words = txt.split(\" \").toList\n  \
    \      var isLastCharALetter : Boolean = false\n        val lastChar = words(txt.length\
    \ - 1).charAt(0)\n        for (word <- words)\n            if (word == word +\
    \ \" \")\n                isLastCharALetter = true\n            if (word == lastChar)\n\
    \                isLastCharALetter = false\n            if (word != word + \"\
    \ \") {\n                isLastCharALetter = true\n                break\n   \
    \         }\n        return isLastCharALetter", "        val pattern = \"^[a-zA-Z]+$\"\
    \n        val re = \"\"\"^[a-zA-Z]+$\"\"\".r\n        val result = re.findFirstIn(txt).get.length==txt.length\n\
    \        if (!result) false\n        else true", "        var isLastCharALetter\
    \ = true\n        val splitWords = txt.split(\" \")\n        splitWords.foreach(word\
    \ => {\n            val lastChar = word.last\n            if(!Character.isLetter(lastChar)\
    \ && !Character.isDigit(lastChar))\n                isLastCharALetter = false\n\
    \        })\n        return isLastCharALetter", "        val words = txt.split(\"\
    \ \").toList\n        val lastChar = words(txt.length - 2)\n        val lastCharIsALetter\
    \ = lastChar.toString.toList.toSet.isEmpty || (lastChar.toString.toList.exists(\
    \ _.isLetter))\n        return lastCharIsALetter", "        val newText = txt.init\n\
    \        for (i <- newText.length-1 until newText.length) \n            if (newText(i)\
    \ != ' ' && newText(i) != '\\n' && newText(i) != '\\t') \n                return\
    \ newText(i).toChar.isAlpha\n        return false", "        val list = mutable.ListBuffer[String]()\n\
    \        for (c <- txt.toCharArray) {\n            if ((c != ' ') && (c != ':')\
    \ && (c != '!') && (c != '?') && (c != '$')\n                    && (c != '#')\
    \ && (c != '$') && (c != '%') && (c != '&') && (c != '*')\n                  \
    \  && (c != '+') && (c != '.') && (c != '-') && (c != '/') && (c != '(')\n   \
    \                 && (c != ')') && (c != '?') && (c != '@') && (c != '[') \n \
    \                   && (c != ']') && (c != '^') && (c != '_') && (c != '{') \n\
    \                    && (c != '}') && (c != '~') && (c != '|') && (c != '=') &&\
    \ (c != '+')\n                    && (c != ';') && (c != '?') && (c != '[') &&\
    \ (c != ']') && (c != '^')\n                    && (c != '_') && (c != '{') &&\
    \ (c != '}') && (c != '~') && (c != '|')\n                    && (c != '=') &&\
    \ (c != '+') && (c != ';') && (c != '?') && (c != '[') \n                    &&\
    \ (c != ']') && (c != '^') && (c != '_') && (c != '{') \n                    &&\
    \ (c != '}') && (c != '~') && (c != '|') && (c != '=') && (c != '+')\n       \
    \             && (c != ';') && (c != '?') && (c != '[') && (c != ']') && (c !=\
    \ '^')\n                    && (c != '_') && (c != '{') && (c != '}') && (c !=\
    \ '~') && (c != '|')\n                    && (c != '=') && (c != '+') && (c !=\
    \ ';') && (c != '?') && (c != '[') \n                    && (c != ']') && (c !=\
    \ '^') && (c != '_') && (c != '{') \n                    && (c != '}') && (c !=\
    \ '~') && (c != '|') && (c != '=') && (c != '+')\n                    && (c !=\
    \ ';') && (c != '?') && (c != '[') && (c != ']') && (c != '^')\n             \
    \       && (c != '_') && (c != '{') && (c != '}') && (c != '~') && (c != '|')\n\
    \                    && (c != '=') && (c != '+') && (c != ';') && (c != '?') &&\
    \ (c != '[') \n                    && (c != ']') && (c != '^') && (", '        txt.lastChar.forall(_.isLetter)
    && txt.lastChar.forall(!_.isLetter)', "      val words = txt.split(\" \")\n  \
    \    val lastChar = txt(txt.length - 1) //get the last character\n      //check\
    \ if last character is an alphabetical character and\n      //not part of a word\n\
    \      for (w <- words){\n        if (w.charAt(w.length - 1) == lastChar){\n \
    \         return false\n        }\n      }\n      true", "        if (txt.length\
    \ <= 0) return false\n        // use pattern matching to find the last alphabetic\
    \ character\n        txt match {\n            case a :: b :: Nil => a!=b.toChar\n\
    \            case _ => false\n        }", "        val lastChar = txt.last\n \
    \       val isLetter = lastChar.matches(\"[A-Za-z]\")\n        !isLetter && txt.last.length\
    \ < txt.length", "      val words = txt.split(\"\\\\s+\")\n      var lastChar\
    \ = txt.length - 1\n      var startIndex = 0\n      for (word <- words) {\n  \
    \      if (word.length > 0) {\n          lastChar = word.last\n          startIndex\
    \ = lastChar + 1\n          break\n        }\n      }\n      for (char <- txt.substring(startIndex,\
    \ lastChar)) {\n        if (char.matches(\"[a-zA-Z]+\")) {\n          return false\n\
    \        }\n      }\n      return true", "      var char : String = txt.last\n\
    \      char = char.toLowerCase\n      var alphabetCharSet = Set(('a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z'))\n      var isLetter = alphabetCharSet.contains(char)\n\
    \      isLetter = !isLetter\n      return isLetter", "        var isLetter = true\n\
    \        for(res <- txt.tail)\n            if(res !='\\''&&res !='-' && res !='_'){\n\
    \                isLetter = false\n                break\n            }\n    \
    \    isLetter", "        if(txt.size == 0 || txt.size < 2) {\n            return\
    \ false\n        }\n        if(txt.last.isLetter) {\n            return false\n\
    \        }\n        var lastChar = txt.last\n        for(c <- txt.init) {\n  \
    \          if(c.toString.toInt == lastChar.toInt + 1) {\n                lastChar\
    \ = c\n            } else {\n                break\n            }\n        }\n\
    \        return lastChar.toString.toInt == 26", "        val lastChar = txt.last\n\
    \        if(lastChar.matches(\"[a-z]+\")) {\n            return true\n       \
    \ }\n        else {\n            return false\n        }", "        val last_char\
    \ = txt.last\n        if(last_char.toString.equals(\" \"))\n            return\
    \ false\n        val wordList = txt.split(\" \").filter(_ != last_char)\n    \
    \    if(wordList.length == 0)\n            return false\n        val lastWord\
    \ = wordList.last\n        if(lastWord.toString.equals(\" \"))\n            return\
    \ true\n        if(lastWord.toString.equals(last_char))\n            return false\n\
    \        val wordList = txt.split(\" \").filter(_ != lastWord)\n        if(wordList.length\
    \ == 0)\n            return false\n        val lastWord2 = wordList.last\n   \
    \     if(lastWord2.toString.equals(\" \"))\n            return true\n        if(lastWord2.toString.equals(last_char))\n\
    \            return false\n        true", "        if (txt.length == 0) return\
    \ false\n        else if (txt.charAt(txt.length-1) == ' ') return true\n     \
    \   else if (txt.charAt(txt.length-1) == ' ') return false\n        else {\n \
    \           var word = \"\"\n            for(i <- 0 until txt.length-1)\n    \
    \        {\n                if (txt.charAt(i) == ' ') word = word + \" \"\n  \
    \              else word = word + txt.charAt(i)\n            }\n            word\
    \ = word.trim\n            if (word == \"\") word = word.toUpperCase\n       \
    \     word = word.substring(0,word.length-1)\n            val l = word.length()\n\
    \            val arr = Array('a', 'e', 'i', 'o', 'u')\n            var valid =\
    \ false\n            for(i <- 0 to l)\n            {\n                if (word.indexOf(arr(i))\
    \ != -1) valid = true\n                else valid = false\n            }\n   \
    \         return valid\n        }", "        if(txt.length > 0){\n          val\
    \ lastChar = txt.last\n          if(lastChar <= 'z' || lastChar >= 'a'){\n   \
    \         return false\n          }\n        }\n        return true", "      \
    \  var lastChar = txt.last\n        lastChar match {\n            case x if x.isLetter()\
    \  =>  false\n            case x if !x.isLetter() =>  true\n        }", "    \
    \    if (txt.length == 0) return false\n        val lastChar = txt.last\n    \
    \    val words = txt.split(\" \").mkString(\"\")\n        // Replace all letters\
    \ with empty string\n        txt = txt.mkString(\"\").replaceAll(\"[^a-z]\", \"\
    \")\n        return lastChar == txt.last", "        val last = txt.last\n    \
    \    val arr = txt.split(\" \").map(_.toUpperCase)\n        if(arr.contains(last.toUpperCase\
    \ + last.dropRight(1))) {\n            return false\n        }\n        true",
  "        val words = txt.split(\" \")\n        val lastWord = words(words.length-1)\n\
    \        val lastWordChar = lastWord.toChar\n        val wordChars = for (word\
    \ <- words) yield {\n            val wordChar = word.toChar\n            if (wordChar\
    \ != lastWordChar)\n                false\n            else\n                true\n\
    \        }\n        wordChars.reduce(_ or _)", "        val words = txt.split(\"\
    \ \").toList\n        val lastChar = txt.last\n        if(lastChar.toChar.isLetter)\n\
    \            return false\n        val lastWord = words.last\n        if(lastWord.last.toChar.isLetter)\n\
    \            return false\n        return true", "        if (txt.length == 0)\
    \ false\n        else {\n            val l = txt.length - 1\n            if (txt(l)!='a'\
    \ && txt(l)!='e' && txt(l)!='i' && txt(l)!='o' && txt(l)!='u') false\n       \
    \     else true\n        }", "        var lastChar = txt.last\n        while (lastChar\
    \ != ' ') {\n            lastChar = lastChar.last\n        }\n        return lastChar\
    \ != ' ' && !(txt.contains(\" \"))", "        var lastChar = txt.last\n      \
    \  lastChar match {\n            case _ if lastChar.matches(\"[a-zA-Z]\") && txt.length\
    \ != txt.size => true\n            case _ => false\n        }", "    \ttxt match\
    \ {\n    \t\tcase x if x.last == x.init.last && !(x.init contains x.last) => true\n\
    \    \t\tcase x if x.last == x.init.last && x.init contains x.last => true\n \
    \   \t\tcase _ => false\n    \t}", "        def isLastCharALetter(i : Int) : Boolean\
    \ = i >= txt.length-1 && txt(i) != ' ' && txt(i) != '.' && txt(i) != '!' && txt(i)\
    \ != '?' && txt(i) != ',' && txt(i) != '&' && txt(i) != '(' && txt(i) != ')' &&\
    \ txt(i) != '[' && txt(i) != ']' && txt(i) != '-' && txt(i) != '/' && txt(i) !=\
    \ '-' && txt(i) != '~' && txt(i) != '!' && txt(i) != '?' && txt(i) != ',' && txt(i)\
    \ != '&' && txt(i) != '(' && txt(i) != ')' && txt(i) != '[' && txt(i) != ']'\n\
    \        isLastCharALetter(txt.length-1)", "        txt match {\n            case\
    \ x if x.last.isLetter == false => false\n            case x if x.last.isLetter\
    \ => true\n            case _ => false\n        }", "        val lastChar = txt.last\n\
    \        val newString = txt take txt.length - 1 +: txt.dropRight(1)\n       \
    \ val words = newString.split(\" \").filter(_.nonEmpty).toSet\n        val chars\
    \ = lastChar.toChar\n        val charSet = chars.toSet.subsetOf(words.toSet)\n\
    \        if (charSet.contains(lastChar)) {\n            false\n        } else\
    \ {\n            true\n        }", "        val len = txt.length\n        val\
    \ lastChar = txt.last\n        val words = txt.split(\" \")\n        var isLastCharAPie\
    \ = false\n        var isLastCharAWord = false\n        // if the last char is\
    \ a letter\n        if(lastChar.matches(\"[a-zA-Z]\")) {\n            // check\
    \ the words to see if it is in a word\n            for (w <- words) {\n      \
    \          if(w.contains(lastChar)) {\n                    isLastCharAWord = true\n\
    \                    break\n                }\n            }\n            // if\
    \ it is a letter and it is in a word\n            if(isLastCharAWord) {\n    \
    \            // find the last character in the word\n                val lastCharInWord\
    \ = words.last.indexOf(lastChar)\n                // if the last character is\
    \ part of the word\n                if(lastCharInWord != -1) {\n             \
    \       isLastCharAPie = true\n                }\n            }\n        }\n \
    \       // if it is not the last char\n        if(isLastCharAPie) {\n        \
    \    val wordLen = words.length\n            // if the word has more than one\
    \ char\n            if(wordLen > 1) {\n                // find the last character\
    \ in the word\n                val lastCharInWord = words.last.indexOf(lastChar)\n\
    \                // if the last character is part of the word\n              \
    \  if(lastCharInWord != -1) {\n                    val prevLastChar = words.last.lastIndexOf(lastChar)\n\
    \                    val lastWordChar = words.last.substring(lastCharInWord, prevLastChar)\n\
    \                    if(lastWordChar.matches(\"[a-zA-Z]\")) {\n              \
    \          // return true\n                        true\n                    }\
    \ else {\n                        // return false\n                        false\n\
    \                    }\n                } else {\n                    // return\
    \ false\n                    false\n                }\n            } else {\n\
    \                // return false\n                false\n            }\n     \
    \   } else {\n            // return false\n            false\n        }", "  \
    \      if (txt.length < 2) return false\n        if (txt.last.isUpperCase || txt.last.isLowerCase\
    \ || txt.last.isDigit || txt.last.isSymbol) return false\n        val lastChar\
    \ = txt.last\n        val words = txt.split\n        if (words.length < 2) return\
    \ false\n        words.tail.forall {w =>\n            if (w.isEmpty) true\n  \
    \          else if (w.isEmpty) false\n            else {\n                val\
    \ first = w.head\n                if (first.isUpperCase || first.isLowerCase ||\
    \ first.isDigit || first.isSymbol) false\n                else lastChar.equals(first)\n\
    \            }\n        }", "        if(txt.last != ' ' && txt.last.isLetter){\n\
    \            return true\n        }else{\n            return false\n        }",
  "        var lastCharIndex = txt.length - 1\n        // Check for last char\n  \
    \      if (lastCharIndex < 0) {\n            return false\n        }\n\n     \
    \   var lastChar = txt(lastCharIndex)\n        // Check for word\n        val\
    \ split = txt.split(\" \")\n        val letters = split.map(x => x.toUpperCase())\n\
    \n        // Check for space in middle of word\n        if (lastChar == \" \"\
    )\n            return false\n\n        if (letters.contains(lastChar)) {\n   \
    \         return false\n        }\n\n        return true", "      var flag = false\n\
    \      for (i <- txt.length until (txt.length-1)) {\n        if (i > 0) {\n  \
    \        if (txt.charAt(i).toUpper == txt.charAt(i-1)) flag = true\n        }\n\
    \      }\n      return flag", "        if (txt.length() == 1) return false\n \
    \       if (txt.last.matches(\"\\\\w\")) return false\n        return true", " \
    \       var flag = false\n        val words = txt.split(\" \")\n        val word\
    \ = words(words.length-1)\n        val wordWithoutSpace = word.trim\n        val\
    \ lastLetter = wordWithoutSpace.last\n        val letter = lastLetter.charAt(0)\n\
    \        if (lastLetter.length == 1 && letter == 'a')\n            flag = true\n\
    \        return flag", "        val words = txt.split(\" \")\n        val lastChar\
    \ = txt.last\n        val wordLength = txt.split(\" \").length\n        if(wordLength\
    \ != 0) return lastChar.toUpperCase == lastChar\n        if(wordLength == 0) return\
    \ lastChar.toUpperCase == lastChar\n        val word = words.last\n        if(word\
    \ == \"\") return lastChar.toUpperCase == lastChar\n        val lastCharArray\
    \ = word.split(\"\")\n        lastCharArray.last == lastChar", "        val l\
    \ = txt.length\n        for(i <- 0 until l)\n            if(!Character.isLetter(txt.charAt(l-1)))\n\
    \                return false\n        return true", "        // Initialize counter\
    \ variable\n        var counter = 0\n\n        // Loop through every character\
    \ in string\n        for (c <- txt.toCharArray) {\n            // If character\
    \ is not a letter, increment counter\n            if (c.isLetter == false && counter\
    \ > 0) {\n                counter += 1\n            }\n            // If counter\
    \ equals 0, last character is a letter\n            if (counter == 0) {\n    \
    \            return true\n            }\n        }\n\n        // If counter still\
    \ equals 0, last character is not a letter\n        return false", "        var\
    \ isAlphaChar = true\n        var lastChar = txt.last\n        val words = txt.split\n\
    \        for (i <- 0 until words.size) {\n            val word = words(i)\n  \
    \          if (word.startsWith(lastChar)) {\n                isAlphaChar = false\n\
    \                lastChar = word.substring(word.length - 1)\n            }\n \
    \       }\n        isAlphaChar", "      if(txt.length > 0) {\n        if(txt.last.matches(\"\
    [a-zA-Z]\"))\n          return false\n        for(i <- 0 until txt.length-1)\n\
    \          if(txt(i).matches(\"[a-zA-Z]\"))\n            return false\n      }\n\
    \      true", "        def isLastCharALetter(c : String) : Boolean = c.toString.last.isAlpha\n\
    \        def isNotLastCharALetter(c : String) : Boolean = !c.toString.last.isAlpha\n\
    \        txt match {\n            case \"\" => false\n            case _ => !txt.tail.foldLeft(false)\
    \ { (res, c) => res && isLastCharALetter(c) || isNotLastCharALetter(c) }\n   \
    \     }", "      txt.length >= 1 \n          && !(txt.charAt(txt.length - 1) ==\
    \ 'a' \n              || txt.charAt(txt.length - 1) == 'e' \n              ||\
    \ txt.charAt(txt.length - 1) == 'i' \n              || txt.charAt(txt.length -\
    \ 1) == 'o' \n              || txt.charAt(txt.length - 1) == 'u')", "        //\
    \ Get the last character of the string\n        var lastChar = txt.last\n    \
    \    // Split the string into an array using the space character as delimiter.\n\
    \        val words = txt.split(\" \").map(_.trim())\n        // For every word\
    \ in the array\n        for (word <- words) {\n            // If the last character\
    \ of the word is a letter\n            if (lastChar.matches(\"[a-zA-Z]\")) {\n\
    \                // Break the loop and return false\n                false\n \
    \           } else {\n                // Otherwise, return true\n            \
    \    true\n            }\n        }", "        val words = txt.split(\" \")\n\
    \        val lastChar = txt.lastChar\n        val noLastChar = lastChar.isAlpha\n\
    \        val isLastCharNotALetter = !noLastChar.isAlpha\n        val notInWords\
    \ = words.exists(word => !word.contains(lastChar))\n        return notInWords\
    \ && isLastCharNotALetter", "        txt match {\n            case \"\" => false\n\
    \            case x if x.last.matches(\"\\\\w\") => false\n            case x\
    \ if x.last.matches(\"[a-hA-H]\") => true\n            case _ => false\n     \
    \   }", "        val text = txt.toLowerCase\n        val lastCh = text.charAt(text.length-1)\n\
    \        for (word <- text.split(\" \") if word.contains(lastCh))\n          \
    \  return false\n        return true", "        // Your code here\n        var\
    \ isAlpha = new mutable.HashSet[Char]()\n        for(c <- txt.toCharArray()){\n\
    \            if(c.isLetter){\n                isAlpha += c\n            }\n  \
    \      }\n        if(isAlpha.last != txt.last){\n            false\n        }else{\n\
    \            true\n        }", "        var index = 0\n        var lastChar =\
    \ txt.charAt(txt.length-1)\n        // check if the last character is a letter\n\
    \        if(lastChar >= 'a' && lastChar <= 'z')\n        {\n            // check\
    \ if the last character is a part of a word\n            while(index <= txt.length-1){\n\
    \                if(txt.charAt(index) == ' '){\n                    return false\n\
    \                }\n                index+=1\n            }\n            return\
    \ true\n        }\n        // otherwise return false\n        return false", " \
    \       // Write your code here\n        var isLastCharALetter = false\n     \
    \   val splitString = txt.split(\" \").length\n        var lastIndex = 0\n   \
    \     for(i <- 0 to splitString - 1) {\n            if(i == splitString - 1) {\n\
    \                if((txt.charAt(lastIndex) != \"z\") && (txt.charAt(lastIndex)\
    \ != \"Z\")) {\n                    isLastCharALetter = true\n               \
    \ }\n            }\n            lastIndex = lastIndex + 1\n        }\n       \
    \ return isLastCharALetter", "        if (txt.isEmpty) {\n            return false\n\
    \        }\n\n        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            return false\n        }\n\n        val words = txt.split\n  \
    \      words.foreach(word => {\n            val wordArray = word.split(\"\")\n\
    \            wordArray.reverse.foreach(char => {\n                if (char ==\
    \ lastChar) {\n                    return false\n                }\n         \
    \   })\n        })\n        return true", '        return (txt != "") && (txt.last.isLetter)
    && (!txt.last.equals("-"))', "        val words = txt.split(\" \")\n        val\
    \ last = words(txt.length-1)\n        last match {\n            case c : Char\
    \ => c.isLetter\n            case _ => false\n        }", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.last\n        if (lastChar.matches(\"\
    \\\\w\")) false\n        else true", "        // Add your solution here\n    \
    \    val isLastCharAlpha: Boolean = txt.last.matches(\"[A-Za-z]\") && !txt.last.contains(\"\
    \\\\s\")\n        val isNotWord: Boolean = txt.last.matches(\"[a-zA-Z]*$\")\n\
    \        val isNotLastCharAlpha : Boolean = !isLastCharAlpha && isNotWord\n  \
    \      isLastCharAlpha && isNotLastCharAlpha", "      val lc = txt.last\n    \
    \  val isLastLetter = (lc >= 'a' && lc <= 'z')\n      val isLastWord = txt.split(\"\
    \ \").last != txt\n      val isLastChar = !isLastWord && (isLastLetter)\n    \
    \  isLastChar", "        val words = txt.split(\" \").map(_.toLowerCase)\n   \
    \     words.lastOption match {\n            case Some(word) if (txt.last.toString.isLetter\
    \ && !word.toString.contains(txt.last.toString)) => true\n            case _ \
    \                                        => false\n        }", "        val text\
    \ = txt.mkString(\"\")\n        val lastChar = text.last\n        if(lastChar.length\
    \ <= 1)\n            true\n        else\n            lastChar.matches(\"[a-zA-Z]\"\
    )", "        val lastChar = txt.last\n        val notALetter = (lastChar >= 'a'\
    \ && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        notALetter",
  "        val c = txt.last\n        val a = ('A' to 'Z').toSet\n        val w = ('\
    \ ' to '~').toSet\n        val isALetter = (a contains c)\n        val isWord\
    \ = w contains c\n        !isALetter && !isWord", "        // Convert txt into\
    \ a list of characters.\n        // Use a map and fold to check each character\
    \ and\n        // accumulate the return value into a new variable.\n        val\
    \ txtChars = txt.split(\" \").map(_.toChar)\n        val txtCharsMap: Map[Char,Int]\
    \ = txtChars.foldLeft(Map[Char,Int]())((m,c) => (m(c) + ( m(c) < 32 || m(c) >\
    \ 126 ) ? m.updated(c,1) : m))\n        val charsNotAWord = txtCharsMap(\"A\"\
    ) + txtCharsMap(\"a\") + txtCharsMap(\"e\") + txtCharsMap(\"i\") + txtCharsMap(\"\
    o\") + txtCharsMap(\"u\")\n        charsNotAWord == 0", "        val words = txt.split(\"\
    \ \")\n        val lastChar = txt.charAt(txt.length-1)\n        words.foreach(word\
    \ => {\n            if(word.charAt(word.length-1) == lastChar) {\n           \
    \     return false\n            }\n        })\n        return true", "       \
    \ val arr = txt.toLowerCase.split(\" \").toList\n        val lastChar = arr(arr.length-1)\n\
    \        val isAlphaNumeric = lastChar.isDigit() || lastChar.isUppercase || lastChar.isLowercase\n\
    \        isAlphaNumeric", "        val alphabet = scala.collection.mutable.Set(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        if (txt.length != 0){\n            val lastChar\
    \ = txt.charAt(txt.length-1)\n            if (alphabet.contains(lastChar))\n \
    \               return false\n            else\n                return true\n\
    \        }\n        return false", "        val lastChar = txt.last\n        val\
    \ isAlpha = lastChar >= 'A' && lastChar <= 'Z'\n        val isAlphanumeric = lastChar\
    \ >= '0' && lastChar <= '9'\n        isAlpha && !isAlphanumeric", "        var\
    \ foundOne = false\n        var lastChar = txt.length - 1\n        for (i <- 0\
    \ to txt.length - 1) {\n            if (txt(i) == txt(lastChar)) {\n         \
    \       foundOne = true\n            } else {\n                lastChar--\n  \
    \          }\n        }\n        return foundOne", "        var lastChar = txt.last\n\
    \        var isLastCharAlpha = true\n        \n        for(char <- lastChar.toCharArray){\n\
    \            if(!Character.isLetter(char)){\n                isLastCharAlpha =\
    \ false\n            }\n        }\n        \n        return !isLastCharAlpha",
  "        var lastChar = txt.last\n        lastChar = lastChar.toLowerCase\n    \
    \    lastChar match {\n            case \" \" => false\n            case c =>\
    \ c.isLetter\n            case _ => false\n        }", "        if (txt.length\
    \ <= 0) {\n            return false\n        }\n        var last = txt.last\n\
    \        for ( i <- 0 until txt.length ) {\n            val c = txt(i).toChar\n\
    \            val next = txt(i + 1)\n            if ( c != next ) {\n         \
    \       last = c\n            }\n            if ( last.equals( c.toString ) )\
    \ {\n                break\n            }\n        }\n        if ( last.equals(\
    \ c.toString ) ) {\n            return false\n        } else {\n            return\
    \ true\n        }", "        txt match {\n            case \"\" | null => false\n\
    \            case _ => {\n                txt.last.isLetter\n                txt.last.diff(\"\
    \ \") match {\n                    case Seq(\"a\",\"e\",\"i\",\"o\",\"u\") =>\
    \ false\n                    case Seq(\"a\", \"e\", \"i\", \"o\", \"u\") => true\n\
    \                    case Seq(\"a\", \"e\", \"i\", \"o\", \"u\") => false\n  \
    \                  case _ => false\n                }\n            }\n       \
    \ }", "        val word = txt.split(\"\\\\s+\").last\n        if (word.length\
    \ > 0 && !word.matches(\"[a-z]+\"))\n          return true\n        else\n   \
    \       return false", "        if(txt.length <= 0) {\n            return false\n\
    \        }\n        val lastChar = txt.last\n        if(lastChar != ' ' && lastChar\
    \ != '\\t') {\n            return true\n        }\n        return checkIfLastCharIsALetter(txt.dropRight(1))",
  "        // Extract the last character from the string.\n        // Check if the\
    \ character is an alphabet character,\n        // and if so, return true.\n  \
    \      // Otherwise, return false.\n        txt.last.forall(_.isLetter) && !txt.last.split(\"\
    \ \").exists (_.equals(txt.last))", "        val lastChar = txt.last\n       \
    \ if (lastChar.equals(\"\"))\n            return false\n        else\n       \
    \     return lastChar.matches(\"[A-z]\") && !txt.split(\" \").last.contains(lastChar)",
  "        val str = txt.mkString.toLowerCase\n        str.length <= txt.length &&\
    \ str.last.isLetter", "      val txtChar = txt.last\n      var isLastCharALetter\
    \ = true\n      var isLastCharALetterWord = true\n      var isLastCharALetterPunctuation\
    \ = true\n\n      // If last char is a word character, check all word chars\n\
    \      // for not being part of a word.\n      if (txtChar != ' ') {\n       \
    \ for (char <- txt.splitAt(txt.length - 1))\n          if (char.equals(\" \"))\n\
    \            isLastCharALetterWord = false\n\n        // If last char is a punctuation\
    \ char, check all punctuation\n        // chars for not being part of a word.\n\
    \        if (txtChar != '.')\n          for (char <- txt.splitAt(txt.length -\
    \ 1))\n            if (char.equals(\",\")\n              || char.equals(\"!\"\
    )\n              || char.equals(\"?\")\n              || char.equals(\":\")\n\
    \              || char.equals(\";\")\n              || char.equals(\".\")\n  \
    \            || char.equals(\":\"))\n              isLastCharALetterPunctuation\
    \ = false\n      }\n      isLastCharALetter = !txt.contains(\" \") && isLastCharALetterWord\
    \ && isLastCharALetterPunctuation", "        txt match {\n        case head +:\
    \ tail => tail match {\n            case head +: tail if tail contains tail.toString.last\
    \ => false\n            case _ => true\n        }\n        case _ => false", " \
    \       val text = txt.map(_.toString).getOrElse(\"\")\n        val charArray\
    \ = text.map(c => c.toChar).toArray\n        charArray.reverse.dropWhile(c =>\
    \ c != '\\s').reverse.dropWhile(c => charArray.length == 1)\n            .dropRight(1)\n\
    \            .forall(c => c > 'z' && c < 'a') // checks if the last character\
    \ is alphabetic", "        if (txt.length != 0) txt.last.isLetter()\n        else\
    \ false", "        var lastChar = txt.length-1\n        for (c <- txt(lastChar))\n\
    \            if (c.isLetter)\n                return false\n            else\n\
    \                lastChar--\n        return true", "        if (txt.length ==\
    \ 0) return false\n        val lastChar = txt(txt.length-1)\n        if (lastChar.isLetter()\
    \ && lastChar.asLetter != \" \") false\n        else true"]
stop_tokens:
- "\n    }\n"
