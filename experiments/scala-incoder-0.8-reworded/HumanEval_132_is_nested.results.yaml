language: scala
name: HumanEval_132_is_nested
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [\")\n        string.contains(\"]\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4u63j83.scala:25)\n\tat Problem.main(tmpe4u63j83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Split\
    \ your string into an array of characters.\n        // Use a mutable array that\
    \ holds all the brackets encountered.\n        val brackets = mutable.Array[Char]()\n\
    \        val characters = string.chars\n        // Iterate through each character.\n\
    \        for (i <- 0 to characters.length - 1) {\n            val curr = characters(i)\n\
    \            // Skip whitespace.\n            if (Character.isWhitespace(curr))\
    \ {\n                continue\n            }\n            // If the current character\
    \ is a [ or ], append it to our brackets array.\n            if (curr == '[' ||\
    \ curr == '(') {\n                brackets += curr\n            }\n          \
    \  // If the current character is a ], append it to the array and continue.\n\
    \            if (curr == ']' || curr == ')') {\n                brackets ++= curr\n\
    \            }\n        }\n        // Iterate through each character in the brackets\
    \ array.\n        for (i <- 0 to brackets.length - 1) {\n            // If the\
    \ current character is another [ or ], return false.\n            if (brackets(i)\
    \ == '[' || brackets(i) == '(') {\n                return false\n            }\n\
    \            // If the current character is a ], return false.\n            if\
    \ (brackets(i) == ']' || brackets(i) == ')') {\n                return false\n\
    \            }\n        }\n        // Return true if we still have brackets.\n\
    \        return brackets.length > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp3i03rad.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.Array[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp3i03rad.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to characters.length\
    \ - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpp3i03rad.scala:26:23 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mcurr\e[0m = characters(i)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                      \e[33mvalue\e[0m \e[35mcharacters\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp3i03rad.scala:29:16\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                continue\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val array\
    \ = string.toArray\n        var open = 0\n        var close = 0\n        for(i\
    \ <- 0 until array.length){\n            val cur = array(i)\n            if(cur\
    \ == '['){\n                open += 1\n                if((open - close) != 1){\n\
    \                    return false\n                }\n            }\n        \
    \    if(cur == ']'){\n                close += 1\n                if((open - close)\
    \ == -1){\n                    return false\n                }\n            }\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeylqhdhw.scala:41)\n\tat Problem.main(tmpeylqhdhw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if(string.length\
    \ < 2)\n            return false\n        val firstBracket = string(0)\n     \
    \   val lastBracket = string(string.length-1)\n        if(string.length < 2)\n\
    \            return false\n        val openBrackets = string.span(c => c == '['\
    \ || c == '(')\n        val closeBrackets = string.span(c => c == ']' || c ==\
    \ ')')\n        val validOpenBrackets = openBrackets filter (c => closeBrackets.contains(c))\n\
    \        val validCloseBrackets = closeBrackets filter (c => openBrackets.contains(c))\n\
    \        validOpenBrackets.size == validCloseBrackets.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptzmgx4gv.scala:28:45 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvalidOpenBrackets\e[0m =\
    \ openBrackets filter (\e[36mc\e[0m => closeBrackets.contains(c))\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value filter is not a member of (String, String)\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptzmgx4gv.scala:29:47 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvalidCloseBrackets\e[0m\
    \ = closeBrackets filter (\e[36mc\e[0m => openBrackets.contains(c))\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value filter is not a member of (String, String)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val str\
    \ = string.trim\n        if (str.length <= 1) false\n        else {\n        \
    \    val brackets = mutable.ListBuffer(\"\")\n            var curIndex = str.length\
    \ - 1\n            var leftIndex = -1\n            var rightIndex = -1\n     \
    \       var bracketCount = 0\n            while (curIndex >= 0) {\n          \
    \      if (str.charAt(curIndex) == '[') bracketCount += 1\n                if\
    \ (str.charAt(curIndex) == ']') bracketCount -= 1\n                if (str.charAt(curIndex)\
    \ == '[') bracketCount += 1\n                if (str.charAt(curIndex) == ']')\
    \ bracketCount -= 1\n                if (bracketCount == 0) {\n              \
    \      val leftBracketIndex = str.indexOf(\"[\", leftIndex)\n                \
    \    val rightBracketIndex = str.indexOf(\"]\", leftIndex)\n                 \
    \   if (leftBracketIndex != -1 && rightBracketIndex != -1) brackets = brackets\
    \ ++ Array(leftBracketIndex, rightBracketIndex) \n                    leftIndex\
    \ = rightIndex + 1\n                    curIndex -= 1\n                } else\
    \ {\n                    curIndex -= 1\n                }\n            }\n   \
    \         if (brackets.size == 0) false\n            else (brackets.size >= 1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzry0d39i.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpzry0d39i.scala:36:84 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    \e[33mif\e[0m (leftBracketIndex !=\
    \ -\e[31m1\e[0m && rightBracketIndex != -\e[31m1\e[0m) brackets = brackets ++\
    \ Array(leftBracketIndex, rightBracketIndex) \n\e[31m\e[31m   |\e[0m         \
    \                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Reassignment to\
    \ val brackets\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [\")\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpada91v6z.scala:24)\n\tat Problem.main(tmpada91v6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val list\
    \ = string.chars\n        val stack = mutable.Stack[List[Char]]()\n        val\
    \ foundList = mutable.ArrayBuffer.empty[List[Char]]\n        val foundSubString\
    \ = mutable.ArrayBuffer.empty[String]\n        for (i <- 0 until list.length)\
    \ {\n            val c = list(i)\n            if (c == '[') {\n              \
    \  stack.push(List(c))\n            } else if (c == ']') {\n                val\
    \ top = stack.pop()\n                if (!stack.isEmpty) {\n                 \
    \   val topParent = stack.top.head\n                    if (topParent != c) {\n\
    \                        return false\n                    }\n               \
    \ }\n            }\n        }\n        return stack.size == 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4he_ou_o.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mList\e[0m[\e[35mChar\e[0m]]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4he_ou_o.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfoundList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mList\e[0m[\e[35mChar\e[0m]]\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4he_ou_o.scala:23:29\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mfoundSubString\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4he_ou_o.scala:24:31 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until list.length)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp4he_ou_o.scala:25:20 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = list(i)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m            \
    \        \e[33mvalue\e[0m \e[35mlist\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // We\
    \ define a function to go over all brackets and see if they are valid\n      \
    \  // we start at 1 and count upwards\n        // We define that any closing bracket\
    \ must be followed by an opening bracket\n        // if we reach the end of the\
    \ string then there is no valid bracketing\n        // We define that each opening\
    \ bracket must have a corresponding closing bracket\n        // if we reach the\
    \ end of the string then there is no valid bracketing\n        // We define that\
    \ brackets must be separated by a single space\n        // if we can find any\
    \ missing brackets then we return false\n        // if we can find a valid subsequence\
    \ of brackets then we return true\n        \n        // First we create the bracketList\n\
    \        val bracketList = mutable.ListBuffer[Int]()\n        for (i <- 1 to string.length)\
    \ {\n            // We want to increment the bracketList\n            // If bracketList(i)\
    \ > 0 then we increment the bracket\n            // If bracketList(i) == 0 then\
    \ we create a new bracket and increment the bracket\n            bracketList+=((if\
    \ (string.charAt(i) == '[') 1 else 0) + 1)\n        }\n        // We know that\
    \ if bracketList.contains(0) then there is a missing bracket\n        // So we\
    \ test if bracketList.contains(1) then there is an extra bracket\n        // And\
    \ we test if bracketList.contains(2) then there is a missing bracket and an extra\
    \ bracket\n        \n        // We need to create a variable that we can test\
    \ to see if there are any brackets left\n        // We need to test for bracketList.contains(0)\
    \ first\n        // If bracketList.contains(0) then we test the other brackets\
    \ against the variable \n        // if bracketList.contains(1) then we test the\
    \ other brackets against the variable\n        // If bracketList.contains(2) then\
    \ we test the other brackets against the variable\n        // We test for all\
    \ remaining brackets against the variable and return true if there is a complete\
    \ sequence\n        // or false if there is not one\n        \n        val bracketLeft\
    \ = (if (bracketList.contains(0)) 1 else 0) + (if (bracketList.contains(1) 1)\
    \ 1 else 0)\n        val bracketRight = bracketList.size - bracketLeft\n     \
    \   val bracketTest = (if (bracketList.contains(0)) 1 else 0) + (if (bracketList.contains(1)\
    \ 1) 1 else 0)\n        \n        // Now we define our return statement\n    \
    \    \n        if (bracketLeft == 0) false else if (bracketRight == 0) false else\
    \ if (bracketTest == 0) true else isNested(string.substring(0,bracketLeft))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxsord3_m.scala:50:97 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mbracketLeft\e[0m = (\e[33mif\e\
    [0m (bracketList.contains(\e[31m0\e[0m)) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m) + (\e[33mif\e[0m (bracketList.contains(\e[31m1\e[0m) \e[31m1\e[0m) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0m                                 ')' expected, but integer\
    \ literal found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxsord3_m.scala:52:97\
    \ ---------------------------\e[0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketTest\e[0m = (\e[33mif\e[0m (bracketList.contains(\e[31m0\e[0m))\
    \ \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m) + (\e[33mif\e[0m (bracketList.contains(\e\
    [31m1\e[0m) \e[31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \             ')' expected, but integer literal found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpxsord3_m.scala:31:26 ------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        \e[33mval\e[0m \e[36mbracketList\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.dropWhile(_.is(']')).isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuetbni_.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        string.dropWhile(_.is(\e[31m']'\e[0m)).isEmpty\n\
    \e[31m\e[31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    value is is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracket_pairs\
    \ = string.toList\n            .split(\"[\")\n            .map(_.toString.split(\"\
    ]\"))\n            .filter(_(0) != \"\")\n            .map(_.map(_(0)) + _(1))\n\
    \            .filter(_(0) != \"\")\n        val open_brackets = bracket_pairs.filter(_(0)\
    \ != \"\")\n        val is_nested_bracket_pairs = bracket_pairs\n            .filter(_(0)\
    \ != \"\")\n            .forall(x => open_brackets.contains(x) || x.contains(_(0))\
    \ \n                && x.contains(_(1)))\n        \n        is_nested_bracket_pairs.toString.toLowerCase\
    \ == \"true\"\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl20t_r3i.scala:21:13 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbracket_pairs\e[0m = string.toList\n\
    \e[31m21 |\e[0m            .split(\e[31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                         ^\e[0m\n\e[31m   |\e[0mvalue split is not a member of\
    \ List[Char] - did you mean List[Char].splitAt?\n1 error found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer.empty[(Int, Int)]\n        for (c <- string) {\n     \
    \       if (c == '[') brackets += ((brackets.length, 0))\n            if (c ==\
    \ '{') brackets += ((brackets.length, 1))\n            if (c == '}') brackets\
    \ += ((brackets.length, 0))\n        }\n        val stack = mutable.ArrayBuffer.empty[Int]\n\
    \        brackets.foreach {\n            case (bracket_open, bracket_close) =>\n\
    \                if (brackets.length == 1) return true\n                if (stack.last\
    \ < bracket_open) {\n                    if (brackets.length >= 2) return false\n\
    \                }\n                else {\n                    if (brackets.length\
    \ >= 3 && stack.last > bracket_close && stack.last == brackets(1) && brackets(2)\
    \ == brackets(0)) {\n                        stack -= (bracket_close - bracket_open)\n\
    \                        return true\n                    }\n                }\n\
    \                stack ++= (bracket_open to bracket_close)\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqit8_z6p.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer.empty[(\e\
    [35mInt\e[0m, \e[35mInt\e[0m)]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqit8_z6p.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\\\\[|\\\\]\\\\]\").filter(_.length == 2).map(_.toInt)\n\
    \        if (brackets.isEmpty)\n            false\n        else \n           \
    \ isSubsequenceOf(brackets, 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp41mqmm0q.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            isSubsequenceOf(brackets, \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: isSubsequenceOf\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n       val brackets\
    \ = string.substring(1, string.length-1)\n        brackets.length == 2 && brackets.substring(0,\
    \ 1) == \"[\" && brackets.substring(2, brackets.length-1) == \"[\"\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 2, end 1, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.isNested(tmpuoxvpdog.scala:21)\n\tat Problem$.main(tmpuoxvpdog.scala:24)\n\
    \tat Problem.main(tmpuoxvpdog.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val listOfNesting\
    \ = new mutable.ListBuffer[Boolean]()\n        listOfNesting.clear()\n       \
    \ string.foreach { character =>\n            listOfNesting += ((character.isBracket\
    \ && listOfNesting.nonEmpty) || (character != \"[\" && character != \"]\"))\n\
    \        }\n        listOfNesting.nonEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoha_czom.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlistOfNesting\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // We\
    \ start with an empty stack and push brackets onto it.\n        var brackets:\
    \ Stack[Char] = Stack()\n        var insideBracket = false \n        for (bracket\
    \ <- string.toCharArray()) {\n            // If the current character is equal\
    \ to a closing bracket,\n            // we pop the stack until we encounter a\
    \ corresponding opening bracket.\n            if (bracket == '[') brackets.push(bracket)\n\
    \            if (bracket == ']') brackets.pop()\n            // If the current\
    \ character is equal to a opening bracket,\n            // we pop one level down\
    \ from the current level.\n            // If we encounter a closing bracket, we\
    \ return false; else we return true.\n            if (bracket == '[') {\n    \
    \            // If the stack is not empty,\n                // and if our current\
    \ level is greater than the one on top of the stack,\n                // then\
    \ we know we have found a nested bracket.\n                if (brackets.nonEmpty\
    \ && brackets.head > brackets.last) {\n                    insideBracket = true\n\
    \                } else {\n                    insideBracket = false\n       \
    \             break\n                }\n            } else if bracket == ']')\
    \ {\n                if (!insideBracket) insideBracket = true\n            } else\
    \ if (bracket == ']' || bracket == '[') {\n                break\n           \
    \ }\n        }\n        return insideBracket\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_1maaih0.scala:41:36 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m bracket ==\
    \ \e[31m']'\e[0m) {\n\e[31m\e[31m   |\e[0m                                   \
    \ ^\e[0m\n\e[31m   |\e[0m                                    'then' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_1maaih0.scala:39:20\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmp_1maaih0.scala:46:8 -----------------\e[0m\e[0m\n\e[33m45 |\e\
    [0m            }\n\e[33m46 |\e[0m        }\n\e[33m\e[33m   |\e[0m            \
    \ ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement position;\
    \ you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Start\
    \ a stack to hold opening brackets\n        var stack = collection.mutable.Stack[Char]()\n\
    \        // Keep track of current bracket\n        var current: Char = string.head\n\
    \        // Loop through each character in the string\n        for (i <- 1 to\
    \ string.length) {\n            // If current bracket is closing bracket then\
    \ push current to stack\n            if (current == string(i)) {\n           \
    \     stack.push(current)\n            }\n            // If current bracket is\
    \ opening bracket, remove the last element from stack\n            else {\n  \
    \              current = stack.last\n                stack.pop()\n           \
    \ }\n        }\n        // Return true if stack is empty\n        if (stack.size\
    \ == 0) return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1 is out of bounds (min 0, max -1)\n\
    \tat scala.collection.mutable.ArrayDeque.apply(ArrayDeque.scala:580)\n\tat scala.collection.IndexedSeqOps.last(IndexedSeq.scala:88)\n\
    \tat scala.collection.IndexedSeqOps.last$(IndexedSeq.scala:88)\n\tat scala.collection.mutable.ArrayDeque.last(ArrayDeque.scala:39)\n\
    \tat Problem$.isNested$$anonfun$1(tmpamwbn2td.scala:32)\n\tat Problem$.isNested$$anonfun$adapted$1(tmpamwbn2td.scala:35)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.isNested(tmpamwbn2td.scala:35)\n\
    \tat Problem$.main(tmpamwbn2td.scala:41)\n\tat Problem.main(tmpamwbn2td.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var openings\
    \ = mutable.Set[String]()\n        var closings = mutable.Set[String]()\n    \
    \    string.foreach(c => c match {\n            case '[' => openings += c\n  \
    \          case '(' | ')' | ']' => closings += c\n            case _ => ()\n \
    \       })\n        (openings.size + closings.size == string.length) \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvyvyorp.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mopenings\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvyvyorp.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mclosings\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.split(\"\
    \\\\[\").length == 1\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_5yofj2_.scala:23)\n\tat Problem.main(tmp_5yofj2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def isNestedHelper(list:\
    \ List[Char], lastNestDepth : Int) : Boolean = {\n            // Handle the base\
    \ case of 0 nesting depth by returning true.\n            if (lastNestDepth ==\
    \ 0) true\n            else { \n                // The list should be non-empty,\
    \ so we know this won't throw an exception.\n                val firstChar = list(0)\n\
    \                // If this first character isn't an opening bracket, then return\
    \ false immediately.\n                if (firstChar != '[') false\n          \
    \      // If the list consists of a single closing bracket, then return true.\n\
    \                else if (list.length == 1) true\n                // If the list\
    \ has more than one closing bracket, then return true.\n                else if\
    \ (list.length > 1 && list.length <= lastNestDepth) true\n                // If\
    \ the list has more than 2 closing brackets, then return false.\n            \
    \    else if (list.length > 2) false\n                // Recursively call the\
    \ function on the remains of the list that isn't nested.\n                else\
    \ isNestedHelper(list.tail, lastNestDepth - 1)\n            }\n        }\n   \
    \     \n        // Split the string into its components.\n        val list = string.split(\"\
    \\\\[\")\n        \n        // Return false if the list has fewer than 3 elements.\n\
    \        if (list.length < 3) false\n        // Return true if the list is empty\
    \ (only 1 element).\n        else if (list.length == 1) true\n        // Return\
    \ true if the list has exactly 1 element.\n        else if (list.length == 2)\
    \ true\n        // Otherwise, call the function on the first 2 elements of the\
    \ list.\n        else isNestedHelper(list.tail, 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpf7241x.scala:49:33\
    \ --------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33melse\e[0m isNestedHelper(list.tail,\
    \ \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Array[String]\n\e[31m\
    \   |\e[0m                            Required: List[Char]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string\
    \ == null || string.length <= 1)\n            return false\n        if (string.length\
    \ == 2)\n            return true\n        var nestCount = 0\n        var openBrackets\
    \ = 0\n        var openBracketsCount = 0\n        var closedBrackets = 0\n   \
    \     for(i <- 0 until string.length){\n            if (string(i) == '['){\n \
    \               openBrackets += 1\n                openBracketsCount += 1\n  \
    \          } else if (string(i) == ']'){\n                closedBrackets += 1\n\
    \            }\n            if (string(i) == '[' && string(i+1) == ']'){\n   \
    \             nestCount += 1\n            }\n        }\n        return ((nestCount\
    \ >= 2 && openBracketsCount >= 1) || (nestCount == 0 && openBracketsCount == 0\
    \ && closedBrackets == 0))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpveq_4rqa.scala:42)\n\tat Problem.main(tmpveq_4rqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Loop\
    \ through the string one character at a time\n        var i = 1\n        var start\
    \ = 0\n        var valid = true\n        while(i < string.length) {\n        \
    \    if (string(i) == '[') {\n                // If the next character is ']'\
    \ we found a nested bracket \n                if (string(i+1) != ']') valid =\
    \ false\n                // If this is the first bracket, set the starting index\n\
    \                if (start == 0) start = i\n                // If there are more\
    \ brackets then it is invalid\n                if (i < string.length) valid =\
    \ false\n                // Increase the index\n                i += 1\n     \
    \       } else if (string(i) == ']') {\n                // If the next character\
    \ is '[' we found a nested bracket\n                if (string(i+1) != '[') valid\
    \ = false\n                // If this is the last bracket set the ending index\n\
    \                if (i == string.length-1) end = i\n                // If there\
    \ are more brackets then it is invalid\n                if (i < string.length)\
    \ valid = false\n                // Increase the index\n                i += 1\n\
    \            }\n            i += 1\n        }\n        // Check if the range of\
    \ the brackets is valid\n        if (valid && start == 0 && end == string.length-1)\
    \ return true\n        else return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzm51duxf.scala:38:42 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                \e[33mif\e[0m (i == string.length-\e\
    [31m1\e[0m) end = i\n\e[31m\e[31m   |\e[0m                                   \
    \       ^^^\e[0m\n\e[31m   |\e[0m                                          Not\
    \ found: end\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzm51duxf.scala:47:35\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mif\e[0m (valid\
    \ && start == \e[31m0\e[0m && end == string.length-\e[31m1\e[0m) \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                   ^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: end\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = collection.mutable.Stack[String]()\n        for (c <- string) {\n        \
    \    if (c == '[') stack += '['\n            if (c == '{' || c == '(') stack +=\
    \ c\n            if (c == '}' || c == ')') stack -= c\n            if (stack.last.isEmpty)\
    \ false\n            else stack.last.head() == '['\n        }\n        stack.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqdtjfnkh.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (c\
    \ == \e[31m'['\e[0m) stack += \e[31m'['\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                         ^^^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (\e[31m'['\e[0m : Char)\n\e[31m   |\e[0m                 \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqdtjfnkh.scala:23:47 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mif\e[0m (c == \e[31m'{'\e[0m || c == \e[31m'('\e[0m)\
    \ stack += c\n\e[31m\e[31m   |\e[0m                                          \
    \     ^\e[0m\n\e[31m   |\e[0m                                               Found:\
    \    (c : Char)\n\e[31m   |\e[0m                                             \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqdtjfnkh.scala:24:47\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (c\
    \ == \e[31m'}'\e[0m || c == \e[31m')'\e[0m) stack -= c\n\e[31m\e[31m   |\e[0m\
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                         Found:    (c : Char)\n\e[31m   |\e[0m\
    \                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpqdtjfnkh.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33melse\e[0m stack.last.head() == \e[31m'['\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 \e[33mmethod\e[0m \e[35mhead\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqdtjfnkh.scala:28:14 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        stack.emp"
  stdout: ''
  timestamp: 1660029240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ < 2)\n            return false\n        var index = 0\n        val start = new\
    \ mutable.ListBuffer[Int]\n        val end = new mutable.ListBuffer[Int]\n   \
    \     var isNested : Boolean = true\n        while (index < string.length) {\n\
    \            if (string(_) == \"]\") {\n                end.append(index.toInt)\n\
    \            } else {\n                start.append(index.toInt)\n           \
    \ }\n            index += 1\n        }\n        val index1 = start(0)\n      \
    \  val index2 = end(0)\n        val size = end.size\n        if (size > 1 && string.length\
    \ <= (index1 - index2).toInt)\n            isNested = false\n        else\n  \
    \          isNested = true\n        return isNested\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp297qikb_.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstart\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp297qikb_.scala:24:22\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mend\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp297qikb_.scala:27:23 -----------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mif\e[0m (string(_) == \e[31m\"]\"\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => string(_$1) == \e[32m\"\
    ]\"\e[0m.\n3 errors found\n"
  stdout: ''
  timestamp: 1660029234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val list\
    \ = string.split(\"\\\\[|\\\\]|]\") //split by '[' or ']' or ']' \n        if(list.length\
    \ == 1) { //if only one bracket is present\n            return true\n        }\n\
    \        else {\n            val stack = new Stack[(String, Int)]() //create stack\n\
    \            for(i <- 0 until list.length) {\n                if(list(i) match\
    \ {\n                    case \"[\" => stack += ((list(i), 1))\n             \
    \       case \"]\" => stack += ((list(i), -1))\n                    case \"\\\\\
    \" => stack += ((list(i), 1))\n                    case _ => stack += ((list(i),\
    \ 0)) //else add to stack\n                })\n            }\n            while(stack.size\
    \ > 0) //until stack is empty\n            {\n                val next = stack.pop()\
    \ //pop stack\n                if(next._2 == 1) {\n                    return\
    \ false //return false if brackets are nested\n                }\n           \
    \     for(i <- 0 until next._2) //add brackets to stack\n                {\n \
    \                   stack += ((next._1, i))\n                }\n            }\n\
    \            return true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppnmvhbuv.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppnmvhbuv.scala:28:32 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                    \e[33mcase\e[0m \e[31m\"[\"\e[0m => stack\
    \ += ((list(i), \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       Found:    (stack :\
    \ scala.collection.mutable.Stack[(String, Int)])\n\e[31m   |\e[0m       Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnmvhbuv.scala:29:32\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    \e[33mcase\e\
    [0m \e[31m\"]\"\e[0m => stack += ((list(i), -\e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m       Found:    (stack : scala.collection.mutable.Stack[(String, Int)])\n\e\
    [31m   |\e[0m       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppnmvhbuv.scala:30:33 --------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                    \e[33mcase\e[0m \e[31m\"\\\\\"\e[0m =>\
    \ stack += ((list(i), \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \               ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       Found:    (stack\
    \ : scala.collection.mutable.Stack[(String, Int)])\n\e[31m   |\e[0m       Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnmvhbuv.scala:31:30\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    \e[33mcase\e\
    [0m _ => stack += ((list(i), \e[31m0\e[0m)) \e[34m//else add to stack\e[0m\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m       Found:    (stack : scala.collection.mutable.Stack[(String,\
    \ Int)])\n"
  stdout: ''
  timestamp: 1660029256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val tokens\
    \ = string.split(\"\\W+\").filter(_.nonEmpty).toList\n        val stack = new\
    \ mutable.Stack[String]()\n        val openBracketsCount = tokens.filter( t =>\
    \ t == \"[\" || t == \"{\" ).length\n        val closedBracketsCount = tokens.filter(\
    \ t => t == \"]\" || t == \"}\" ).length\n        val count = openBracketsCount\
    \ + closedBracketsCount\n        var validSubsequence = false\n        val openBrackets\
    \ = tokens.filter( t => t == \"[\" && !stack.isEmpty ).length\n        val closedBrackets\
    \ = tokens.filter( t => t == \"}\" && !stack.isEmpty ).length\n        val stackDepth\
    \ = stack.toList.length\n        if (openBrackets == count && closedBrackets ==\
    \ count && !stack.isEmpty && stackDepth <= 1) {\n            val brackets = tokens.filter(\
    \ t => t == \"[\" || t == \"{\" )\n            for (bracket <- brackets) {\n \
    \               if (stack.contains(bracket)) validSubsequence = false \n     \
    \           else stack.push(bracket)\n            }\n        }\n        return\
    \ validSubsequence\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq7lio568.scala:20:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtokens\e[0m = string.split(\e\
    [31m\"\\W+\"\e[0m).filter(_.nonEmpty).toList\n\e[31m\e[31m   |\e[0m          \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \         invalid escape character\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7lio568.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = \e[33mnew\e[0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        \n  \
    \      // Create a stack of brackets\n        val stack : Stack[String] = new\
    \ Stack[String]()\n        // Keep track of how many brackets are open\n     \
    \   var openBrackets = 0\n        // Keep track of how many brackets are close\n\
    \        var closeBrackets = 0\n        \n        // Go through every char in\
    \ the string\n        for (i <- 0 to string.length-1) {\n            \n      \
    \      // If it is the start of a bracket\n            if    (i == \"[\")    \
    \     openBrackets += 1\n            else if  (i == \"]\")         closeBrackets\
    \ += 1\n            else if  (i == \"]\" && openBrackets == closeBrackets)\n \
    \           {\n                // Increase the count of open brackets and decrease\
    \ the count of close brackets\n                openBrackets -= 1\n           \
    \     closeBrackets -= 1\n            }\n            \n            // If the current\
    \ char is the end of a bracket, add it to the stack\n            else if (i ==\
    \ \"[\")         openBrackets += 1\n            else if (i == \"]\")         closeBrackets\
    \ += 1\n            else if  (i == \"]\" && openBrackets == closeBrackets)\n \
    \           {\n                // Increase the count of open brackets and decrease\
    \ the count of close brackets\n                openBrackets -= 1\n           \
    \     closeBrackets -= 1\n                \n                // If the number of\
    \ open brackets is 1, and the number of close brackets is 0, the string is not\
    \ nested\n                if(openBrackets == 1 && closeBrackets == 0)\n      \
    \              return false\n                \n                // Otherwise the\
    \ string is nested\n                else\n                    return true\n  \
    \          }\n            \n            // Add this char to the stack\n      \
    \      stack += string(i)\n        }\n        \n        // If the stack is empty,\
    \ the string is not nested\n        if(stack.size == 0)\n            return false\n\
    \        \n        // Otherwise, there is at least one closing bracket\n     \
    \   true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp17auf1wr.scala:32:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m    (i == \e[31m\"[\"\e[0m)\
    \         openBrackets += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp17auf1wr.scala:33:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m       \
    \     \e[33melse\e[0m \e[33mif\e[0m  (i == \e[31m\"]\"\e[0m)         closeBrackets\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Values of types Int and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp17auf1wr.scala:34:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m  (i == \e[31m\"\
    ]\"\e[0m && openBrackets == closeBrackets)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp17auf1wr.scala:42:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m42 |\e[0m       \
    \     \e[33melse\e[0m \e[33mif\e[0m (i == \e[31m\"[\"\e[0m)         openBrackets\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Values of types Int and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp17auf1wr.scala:43:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (i == \e[31m\"\
    ]\"\e[0m)         closeBrackets += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp17auf1wr.scala:44:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m44 |\e[0m       \
    \     \e[33melse\e[0m \e[33mif\e[0m  (i == \e[31m\"]\"\e[0m && openBrackets ==\
    \ closeBrackets)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Values of types Int and String cannot be compared with ==\
    \ or !="
  stdout: ''
  timestamp: 1660029257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.split(\"\\\\]\"))\n        val bracketsCount\
    \ = brackets.length\n        if (bracketsCount == 0 || bracketsCount == 1) {\n\
    \            return false\n        }\n        val openBrackets = brackets(0).foldLeft(0)(_\
    \ + _)\n        val closeBrackets = brackets(brackets.length-1).foldLeft(0)(_\
    \ + _)\n        val nestingCondition = (openBrackets == closeBrackets)\n     \
    \   return nestingCondition\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcojt7fi9.scala:25:51\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e\
    [0m = brackets(\e[31m0\e[0m).foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                   Found:    String\n\e[31m\
    \   |\e[0m                                                   Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcojt7fi9.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e\
    [0m = brackets(brackets.length-\e[31m1\e[0m).foldLeft(\e[31m0\e[0m)(_ + _)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \                 Found:    String\n\e[31m   |\e[0m                          \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val openBracket\
    \ = \"[[\"\n        val closeBracket = \"]]\"\n        val nestedBracket = \"\
    [[\"\n        val openBracketCount = (string.count(openBracket) + string.count(closeBracket))\
    \ / 2\n\n        if(string.count(openBracket) == 0 || string.count(closeBracket)\
    \ == 0) false\n        else {\n            if(string.count(nestedBracket) > openBracketCount)\
    \ true\n            else if(string.count(nestedBracket) < openBracketCount) false\n\
    \            else isNested(string.substring(0,string.count(nestedBracket)))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qttv1im.scala:23:45\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e\
    [0m = (string.count(openBracket) + string.count(closeBracket)) / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    (openBracket\
    \ : String)\n\e[31m   |\e[0m                                        Required:\
    \ Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qttv1im.scala:23:73\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e\
    [0m = (string.count(openBracket) + string.count(closeBracket)) / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \              Found:    (closeBracket : String)\n\e[31m   |\e[0m            \
    \                           Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2qttv1im.scala:25:24 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(string.count(openBracket) == \e\
    [31m0\e[0m || string.count(closeBracket) == \e[31m0\e[0m) \e[31mfalse\e[0m\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    (openBracket : String)\n\e[31m   |\e[0m    \
    \                    Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2qttv1im.scala:25:58 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(string.count(openBracket) == \e\
    [31m0\e[0m || string.count(closeBracket) == \e[31m0\e[0m) \e[31mfalse\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:"
  stdout: ''
  timestamp: 1660029257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string\
    \ match {\n            case \"\" => false\n            case i =>\n           \
    \     val pos = 0\n                val brackets = new mutable.ListBuffer[Int]()\n\
    \                var openBrackets = 1\n                for (c <- i.length) {\n\
    \                    if (c == '[') {\n                        openBrackets +=\
    \ 1\n                    } else if (c == '}') {\n                        openBrackets\
    \ -= 1\n                    } else {\n                        brackets += pos\n\
    \                    }\n                    pos += 1\n                }\n    \
    \            if (openBrackets <= 0) {\n                    return false\n    \
    \            }\n                var startBracket = 0\n                var endBracket\
    \ = brackets.length - 1\n                while (endBracket >= startBracket) {\n\
    \                    if (brackets(startBracket) != brackets(endBracket)) {\n \
    \                       return false\n                    }\n                \
    \    startBracket += 1\n                    endBracket -= 1\n                }\n\
    \                true\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwzvdcgng.scala:24:35 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mbrackets\e[0m =\
    \ \e[33mnew\e[0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwzvdcgng.scala:26:26 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                \e[33mfor\e[0m (c <- i.length) {\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                  value foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def parse(s:\
    \ String) : Boolean = {\n            val substr = s.substring(1, s.length - 1)\n\
    \            val depth = substr.count(\"[\")\n            val openDepth = substr.count(\"\
    [[]\") + substr.count(\"[]]\")\n            depth >= openDepth\n        }\n  \
    \      val lst = string.split(\"[\")\n        val result = (lst.length until lst.length)\
    \ filter (parse) toList\n        result match {\n            case Nil => false\n\
    \            case _ => true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkiil6rx.scala:22:37\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36mdepth\e[0m = substr.count(\e[31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \                Found:    (\e[32m\"[\"\e[0m : String)\n\e[31m   |\e[0m      \
    \                               Required: Char => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkiil6rx.scala:23:41 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mopenDepth\e[0m = substr.count(\e\
    [31m\"[[]\"\e[0m) + substr.count(\e[31m\"[]]\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                       ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    (\e[32m\"[[]\"\e[0m : String)\n\e[31m\
    \   |\e[0m                                         Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkiil6rx.scala:23:63\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mopenDepth\e[0m = substr.count(\e[31m\"[[]\"\e[0m) + substr.count(\e[31m\"\
    []]\"\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                 Found:    (\e[32m\"[]]\"\e[0m : String)\n\e[31m   |\e[0m   \
    \                                           Required: Char => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkiil6rx.scala:27:59 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = (lst.length\
    \ until lst.length) filter (parse) toList\n\e[31m\e[31m   |\e[0m             \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                              Found:    (s : Int)\n\e[31m   |\e\
    [0m                                                 "
  stdout: ''
  timestamp: 1660029257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // First\
    \ find the brackets\n        val brackets = string.split(\"\\\\[\").last\n   \
    \     // Then test if all brackets are valid\n        val tests = brackets.split(\"\
    \\\\]\").map(s => s.replaceFirst(\"\\\\[\", \"\").replaceFirst(\"\\\\]\", \"\"\
    ))\n        val isValid = tests.forall( s => {\n            s.replace(\"]\", \"\
    \").replace(\"[\", \"\") == \"\"\n        })\n        isValid\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt3avywto.scala:31)\n\tat Problem.main(tmpt3avywto.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val index\
    \ = string.indexOf(\"[\")\n        if (index == -1)\n            return false\n\
    \        val bracket_count = 0\n        var index :Int = index\n        while\
    \ (index != -1) {\n            if (string[index] == '[') {\n                bracket_count\
    \ += 1\n            } else if (string[index] == ']') {\n                bracket_count\
    \ -= 1\n            }\n            if (bracket_count == 0)\n                return\
    \ true\n            index = string.indexOf(\"[\", index + 1)\n        }\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnfcsy1ur.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mindex\e[0m :\e[35mInt\e\
    [0m = index\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mindex is already defined as \e[33mvalue\e[0m \e[35mindex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnfcsy1ur.scala:26:23 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            \e[33mif\e[0m (string[\e[35mindex\e[0m] == \e[31m'['\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \               Not found: type index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnfcsy1ur.scala:27:30 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                bracket_count += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ += is not a member of Int - did you mean bracket_count.!=?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnfcsy1ur.scala:28:30 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (string[index]\
    \ == \e[31m']'\e[0m) {\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type index\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnfcsy1ur.scala:29:30 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                bracket_count -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ -= is not a member of Int - did you mean bracket_count.!=?\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpnfcsy1ur.scala:33:18 -----------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            index = string.indexOf(\e[31m\"[\"\e[0m, index\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1660029257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val matcher\
    \ = \"\"\"\\[.*?\\]\"\"\".r\n        val strArr = string.split(\"\\\\n\")\n  \
    \      for(str <- strArr) if(matcher.findFirstIn(str).isDefined) \n          \
    \ return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfex8rwr.scala:28)\n\tat Problem.main(tmppfex8rwr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def isNested(string\
    \ : String, charIndex : Int) : Boolean = {\n            if (charIndex >= string.length-1)\
    \ return false\n            if (string.length <= 1)  return true\n\n         \
    \   val ch1 = string.charAt(charIndex)\n            val ch2 = string.charAt(charIndex+1)\n\
    \            if (ch1 == ch2) isNested(string, charIndex+1)\n            else isNested(string,\
    \ charIndex+1)\n        }\n\n        string.matches(\"\\\\[\\\\[\\\\[\\\\[\\\\\
    [[\\\\s\\\\S]*\\\\]\\\\]\\\\]\\\\]\\\\]\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpguqv9uf9.scala:33)\n\tat Problem.main(tmpguqv9uf9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var brack\
    \ = 0\n        var depth = 0\n        var open = string.indexOf(\"[\")\n     \
    \   var close = string.lastIndexOf(\"]\")\n        var nest = 1\n        for(i\
    \ <- open until close -1 by -1){\n            if(brack != 0) {\n             \
    \   if((string.charAt(i) != '[')) {\n                    depth += 1\n        \
    \        }\n                if((string.charAt(i) != '[')) {\n                \
    \    depth -= 1\n                }\n                if((string.charAt(i) != '['))\
    \ {\n                    brack = 0\n                    nest += 1\n          \
    \      }\n            }\n            if((string.charAt(i) != '[')) {\n       \
    \         brack += 1\n            }\n        }\n        return depth == 0\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjjxj3izk.scala:46)\n\tat Problem.main(tmpjjxj3izk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Use\
    \ regular expression to match square brackets in string and check whether there\
    \ are brackets \n        // that were not nested in a previous bracket\n     \
    \   val pattern = \"\\\\[\\\\[((?!\\\\[[^\\\\]]*])*\\\\[\\\\])\"\n        val\
    \ pattern2 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern3 = \"\\\
    \\[(\\\\[((?!\\\\[[^\\\\]]*])*\\\\[\\\\])\"\n        val pattern4 = \"\\\\[(\\\
    \\[((?!\\\\[[^\\\\]]*])*\\\\[\\\\])\"\n        val pattern5 = \"\\\\[(\\\\[((?!\\\
    \\[[^\\\\]]*])*\\\\[\\\\])\"\n        val pattern6 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\
    \\]\"\n        val pattern7 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val\
    \ pattern8 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern9 = \"\\\
    \\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern10 = \"\\\\[((?!\\\\[[^\\\
    \\]]*])*)\\\\]\"\n        val pattern11 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\
    \n        val pattern12 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern13\
    \ = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern14 = \"\\\\[((?!\\\
    \\[[^\\\\]]*])*)\\\\]\"\n        val pattern15 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\
    \\]\"\n        val pattern16 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val\
    \ pattern17 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern18 = \"\
    \\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern19 = \"\\\\[((?!\\\\[[^\\\
    \\]]*])*)\\\\]\"\n        val pattern20 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\
    \n        val pattern21 = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern22\
    \ = \"\\\\[((?!\\\\[[^\\\\]]*])*)\\\\]\"\n        val pattern23\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz4ancd8_.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz4ancd8_.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // This\
    \ implementation uses a stack to keep track of brackets we encounter.\n      \
    \  // The stack will only be empty if there are no brackets left in the input\
    \ string.\n        val brackets = new Stack[String]()\n        val stack = new\
    \ mutable.Stack[String]()\n        string match {\n            case \"\" => false\n\
    \            case _ =>\n                for (i <- string.length-1; a <- 0 until\
    \ string.length) {\n                    brackets.push(string(i))\n           \
    \         stack.push(string(i))\n                    while (stack.nonEmpty &&\
    \ brackets.head == \"[\") {\n                        stack.pop\n             \
    \           brackets.update(1, string(i))\n                    }\n           \
    \         while (stack.nonEmpty && brackets.head == \"]\") {\n               \
    \         stack.pop\n                    }\n                    if (brackets.head\
    \ != string(i)) stack.append(string(i))\n                }\n                stack.nonEmpty\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pl1ozp8.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pl1ozp8.scala:27:26\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mfor\e\
    [0m (i <- string.length-\e[31m1\e[0m; a <- \e[31m0\e[0m until string.length) {\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          value foreach is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def findNest(s:\
    \ String): Boolean = {\n            val index = s.indexOf('[')\n            if\
    \ (index >= 0) {\n                val brackets = s.substring(index+1, s.length-1)\n\
    \                val newString = s.substring(0, index-1) + brackets + \"[\" +\
    \ brackets + \"]\"\n                if (newString == s) {\n                  \
    \  if (findNest(newString)) {\n                        return true\n         \
    \           } else {\n                        return false\n                 \
    \   }\n                } else {\n                    return findNest(newString)\n\
    \                }\n            } else {\n                return false\n     \
    \       }\n        }\n        findNest(string)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 4\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.findNest$1(tmpu064j_1a.scala:24)\n\tat Problem$.isNested(tmpu064j_1a.scala:38)\n\
    \tat Problem$.main(tmpu064j_1a.scala:41)\n\tat Problem.main(tmpu064j_1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Create\
    \ a stack of opening bracket pairs\n        val stack = new mutable.Stack[String](Array(\"\
    [\", \"]\"))\n\n        // Create a map of closing bracket pairs found in the\
    \ input string.\n        // This will be used to track if the corresponding closing\
    \ bracket pair is nested\n        // and also store how many brackets were opened\
    \ for each bracket.\n        val closingPairs = string.dropWhile(c => c != \"\
    [\" || c != \"]\")\n            .drop(1)\n            .zipWithIndex.filter(x =>\
    \ x._2 == 0)\n\n        // Check if the opening bracket pair is valid.\n     \
    \   // If it is not valid, return false.\n        if(stack.last != \"[\" || stack.last\
    \ != \"]\")\n            return false\n\n        // The opening bracket pair is\
    \ valid. Now find the closing bracket pair.\n        // Iterate over the pairs\
    \ to check if any bracket pair is nested.\n        var closed = false\n      \
    \  var openBracketCount = 1\n        for(i <- 0 until closingPairs.length) {\n\
    \            if(closingPairs(i)[0] != \"[\")\n                return false\n\n\
    \            if(closingPairs(i)[0] == \"[\" && closingPairs(i)[1] == \"[\" &&\
    \ stack.last != \"[\")\n                openBracketCount += 1\n\n            if(closingPairs(i)[0]\
    \ == \"]\" && closingPairs(i)[1] == \"]\" && stack.last == \"]\")\n          \
    \      openBracketCount -= 1\n\n            // If the closing bracket pair is\
    \ nested and the number of open bracket pairs is \n            // equal to the\
    \ number of closed bracket pairs, then return true.\n            if(openBracketCount\
    \ == 0 && closed)\n                return true\n\n            // If the closing\
    \ bracket pair is nested and the number of open bracket pairs is \n          \
    \  // greater than the number of closed bracket pairs then return false.\n   \
    \         if(openBracketCount > 0 && closed)\n                return false\n\n\
    \            if(closed)\n                closed = closingPairs(i)[1] == \"]\"\n\
    \            else\n                closed = closingPairs(i)[1] == \"[\"\n\n  \
    \          // If no more nested brackets are found in the input string, then return\
    \ true.\n            if(openBracketCount == 0 && stack.last == \"[\" && closed)\n\
    \                return true\n        }\n\n        // If no valid subsequence\
    \ is found return false.\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8htz5x4l.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m](Array(\e[31m\"[\"\e[0m, \e[31m\"]\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp8htz5x4l.scala:26:49 -----------------------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosingPairs\e[0m = string.dropWhile(\e\
    [36mc\e[0m => c != \e[31m\"[\"\e[0m || c != \e[31m\"]\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                                 ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp8htz5x4l.scala:26:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosingPairs\e[0m = string.dropWhile(\e\
    [36mc\e[0m => c != \e[31m\"[\"\e[0m || c != \e[31m\"]\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8htz5x4l.scala:40:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            \e[33mif\e[0m(closingPairs(i)[\e[31m0\e[0m]\
    \ != \e[31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               missing arguments for \e[33mmethod\e[0m \e\
    [35mapply\e[0m in \e[33mtrait\e[0m \e[35mNonEmptyTuple\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp8htz5x4l.scala:40:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m            \e[33mif\e[0m(closingPairs(i)[\e[31m0\e[0m] !=\
    \ \e[31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m      Match type reduction failed since selector  (\e[31m0\e\
    [0m : Int)\n\e[31m   |\e[0m      matches none of the cases\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m          case x *: xs => n.type\e[33m match \e[0m{\n\e[31m   |\e\
    [0m      "
  stdout: ''
  timestamp: 1660029260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        var hasNesting = false\n        for (i <-\
    \ 0 until string.length) {\n            if (string(i) == '[') {\n            \
    \    stack.push('[')\n            } else if (string(i) == ']') {\n           \
    \     if (stack.isEmpty()) {\n                    hasNesting = false\n       \
    \         }\n                stack.pop()\n            } else {\n             \
    \   hasNesting = false\n            }\n        }\n        return stack.isEmpty()\
    \ && hasNesting\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpptmcy1dj.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def isSubsequence(string\
    \ : String) : Boolean = {\n            val brackets = string.split(\"\\\\[|\\\\\
    ]\").toList\n            val index = brackets.indexOf(brackets.last)\n       \
    \     if (index > 0)\n                isSubsequence(brackets.dropRight(index +\
    \ 1))\n            else\n                true\n        }\n        if (string.length\
    \ < 2)\n            return false\n        val brackets = string.split(\"\\\\[|\\\
    \\]\").toList\n        if (brackets.last.equals(\"[]\"))\n            return false\n\
    \        if (!isSubsequence(string))\n            return false\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5wkycy1r.scala:24:48\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                isSubsequence(brackets.dropRight(index\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    \e[1m\e[31mList\e\
    [0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                 \
    \             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Initialize\
    \ a mutable list to store the stack of brackets.\n        val stack = mutable.Stack[String]()\n\
    \        // Loop through the string and add brackets into the stack if they have\
    \ not already been added.\n        string.foreach { x =>\n            if (x !=\
    \ \"]\" && x != \"][[\" && x != \"][[[[\" && x != \"[[[]\" && x != \"[[[[[[[\"\
    \ && x != \"[[][\" && x != \"[[][[[\" && x != \"[[][[[[[[[\" && x != \"[[[[[[[\"\
    \ && !stack.contains(x)) {\n                stack.push(x)\n            }\n   \
    \     }\n        // Return true if the stack is empty or if it contains at least\
    \ two brackets.\n        if (stack.isEmpty) {\n            true\n        } else\
    \ if (stack.size == 2) {\n            true\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqlmhytl.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpoqlmhytl.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (x != \e[31m\"]\"\e[0m && x\
    \ != \e[31m\"][[\"\e[0m && x != \e[31m\"][[[[\"\e[0m && x != \e[31m\"[[[]\"\e\
    [0m && x != \e[31m\"[[[[[[[\"\e[0m && x != \e[31m\"[[][\"\e[0m && x != \e[31m\"\
    [[][[[\"\e[0m && x != \e[31m\"[[][[[[[[[\"\e[0m && x != \e[31m\"[[[[[[[\"\e[0m\
    \ && !stack.contains(x)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpoqlmhytl.scala:24:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (x != \e[31m\"]\"\e[0m && x\
    \ != \e[31m\"][[\"\e[0m && x != \e[31m\"][[[[\"\e[0m && x != \e[31m\"[[[]\"\e\
    [0m && x != \e[31m\"[[[[[[[\"\e[0m && x != \e[31m\"[[][\"\e[0m && x != \e[31m\"\
    [[][[[\"\e[0m && x != \e[31m\"[[][[[[[[[\"\e[0m && x != \e[31m\"[[[[[[[\"\e[0m\
    \ && !stack.contains(x)) {\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpoqlmhytl.scala:24:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (x != \e[31m\"]\"\e[0m && x\
    \ != \e[31m\"][[\"\e[0m && x != \e[31m\"][[[[\"\e[0m && x != \e[31m\"[[[]\"\e\
    [0m && x != \e[31m\"[[[[[[[\"\e[0m && x != \e[31m\"[[][\"\e[0m && x != \e[31m\"\
    [[][[[\"\e[0m && x != \e[31m\"[[][[[[[[[\"\e[0m && x != \e[31m\"[[[[[[[\"\e[0m\
    \ && !stack.contains(x)) {\n\e[31m\e[31m   |\e[0m                            \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpoqlmhytl.scala:24:58\
    \ -------------------------"
  stdout: ''
  timestamp: 1660029261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Create\
    \ an empty Array[String] called \"stack\" to hold our bracket pairs\n        var\
    \ stack = new Array[String]\n        // Create an empty Array[String] called \"\
    bracket\" to hold the brackets\n        var bracket = new Array[String]\n    \
    \    // Loop through the entire string and add each bracket pair to stack\n  \
    \      for (x<-0 until string.length) {\n            if (string.charAt(x) == '[')\
    \ {\n                stack += string.charAt(x)\n            } else if (string.charAt(x)\
    \ == ']') {\n                stack += string.charAt(x)\n                bracket\
    \ = stack.toArray\n                // Remove the brackets from the stack\n   \
    \             stack.toArray = Stack.empty\n            } else {\n            \
    \    stack.toArray = Stack.empty\n            }\n        }\n        // Check if\
    \ the stack is empty and all brackets are closed\n        if (stack.length ==\
    \ 0) {\n            if (bracket.length == 0) {\n                return true\n\
    \            } else {\n                return false\n            }\n        }\
    \ else {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7kqujwm6.scala:21:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter _length\
    \ of \e[33mconstructor\e[0m \e[35mArray\e[0m in \e[33mclass\e[0m \e[35mArray\e\
    [0m: (_length: Int): Array[String]\n\e[31m\e[31m-- Error: /tmp/tmp7kqujwm6.scala:23:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mvar\e[0m \e[36mbracket\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmissing argument for parameter _length of \e[33mconstructor\e[0m \e\
    [35mArray\e[0m in \e[33mclass\e[0m \e[35mArray\e[0m: (_length: Int): Array[String]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ code here!\n        \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbrmg42mp.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m20 |\e\
    [0m        \e[34m// Write code here!\e[0m\n\e[31m21 |\e[0m        \n\e[31m22 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var opened\
    \ = false\n        var closed = false\n        var depth = 0\n\n        for (i<-\
    \ 0 until string.length){\n            if (string(i) == '['){\n              \
    \  depth += 1\n                if (!opened){\n                    opened = true\n\
    \                }\n            }\n            if (string(i) == ']'){\n      \
    \          depth += 1\n                if (!closed){\n                    closed\
    \ = true\n                }\n            }\n            if (string(i) == '['){\n\
    \                depth -= 1\n            }\n            if (string(i) == ']'){\n\
    \                depth -= 1\n            }\n            if (opened && closed){\n\
    \                break\n            }\n        }\n        return opened && closed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptgf6hhq4.scala:44:16 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.indexOf(\"\
    [[[\", 0) != -1 && (string.indexOf(\"]]]\", string.indexOf(\"[[[\", 0) + 4) >\
    \ string.length)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpczpsk485.scala:23)\n\tat Problem.main(tmpczpsk485.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val pattern\
    \ = Pattern.compile(\"\\\\[\\\\[\\\\[\\\\[.*\\\\]\\\\]\\\\]\\\\]\")\n        val\
    \ matcher = pattern.matcher(string)\n        matcher.find()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgykhi9le.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(\e\
    [31m\"\\\\[\\\\[\\\\[\\\\[.*\\\\]\\\\]\\\\]\\\\]\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: Pattern\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracketed\
    \ = string.replaceAll(\"[\", \"\")\n        val bracketed2 = bracketed.replaceAll(\"\
    ]\", \"\")\n        val unbracketed = bracketed2.replaceAll(\"[\", \"\")\n   \
    \     val unbracketed2 = unbracketed.replaceAll(\"]\", \"\")\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.regex.PatternSyntaxException: Unclosed character class near index\
    \ 0\n[\n^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2028)\n\t\
    at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)\n\tat java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)\n\
    \tat java.base/java.util.regex.Pattern.expr(Pattern.java:2069)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1783)\n\
    \tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1069)\n\
    \tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.isNested(tmp8d9hi301.scala:20)\n\
    \tat Problem$.main(tmp8d9hi301.scala:27)\n\tat Problem.main(tmp8d9hi301.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala"
  stdout: ''
  timestamp: 1660029273
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [\")\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpada91v6z.scala:24)\n\tat Problem.main(tmpada91v6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val m\
    \ = string.r\n        // (1) count the brackets\n        val brackets = string.replaceAll(\"\
    \"\"\\[|\\]\"\"\", \"\").length\n        // (2) count the nesting\n        val\
    \ nesting = brackets-1\n        // (3) count the open brackets\n        val openbrackets\
    \ = string.count(c => c == '[')\n        // (4) count the close brackets\n   \
    \     val closebrackets = string.count(c => c == ']')\n        // (5) count the\
    \ open nestings\n        val opennesting = openbrackets-1\n        // (6) count\
    \ the close nestings\n        val closenesting = closebrackets-1\n        // (7)\
    \ check if the nested pattern is valid\n        val valid = (nesting == 0) &&\
    \ (openbrackets == closebrackets)\n        // (8) check if all opening brackets\
    \ are closed before all closing brackets\n        val allclosedBeforeAllclosed\
    \ = (openbrackets == closebrackets) && (opennesting == closenesting)\n       \
    \ // (9) check if the nested pattern exists in the string\n        val subsequence\
    \ = string.substring(0,(nesting+openbrackets)+closebrackets).substring(0,openbrackets)\n\
    \        valid\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.regex.PatternSyntaxException: Unclosed character class near index\
    \ 3\n[[]]\n   ^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2028)\n\
    \tat java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)\n\tat java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)\n\
    \tat java.base/java.util.regex.Pattern.expr(Pattern.java:2069)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1783)\n\
    \tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1069)\n\
    \tat scala.util.matching.Regex.<init>(Regex.scala:234)\n\tat scala.collection.StringOps$.r$extension(StringOps.scala:857)\n\
    \tat Problem$.isNested(tmpvd6knon3.scala:20)\n\tat Problem$.main(tmpvd6knon3.scala:42)\n\
    \tat Problem.main(tmpvd6knon3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:26"
  stdout: ''
  timestamp: 1660029275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string\n        val opens = mutable.HashMap[Int, String]()\n        val closes\
    \ = mutable.HashMap[Int, String]()\n        val nests = mutable.HashMap[Int, String]()\n\
    \        for (i <- 0 to brackets.length - 1) {\n            val c = brackets(i)\n\
    \            if (c == '[') opens.put(i, c)\n            if (c == ']') closes.put(i,\
    \ c)\n            if (opens.contains(i) && (closes.contains(i) || opens.contains(i-1)))\
    \ nests.put(i, c)\n        }\n        nests.size == brackets.length && nests.forall(_.length\
    \ == brackets.length)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsufc_fj2.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mopens\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsufc_fj2.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloses\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsufc_fj2.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnests\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var insideBrackets\
    \ = false\n        var stack = mutable.Stack[String]()\n        var chars = string.chars\n\
    \n        for( i <- 0 until chars.length ) {\n            if( chars(i) == '['\
    \ ) {\n                insideBrackets = true\n                if( stack.length\
    \ == 0 ) {\n                    stack.push( \"[\" )\n                }\n     \
    \       } else if( chars(i) == ']' ) {\n                if( stack.length == 1\
    \ ) {\n                    insideBrackets = false\n                    if( stack.pop()\
    \ == \"[\" ) {\n                        return true\n                    }\n \
    \               }\n            }\n\n            if( !insideBrackets ) {\n    \
    \            stack.push( chars(i) )\n            }\n        }\n\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyomdqbv.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmppyomdqbv.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until chars.length\
    \ ) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmppyomdqbv.scala:25:16 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m( chars(i) == \e[31m'['\e[0m\
    \ ) {\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          \e[33mvariable\e[0m \e[35mchars\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmppyomdqbv.scala:30:23 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m( chars(i)\
    \ == \e[31m']'\e[0m ) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\
    \e[31m   |\e[0m                       \e[33mvariable\e[0m \e[35mchars\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val l\
    \ = new scala.collection.mutable.ListBuffer[String]()\n        // Look for open\
    \ brackets\n        for(i <- 0 to string.length-1){\n            l += string.charAt(i)\n\
    \            if(string.charAt(i) == '['){\n                l += string.charAt(i)\n\
    \            }\n        }\n        // Look for close brackets\n        for(i <-\
    \ 0 to string.length-1){\n            l += string.charAt(i)\n            if(string.charAt(i)\
    \ == ']'){\n                l += string.charAt(i)\n            }\n        }\n\
    \        l.length == 2 && l.mkString.equals(\"[]\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp73587j_5.scala:23:30\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            l += string.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                Found:    Char\n\e[31m   |\e[0m                 Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp73587j_5.scala:25:34\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                l += string.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Found:    Char\n\e[31m   |\e[0m                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp73587j_5.scala:30:30\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            l += string.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                Found:    Char\n\e[31m   |\e[0m                 Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp73587j_5.scala:32:34\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                l += string.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Found:    Char\n\e[31m   |\e[0m                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // If\
    \ string is empty or only contains brackets\n        if(string.isEmpty || string.replaceAll(\"\
    \\\\[|\\\\]\", \"\").replaceAll(\"\\\\(|\\\\)\", \"\").length == 0)\n        \
    \    return false\n        \n        val stack = Stack()\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        for(bracket <- brackets) {\n      \
    \      if(bracket.isEmpty || bracket.contains(\"(\") || bracket.contains(\"[\"\
    ))\n                continue\n            stack.push(bracket)\n        }\n   \
    \     val result = stack.last.split(\"\\\\(|\\\\)\").length % 2 == 0\n       \
    \ return result\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppux31q_u.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppux31q_u.scala:29:23\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            stack.push(bracket)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Found:    (bracket : String)\n\e[31m   |\e[0m            \
    \           Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppux31q_u.scala:31:32 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = stack.last.split(\e[31m\"\\\\(|\\\
    \\)\"\e[0m).length % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value\
    \ split is not a member of Nothing\n3 errors found\n"
  stdout: ''
  timestamp: 1660029275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var start\
    \ = 0\n        var end = string.length - 1\n        var level = 1\n        while(start\
    \ < end && level > 0) {\n            if(string.charAt(start) == '[') {\n     \
    \           level++\n                if(string.charAt(end) == ']') {\n       \
    \             level--\n                }\n                end--\n            }\n\
    \            start++\n        }\n        if(level == 0) {\n            return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0_p28jgw.scala:25:23 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                level++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp0_p28jgw.scala:29:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \         end--\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e\
    [0m                misaligned end marker\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp0_p28jgw.scala:31:19 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            start++\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var flag\
    \ = true\n        var counter = 1\n        // Check if string is empty or contains\
    \ only brackets.\n        if (string.isEmpty)\n            return false\n    \
    \    else if (string.contains(\"[\")==false || string.contains(\"]\")==false)\n\
    \            return false\n\n        string.indexOf(\"[\")\n        string.indexOf(\"\
    ]\")\n\n        while (flag){\n            // If there is a counter of brackets\
    \ within the string, and it is not a bracket or \n            // the start of\
    \ the string, return false.\n            if (counter==1 && string.indexOf(\"[\"\
    )==-1 || string.indexOf(\"]\")==-1)\n                return false\n\n        \
    \    // If string has only one bracket and counter is equal to zero, return true.\n\
    \            if (string.contains(\"[\")==false && string.contains(\"]\")==false\
    \ && counter==0)\n                return true\n\n            // Otherwise, find\
    \ the next bracket, and decrement counter if found.\n            if (string.contains(\"\
    [\")==true && string.contains(\"]\")==true){\n                val next = string.indexOf(\"\
    [\")\n                val next2 = string.indexOf(\"]\")\n                val newString\
    \ = string.substring(0, next+1) + string.substring(next2+1, string.length)\n \
    \               if (newString.contains(\"[\")==true && newString.contains(\"]\"\
    )==true && counter==0)\n                    return true\n                counter--\n\
    \            }\n\n            // Otherwise, if string does not contain brackets\
    \ within the string, return false.\n            if (string.contains(\"[\")==false\
    \ || string.contains(\"]\")==false)\n                return false\n\n        \
    \    flag = false\n            counter++\n        }\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe3a8vyi5.scala:48:25 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                counter--\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpe3a8vyi5.scala:56:21 ---------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m            counter++\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe3a8vyi5.scala:34:49\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m\
    \ (counter==\e[31m1\e[0m && string.indexOf(\e[31m\"[\"\e[0m)==-\e[31m1\e[0m ||\
    \ string.indexOf(\e[31m\"]\"\e[0m)==-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \           value ==- is not a member of Int - did you mean Int.==?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpe3a8vyi5.scala:34:76 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m (counter==\e[31m1\e[0m && string.indexOf(\e\
    [31m\"[\"\e[0m)==-\e[31m1\e[0m || string.indexOf(\e[31m\"]\"\e[0m)==-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value ==-\
    \ is not a member of Int - did you mean Int.==?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ < 1) return false\n        if (string.length == 2 && string[0] == '[' && string[string.length-1]\
    \ == ']') return true\n        var stack = mutable.Stack[Char]()\n        for\
    \ (i <- 0 until string.length-1){\n            if (string(i) == '[') stack +=\
    \ '['\n            if (string(i) == ']') stack += ']'\n            if (stack.isEmpty)\
    \ false else stack.pop()\n        }\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgqpalzt8.scala:21:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (string.length == \e[31m2\e[0m\
    \ && string[\e[31m0\e[0m] == \e[31m'['\e[0m && string[string.length\e[35m-\e[31m1\e\
    [0m] == \e[31m']'\e[0m) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m\
    \ does not take type parameters\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqpalzt8.scala:21:74\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (string.length\
    \ == \e[31m2\e[0m && string[\e[31m0\e[0m] == \e[31m'['\e[0m && string[string.length\e\
    [35m-\e[31m1\e[0m] == \e[31m']'\e[0m) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \            Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgqpalzt8.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mChar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[String]\n        // Add brackets to stack\n        for( i <- 0 to\
    \ string.length - 1){\n            if(string.charAt(i) == '[') stack += '['\n\
    \            if(string.charAt(i) == ']') stack += ']'\n        }\n        // Check\
    \ if stack is empty \n        if(stack.length < 2) return true\n        // Check\
    \ if stack is still valid\n        val stackString = stack.toList\n        if(stackString.contains('[')\
    \ && stackString.contains(']') && stackString.size <= 3){\n            return\
    \ true\n        }else{\n            return false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqzr6b38z.scala:23:49\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(string.charAt(i)\
    \ == \e[31m'['\e[0m) stack += \e[31m'['\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                                       ^^^\e[0m\n\e[31m   |\e[0m            \
    \                                     Found:    (\e[31m'['\e[0m : Char)\n\e[31m\
    \   |\e[0m                                                 Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqzr6b38z.scala:24:49\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(string.charAt(i)\
    \ == \e[31m']'\e[0m) stack += \e[31m']'\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                                       ^^^\e[0m\n\e[31m   |\e[0m            \
    \                                     Found:    (\e[31m']'\e[0m : Char)\n\e[31m\
    \   |\e[0m                                                 Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val inputArray\
    \ = string.split(\"\")\n        var currentPosition = 1\n        var isValid =\
    \ true\n        var firstBracket = true\n        \n        while (currentPosition\
    \ < inputArray.length) {\n            val bracketedArray = inputArray(currentPosition).split(\"\
    [\")\n            if (firstBracket) {\n                firstBracket = false\n\
    \            }\n            \n            val squareBracketArray = bracketedArray(0).split(\"\
    ]\") \n            if (squareBracketArray.length != 2)\n                isValid\
    \ = false\n            else\n                val squareBracket = squareBracketArray(0)\n\
    \            val bracketCount = squareBracket.length\n\n            if (bracketCount\
    \ > 1) {\n                var bracketCountInner = 1\n                val innerBracketCount\
    \ = bracketedArray.length\n                while (innerBracketCount > 0) {\n \
    \                   if (bracketCountInner == bracketCount) \n                \
    \        break\n                    val innerBracketArray = bracketedArray(innerBracketCount).split(\"\
    [\")\n                    val innerBracket = innerBracketArray(0)\n          \
    \          val innerBracketCount = innerBracketArray.length\n                \
    \    innerBracketCountInner += 1\n                    bracketCountInner -= 1\n\
    \                }\n            }\n            \n            currentPosition +=\
    \ 1\n        }\n        isValid\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9__uxc4g.scala:36:31 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36mbracketCount\e[0m =\
    \ squareBracket.length\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: squareBracket\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9__uxc4g.scala:43:24\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp9__uxc4g.scala:46:44 ---------------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m                    \e[33mval\e[0m \e[36minnerBracketCount\e\
    [0m = innerBracketArray.length\n\e[31m\e[31m   |\e[0m                        \
    \                    ^\e[0m\n\e[31m   |\e[0m                            Recursive\
    \ \e[33mvalue\e[0m \e[35minnerBracketArray\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9__uxc4g.scala:47:20 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                    innerBracketCountInner += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: innerBracketCountInner\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Iterate\
    \ through each character in the string one by one\n        // If the character\
    \ is not '[' or ']' then continue to the next character in the string\n      \
    \  // Otherwise if we find an opening bracket increment a counter and if we find\
    \ a\n        // closing bracket decrement the counter\n        // Once we reach\
    \ 0 we know that there must be at least one nested bracket\n        var counter\
    \ : Int = -1\n        for (c <- string) {\n            counter += 1\n        \
    \    if (c != '[' && c != ']') {\n                continue\n            } else\
    \ if (c == '[') {\n                counter += 1\n            } else if (c == ']')\
    \ {\n                counter -= 1\n                if (counter == 0) {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwj4ruy39.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        for (char\
    \ <- string.toCharArray) {\n            if (char == '[') {\n                stringToArray\
    \ = stringToArray :+ char\n            }\n            if (char == '}') {\n   \
    \             if (stringToArray contains '[') {\n                    stringToArray\
    \ = stringToArray :+ char\n                    return true\n                }\
    \ else {\n                    return false\n                }\n            }\n\
    \            if (char == ']') {\n                if (stringToArray contains '[')\
    \ {\n                    stringToArray = stringToArray :+ char\n             \
    \   } else {\n                    return false\n                }\n          \
    \  }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf15aswul.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                stringToArray = stringToArray :+ char\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           Not found: stringToArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf15aswul.scala:22:32 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                stringToArray = stringToArray :+ char\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: stringToArray\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf15aswul.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (stringToArray contains\
    \ \e[31m'['\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: stringToArray\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf15aswul.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    stringToArray = stringToArray :+\
    \ char\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: stringToArray\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpf15aswul.scala:26:36 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    stringToArray = stringToArray :+\
    \ char\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: stringToArray\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf15aswul.scala:33:20\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e\
    [0"
  stdout: ''
  timestamp: 1660029272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if(string.length\
    \ < 1) {\n            return false\n        }\n        \n        var inSeq : Boolean\
    \ = true\n        var stack = new Array[Int](string.length)\n        \n      \
    \  for(i<- 0 until string.length) {\n            if(string(i) == '[') {\n    \
    \            stack(i) = i\n                inSeq = false\n            }\n    \
    \        else if(string(i) == ']') {\n                if(!stack(i).isDefined)\
    \ {\n                    inSeq = false\n                }\n                else\
    \ {\n                    stack(i) = stack(i).get\n                    if(!inSeq)\
    \ {\n                        return false\n                    }\n           \
    \     }\n            }\n            else {\n                if(!inSeq) {\n   \
    \                 return false\n                }\n            }\n        }\n\
    \        \n        if(inSeq) {\n            for(i<- 0 until string.length) {\n\
    \                if(stack(i) == 0) {\n                    return false\n     \
    \           }\n            }\n            return true\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvojddi7q.scala:33:29 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e[0m(!stack(i).isDefined) {\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value isDefined is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvojddi7q.scala:37:40 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    stack(i) = stack(i).get\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value get is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660029278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new mutable.Stack[String]()\n        val bracketMap = mutable.Map[String,\
    \ Int]()\n        for(bracket <- string.toCharArray) {\n            if(bracketMap.getOrElse(bracket,\
    \ \"none\") != \"none\")\n                return false\n            if(bracketMap.getOrElse(bracket,\
    \ \"none\") == 0) {\n                if(bracketMap.getOrElse(bracket, 0) != 0)\n\
    \                    return false\n                stack.push(bracket)\n     \
    \       } else if(bracketMap.getOrElse(bracket, \"none\") == \"none\") {\n   \
    \             bracketMap += (bracket -> stack.size)\n            } else {\n  \
    \              bracketMap += (bracket -> stack.size - bracketMap.getOrElse(bracket,\
    \ 0))\n            }\n        }\n        for(bracket <- stack.reverse) {\n   \
    \         if(bracketMap.getOrElse(bracket, \"none\") != \"none\")\n          \
    \      return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7xatf_dv.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7xatf_dv.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketMap\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val stack = new mutable.Stack[Int]\n        var openBrackets\
    \ = 0\n        var openBrackets_stack = 0\n        for(i <- 0 to string.length){\n\
    \            if(string.charAt(i) == '[') {\n                openBrackets += 1\n\
    \                openBrackets_stack += 1\n            } else if(string.charAt(i)\
    \ == ']') {\n                if(openBrackets == 1) {\n                    openBrackets_stack\
    \ -= 1\n                } else {\n                    openBrackets -= 1\n    \
    \            }\n            }\n            if(openBrackets == 1 && openBrackets_stack\
    \ == 0){\n                stack += i\n            }\n        }\n        stack.length\
    \ >0\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpva5t195t.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029273
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var bracketCount\
    \ : Int = 0\n        var nestingCount : Int = 0\n        string.foreach(c => {\n\
    \            if(c == '[')\n                bracketCount += 1\n            if(c\
    \ == ']')\n                bracketCount -= 1\n            if(nestingCount == 0\
    \ && bracketCount == 0)\n                nestingCount += 1\n        })\n     \
    \   nestingCount > 0\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps4c8xvhv.scala:34)\n\tat Problem.main(tmps4c8xvhv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val pattern\
    \ = \"\\\\[\\\\[\\\\[.*\\\\]\\\\]\\\\]\"\n        val regex = new Regex(pattern)\n\
    \        val mutableString = mutable.MutableString(string)\n        regex.findFirstMatchIn(mutableString)\
    \ match {\n            case None => false\n            case Some((start, end))\
    \ => \n                val subString = mutableString.substring(start until end)\n\
    \                val subNested = subString.toString.reverse.find(a => a===\"[\"\
    ).fold(false)(_ == \"]\")\n                subNested && (string.reverse.find(a\
    \ => a===\"[\").fold(false)(_ == \"]\") || (string.reverse.find(a => a===\"]\"\
    ).fold(false)(_ == \"[\")))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbn7ce36j.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mregex\e[0m = \e[33mnew\e\
    [0m \e[35mRegex\e[0m(pattern)\n\e[31m\e[31m   |\e[0m                        ^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: type Regex\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbn7ce36j.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmutableString\e[0m = mutable.MutableString(string)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def isNested(string\
    \ : String) : Boolean = {\n            def nestedBracketCount(string : String)\
    \ : Int = {\n                def nestedBracketCount(string : String) : Int = {\n\
    \                    var count = 0\n                    string.replaceAll(\"\\\
    \\[\", \"\").replaceAll(\"\\\\]\", \"\")\n                    .split(\"\\\\[\"\
    )\n                    .foreach(x => count = count + (string.replaceAll(\"\\\\\
    [\", \"\").replaceAll(\"\\\\]\", \"\").split(x).length))\n                   \
    \ return count\n                }\n                return nestedBracketCount(string)\n\
    \            }\n            var count = 0\n            string.replaceAll(\"\\\\\
    [\", \"\").replaceAll(\"\\\\]\", \"\")\n            .split(\"\\\\[\")\n      \
    \      .foreach(x => count = count + (string.replaceAll(\"\\\\[\", \"\").replaceAll(\"\
    \\\\]\", \"\").split(x).length))\n            if ((nestedBracketCount(string)\
    \ > 0))\n                return true\n            return false\n        }\n  \
    \      var count = 0\n        string.replaceAll(\"\\\\[\", \"\").replaceAll(\"\
    \\\\]\", \"\")\n        .split(\"\\\\[\")\n        .foreach(x => count = count\
    \ + (string.replaceAll(\"\\\\[\", \"\").replaceAll(\"\\\\]\", \"\").split(x).length))\n\
    \        if ((nestedBracketCount(string) > 0))\n            return true\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qpay27a.scala:43:13 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mif\e[0m ((nestedBracketCount(string) >\
    \ \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m             Not found: nestedBracketCount\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.toCharArray()\n        val nesting = mutable.HashSet[Char]()\n    \
    \    var level = 0\n        for (bracket <- brackets) {\n            if (bracket\
    \ = '[') nesting += bracket\n            if (bracket = ']') nesting += bracket\n\
    \            if (nesting.isEmpty) level += 1\n            else if (nesting.size\
    \ == level) nesting.clear\n            else nesting.clear()\n        }\n     \
    \   nesting.size == level\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm3nqs5t.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnesting\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpqm3nqs5t.scala:24:24 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (bracket = \e[31m'['\e[0m)\
    \ nesting += bracket\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val bracket\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpqm3nqs5t.scala:25:24 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (bracket = \e[31m']'\e[0m)\
    \ nesting += bracket\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val bracket\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val index\
    \ = string.indexOf(\"[\")\n        while (index != -1) {\n            val close\
    \ = string.indexOf(\"]\", index)\n            if (close == -1)\n             \
    \   return false\n            val open = string.indexOf(\"[\", close+1)\n    \
    \        if (open == -1)\n                return false\n            val length\
    \ = (close - open)\n            if (length < 1)\n                return false\n\
    \            if (string.substring(open+1, close+1).length != length)\n       \
    \         return false\n            val newIndex = string.indexOf(\"[\", open+length+1);\n\
    \            if (newIndex == -1)\n                return false\n            index\
    \ = newIndex\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1fqwm7xl.scala:36:18 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            index = newIndex\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // If\
    \ we have an empty string then we return false\n        if (string.isEmpty) {\n\
    \            return false\n        }\n        \n        // Set up a stack to hold\
    \ the state of opening brackets\n        var openingBrackets = Stack[Int]()\n\
    \        // Create a mutable collection to hold the number of opening brackets\
    \ in the string\n        var openingBracketCount = 0\n        \n        // Loop\
    \ over the string\n        for (c <- string) {\n            openingBracketCount\
    \ += 1\n            // If we are at a closing bracket then we can either pop an\
    \ opening bracket or the string is balanced\n            if (c == \"]\") {\n \
    \               // If we have an opening bracket then we need to add 1 to the\
    \ number of opening brackets in the string\n                openingBrackets +=\
    \ openingBracketCount\n                // And if we have an empty stack then we\
    \ return true\n                if (openingBrackets.isEmpty) {\n              \
    \      return true\n                }\n            }\n            // Otherwise,\
    \ we just need to pop the stack and increment the number of opening brackets\n\
    \            else {\n                openingBrackets -= 1\n            }\n   \
    \     }\n        \n        // If the number of opening brackets in the string\
    \ is 0 then we return false\n        if (openingBracketCount != 0) {\n       \
    \     return false\n        }\n        \n        // Otherwise we return true\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiqvucon9.scala:34:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m (c == \e[31m\"]\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var inBracket\
    \ = 0\n        var openingBrackets = 0\n        var closingBrackets = 0\n    \
    \    var currentBracket = 0\n        string.zipWithIndex.foreach {\n         \
    \   case (ch, i) => (ch !='[') match {\n                case true => inBracket\
    \ += 1\n                case false =>\n                    if (inBracket != 0)\
    \ {\n                        inBracket -= 1\n                        if (inBracket\
    \ == 0) {\n                            openingBrackets += 1\n                \
    \        }\n                    }\n            }\n        }\n        return ((inBracket\
    \ == 0) || (openingBrackets == closingBrackets)) && (string.zipWithIndex.takeWhile(_._1\
    \ != ']').length == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgwn317k3.scala:39)\n\tat Problem.main(tmpgwn317k3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n      val str\
    \ = new mutable.HashSet[Char](string.last);\n      val index = new mutable.ArraySeq[Int](string.last.length);\n\
    \      def bracket(n : Int) : List[Int] = {\n        if (n < index.length) index\
    \ :+ n;\n        else if (n >= index.length) index : + 0;\n        else if (n\
    \ <= 0) index :+ 0;\n        else if (n == index(0)) List(index);\n        else\
    \ if (n == index(1)) List(index(0), index);\n        else if (n == index(0)+1)\
    \ List(index(0)+1, index);\n        else if (n == index(1)+1) List(index(0)+1,\
    \ index(0)+1);\n        else index :+ 0;\n      }\n      def isNested : Boolean\
    \ = bracket(0) > 0 && (bracket(1)==0 || bracket(2) == 0 || bracket(3) == 0 ||\
    \ bracket(4) == 0 || bracket(5)==0);\n      val isNotNested : Boolean = !isNested;\n\
    \      if (isNotNested) return isNotNested;\n      bracket(0).foreach { n =>\n\
    \        if (bracket(1) == n && isNested) return isNested;\n        if (bracket(2)\
    \ == n && isNested) return isNested;\n        if (bracket(3) == n && isNested)\
    \ return isNested;\n        if (bracket(4) == n && isNested) return isNested;\n\
    \        if (bracket(5) == n && isNested) return isNested;\n      }\n      return\
    \ isNotNested;\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpspaab181.scala:24:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n >= index.length)\
    \ index : + \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m                             \
    \                 ^\e[0m\n\e[31m   |\e[0m                     end of statement\
    \ expected but integer literal found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspaab181.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mstr\e\
    [0m = \e[33mnew\e[0m mutable.HashSet[\e[35mChar\e[0m](string.last);\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpspaab181.scala:21:22 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m      \e[33mval\e[0m \e[36mindex\e[0m = \e[33mnew\e[0m mutable.ArraySeq[\e\
    [35mInt\e[0m](string.last.length);\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspaab181.scala:24:44 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n >= index.length)\
    \ index : + \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m                             \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \      Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpspaab181.scala:32:42 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m      \e[33mdef\e[0m \e[36misNested\e[0m : \e[35mBoolean\e[0m = bracket(\e\
    [31m0\e[0m) > \e[31m0\e[0m && (bracket(\e[31m1\e[0m)==\e[31m0\e[0m || bracket(\e\
    [31m2\e[0m) == \e[31m0\e[0m || bracket(\e[31m3\e[0m) == \e[31m0\e[0m || bracket(\e\
    [31m4\e[0m) == \e[31m0\e[0m || bracket(\e[31m5\e[0m)==\e[31m0\e[0m);\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a m"
  stdout: "Cancelling test of (math.Ordering.Implicits.infixOrderingOps : \n  [T](x:\
    \ T)(\e[33mimplicit \e[0mord: Ordering[T]): Ordering[T]#OrderingOps\n) when making\
    \ suggestions for error in /tmp/tmpspaab181.scala\n"
  timestamp: 1660029292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [[[\") || string.contains(\"[[[\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt0emgt99.scala:23)\n\tat Problem.main(tmpt0emgt99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = \n            string.foldLeft(\"[]\") { \n                case (result, x)\
    \ =>\n                    if (x.equals(\"[\"))\n                        result\
    \ + \"[\" + x\n                    else if (x.equals(\"]\"))\n               \
    \         result + \"]\" + x\n                    else \n                    \
    \    result + x\n            }\n            if (brackets.equals(\"[]\"))\n   \
    \             true\n            else\n                brackets.split(\"[\").length\
    \ == 1 && !brackets.split(\"]\").length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplb3j4zp5.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (brackets.equals(\e[31m\"[]\"\
    \e[0m))\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m        \
    \        Recursive \e[33mvalue\e[0m \e[35mbrackets\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplb3j4zp5.scala:33:16 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                brackets.split(\e[31m\"[\"\e[0m).length\
    \ == \e[31m1\e[0m && !brackets.split(\e[31m\"]\"\e[0m).length\n\e[31m\e[31m  \
    \ |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mbrackets\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplb3j4zp5.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var nestedBrackets\
    \ = false\n        val bracketList = string.toList\n        val bracket_map =\
    \ map(brackcketList)\n        for (i <- 0 until bracketList.length-1) {\n    \
    \        val left = bracketList(i)\n            val right = bracketList(i+1)\n\
    \            val left = bracket_map(left)\n            val right = bracket_map(right)\n\
    \            if (left == \"\" || right == \"\") {\n                nestedBrackets\
    \ = false\n                break\n            }\n            else if (left !=\
    \ \"\" && right != \"\") {\n                nestedBrackets = true\n          \
    \      break\n            }\n        }\n        nestedBrackets\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp00p8dyi9.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracket_map\e[0m = map(brackcketList)\n\
    \e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m     \
    \                     Not found: map\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp00p8dyi9.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracket_map\e[0m = map(brackcketList)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: brackcketList\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00p8dyi9.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mleft\e[0m = bracket_map(left)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mleft is already defined as \e[33mvalue\e[0m \e[35mleft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00p8dyi9.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mright\e[0m = bracket_map(right)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mright is already defined as \e[33mvalue\e[0m \e[35mright\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp00p8dyi9.scala:28:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \     \e[33mif\e[0m (left == \e[31m\"\"\e[0m || right == \e[31m\"\"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp00p8dyi9.scala:28:30 -----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m   "
  stdout: ''
  timestamp: 1660029293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Define\
    \ a pattern for brackets\n        // We will use this pattern to check that the\
    \ string contains at least one bracket\n        val bracesPat = \"\\\\[\\\\[\"\
    .r\n        // Create a mutable set (we will modify this later)\n        var set\
    \ = new mutable.HashSet[String]()\n        // Iterate over the string\n      \
    \  var index = 0\n        while (index < string.length) {\n            // Check\
    \ that this bracket is actually a bracket\n            if (bracesPat.findFirstIn(string.substring(index))\
    \ != null) {\n                // Add this bracket to the set (we will modify this\
    \ later)\n                set += string.substring(index, index + 3)\n        \
    \    }\n            index += 3\n        }\n        // Now iterate over the set\n\
    \        // We only want to check if there is at least one element in the set\
    \ which is nested in a bracket \n        // but we want to return true if the\
    \ string is \"[[[\" which is also nested in another bracket.\n        set.foreach\
    \ { element => \n            if (bracesPat.findFirstIn(element) != null) {\n \
    \               return true\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7fi3fxu.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029285
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // A\
    \ valid subsequence of brackets contains at least one pair of brackets\n     \
    \   // nested within each other. \n        string.matches(\"\"\"\\[.+?\\]\"\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyelwnih1.scala:26)\n\tat Problem.main(tmpyelwnih1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracket_depth\
    \ = string.count('[')\n        val bracketDepth = string.count('[') - bracket_depth\n\
    \        val square_bracket_depth = string.count(']')\n        val square_bracket_count\
    \ = string.count(']') - (square_bracket_depth + 1)\n        val non_bracket_count\
    \ = string.count(']') - square_bracket_count \n        return (bracket_depth ==\
    \ square_bracket_depth && bracketDepth == square_bracket_count) && (bracketDepth\
    \ == 0 && bracket_depth == 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0hmn32oa.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbracket_depth\e\
    [0m = string.count(\e[31m'['\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                     ^^^\e[0m\n\e[31m   |\e[0m                              \
    \           Found:    (\e[31m'['\e[0m : Char)\n\e[31m   |\e[0m               \
    \                          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0hmn32oa.scala:21:40 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbracketDepth\e[0m = string.count(\e\
    [31m'['\e[0m) - bracket_depth\n\e[31m\e[31m   |\e[0m                         \
    \               ^^^\e[0m\n\e[31m   |\e[0m                                    \
    \    Found:    (\e[31m'['\e[0m : Char)\n\e[31m   |\e[0m                      \
    \                  Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0hmn32oa.scala:22:48 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msquare_bracket_depth\e[0m\
    \ = string.count(\e[31m']'\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                      Found:    (\e[31m']'\e[0m : Char)\n\e[31m   |\e[0m    \
    \                                           Required: Char => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0hmn32oa.scala:23:48 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msquare_bracket_count\e[0m\
    \ = string.count(\e[31m']'\e[0m) - (square_bracket_depth + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                ^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (\e[31m']'\e\
    [0m : Char)\n\e[31m   |\e[0m                                               Required:\
    \ Char => Boolean\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660029295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var counter\
    \ : Int = 0\n        var open : Boolean = true\n        var closing : Boolean\
    \ = false\n        var current : String = string.head\n        \n        var result\
    \ : Boolean = false\n        \n        for (i<- 1 to string.length){\n       \
    \     current += string(i)\n            \n            if ((closing == true) &&\
    \ (current == \"[\") || (current == \"]\")){\n                counter++\n    \
    \            open = false\n            }\n            \n            if (counter\
    \ == 0){\n                closing = current == \"[\"\n            }\n        \
    \    \n            if (open == true){\n                if ((closing == true) &&\
    \ (current == \"[\") || (current == \"]\")){\n                    counter += 1\n\
    \                }\n                \n                if (counter == 0){\n   \
    \                 result = true\n                }\n            }\n        }\n\
    \        \n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx7e2k8z3.scala:32:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                open = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpx7e2k8z3.scala:23:38 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33mvar\e[0m \e[36mcurrent\e[0m : \e[35mString\e[0m = string.head\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                               Found:    Char\n\e[31m   |\e[0m      \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpx7e2k8z3.scala:31:23 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                counter++\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value ++ is not a member\
    \ of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660029295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ your code here\n        var stack = mutable.Stack[String]()\n        for (i\
    \ <- 0 until string.length()) {\n            val isBracket = string.charAt(i)=='['\
    \ || string.charAt(i)=='('\n            if (isBracket && !stack.isEmpty) {\n \
    \               var isNested = false\n                for (j <- 0 until stack.size)\
    \ {\n                    val currentChar = stack.last\n                    if\
    \ (currentChar == '[' || currentChar == '(') {\n                        stack\
    \ += string.charAt(i)\n                        break\n                    }\n\
    \                    if (currentChar == string.charAt(j)) {\n                \
    \        stack += string.charAt(i)\n                        break\n          \
    \          } else if (currentChar == ']' || currentChar == ']') {\n          \
    \              stack += ']'\n                        isNested =  true\n      \
    \                  break\n                    } else if (currentChar == '}' ||\
    \ currentChar == '}') {\n                        stack += '}'\n              \
    \          isNested =  true\n                        break\n                 \
    \   }\n                }\n                if (isNested) \n                   \
    \ return true\n            }\n            if (string.charAt(i) == '[') stack +=\
    \ '['\n            if (string.charAt(i) == ']') stack += ']'\n            if (string.charAt(i)\
    \ == '(') stack += '('\n            if (string.charAt(i) == ')') stack += ')'\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpahm380av.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpahm380av.scala:30:24 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpahm380av.scala:34:24\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpahm380av.scala:38:24 ------------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m                        break\n\e[31m\e[31m   |\e[0m     \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpahm380av.scala:42:24\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n         // Initialize\
    \ a stack of strings to store the brackets\n         val stack = mutable.Stack[String]()\n\
    \         \n         // Iterate through the string\n         string.split(\"\\\
    \\[\").foreach { elem =>\n             // If this element is a bracket, push it\
    \ to stack\n             if(elem.equals(\"[\")){\n                 stack.push(elem)\n\
    \             }\n             // If this element is a bracket, pop an element\
    \ from stack\n             else if(elem.equals(\"]\")){\n                 stack.lastOption.getOrElse(\"\
    \")\n                 stack.pop()\n             }\n             // If this element\
    \ is not a bracket, pop an element from stack\n             else if(!stack.lastOption.contains(elem)\
    \ && stack.nonEmpty){\n                 stack.pop()\n             }\n        \
    \ }\n         // If stack has any elements, return false\n         if(!stack.nonEmpty){\n\
    \             false\n         }\n         else{\n             true\n         }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo_8vksu8.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m         \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [\")\n        string.contains(\"]\") \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvtep9jsq.scala:25)\n\tat Problem.main(tmpvtep9jsq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val nestedBrackets\
    \ = scala.collection.mutable.MutableSet[String]()\n        // Convert string to\
    \ list\n        val chars = string.chars\n        val list: List[Char] = chars.toList\n\
    \        // Convert list to string and remove brackets\n        val listString\
    \ = list.mkString(\"\").replace(\"[\", \"\")\n        val listString = listString.replace(\"\
    ]\", \"\")\n        // Remove duplicate characters and sort\n        val charList\
    \ = listString.distinct\n        // Initialize nesting level count for current\
    \ bracket (depth)\n        var depth = 0\n        // Iterate over list and keep\
    \ track of nesting levels\n        for (char <- charList) {\n            // Add\
    \ new character to the set if it's not already present\n            if(!nestedBrackets(char))\
    \ {\n                nestedBrackets.add(char)\n            }\n            // Set\
    \ current character as parent of the previous character if it is not already present\n\
    \            if(nestedBrackets(char) == false) {\n                val prevChar\
    \ = chars(depth)\n                if(!nestedBrackets(prevChar)) {\n          \
    \          nestedBrackets.add(prevChar)\n                }\n            }\n  \
    \          depth += 1\n        }\n        // Return true if there are no nested\
    \ brackets\n        depth == 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvp943_6_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlistString\e[0m = listString.replace(\e\
    [31m\"]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlistString is already defined as \e[33mvalue\e[0m \e[35mlistString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpvp943_6_.scala:20:54 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnestedBrackets\e[0m = scala.collection.mutable.MutableSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value MutableSet is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvp943_6_.scala:23:37 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m: \e[35mList\e\
    [0m[\e[35mChar\e[0m] = chars.toList\n\e[31m\e[31m   |\e[0m                   \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value toList is not\
    \ a member of java.util.stream.IntStream\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpvp943_6_.scala:39:31\
    \ -----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                \e[33mval\e\
    [0m \e[36mprevChar\e[0m = chars(depth)\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^\e[0m\n\e[31m   |\e[0m                               \e[33mvalue\e\
    [0m \e[35mchars\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val pairs\
    \ = string.split(\"\\\\[|\\\\]\")\n        val brackets = pairs.groupBy(_ == '[')\n\
    \        if (pairs.size != brackets.size)\n            return false\n        val\
    \ nests = pairs.groupBy(_ == ']')\n        var i = 0\n        while(i < pairs.size)\
    \ {\n            if (brackets(i).getOrElse(true) == nests(i).getOrElse(true))\
    \ {\n                i += 1\n            } else {\n                return false\n\
    \            }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp57lqotd4.scala:21:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = pairs.groupBy(_\
    \ == \e[31m'['\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp57lqotd4.scala:24:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnests\e[0m = pairs.groupBy(_ == \e[31m']'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57lqotd4.scala:27:25 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (brackets(i).getOrElse(\e[31mtrue\e\
    [0m) == nests(i).getOrElse(\e[31mtrue\e[0m)) {\n\e[31m\e[31m   |\e[0m        \
    \                 ^\e[0m\n\e[31m   |\e[0m                         Found:    (i\
    \ : Int)\n\e[31m   |\e[0m                         Required: Boolean\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def nested(i\
    \ : Int, j : Int) : Boolean = i < j && string.charAt(i) == '[' && string.charAt(j]\
    \ == ']' \n        def nestedLoop(i : Int, j : Int) : Boolean = i < j && !string.charAt(i)\
    \ == '[' && string.charAt(j] == ']' \n        val count = string.length\n    \
    \    val sum = 0\n        for( i <- 0 to count-1) {\n            sum += string.charAt(i)\n\
    \        }\n        for( i <- 0 to count-1) {\n            for( j <- 0 to count-1)\
    \ {\n                sum += string.charAt(i) + string.charAt(j)\n            }\n\
    \        }\n        \n        // If count is odd, return false\n        val remainder\
    \ = count % 2\n        val firstSquare = sum * sum\n        if(count != 0 && remainder\
    \ == 0) return false\n\n        // Find the first [ and ] in the string\n    \
    \    var open = 0\n        var close = 0\n        for( i <- 0 to count-1) {\n\
    \            if(string.charAt(i) == '[') open += 1\n            if(string.charAt(i)\
    \ == ']') close += 1\n        }\n\n        // Iterate through all possible combinations\
    \ of []\n        val subsequences = mutable.Set[String]()\n        for( i <- open\
    \ to close-1) {\n            // Add the ith [] in the set subsequences\n     \
    \       val start = i + 1\n            val end = count\n            val subsequence\
    \ = string.substring(start, end) \n            subsequences += subsequence\n \
    \       }\n\n        // Check that there are valid subsequences \n        // that\
    \ contain at least one nested brackets\n        for(subsequence <- subsequences)\
    \ {\n            if(subsequence.length == 0) continue\n            val start =\
    \ subsequence.indexOf('[') + 1\n            val end = subsequence.lastIndexOf(']')\
    \ + 2\n            val temp = subsequence.substring(start, end)\n            if(nestedLoop(start,\
    \ temp.length)) {\n                return true\n            }\n        }\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz7zadtbh.scala:20:100 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mdef\e[0m \e[36mnested\e[0m(\e[36mi\e[0m\
    \ : \e[35mInt\e[0m, \e[36mj\e[0m : \e[35mInt\e[0m) : \e[35mBoolean\e[0m = i <\
    \ j && string.charAt(i) == \e[31m'['\e[0m && string.charAt(j] == \e[31m']'\e[0m\
    \ \n\e[31m\e[31m   |\e[0m                                                    \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                        ')' expected, but ']' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz7zadtbh.scala:86:1 ---------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Initialize\
    \ a var to hold the number of left brackets seen in the string\n        var leftBracketsSeen\
    \ = string.length \n        // Initialize a var to hold the number of right brackets\
    \ seen in the string\n        var rightBracketsSeen = 0\n        // Initialize\
    \ a var to hold the number of nested brackets seen in the string\n        var\
    \ nestedBracketsSeen = 0\n        // Initialize the stack for brackets in the\
    \ string\n        var stack = new Stack[String]\n        // Iterate through the\
    \ string and push brackets onto the stack\n        var stringIterator = Iterator.continually(string)\
    \ \n        stringIterator.foreach {\n            x => \n            if (x ==\
    \ '[') stack.push x\n            else if (x == ']') stack.push '}'\n         \
    \   else stack.push x\n        }\n        // Iterate through the stack\n     \
    \   while(!stack.isEmpty) {\n            x => {\n                if( x == '[')\
    \ leftBracketsSeen += 1\n                else if (x == ']') rightBracketsSeen\
    \ += 1\n                else if ( x == '{' || x == '}') nestedBracketsSeen +=\
    \ 1\n                else if ( x == '[') stack.push x\n                else if\
    \ ( x == ']' || x == '}' || x == ']') stack.pop\n            }\n        }\n  \
    \      if (leftBracketsSeen == 1 || rightBracketsSeen == 1 || nestedBracketsSeen\
    \ == leftBracketsSeen + rightBracketsSeen + 1) {\n            return true\n  \
    \      }\n        else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe57mgi9x.scala:32:38 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m (x == \e[31m'['\e[0m) stack.push\
    \ x\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m\
    \   |\e[0m                                      expression expected but \e[31melse\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe57mgi9x.scala:42:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m ( x == \e[31m'['\e[0m) stack.push x\n\e[31m\e[31m   |\e[0m \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                expression expected but \e[31melse\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpe57mgi9x.scala:32:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m (x == \e[31m'['\e[0m) stack.push\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpe57mgi9x.scala:32:32 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m (x == \e[31m'['\e[0m) stack.push\
    \ x\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mpush\e\
    [0m in \e[33mclass\e[0m \e[35mStack\e[0m with types\n\e[31m   |\e[0m (elem1: String,\
    \ elem2: String, elems: String*): \n\e[31m   |\e[0m  scala.collection.mutable.Stack[String]\n\
    \e[31m   |\e[0m (elem: String): scala.collection.mutable.Stack[String]\n\e[31m\
    \   |\e[0mmatch expected type ?{ x: ? }\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpe57mgi9x.scala:38:12\
    \ -----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            \e[36mx\e\
    [0m => {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m           \
    \ Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m            I could\
    \ not infer the type of the parameter"
  stdout: ''
  timestamp: 1660029296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def hasNest(bracketsList\
    \ : List[String]) : Boolean = {\n            // A valid subsequence of brackets\
    \ is one that starts with an\n            // open bracket, follows by any number\
    \ of close brackets and ends\n            // with a closed bracket.\n        \
    \    val openBracket = bracketsList(0)\n            val closeBracket = bracketsList(0)\
    \ match {\n                case x if x.nonEmpty => bracketsList.last\n       \
    \         case x => \"\"\n            }\n            val bracketsNotInList = bracketsList.tail.filter(x\
    \ => !x.equals(openBracket))\n            val openBracketIndex = bracketsList.indexOf(openBracket)\n\
    \            val closeBracketIndex = bracketsList.indexOf(closeBracket)\n    \
    \        openBracketIndex == closeBracketIndex && bracketsNotInList.isEmpty\n\
    \        }\n        val openBracketIndex = string.indexOf(\"[\")\n        if (openBracketIndex\
    \ == -1) return false\n        val closeBracketIndex = string.indexOf(\"]\", openBracketIndex)\n\
    \        if (closeBracketIndex == -1) return false\n        // Make sure that\
    \ if there are brackets inside brackets, they don't have any other brackets inside\
    \ them\n        if ((closeBracketIndex - openBracketIndex + 1) > 1) return false\n\
    \        hasNest(string.substring(openBracketIndex + 1, closeBracketIndex + 1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfemlr8vo.scala:40:32\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m        hasNest(string.substring(openBracketIndex\
    \ + \e[31m1\e[0m, closeBracketIndex + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    String\n\e[31m   |\e[0m        \
    \        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var opening\
    \ = string.length\n        while (opening > 0) {\n            if (string.length\
    \ > 0 && string[opening - 1] != \"]\") {\n                return false\n     \
    \       }\n            opening -= 1\n        }\n        while (opening > 0) {\n\
    \            if (string.length > 0 && string[opening - 1] != \"]\" && string[opening\
    \ - 1] != \"[\") {\n                return false\n            }\n            opening\
    \ -= 1\n        }\n        opening += 1\n        while (opening < string.length)\
    \ {\n            if (string.length > 0 && string[opening - 1] != \"[\" && string[opening\
    \ - 1] != \"]\") {\n                return false\n            }\n            opening\
    \ += 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphcilei23.scala:22:52 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (string.length > \e[31m0\e\
    [0m && string[\e[35mopening\e[0m \e[35m-\e[0m \e[31m1\e[0m] != \e[31m\"]\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \ ^\e[0m\n\e[31m   |\e[0m                                                    Not\
    \ found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphcilei23.scala:28:52\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m\
    \ (string.length > \e[31m0\e[0m && string[\e[35mopening\e[0m \e[35m-\e[0m \e[31m1\e\
    [0m] != \e[31m\"]\"\e[0m && string[\e[35mopening\e[0m \e[35m-\e[0m \e[31m1\e[0m]\
    \ != \e[31m\"[\"\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                     Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphcilei23.scala:28:82 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (string.length > \e[31m0\e[0m &&\
    \ string[\e[35mopening\e[0m \e[35m-\e[0m \e[31m1\e[0m] != \e[31m\"]\"\e[0m &&\
    \ string[\e[35mopening\e[0m \e[35m-\e[0m \e[31m1\e[0m] != \e[31m\"[\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                            Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphcilei23.scala:35:52 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mif\e[0m (string.length > \e[31m0\e\
    [0m && string[\e[35mopening\e[0m \e[35m-\e[0m \e[31m1\e[0m] != \e[31m\"[\"\e[0m\
    \ && string[\e[35mopening\e[0m \e[35m-\e[0m \e[31m1\e[0m] != \e[31m\"]\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \ ^\e[0m\n\e[31m   |\e[0m                                                    Not"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def parse(s\
    \ : String) : List[String] = s.split(\"\\\\[\").map(e => e.trim).filter(_ => e.nonEmpty)\n\
    \        val brackets  = parse(string)\n        val depth    = brackets.length\n\
    \        val index    = 0\n        val found    = false\n        while (depth\
    \ > 0) {\n            if (brackets(index) == \"[\") {\n                found =\
    \ true\n                index  += 1\n            }\n            depth -= 1\n \
    \       }\n        found\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9g8_jh8.scala:20:91 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mdef\e[0m \e[36mparse\e[0m(\e[36ms\e[0m\
    \ : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\"\
    \\\\[\"\e[0m).map(\e[36me\e[0m => e.trim).filter(_ => e.nonEmpty)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                               Not found: e\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpm9g8_jh8.scala:27:22 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                found = \e[31mtrue\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm9g8_jh8.scala:28:23\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                index  +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                value += is not a member of Int - did you mean index.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm9g8_jh8.scala:30:18 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            depth -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Int - did you mean depth.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val leftBracketIndex\
    \ = string.indexOf(\"[\", 0)\n        val rightBracketIndex = string.indexOf(\"\
    ]\", 0)\n        if ((leftBracketIndex > 0) && (rightBracketIndex > 0)) {\n  \
    \          val leftBracketString = string.substring(0, leftBracketIndex)\n   \
    \         val rightBracketString = string.substring(rightBracketIndex + 1)\n \
    \           var hasNesting = 0\n            if (leftBracketString == \"[\" &&\
    \ rightBracketString == \"[\") {\n                hasNesting = 1 // [[]]\n   \
    \         } else if (leftBracketString == \"[\" && rightBracketString == \"]\"\
    ) {\n                hasNesting = 2 // [[]][]]\n            } else if (leftBracketString\
    \ == \"[\" && rightBracketString == \"]\") {\n                hasNesting = 3 //\
    \ [[]][][]]\n            } else if (leftBracketString == \"[\" && rightBracketString\
    \ == \"[\") {\n                hasNesting = 4 // [[]][][][]\n            } else\
    \ if (leftBracketString == \"[\" && rightBracketString == \"(\") {\n         \
    \       hasNesting = 5 // [[]][][][][\n            } else if (leftBracketString\
    \ == \"[\" && rightBracketString == \")\") {\n                hasNesting = 6 //\
    \ [[]][][][][]]\n            } else if (leftBracketString == \"[\" && rightBracketString\
    \ == \"(\") {\n                hasNesting = 7 // [[]][][][][]]\n            }\
    \ else if (leftBracketString == \"[\" && rightBracketString == \"]\") {\n    \
    \            hasNesting = 8 // [[]][][][][][]]\n            } else if (leftBracketString\
    \ == \"[\" && rightBracketString == \"]\") {\n                hasNesting = 9 //\
    \ [[]][][][][][][]]\n            } else if (leftBracketString == \"[\" && rightBracketString\
    \ == \"[\") {\n                hasNesting = 10 // [[]][][][][][][][]\n       \
    \     } else if (leftBracketString == \"[\" && rightBracketString == \"]\") {\n\
    \                hasNesting = 11 // [[]][][][][][][][]\n            } else if\
    \ (leftBracketString == \"[\" && rightBracketString == \"(\") {\n            \
    \    hasNesting = 12 // [[]][][][][][][][][]\n            } else if (leftBracketString\
    \ == \"[\" && rightBracketString == \")\") {\n                hasNesting = 13\
    \ // [[]][][][][][][][][]\n            } else if (leftBracketString == \"[\" &&\
    \ rightBracketString == \"]\") {\n                hasNest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnwc808d_.scala:73:0 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc808d_.scala:53:16\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m                hasNest\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: hasNest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpnwc808d_.scala:55:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m55 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660029291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val nestedBrackets\
    \ = mutable.ListBuffer[Int]()\n        val nestedBracketsDepth = mutable.ListBuffer[Int]()\n\
    \n        for (bracket <- string.dropWhile(c => !(c == '[' || c == ']'))) {\n\
    \            val bracketDepth = bracket.length\n            val isNestedBracket\
    \ = bracketDepth > nestedBrackets.length ||\n                                \
    \    bracketDepth == nestedBracketsDepth.length &&\n                         \
    \           nestedBracketsDepth(bracketDepth - 1) < bracketDepth\n           \
    \ if(isNestedBracket) {\n                nestedBrackets += bracket\n         \
    \       nestedBracketsDepth += bracketDepth\n            }\n        }\n      \
    \  return nestedBrackets.nonEmpty && nestedBrackets.distinct.size == nestedBrackets.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkx3n4ox8.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnestedBrackets\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkx3n4ox8.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnestedBracketsDepth\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkx3n4ox8.scala:24:39 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            \e[33mval\e[0m \e[36mbracketDepth\e[0m = bracket.length\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value length is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Implement\
    \ your code here\n        \n        var openBracketIndex : Int = 0\n        var\
    \ closedBracketIndex : Int = 0\n        var openBracketCount = 0\n        \n \
    \       for(i <- 0 until string.length){\n            if((string.charAt(i) ==\
    \ '['){\n                openBracketIndex += 1\n                openBracketCount\
    \ += 1\n            }else if((string.charAt(i) == ']')){\n                closedBracketIndex\
    \ += 1\n                if(openBracketIndex == closedBracketIndex){\n        \
    \            if(openBracketCount > 1){\n                        val start = i\n\
    \                        val end = string.lastIndexOf(\"]\",i)\n             \
    \           while(i < end){\n                            val currBracket = string.charAt(i)\n\
    \                            if(currBracket != '['){\n                       \
    \         return false\n                            }\n                      \
    \      i += 1 \n                        }\n                        return true\n\
    \                    }\n                    else{\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjpnxgga0.scala:30:13 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m((string.charAt(i)\
    \ == \e[31m']'\e[0m)){\n\e[31m\e[31m   |\e[0m             ^^^^\e[0m\n\e[31m  \
    \ |\e[0m             ')' expected, but 'else' found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpjpnxgga0.scala:27:16 -----------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m            \e[33mif\e[0m((string.charAt(i) == \e[31m'['\e[0m){\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                \e[33mmethod\e[0m \e[35m==\e[0m in \e[33mclass\e[0m \e[35mChar\e\
    [0m does not take more parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpjpnxgga0.scala:50:8 -----------------\e[0m\e[0m\n\e[33m49 |\e\
    [0m            }\n\e[33m50 |\e[0m        }\n\e[33m\e[33m   |\e[0m            \
    \ ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement position;\
    \ you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val chars\
    \ = string.chars\n        val openings = mutable.Stack[Int]()\n        val closings\
    \ = mutable.Stack[Int]()\n        val closingPairs = mutable.Map[Int, Int]()\n\
    \        for (c <- chars) {\n            if (c == '[') {\n                openings.push(c)\n\
    \            } else if c == '(') {\n                closings.push(c)\n       \
    \     } else if (c == ']') {\n                openings.pop()\n               \
    \ closings.pop()\n            } else if (c == ')') {\n                val openingCount\
    \ = openings.length\n                val closingCount = closings.length\n    \
    \            if (openingCount == 0 || closingCount == 0 || openingCount > closingCount)\
    \ {\n                    false\n                } else {\n                   \
    \ val openingIndex = openings.length - 1\n                    val closingIndex\
    \ = closings.length - 1\n                    val closingPair = (closingIndex(openingIndex),\
    \ openingIndex(closingIndex))\n                    if (closingPairs.contains(closingPair))\
    \ {\n                        false\n                    } else {\n           \
    \             closingPairs += closingPair\n                        true\n    \
    \                }\n                }\n            } else {\n                false\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuaggq91t.scala:27:30 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m c == \e[31m'('\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e\
    [0m                              'then' expected, but ')' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuaggq91t.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mopenings\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpuaggq91t.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosings\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpuaggq91t.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingPairs\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuaggq91t.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (c\
    \ <- chars) {\n\e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue foreach is not a member of java.util.stream.IntStream - did you mean\
    \ chars.forEach?\n5 errors found\n"
  stdout: ''
  timestamp: 1660029303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // We\
    \ will store our nested brackets here:\n        var nestedBrackets: List[Int]\
    \ = List()\n        // Let's go through each character of the string:\n      \
    \  for (x<-0 to string.length-1) {\n            // If this character is a bracket,\
    \ then we will record how many brackets are there\n            // in the nesting\
    \ structure.\n            if (string(x) === \"[\") {\n                nestedBrackets\
    \ = append(nestedBrackets, 0)\n            }\n            // Now let's say we\
    \ are looking at the next character\n            // If this character is a bracket,\
    \ then we will decrement the count\n            // of the brackets in our nesting\
    \ structure.\n            if (string(x) === \"[\") {\n                nestedBrackets(nestedBrackets.length-1)+=1\n\
    \            }\n            // If this character is a bracket, then we will check\
    \ if the count of\n            // brackets is greater than 0. If it is, then we\
    \ cannot have nested brackets.\n            // The only way to have nested brackets\
    \ is if the brackets count is 0\n            // and we encounter a closing bracket.\n\
    \            if (string(x) === \"[\") {\n                if (nestedBrackets(nestedBrackets.length-1)\
    \ > 0) {\n                    return false\n                }\n            }\n\
    \        }\n        // If the count of the nested brackets is 0, then we know\
    \ we can have nested brackets\n        if (nestedBrackets.length==0) {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpilt3kizg.scala:26:26 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (string(x) === \e[31m\"[\"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value === is not a member of Char - did you mean Char.==?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpilt3kizg.scala:27:33 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                nestedBrackets = append(nestedBrackets,\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: append\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpilt3kizg.scala:32:26 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m (string(x) === \e[31m\"[\"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value === is not a member of Char - did you mean Char.==?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpilt3kizg.scala:33:55 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                nestedBrackets(nestedBrackets.length-\e\
    [31m1\e[0m)+=\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpilt3kizg.scala:39:26\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33mif\e[0m\
    \ (string(x) === \e[31m\"[\"\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value === is not a member of Char - did you\
    \ mean Char.==?\n5 errors found\n"
  stdout: ''
  timestamp: 1660029307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val nestedBrackets\
    \ = mutable.Stack[Int]()\n        for (c <- string) {\n            if (c == '[')\
    \ nestedBrackets.push(nestedBrackets.size)\n            if (c == ']') nestedBrackets.pop()\n\
    \        }\n        return nestedBrackets.size == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1r72sg3d.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnestedBrackets\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n       var count\
    \ : Int = 0\n       var depth : Int = 0\n       var brackets : List[Char] = List.empty\n\
    \       val str : String = string //create local val\n       val length = str.length\n\
    \       val currentPosition : Int = length - 1\n       var openBrackets : Int\
    \ = str.lastIndexOf(\"[\")\n       var closeBrackets : Int = str.lastIndexOf(\"\
    ]\")\n       while (currentPosition > 0) {\n           if (brackets.isEmpty) {\n\
    \               brackets = str split \"[]\"\n               count = brackets.length\n\
    \           }\n           else {\n               count = brackets.size - 1\n \
    \          }\n           if (currentPosition < openBrackets) {\n             \
    \  currentPosition -= 1\n               if (depth == 0) {\n                  \
    \ depth += 1\n               }\n               else {\n                   depth\
    \ -= 1\n                   if (count == 0) {\n                       val nextPosition\
    \ = str.lastIndexOf(\"[\", openBrackets)\n                       if (nextPosition\
    \ > 0) {\n                           val nextClosingBracket = str.lastIndexOf(\"\
    ]\", nextPosition)\n                           val nextClosingBracket2 = str.lastIndexOf(\"\
    ]\", nextClosingBracket)\n                           if (nextClosingBracket2 >\
    \ nextClosingBracket) {\n                               openBrackets = nextClosingBracket\n\
    \                               closeBrackets = nextClosingBracket2\n        \
    \                       currentPosition = nextPosition\n                     \
    \          break\n                           }\n                       }\n   \
    \                }\n               }\n           }\n           else {\n      \
    \         val nextBracket = str.lastIndexOf(\"[\", closeBrackets + 1)\n      \
    \         if (nextBracket < 0 || nextBracket > openBrackets) {\n             \
    \      return false\n               }\n               openBrackets = nextBracket\n\
    \               closeBrackets = str.lastIndexOf(\"]\", nextBracket)\n        \
    \       currentPosition = str.lastIndexOf(\"[\", closeBrackets + 1)\n        \
    \       brackets = str split \"[]\"\n               depth = 0\n           }\n\
    \       }\n       return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxek4x29.scala:30:26\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m               brackets = str\
    \ split \e[31m\"[]\"\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Array[String]\n\e[31m\
    \   |\e[0m                          Required: List[Char]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwxek4x29.scala:37:31 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m               currentPosition -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ -= is not a member of Int - did you mean currentPosition.!=?\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpwxek4x29.scala:51:47 -----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                               currentPosition = nextPosition\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Reassignment to val currentPosition\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwxek4x29.scala:52:31\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m                        \
    \       break\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Not found: break\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpwxek4x29.scala:65:31 -----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m               currentPosition = str.lastIndexOf(\e[31m\"\
    [\"\e[0m, closeBrackets + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Reassignment to val currentPosition\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxek4x29.scala:66:26 ----------"
  stdout: ''
  timestamp: 1660029311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracketedNesting\
    \ = \n            string\n            .split(\"\\\\[\")\n            .flatMap(s\
    \ => s.split(\"\\\\]\"))\n            .filter(_.nonEmpty)\n            .map(s\
    \ => s + \"[\")\n            .toList\n\n        val bracketNesting = \n      \
    \      string\n            .split(\"\\\\[\")\n            .flatMap(s => s.split(\"\
    \\\\]\"))\n            .filter(_.nonEmpty)\n            .filter(_.isNotEmpty)\n\
    \            .filter(s => s != \"[\")\n            .filter(s => s != \"]\")\n\
    \            .filter(s => s != \"[[]]\")\n            .filter(s => s != \"[[]][\"\
    )\n            .filter(s => s != \"[[]][]]\")\n            .filter(s => s != \"\
    [[]][]][\")\n            .filter(s => s != \"[[]][]][]]\")\n            .filter(s\
    \ => s != \"[[]][]][]][\")\n            .filter(s => s != \"[[]][]][]][]]\")\n\
    \            .filter(s => s != \"[[]][]][]][]][\")\n            .filter(s => s\
    \ != \"[[]][]][]][]][]]\")\n            .filter(s => s != \"[[]][]][]][]][]]\"\
    )\n            .filter(s => s != \"[[]][]][]][]][]]\")\n            .filter(s\
    \ => s != \"[[]][]][]][]][]][]]\")\n            .filter(s => s != \"[[]][]][]][]][]][]]\"\
    )\n            .filter(s => s != \"[[]][]][]][]][]][]][]][]]\")\n            .filter(s\
    \ => s != \"[[]][]][]][]][]][]][]][]][]]\")\n            .filter(s => s != \"\
    [[]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp6mbj8ka.scala:51:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            .filter(s => s != \"[[]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]]\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpp6mbj8ka.scala:53:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m53 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6mbj8ka.scala:33:22 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            .filter(_.isNotEmpty)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value isNotEmpty is\
    \ not a member of String - did you mean _$3.isEmpty?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpp6mbj8ka.scala:52:5 ---------------------\e[0m\e[0m\n\
    \e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp6mbj8ka.scala:53:4 -------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: [[]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]][]]def\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def isNested(string\
    \ : String, openBrackets : Int, closeBrackets : Int) : Boolean = { \n        \
    \    val openBrackets = openBrackets\n            val closeBrackets = closeBrackets\n\
    \            val stringLength = string.length\n            if ((openBrackets +\
    \ closeBrackets) > (stringLength - 2)) {\n                return false\n     \
    \       }\n            if (openBrackets == closeBrackets) {\n                string\
    \ match {\n                    case _ if (openBrackets == 0) => true\n       \
    \             case _ => \n                        openBrackets != 0 \n       \
    \                     && closeBrackets != 0 \n                            && openBrackets\
    \ == closeBrackets - 1 \n                            && openBrackets < (stringLength\
    \ - 2)\n                }\n            }\n            if (openBrackets < closeBrackets)\
    \ {\n                string match {\n                    case _ if (openBrackets\
    \ == 0) => false\n                    case _ => \n                        openBrackets\
    \ != 0 \n                            && closeBrackets != 0 \n                \
    \            && openBrackets < closeBrackets - 1 \n                          \
    \  && openBrackets + 1 == closeBrackets\n                }\n            }\n  \
    \      }\n        string match {\n            case _ if (string.startsWith(\"\
    [\")) => \n                val openBrackets = string.length\n                val\
    \ closeBrackets = 1\n                if (isNested(string, openBrackets, closeBrackets))\
    \ {\n                    true\n                } else {\n                    false\n\
    \                }\n            case _ => \n                false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq59b1rxl.scala:21:31 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mopenBrackets\e[0m =\
    \ openBrackets\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e\
    [31m   |\e[0m                               Recursive \e[33mvalue\e[0m \e[35mopenBrackets\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq59b1rxl.scala:22:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mcloseBrackets\e[0m = closeBrackets\n\e[31m\e[31m   |\e[0m          \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \ Recursive \e[33mvalue\e[0m \e[35mcloseBrackets\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq59b1rxl.scala:37:12 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33mif\e[0m (openBrackets < closeBrackets)\
    \ {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Unit\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m     \
    \       Maybe you are missing an else part for the conditional?\n\e[31m38 |\e\
    [0m                string \e[33mmatch\e[0m {\n\e[31m39 |\e[0m                \
    \    \e[33mcase\e[0m _ \e[33mif\e[0m (openBrackets == \e[31m0\e[0m) => \e[31mfalse\e\
    [0m\n\e[31m40 |\e[0m                    \e[33mcase\e[0m _ => \n\e[31m41 |\e[0m\
    \                        openBrackets != \e[31m0\e[0m \n\e[31m42 |\e[0m      \
    \                      && closeBrackets != \e[31m0\e[0m \n\e[31m43 |\e[0m    \
    \                        && openBrackets < closeBrackets - \e[31m1\e[0m \n\e[31m44\
    \ |\e[0m                            && openBrackets + \e[31m1\e[0m == closeBrackets\n\
    \e[31m45 |\e[0m                }\n\e[31m46 |\e[0m            }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpq59b1rxl.scala:29:53 ----------------\e\
    [0m\e[0m\n\e[33m29 |\e[0m                    \e[33mcase\e[0m _ \e[33mif\e[0m (ope"
  stdout: ''
  timestamp: 1660029304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var isNested\
    \ = false;\n        if (string == null || string.length == 0) \n            return\
    \ isNested;\n        var start = 0;\n        var end   = string.length-1;\n  \
    \      while (start < end){\n            // Look for left bracket\n          \
    \  val leftBracket = string.charAt(start);\n            // Look for right bracket\n\
    \            val rightBracket = string.charAt(end);\n            // Look for nesting\
    \ of left bracket\n            if (leftBracket == '[' && rightBracket != ']')\
    \ {\n                if (string.charAt(start+1) == '[' && string.charAt(end-1)\
    \ != ']') {\n                    isNested = true;\n                    start =\
    \ end;\n                }\n            }\n            else {\n               \
    \ if (leftBracket != ']' || rightBracket != ']') {\n                    isNested\
    \ = false;\n                }\n            }\n            start = end+1;\n   \
    \     }\n        return isNested;\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9pne3nst.scala:47)\n\tat Problem.main(tmp9pne3nst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // The\
    \ bracket stack stores the bracket locations.\n        val bracketStack = new\
    \ mutable.Stack[Int]\n        // Create a mutable set and initialize it with the\
    \ current opening bracket.\n        val openingBracketSet = new mutable.HashSet[String](\"\
    [\")\n        // Create a mutable set and initialize it with the current closing\
    \ bracket.\n        val closingBracketSet = new mutable.HashSet[String](\"]\"\
    )\n\n        // Iterate over the string\n        for (i<-0 until string.length){\n\
    \            // If the current character is not an opening bracket, then add it\
    \ to the set.\n            if(!openingBracketSet.contains(string(i)))\n      \
    \          openingBracketSet.add(string(i))\n            // If the current character\
    \ is not the closing bracket, then add it to the set.\n            if(!closingBracketSet.contains(string(i)))\n\
    \                closingBracketSet.add(string(i))\n            // If the current\
    \ character is the opening bracket, then add it to the stack.\n            if(string(i)==\"\
    [\")\n                bracketStack.push(i)\n            // If the current character\
    \ is the closing bracket, then remove the last element from the stack and \n \
    \           // see if there is still a valid bracket.\n            else if(string(i)==\"\
    ]\")\n                if(bracketStack.last>i)\n                    return true\n\
    \                else\n                    bracketStack.pop()\n        }\n\n \
    \       // Return false if there are no nested brackets in the string\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5_bcnxn.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbracketStack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5_bcnxn.scala:23:36\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBracketSet\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mString\e[0m](\e\
    [31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5_bcnxn.scala:25:36\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mclosingBracketSet\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mString\e[0m](\e\
    [31m\"]\"\e[0m)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpl5_bcnxn.scala:36:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mif\e[0m(string(i)==\e[31m\"[\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpl5_bcnxn.scala:40:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(string(i)==\e\
    [31m\"]\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n5 errors found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n       val brackets\
    \ = string.trim().replaceAll(\"\\\\[|\\\\]\", \"\").replaceAll(\"\\\\(|\\\\)\"\
    , \"\").replaceAll(\"\\\\{|\\\\}\", \"\").replaceAll(\"\\\\{|\\\\}\", \"\").replaceAll(\"\
    \\\\(|\\\\)\", \"\")\n       val bracketsLength = brackets.length\n       val\
    \ squareBracketsCount = brackets.count({ c =>\n          c == '[' || c == '{'\n\
    \       })\n       val squareBracketsCount = if (squareBracketsCount == 0) 0 else\
    \ squareBracketsCount\n       squareBracketsCount <= bracketsLength\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvtxnmi88.scala:25:11 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m       \e[33mval\e[0m \e[36msquareBracketsCount\e[0m\
    \ = \e[33mif\e[0m (squareBracketsCount == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e\
    [0m squareBracketsCount\n\e[31m\e[31m   |\e[0m       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msquareBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35msquareBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val start\
    \ = string.indexOf(\"[\")\n        val end = string.lastIndexOf(\"]\")\n     \
    \   val inner = string.substring(start+1, end)\n        val outer = string.substring(0,start)\n\
    \        if(outer.length != inner.length) false\n        else { \n           \
    \ val leftNesting = outer.contains(\"[\")\n            val rightNesting = outer.contains(\"\
    ]\")\n            if(leftNesting && rightNesting) true\n            else if(!leftNesting\
    \ && !rightNesting) false\n            else { \n                val outerList\
    \ = outer.toList\n                val innerList = inner.toList\n             \
    \   val subSequence = outerList.subList(0,innerList.length).toList\n         \
    \       val index = outerList.indexOf(outerList.last)\n                if(subSequence.contains(innerList)\
    \ && index+1 == outerList.length) true \n                else false\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7fmw1tmq.scala:33:44 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36msubSequence\e[0m\
    \ = outerList.subList(\e[31m0\e[0m,innerList.length).toList\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ subList is not a member of List[Char] - did you mean outerList.toList?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Create\
    \ a pattern that matches exactly one pair of brackets.\n        // >>> pattern(\"\
    [[[[[]\")\n        // res8: scala.util.matching.Regex = (\\[(?:\\[[^\\]\\[]*\\\
    ]\\]|[^\\[\\]]*\\])+)\n        var pattern = scala.util.matching.Regex(\"\"\"\
    (\\[(?:\\[[^\\]\\[]*\\]\\]|[^\\[\\]]*\\])+)\"\"\")\n        // Find the first\
    \ match in the input string and check that it is indeed the only match.\n    \
    \    // >>> pattern.findFirstIn(\"[[[[[]\")\n        // res12: Option[String]\
    \ = Some([[[[[[]\n        // >>> pattern.findFirstIn(\"[]]]]]]][[[[[]\")\n   \
    \     // res13: Option[String] = Some([]]]]]]][[[[[]\n        // >>> pattern.findFirstIn(\"\
    [][]\")\n        // res14: Option[String] = Some([][])\n        // >>> pattern.findFirstIn(\"\
    []\")\n        // res15: Option[String] = Some([])\n        // >>> pattern.findFirstIn(\"\
    [[][]]\")\n        // res16: Option[String] = Some([[[[[[]\n        // >>> pattern.findFirstIn(\"\
    [[]][[\")\n        // res17: Option[String] = Some([[[[[[]\n        // >>> pattern.findFirstIn(\"\
    [[]\")\n        // res18: Option[String] = Some([[])\n        // >>> pattern.findFirstIn(\"\
    [[[[[]\")\n        // res19: Option[String] = Some([[[[[]\n        var stringMatch\
    \ = pattern.findFirstIn(string)\n        // Check if it is the first match in\
    \ the string.\n        // >>> stringMatch == None\n        // res20: Boolean =\
    \ false\n        // If not the first match in the string, return false.\n    \
    \    // >>> stringMatch\n        // res21: String = \n        // If there is more\
    \ than one match in the string, return false.\n        // >>> stringMatch == None\n\
    \        // res22: Boolean = true\n        if(stringMatch == None) {\n       \
    \     return false\n        }\n        else if(stringMatch != null) {\n      \
    \      // Return the boolean if the string contains one bracket and another pair\
    \ of brackets in the same position.\n            // >>> stringMatch.hasNext\n\
    \            // res23: Boolean = true\n            // >>> stringMatch.hasNext\n\
    \            // res24: Boolean = true\n            // >>> stringMatch.hasNext\n\
    \            // res25: Boolean = false\n            // >>> stringMatch.hasNext\n\
    \            // res26: Boolean = false\n            // >>> stringMatch.hasNext\n\
    \            // res27: Boolean = false\n            if(stringMatch.hasNext) {\n\
    \                var i = 1\n                var firstMatch = stringMatch.next()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprizgew_a.scala:88:0 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprizgew_a.scala:66:27\
    \ ------------------------\e[0m\e[0m\n\e[31m66 |\e[0m            \e[33mif\e[0m(stringMatch.hasNext)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value hasNext is not a member of Option[String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprizgew_a.scala:68:45 ------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m                \e[33mvar\e[0m \e[36mfirstMatch\e[0m\
    \ = stringMatch.next()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next is not a member of Option[String]\
    \ - did you mean Option[String].get?\n\e[33m\e[33m-- Warning: /tmp/tmprizgew_a.scala:70:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m70 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var bracket_count\
    \ = 0\n        var bracket_count2 = 0\n        var bracket_count3 = 0\n      \
    \  var bracket_count4 = 0\n        var brackets = List(\"[\",\"[\",\"]\",\"[\"\
    ,\"]\",\"[\",\"]\",\"[\",\"]\",\"[\",\"]\",\"]\",\"]\",\"]\",\"]\",\"]\",\"]\"\
    ,\"]\")\n        for(i<-0 to string.length-1){\n            if(brackets.contains(string.charAt(i))){\n\
    \                if(bracket_count <= 1 && string.charAt(i) == brackets.last){\n\
    \                    bracket_count = 1\n                }\n                if(bracket_count2\
    \ <= 1 && string.charAt(i) == brackets.last){\n                    bracket_count2\
    \ = 1\n                }\n                if(bracket_count3 <= 1 && string.charAt(i)\
    \ == brackets.last){\n                    bracket_count3 = 1\n               \
    \ }\n                if(bracket_count4 <= 1 && string.charAt(i) == brackets.last){\n\
    \                    bracket_count4 = 1\n                }\n            }\n  \
    \          else{\n                bracket_count = 0\n                bracket_count2\
    \ = 0\n                bracket_count3 = 0\n                bracket_count4 = 0\n\
    \            }\n        }\n        if(string.substring(bracket_count + 1 , string.length)\
    \ == \"[]\"){\n            return true\n        }\n        else{\n           \
    \ return false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqcm5bxx_.scala:27:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m(bracket_count <= \e[31m1\e\
    [0m && string.charAt(i) == brackets.last){\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpqcm5bxx_.scala:30:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mif\e[0m(bracket_count2 <= \e[31m1\e\
    [0m && string.charAt(i) == brackets.last){\n\e[31m\e[31m   |\e[0m            \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpqcm5bxx_.scala:33:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e[0m(bracket_count3 <= \e[31m1\e\
    [0m && string.charAt(i) == brackets.last){\n\e[31m\e[31m   |\e[0m            \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpqcm5bxx_.scala:36:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e[0m(bracket_count4 <= \e[31m1\e\
    [0m && string.charAt(i) == brackets.last){\n\e[31m\e[31m   |\e[0m            \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660029316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracketMap\
    \ : Map[String, String] = Map(\"[\" -> \"]\", \"{\" -> \"}\", \"(\" -> \")\",\
    \ \"[\" -> \"]\", \"{\" -> \"}\", \"(\" -> \")\", \"[\" -> \"]\")\n        var\
    \ nesting : Int = -1\n        var i : Int = string.length\n        while (i >\
    \ 0) {\n            if (bracketMap(string.charAt(i - 1)) != bracketMap(string.charAt(i)))\
    \ {\n                nesting = nesting + 1\n            } else {\n           \
    \     nesting = nesting - 1\n            }\n            i = i - 1\n        }\n\
    \        if (nesting == 0) {\n            return true\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpynk_1gxv.scala:24:40\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (bracketMap(string.charAt(i\
    \ - \e[31m1\e[0m)) != bracketMap(string.charAt(i))) {\n\e[31m\e[31m   |\e[0m \
    \                          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Found:    Char\n\e[31m   |\e[0m                          \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpynk_1gxv.scala:24:76\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (bracketMap(string.charAt(i\
    \ - \e[31m1\e[0m)) != bracketMap(string.charAt(i))) {\n\e[31m\e[31m   |\e[0m \
    \                                                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var openBrackets\
    \ = 0\n        var closeBrackets = 0\n\n        for (x <- string.toList) {\n \
    \           x match {\n            case '[' => {\n                openBrackets\
    \ += 1\n            }\n            case ']' => {\n                closeBrackets\
    \ += 1\n            }\n            case _ =>\n            }\n        }\n     \
    \   return openBrackets * closeBrackets == string.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk0sm_881.scala:39)\n\tat Problem.main(tmpk0sm_881.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var count\
    \ = 0\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == '[')\n                count += 1\n            if (string.charAt(i) == ']')\n\
    \                count -= 1\n            if (count == 0) \n                return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmclpz9o6.scala:32)\n\tat Problem.main(tmpmclpz9o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def findBrackets(str:\
    \ String, start: Int, end: Int) : Boolean = { \n            if (start < end)\n\
    \                if (str != null && str.length > 0) {\n                    val\
    \ substr = str.substring(start, end)\n                    if (substr != null &&\
    \ substr.length > 0) {\n                        findBrackets(substr, start + 1,\
    \ end - 1) || findBrackets(substr, start + 1, end) || findBrackets(substr, start\
    \ + 1, end - 1)\n                    }\n                }\n            else true\n\
    \        }\n        val start = 0\n        val end = string.length\n        findBrackets(string,\
    \ start, end)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprp2x4b3v.scala:22:16\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m\
    \ (str != \e[31mnull\e[0m && str.length > \e[31m0\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m\
    \   |\e[0m                Required: Boolean\n\e[31m   |\e[0m                Maybe\
    \ you are missing an else part for the conditional?\n\e[31m23 |\e[0m         \
    \           \e[33mval\e[0m \e[36msubstr\e[0m = str.substring(start, end)\n\e[31m24\
    \ |\e[0m                    \e[33mif\e[0m (substr != \e[31mnull\e[0m && substr.length\
    \ > \e[31m0\e[0m) {\n\e[31m25 |\e[0m                        findBrackets(substr,\
    \ start + \e[31m1\e[0m, end - \e[31m1\e[0m) || findBrackets(substr, start + \e\
    [31m1\e[0m, end) || findBrackets(substr, start + \e[31m1\e[0m, end - \e[31m1\e\
    [0m)\n\e[31m26 |\e[0m                    }\n\e[31m27 |\e[0m                }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var brackets\
    \ = 1\n        var level = 1\n\n        for(x <- string.toList) {\n          \
    \  if(x.equals(\"[\") && brackets > 0) {\n                brackets++\n       \
    \         level++\n            } else if(x.equals(\"]\") && brackets > 0) {\n\
    \                brackets--\n            } else if(x.equals(\"[\") && brackets\
    \ == 0) {\n                level--\n            } else if(x.equals(\"]\") && brackets\
    \ == 0) {\n                level++\n            } else if(x.equals(\"]\") && level\
    \ == 0) {\n                level--\n            }\n        }\n        level ==\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgfewdrby.scala:26:23 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                level++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpgfewdrby.scala:28:26 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                brackets--\n\e[31m\e[31m   |\e[0m                    \
    \      ^\e[0m\n\e[31m   |\e[0m                          expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgfewdrby.scala:30:23\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                level--\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpgfewdrby.scala:32:23 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                level++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpgfewdrby.scala:34:23 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m                level--\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgfewdrby.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                brackets++\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        value ++ is not a member of Int\n6 errors found\n"
  stdout: ''
  timestamp: 1660029316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string\
    \ match {\n          case \"\" => false\n          case x => x.matches(\"\\\\\
    [[^]]*\\\\]\\\\[[^]]*\\\\]\\\\[[^]]*\\\\]\\\\[[^]]*\\\\]\\\\[[^]]*\\\\]\\\\[[^]]*\\\
    \\]\") && isNested(x)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1y3q6yb.scala:26)\n\tat Problem.main(tmpg1y3q6yb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        \n  \
    \      //If there is no string then return false\n        if(string.length ==\
    \ 0){\n            return false\n        }\n        //If there are just brackets\
    \ then return true\n        if(string.indexOf(\"[\") == -1){\n            return\
    \ true\n        }\n        //The brackets should be next to each other\n     \
    \   if(string.indexOf(\"[\", 0) == -1){\n            return false\n        }\n\
    \        val startIndex = string.indexOf(\"[\")\n        //Find the first bracket\n\
    \        var firstBracket = startIndex\n        while(string.indexOf(\"]\", firstBracket)\
    \ < 0) {\n            firstBracket += 1\n        }\n        //We know the first\
    \ bracket is correct\n        val lastBracket = string.indexOf(\"]\")\n      \
    \  val stringToSplit = string.substring(firstBracket, lastBracket + 1)\n     \
    \   //If there is a string between the first and last bracket then the string\
    \ is not nested\n        if(stringToSplit.length() > 0) {\n            return\
    \ false\n        }\n        //There should be a bracket somewhere in the middle\n\
    \        val indexFound = string.indexOf(\"[\", startIndex + 1)\n        val lastFound\
    \ = string.indexOf(\"]\", indexFound + 1)\n        //If there is only one bracket\
    \ then it is nested\n        if(indexFound == -1 || lastFound == -1){\n      \
    \      return true\n        }\n        //Get the first bracket and last bracket\n\
    \        val firstBracketIndex = string.indexOf(\"[\", indexFound + 1)\n     \
    \   val lastBracketIndex = string.indexOf(\"]\", lastFound + 1)\n        //We\
    \ now know the first and last bracket\n        if(firstBracketIndex == -1){\n\
    \            return false\n        }\n        if(lastBracketIndex == -1){\n  \
    \          return false\n        }\n        //Now we know the first bracket and\
    \ last bracket\n        val firstBracket = string.indexOf(\"[\", firstBracketIndex)\n\
    \        val lastBracket = string.indexOf(\"]\", lastBracketIndex)\n        //We\
    \ now know the first and last bracket\n        if(firstBracket > lastBracket){\n\
    \            return false\n        }\n        val nestedBrackets = string.substring(firstBracketIndex,\
    \ lastBracketIndex).split(\"\"\"\\[\"\"\").toList\n        //We know the first\
    \ bracket is always correct\n        if(nestedBrackets.head.equals(\"[]\") ||\
    \ nestedBrackets.head.equals(\"()\") || nestedBrackets.head.equals(\"[()\")){\n\
    \            return true\n        }\n        //We know the last bracket is always\
    \ correct\n        if(nestedBrackets.last.equals(\"]\") || nestedBrackets.last.equals(\"\
    )\") || nestedBrackets.last.equals(\"])\")){\n            return true\n      \
    \  }\n        //We \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6q1to1jg.scala:64:12 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mfirstBracket\e[0m = string.indexOf(\e\
    [31m\"[\"\e[0m, firstBracketIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstBracket is already defined as \e[33mvariable\e[0m \e\
    [35mfirstBracket\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp6q1to1jg.scala:65:12 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mlastBracket\e[0m = string.indexOf(\e\
    [31m\"]\"\e[0m, lastBracketIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastBracket is already defined as \e[33mvalue\e[0m \e[35mlastBracket\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp6q1to1jg.scala:76:8 ---------------------\e[0m\e[0m\n\
    \e[31m76 |\e[0m        \e[33mif\e[0m(nestedBrackets.last.equals(\e[31m\"]\"\e\
    [0m) || nestedBrackets.last.equals(\e[31m\")\"\e[0m) || nestedBrackets.last.equals(\e\
    [31m\"])\"\e[0m)){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\
    \        Maybe you are missing an else part for the conditional?\n\e[31m77 |\e\
    [0m            \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m78 |\e[0m        }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val list\
    \ = string.split(\"\\\\[\")\n        for (i<-0 to list.length-1) if(list(i).length>1)\
    \ {\n            for (j<-i+1 to list.length-1) {\n                if(list(i).length-1\
    \ == list(i).lastIndexOf(list(j))) {\n                    //System.out.println(list(i)+\"\
    \   \"+list(j))\n                    list(i) match{\n                    case\
    \ \"[]\" => true\n                    case \"\" => false\n                   \
    \ case x=> false\n                    }\n                }\n            }\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4h96_iv1.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m to list.length-\e[31m1\e[0m) \e[33mif\e[0m(list(i).length>\e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:   \
    \ Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m22 |\e[0m            \e\
    [33mfor\e[0m (j<-i+\e[31m1\e[0m to list.length-\e[31m1\e[0m) {\n\e[31m23 |\e[0m\
    \                \e[33mif\e[0m(list(i).length-\e[31m1\e[0m == list(i).lastIndexOf(list(j)))\
    \ {\n\e[31m24 |\e[0m                    \e[34m//System.out.println(list(i)+\"\
    \   \"+list(j))\e[0m\n\e[31m25 |\e[0m                    list(i) \e[33mmatch\e\
    [0m{\n\e[31m26 |\e[0m                    \e[33mcase\e[0m \e[31m\"[]\"\e[0m =>\
    \ \e[31mtrue\e[0m\n\e[31m27 |\e[0m                    \e[33mcase\e[0m \e[31m\"\
    \"\e[0m => \e[31mfalse\e[0m\n\e[31m28 |\e[0m                    \e[33mcase\e[0m\
    \ x=> \e[31mfalse\e[0m\n\e[31m29 |\e[0m                    }\n\e[31m30 |\e[0m\
    \                }\n\e[31m31 |\e[0m            }\n\e[31m32 |\e[0m        }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var index\
    \ = 0\n        val arr = string.charArray\n\n        while (index < arr.length)\
    \ {\n            val curChar = arr(index)\n            index += 1\n\n        \
    \    if (curChar == '[') {\n                val nextChar = arr(index)\n      \
    \          index += 1\n\n                if (nextChar == '[') {\n            \
    \        val nextNextChar = arr(index)\n                    index += 1\n     \
    \               if (nextNextChar == '[') {\n                        val nextNextNextChar\
    \ = arr(index)\n                        index += 1\n                        if\
    \ (nextNextNextChar == '[') {\n                            val nextNextNextNextChar\
    \ = arr(index)\n                            index += 1\n                     \
    \       if (nextNextNextNextChar == '[') {\n                                val\
    \ nextNextNextNextNextChar = arr(index)\n                                index\
    \ += 1\n                                if (nextNextNextNextNextChar == '[') {\n\
    \                                    val nextNextNextNextNextNextChar = arr(index)\n\
    \                                    index += 1\n                            \
    \        if (nextNextNextNextNextNextChar == '[') {\n                        \
    \                val nextNextNextNextNextNextNextChar = arr(index)\n         \
    \                               index += 1\n                                 \
    \       if (nextNextNextNextNextNextNextChar == '[') {\n                     \
    \                       val nextNextNextNextNextNextNextNextChar = arr(index)\n\
    \                                            index += 1\n                    \
    \                        if (nextNextNextNextNextNextNextNextChar == '[') {\n\
    \                                                val nextNextNextNextNextNextNextNextNextChar\
    \ = arr(index)\n                                                index += 1\n \
    \                                               if (nextNextNextNextNextNextNextNextNextChar\
    \ == '[') {\n                                                    val nextNextNextNextNextNextNextNextNextNextChar\
    \ = arr(index)\n                                                    index += 1\n\
    \                                                    if (nextNextNextNextNextNextNextNextNextNextChar\
    \ == '[') {\n                                                        val nextNextNextNextNextNextNextNextNextNextChar\
    \ = arr(index)\n                                                        index\
    \ += 1\n                                                        if (nextNextNextNextNextNextNextNextNextNextChar\
    \ == '[') {\n                                                            val nextNextNextNextNextNextNextNextNextNextNextChar\
    \ = arr(index)\n                                                            index\
    \ += 1\n                                                            if (nextNextNextNextNextNextNextNextNextNextChar\
    \ == '[') {\n                                                                val\
    \ nextNextNextNextNextNextNextNextNextNextNextChar = arr(index)\n            \
    \                                                    index += 1\n            \
    \                                                    if (nextNextNextNextNextNextNextNextNextNextNextChar\
    \ == '[') {\n                                                                \
    \    val nextNextNextNextNextNextNextNextNextNextNextChar = arr(index)\n     \
    \                                                               index += 1\n \
    \                                                               }\n          \
    \                                                  }\n                       \
    \                                 }\n                                        \
    \            }\n                                                }\n          \
    \                                  }\n                                       \
    \ }\n                                    }\n                                }\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg4ucckgr.scala:102:0 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg4ucckgr.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36marr\e[0m = string.charArray\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue charArray is not a member of String - did you mean string.toCharArray?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg4ucckgr.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m 23 |\e[0m        \e[33mwhile\e[0m (index < arr.length) {\n\e\
    [31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e[0m        Found:    Unit\n\e\
    [31m    |\e[0m        Required: Boolean\n\e[31m 24 |\e[0m            \e[33mval\e\
    [0m \e[36mcurChar\e[0m = arr(index)\n\e[31m 25 |\e[0m            index += \e[31m1\e\
    [0m\n\e[31m 26 |\e[0m            \e[33mif\e[0m (curChar == \e[31m'['\e[0m) {\n\
    \e[31m 27 |\e[0m                \e[33mval\e[0m \e[36mnextChar\e[0m = arr(index)\n\
    \e[31m 28 |\e[0m                index += \e[31m1\e[0m\n\e[31m 29 |\e[0m      \
    \          \e[33mif\e[0m (nextChar == \e[31m'['\e[0m) {\n\e[31m 30 |\e[0m    \
    \                \e[33mval\e[0m \e[36mnextNextChar\e[0m = arr(index)\n\e[31m 31\
    \ |\e[0m                    index += \e[31m1\e[0m\n\e[31m 32 |\e[0m          \
    \          \e[33mif\e[0m (nextNextChar == \e[31m'['\e[0m) {\n\e[31m 33 |\e[0m\
    \                        \e[33mval\e[0m \e[36mnextNextNextChar\e[0m = arr(index)\n\
    \e[31m 34 |\e[0m                        index += \e[31m1\e[0m\n\e[31m 35 |\e[0m\
    \                        \e[33mif\e[0m (nextNextNextChar == \e[31m'['\e[0m) {\n\
    \e[31m 36 |\e[0m                            \e[33mval\e[0m \e[36mnextNextNextNextChar\e\
    [0m = arr(index)\n\e[31m 37 |\e[0m                            index += \e[31m1\e\
    [0m\n\e[31m 38 |\e[0m                            \e[33mif\e[0m (nextNextNextNextChar\
    \ == \e[31m'['\e[0m) {\n\e[31m 39 |\e[0m                                \e[33mval\e\
    [0m \e[36mnextNextNextNextNextChar\e[0m = arr(index)\n\e[31m 40 |\e[0m       \
    \                         index += \e[31m1\e[0m\n\e[31m 41 |\e[0m            \
    \       "
  stdout: ''
  timestamp: 1660029320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val nestingRegex\
    \ = \"\"\"\\[(?:(?<=\\]\\])|(?<=\\[\\])|(?<=\\[))+\\]\"\"\".r\n        val bracketRegex\
    \ = \"\"\"\\[(?:(?<=\\]\\])|(?<=\\[\\])|(?<=\\[))+\\]\"\"\".r\n        val stack\
    \ = mutable.Stack[String]()\n\n        for (c <- string.chars) {\n           \
    \ // Push bracket and any characters inside into stack\n            if (nestingRegex.findFirstIn(c.toString).isDefined)\
    \ stack.push(c.toString)\n            // Pop bracket and any characters outside\
    \ of stack\n            else if (bracketRegex.findFirstIn(c.toString).isDefined)\
    \ \n                if (stack.isEmpty) false else stack.pop\n        }\n     \
    \   if (stack.isEmpty) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqpkz_k5.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphqpkz_k5.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (c <- string.chars) {\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of java.util.stream.IntStream - did you mean IntStream.forEach?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = (string+\"\").split(\"\\\\[\");\n        val count = count(brackets, (x:String)\
    \ => x.length>1);\n        count == count(brackets, (x:String) => x.length==1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmcgrd51y.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = count(brackets,\
    \ (\e[36mx\e[0m:\e[35mString\e[0m) => x.length>\e[31m1\e[0m);\n\e[31m\e[31m  \
    \ |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ != 1) {\n            return false\n        }\n        val curChar = string(0)\n\
    \        val nextChar = string(1)\n        val stack = Stack[String]()\n     \
    \   // add one char to the stack\n        stack += \"[\" + nextChar\n        //\
    \ add one char to the stack\n        stack += \"]\"\n        // if next char is\
    \ an openning bracket\n        if (nextChar == \"[\") {\n            stack +=\
    \ \"]\"\n            stack += \"[\" + nextChar\n        } else if (nextChar ==\
    \ \"]\") {\n            // if there is only one stack, the char is nested if and\
    \ only if the \n            // last bracket is closing.\n            if (stack.length\
    \ == 1) {\n                return true\n            } else {\n               \
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcu_s8p58.scala:31:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m (nextChar == \e[31m\"[\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcu_s8p58.scala:33:12 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            stack += \e[31m\"[\"\e[0m + nextChar\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Found:    (stack : scala.collection.mutable.Stack[String])\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpcu_s8p58.scala:34:19 -----------------------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (nextChar == \e[31m\"\
    ]\"\e[0m) {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660029321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if(string.split(\"\
    \\\\[\").length != string.split(\"\\\\]\").length)\n            return false\n\
    \        val input = string.split(\"\\\\[\").filterNot(_ == \"\").map(_.replaceAll(\"\
    \\\\]\", \"\"))\n        val brackets = input.filter(_ == \"[\" || _ == \"{\"\
    \ || _ == \"(\")\n        val depth = brackets.map(_.size).toSeq.max\n       \
    \ depth < 1\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmprz3abv5n.scala:23:36 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = input.filter(_\
    \ == \e[31m\"[\"\e[0m || _ == \e[31m\"{\"\e[0m || _ == \e[31m\"(\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Initialize\
    \ a boolean array in which every position in the array is false\n        var boolArray\
    \ : Boolean = Array.fill(string.size)(false)\n        var index = 0\n        while\
    \ (index < string.size) {\n            // if the current character is a square\
    \ bracket, change its boolean value to true\n            if (string[index] ==\
    \ '[') {\n                boolArray[index] = true\n            } else {\n    \
    \            // otherwise, change its boolean value to false\n               \
    \ boolArray[index] = false\n            }\n            // Increment the index\n\
    \            index = index + 1\n        }\n        // Initialize a mutable array\
    \ in which to store the valid brackets\n        var bracketArray = mutable.ArrayBuffer.empty[String]\n\
    \        var index = 0\n        while (index < boolArray.size) {\n           \
    \ if (boolArray[index] == true) {\n                // If the current index is\
    \ not the last\n                // and the current index is not the last - 1,\
    \ \n                // append the square bracket to the mutable array\n      \
    \          if (index != boolArray.size - 1) {\n                    if (boolArray[index\
    \ + 1] == true) {\n                        bracketArray.append(string[index])\n\
    \                    }\n                }\n                // If the current index\
    \ is the last\n                // and is not the last - 1, append the square bracket\
    \ to the mutable array\n                if (index == boolArray.size - 1 && boolArray[index\
    \ - 1] == false) {\n                    bracketArray.append(string[index])\n \
    \               }\n            }\n            // Increment the index\n       \
    \     index = index + 1\n        }\n        // If the mutable array contains at\
    \ least one bracket\n        // return true\n        if (bracketArray.nonEmpty)\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7fpo8kyo.scala:26:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                boolArray[\e[35mindex\e[0m] = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- Error: /tmp/tmp7fpo8kyo.scala:29:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                boolArray[\e[35mindex\e[0m] = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7fpo8kyo.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36mindex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mindex is already\
    \ defined as \e[33mvariable\e[0m \e[35mindex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7fpo8kyo.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mboolArray\e\
    [0m : \e[35mBoolean\e[0m = Array.fill(string.size)(\e[31mfalse\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m\e[1m\e[31m[\e[0mBoolean\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                \
    \                  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7fpo8kyo.scala:25:23 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (string[\e[35mindex\e[0m] == \e\
    [31m'['\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: type index\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7fpo8kyo.scala:26:26 ------------------"
  stdout: ''
  timestamp: 1660029328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        \n  \
    \      // Loop through each character of the string\n        for( c <- string)\
    \ {\n\n            // Check for squared bracket '['\n            if(c == '[')\
    \ {\n                \n                // Check if there is an ']' \n        \
    \        if(!string.hasNext) {\n                    return false\n           \
    \     }\n\n                // Get the next character\n                val nextChar\
    \ = string.next()\n                \n                // Check if the next character\
    \ is a ']'\n                if(nextChar == ']') {\n                    return\
    \ true\n                }\n            }\n        }\n        \n        // If the\
    \ loop terminates here, the string does not contain any valid brackets\n     \
    \   return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5x0kpspf.scala:28:27 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m(!string.hasNext) {\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  value hasNext is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5x0kpspf.scala:33:38 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36mnextChar\e[0m = string.next()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m      value next is not a member of String - did you mean string.indent?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracket_stack\
    \ = mutable.Stack[String]()\n        bracket_stack push string\n        val bracket_count\
    \ = mutable.Stack[Int]()\n        while (bracket_stack.size > 0 && bracket_count.size\
    \ > 0) {\n            val stack = bracket_stack.pop()\n            val count =\
    \ bracket_count.pop()\n            for (i <- 0 until count) {\n              \
    \  val bracket_index = stack.lastIndexOf(\"[\", 0, i)\n                if (bracket_index\
    \ != -1) {\n                    bracket_index += 1\n                    bracket_count\
    \ push (bracket_index - i)\n                }\n            }\n        }\n    \
    \    bracket_count.size == 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn4meaxe.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbracket_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn4meaxe.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracket_count\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here...\n        val counter = new mutable.MutableList[Int]()\n       \
    \ val stringArray = string.chars.toList\n        val stack = mutable.Stack[String]()\n\
    \        var i = 0\n        while(i < stringArray.length) {\n            val j\
    \ = i\n            while(j < stringArray.length && stringArray(j) != stringArray(i)\
    \ && stringArray(j) == stringArray(i+1)) {\n                j+=1\n           \
    \ }\n            if(j-i == 1 && stringArray(j-1) != stringArray(i+1) && stringArray(j-1)\
    \ == stringArray(i)) {\n                stack += stringArray(j)\n            }\n\
    \            i += 1\n        }\n        if(stack.size != 0) return true\n    \
    \    else return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtr2dqv0.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtr2dqv0.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mstringArray\e[0m = string.chars.toList\n\e[31m\e[31m   |\e[0m            \
    \              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value toList\
    \ is not a member of java.util.stream.IntStream\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpgtr2dqv0.scala:23:20 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgtr2dqv0.scala:28:17 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                j+=\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \             ^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean j.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [\")\n        && string.contains(\"]\")\n        && string.contains(\"[[\")\n\
    \        && string.contains(\"]]\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm23zv58c.scala:27)\n\tat Problem.main(tmpm23zv58c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.matches(\"\
    \\\\[\\\\[.*?\\\\]\\\\]\") && string.matches(\"\\\\[.*?\\\\]\\\\]\\\\[.*?\\\\\
    ]\\\\[.*?\\\\]\")\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9oq2u2cm.scala:23)\n\tat Problem.main(tmp9oq2u2cm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.indexOf(\"\
    [\") == -1\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2bhe58ls.scala:23)\n\tat Problem.main(tmp2bhe58ls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string\
    \ == \"\")\n            true\n        else if (string.length <= 2)\n         \
    \   true\n        else if (string.substring(0, 1).equals(\"[\")\n            \
    \    && string.substring(1, string.length).equals(\"]\"))\n            true\n\
    \        else\n            false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1s5alc26.scala:31)\n\tat Problem.main(tmp1s5alc26.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val pattern\
    \ = \"\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx4mvff99.scala:20:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \"\\\\[\\\
    \\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[(\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\\
    [\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\\[\\\
    \\[\\\\[\\\\[\\\\[\\\\[\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e\
    [31m   |\e[0m                      unclosed string literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpx4mvff99.scala:22:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx4mvff99.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx4mvff99.scala:22:4\
    \ -------------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m  \
    \ |\e[0m    ^^^\e[0m\n\e[31m   |\e[0mNot found: \\[\\[(\\[\\[\\[\\[\\[\\[\\[\\\
    [(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\\
    [\\[\\[\\[\\[\\[\\[\\[\\[\\[(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\["
  stdout: ''
  timestamp: 1660029332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if(string.isEmpty)\
    \ false\n        else if(string.contains(\"[\") && string.contains(\"]\")){\n\
    \            val list = new mutable.ArrayList[String]()\n            var openBrackets\
    \ = 1\n            var closedBrackets = 1\n            for(i <- 0 until string.length){\n\
    \                if(string.charAt(i) == \"[\"){\n                    list.add(\"\
    [\")\n                    openBrackets += 1\n                }else if(string.charAt(i)\
    \ == \"]\"){\n                    list.add(\"]\")\n                    closedBrackets\
    \ += 1\n                }\n            }\n            if(openBrackets == closedBrackets)\
    \ true\n            else false\n        }\n        else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrkyy0og.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpmrkyy0og.scala:26:19\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \         \e[33mif\e[0m(string.charAt(i) == \e[31m\"[\"\e[0m){\n\e[31m\e[31m \
    \  |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpmrkyy0og.scala:29:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                }\e[33melse\e[0m \e[33mif\e[0m(string.charAt(i)\
    \ == \e[31m\"]\"\e[0m){\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660029333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ == 1 || string.isEmpty) return false\n        var chars = string.charAt(0)\n\
    \        var bracket_count = 0\n        \n        for {\n            c <- chars\n\
    \            count <- if c == '[' || c == '{' else { bracket_count += 1 }\n  \
    \      } yield if (count == 0 || bracket_count > 1) true else false\n        \n\
    \        chars = string\n        val index = chars.indexOf(']')\n        if (index\
    \ == -1) return false\n        for {\n            c <- chars\n            count\
    \ <- if c == '[' || c == '{' else { bracket_count += 1 }\n        } yield if (count\
    \ == 0 || bracket_count > 0) false else true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcy77vwrg.scala:26:45 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            count <- \e[33mif\e[0m c == \e[31m'['\e[0m\
    \ || c == \e[31m'{'\e[0m \e[33melse\e[0m { bracket_count += \e[31m1\e[0m }\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^\e[0m\n\e\
    [31m   |\e[0m                                       'then' expected, but 'else'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcy77vwrg.scala:34:45 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            count <- \e[33mif\e[0m c == \e[31m'['\e[0m\
    \ || c == \e[31m'{'\e[0m \e[33melse\e[0m { bracket_count += \e[31m1\e[0m }\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^\e[0m\n\e\
    [31m   |\e[0m                                       'then' expected, but 'else'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcy77vwrg.scala:25:17 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            c <- chars\n\e[31m\e[31m   |\e[0m       \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                 value flatMap is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcy77vwrg.scala:29:16\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        chars = string\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (string : String)\n\e[31m   |\e[0m                Required: Char\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcy77vwrg.scala:30:26 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = chars.indexOf(\e\
    [31m']'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    value indexOf is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpcy77vwrg.scala:33:17 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            c <- chars\n\e[31m\e[31m   |\e[0m       \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                 value flatMap is not a\
    \ member of Char\n6 errors found\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Use\
    \ a stack data structure to store pairs of opening and closing brackets\n    \
    \    val stack = mutable.Stack[String]()\n        // Use a counter to keep track\
    \ of bracket nesting depth\n        var count : Int = 0\n        // Add opening\
    \ brackets to the stack\n        for(str <- string) {\n            if(!str.isEmpty)\
    \ {\n                if(str == \"[\") {\n                    count -= 1\n    \
    \                if(count == 0) {\n                        stack += str\n    \
    \                }\n                }\n                else if(str == \"]\") {\n\
    \                    count += 1\n                    if(count == 0) {\n      \
    \                  stack += str\n                    }\n                }\n  \
    \          }\n        }\n        // Check whether there exist an ending bracket\
    \ in the stack\n        if(stack.nonEmpty) {\n            // If there is a closing\
    \ bracket, add its value to the output\n            val output = stack.last\n\
    \            if(output.equals(\"[\")) {\n                stack.last\n        \
    \    }\n            else if(output.equals(\"]\")) {\n                stack.last\n\
    \            }\n            else if(output.equals(\"]\")) {\n                false\n\
    \            }\n            else {\n                true\n            }\n    \
    \    }\n        else {\n            true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8e85oyde.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8e85oyde.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(!str.isEmpty) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ isEmpty is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmp8e85oyde.scala:27:19\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \         \e[33mif\e[0m(str == \e[31m\"[\"\e[0m) {\n\e[31m\e[31m   |\e[0m    \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8e85oyde.scala:33:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m       \
    \         \e[33melse\e[0m \e[33mif\e[0m(str == \e[31m\"]\"\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.charAt(0)\
    \ == '[' &&\n        string.charAt(string.length - 1) == ']'\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpblufupow.scala:25)\n\tat Problem.main(tmpblufupow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val nestedBrackets\
    \ = mutable.Set[String]()\n        def hasNesting(bracket: String, nestedBrackets:\
    \ mutable.Set[String]) : Boolean = {\n            if(nestedBrackets.contains(bracket))\
    \ {\n                nestedBrackets += bracket\n                return true\n\
    \            }\n            if(bracket.contains(\"[\")) { \n                val\
    \ bracket = bracket.replace(\"[\", \"\")\n                val bracketBracket =\
    \ hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n                val bracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\
    \ = hasNesting(bracket, nestedBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiea58zzu.scala:61:0 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiea58zzu.scala:20:29\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mnestedBrackets\e[0m = mutable.Set[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpiea58zzu.scala:21:56 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mdef\e[0m \e[36mhasNesting\e[0m(\e[36mbracket\e[0m: \e[35mString\e\
    [0m, \e[36mnestedBrackets\e[0m: mutable.Set[\e[35mString\e[0m]) : \e[35mBoolean\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiea58zzu.scala:38:20 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m                \e[33mval\e[0m \e[36mbracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\e\
    [0m = hasNesting(bracket, nestedBrackets)\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  bracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpiea58zzu.scala:40:20 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                \e[33mval\e[0m \e[36mbracketBracke"
  stdout: ''
  timestamp: 1660029337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var bracketStack\
    \ = mutable.Stack[Char]()\n        var openingBrackets : Int = 0\n        var\
    \ closingBrackets : Int = 0\n        var openingBracketsCounter = 0\n        var\
    \ closingBracketsCounter = 0\n        for(i <- string.toCharArray()){\n      \
    \      if(openingBrackets > 0 && closingBrackets == openingBrackets && openingBracketsCounter\
    \ == closingBracketsCounter) {\n                return true\n            }\n \
    \           if(openingBrackets > 0 && closingBrackets == openingBrackets && openingBracketsCounter\
    \ + 1 == closingBracketsCounter){\n                openingBracketsCounter += 1\n\
    \            }else if(closingBrackets > 0 && openingBrackets == closingBrackets\
    \ && closingBracketsCounter == openingBracketsCounter){\n                closingBracketsCounter\
    \ += 1\n            }else if(i == '['){\n                openingBrackets += 1\n\
    \                openingBracketsCounter += 1\n            }else if(closingBrackets\
    \ > 0 && i == '['){\n                closingBrackets += 1\n                closingBracketsCounter\
    \ += 1\n            }else if(i == ']'){\n                openingBracketsCounter\
    \ -= 1\n            }else if(i == ']' && openingBracketsCounter < 0){\n      \
    \          openingBracketsCounter += 1\n            }\n            bracketStack.push(i)\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn2g3vlii.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mbracketStack\e[0m = mutable.Stack[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        \n  \
    \      if (string.length == 0) {\n            return true\n        }\n\n     \
    \   def isNested(stringToCheck : String, previousSubsequence : Seq[Char], currentSubsequence\
    \ : Seq[Char]) : Boolean = {\n            if (stringToCheck.length == 0) {\n \
    \               return true\n            }\n\n            if (stringToCheck.head\
    \ == '[' && previousSubsequence.isEmpty && currentSubsequence.length == 1) {\n\
    \                val bracketToMatch = currentSubsequence.head\n              \
    \  if (stringToCheck.tail == bracketToMatch) {\n                    isNested(stringToCheck.tail,\
    \ previousSubsequence, currentSubsequence ++ Seq(bracketToMatch))\n          \
    \      } else {\n                    false\n                }\n            } else\
    \ if ((stringToCheck.head == '[' && previousSubsequence.nonEmpty && currentSubsequence.length\
    \ == 1) && (stringToCheck.tail == '[' || stringToCheck.tail == '(')) {\n     \
    \           val bracketToMatch = currentSubsequence.head\n                if (stringToCheck.tail\
    \ == bracketToMatch) {\n                    isNested(stringToCheck.tail, previousSubsequence\
    \ ++ Seq(bracketToMatch), currentSubsequence ++ Seq(bracketToMatch))\n       \
    \         } else {\n                    false\n                }\n           \
    \ } else if (stringToCheck.head == '[' && currentSubsequence.length == 1) {\n\
    \                val bracketToMatch = currentSubsequence.head\n              \
    \  if (stringToCheck.tail == bracketToMatch) {\n                    isNested(stringToCheck.tail,\
    \ previousSubsequence, currentSubsequence ++ Seq(bracketToMatch))\n          \
    \      } else {\n                    false\n                }\n            } else\
    \ if (stringToCheck.head == '(' && previousSubsequence.length == 1) {\n      \
    \          val bracketToMatch = previousSubsequence.head\n                if (stringToCheck.tail\
    \ == bracketToMatch) {\n                    isNested(stringToCheck.tail, previousSubsequence\
    \ ++ Seq(bracketToMatch), currentSubsequence)\n                } else {\n    \
    \                false\n                }\n            } else if (stringToCheck.head\
    \ == '(' && currentSubsequence.length == 1) {\n                val bracketToMatch\
    \ = currentSubsequence.head\n                if (stringToCheck.tail == bracketToMatch)\
    \ {\n                    isNested(stringToCheck.tail, previousSubsequence, currentSubsequence\
    \ ++ Seq(bracketToMatch))\n                } else {\n                    false\n\
    \                }\n            } else {\n                return false\n     \
    \       }\n        }\n        \n        val resultSeq = string.inits.toSeq\n \
    \       resultSeq.foreach(substring => {\n            val subseq: Seq[Char] =\
    \ substring.inits\n            isNested(string.tail, Seq(), subseq)\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpecebyte7.scala:32:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mif\e[0m (stringToCheck.tail ==\
    \ bracketToMatch) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpecebyte7.scala:37:121 ----------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m ((stringToCheck.head\
    \ == \e[31m'['\e[0m && previousSubsequence.nonEmpty && currentSubsequence.length\
    \ == \e[31m1\e[0m) && (stringToCheck.tail == \e[31m'['\e[0m || stringToCheck.tail\
    \ == \e[31m'('\e[0m)) {\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpecebyte7.scala:37:150 ----------------------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m ((stringToCheck.head\
    \ == \e[31m'['\e[0m && previousSubsequence.nonEmpty && currentSubsequence.length\
    \ == \e[31m1\e[0m) && (stringToCheck.tail == \e[31m'['\e[0m || stringToCheck.tail\
    \ == \e[31m'('\e[0m)) {\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types String and Char cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpecebyte7.scala:39:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                \e[33mif\e[0m (stringToCheck.tail ==\
    \ bracketToMatch) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpecebyte7.scala:46:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m             "
  stdout: ''
  timestamp: 1660029339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // If\
    \ there are no brackets\n        if(string.trim().length == 0)\n            return\
    \ false\n        \n        // Create a stack\n        val stack = mutable.Stack[Int]()\n\
    \        val result = new mutable.ListBuffer[Int]()\n        \n        // Iterate\
    \ over the characters in the string\n        for((i, c) <- string.zipWithIndex)\
    \ {\n            // If the character is an opening bracket\n            if(c ==\
    \ '[') {\n                // If we are not at the first index, push it to the\
    \ stack\n                if(!stack.isEmpty)\n                    stack.push(i)\n\
    \                // If there is a stack and we see a closing bracket\n       \
    \         else if(stack.nonEmpty && c == '[')\n                    // If we are\
    \ not at the end of the stack, return false\n                    if(!stack.isEmpty)\n\
    \                        return false\n                // If we are at the end\
    \ of the stack\n                else if(!stack.nonEmpty) {\n                 \
    \   // Push all closing brackets to the stack\n                    for(cc <- \"\
    []\")\n                        stack.add(cc)\n                    // Add a new\
    \ index to the result list\n                    result += i\n                }\n\
    \            }\n            \n            // If the character is a closing bracket\n\
    \            else if(c == ']') {\n                // If we are not at the last\
    \ index, pop the stack\n                if(!stack.isEmpty)\n                 \
    \   stack.pop()\n                // If the stack is empty but there is a closing\
    \ bracket, return false\n                else if(!stack.nonEmpty && c == '[')\n\
    \                    return false\n                // If the stack is not empty,\
    \ but no opening bracket, return false\n                else if(stack.nonEmpty\
    \ && !c == '[')\n                    return false\n                \n        \
    \        // If the stack is not empty and the closing bracket is at the bottom\
    \ of the stack,\n                // add a new index to the result list\n     \
    \           if(!stack.nonEmpty && stack.last == c)\n                    result\
    \ += i\n            }\n        }\n        // Return the result list size if and\
    \ only if there are brackets\n        if(result.nonEmpty)\n            return\
    \ result.size\n        else\n            return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdfqh1doz.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdfqh1doz.scala:26:25 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val indexMap\
    \ = mutable.HashMap[(Int, Int), Int]()\n        var startIndex = 0\n        var\
    \ endIndex = string.length\n\n        // Keep looping until we either run out\
    \ of brackets or find a nested bracket.\n        while (!indexMap.contains((startIndex,\
    \ endIndex))) {\n            val index = string.indexOf(\"\"\"[\\[]\"\"\",startIndex)\n\
    \            if (index < 0) return false\n            val nextIndex = string.indexOf(\"\
    \"\"[\\]]\"\"\",index)\n            if (nextIndex < 0) return false\n        \
    \    indexMap += ((index, nextIndex))\n            startIndex = nextIndex + 1\n\
    \            endIndex = index\n        }\n        for (index1 <- indexMap.keys)\
    \ {\n            // Now check if the pair exists\n            val pair = indexMap.get(index1)\n\
    \            for (index2 <- indexMap.values) {\n                // The pair should\
    \ exist now\n                if (index1 < index2) {\n                    val pair2\
    \ = indexMap.get(index2)\n                    // If we have a nested pair, return\
    \ true\n                    if (pair2._1 > pair._1) return true\n            \
    \    }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pu89_lr.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mindexMap\e[0m = mutable.HashMap[(\e\
    [35mInt\e[0m, \e[35mInt\e[0m), \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val index\
    \ : Int = string.index(\"[\")\n        val string2 = string.substring(index+1)\n\
    \        if (string2.length == 0) false\n        else { \n            val list\
    \ = new mutable.ListBuffer[String]()\n            val index2 : Int = string2.index(\"\
    ]\")\n            var string3 = 0\n            var index3 : Int = string2.length\n\
    \            while(index3 >= 0) {\n                list.add(string2.substring(string3,\
    \ index3))\n                index3 = string2.indexOf(\"]\", index3)\n        \
    \        string3 += 1\n            }\n            val string4 = string2.substring(0,index2)\n\
    \            list.foreach(string => if(string4 != string) list.remove(string))\n\
    \            if(list.isEmpty) true else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2qpq7hl_.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m : \e[35mInt\e\
    [0m = string.index(\e[31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value index is not a member of\
    \ String - did you mean string.indent?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2qpq7hl_.scala:24:27 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2qpq7hl_.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mindex2\e[0m : \e[35mInt\e\
    [0m = string2.index(\e[31m\"]\"\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value index is not a member\
    \ of String - did you mean string2.indent?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ == 0) {\n            // base case\n            return true\n        }\n    \
    \    val stack = mutable.Stack[String]()\n        for (ch <- string) {\n     \
    \       if (ch == '[') {\n                stack += '['\n            }\n      \
    \      if (ch == ']') {\n                val isClosed = stack.toList.last.isDefined\n\
    \                if (isClosed) {\n                    // If stack is empty, string\
    \ contains only a single '['\n                    return true\n              \
    \  }\n                stack.pop()\n            }\n        }\n        false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjnzrlugc.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var i\
    \ = 0\n        var openBrackets = 0\n        var closeBrackets = 0\n        for\
    \ (c <- string) {\n            if (c == '[') openBrackets++\n            if (c\
    \ == '[') closeBrackets++\n            if (c == '[' && openBrackets == closeBrackets)\
    \ return true\n            if (c == ']') closeBrackets--\n            if (c ==\
    \ '[' && closeBrackets == openBrackets) return true\n            i++\n       \
    \ }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxrmgtp_l.scala:24:40 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (c == \e[31m'['\e[0m) openBrackets++\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                        expression expected but \e[31mif\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxrmgtp_l.scala:27:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e\
    [0m (c == \e[31m']'\e[0m) closeBrackets--\n\e[31m\e[31m   |\e[0m             \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \               expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpxrmgtp_l.scala:29:15 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            i++\n\e[31m\e[31m   |\e[0m              \
    \ ^\e[0m\n\e[31m   |\e[0m               expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = string.split(\"[\")\n    \
    \    for (x <- brackets)\n            if ((stack.isEmpty) || (x != stack.peek()))\n\
    \                stack.push(x)\n            else\n                stack.pop()\n\
    \        stack.isEmpty || brackets.length != stack.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0_zookj.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = Stack.new\n        val brackets = Array('[', ']', '{', '}')\n        for(\
    \ i <- 0 to string.length - 1 )\n        {\n            if( string(i) != brackets(stack.peek)\
    \ )\n            {\n                stack.push( string(i) )\n            }\n \
    \           else if( stack.peek == 1 )\n            {\n                if( string(i)\
    \ == brackets(stack.peek) )\n                {\n                    stack.peek\
    \ -= 1\n                    return true\n                }\n                else\
    \ if( string(i) == brackets(stack.peek - 1) )\n                {\n           \
    \         stack.peek -= 1\n                    stack.peek += 1\n             \
    \       return true\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1wdn4xa_.scala:20:26 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = Stack.\e[33mnew\e\
    [0m\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m\
    \                          an identifier expected, but 'new' found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1wdn4xa_.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m( string(i) != brackets(stack.peek)\
    \ )\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             Not found: brackets\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1wdn4xa_.scala:30:33 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mif\e[0m( string(i) == brackets(stack.peek)\
    \ )\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Not found: brackets\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1wdn4xa_.scala:35:38 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m( string(i)\
    \ == brackets(stack.peek - \e[31m1\e[0m) )\n\e[31m\e[31m   |\e[0m            \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                  Not found: brackets\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracketsMap\
    \ = getBracketsMap(string)\n        val isNested = bracketsMap.forall(map(_._2.isEmpty))\n\
    \        isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rifesnl.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbracketsMap\e[0m = getBracketsMap(string)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Not found: getBracketsMap\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ == 0) return false\n        val subseqs = for {\n            char <- string.init\n\
    \        } yield char\n        val nestedBrackets = if (subseqs.exists(x => x\
    \ != '}' && x != '{') \n                              || subseqs.exists(x => x\
    \ != '}')) \n                                 1\n                            else\
    \ 0\n        val ends = for {\n            char <- string.init\n            end\
    \ <- string.init\n        } yield char + end\n        if (ends == 0 && !subseqs.exists(x\
    \ => x != '}')) \n                     false\n        else\n            (nestedBrackets\
    \ <= 2) &&\n            (isNested(string.init))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprr3_hj23.scala:32:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m (ends == \e[31m0\e[0m && !subseqs.exists(\e\
    [36mx\e[0m => x != \e[31m'}'\e[0m)) \n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types IndexedSeq[Int] and Int cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code goes here\n        \n        // Initialize counter\n        var count =\
    \ 0\n        // Initialize stack\n        var stack = mutable.Stack[String]()\n\
    \        // Initialize stack\n        for (char <- string) {\n            if (char\
    \ == '[') {\n                stack.push(char)\n            } else if (char ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    false\n  \
    \              } else {\n                    stack.pop()\n                   \
    \ if (stack.isEmpty) {\n                        count = count + 1\n          \
    \          }\n                }\n            }\n        }\n        stack.empty\n\
    \        \n        // Return true if stack is empty and there are at least two\
    \ brackets\n        count > 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqovf8_o.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpiqovf8_o.scala:32:20 ----------------\e\
    [0m\e[0m\n\e[33m32 |\e[0m                    \e[31mfalse\e[0m\n\e[33m\e[33m  \
    \ |\e[0m                    ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does\
    \ nothing in statement position; you may be omitting necessary parentheses\n\e\
    [33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1660029342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val result\
    \ = string.contains(\"[\")\n        if (result) {\n            var index = 0\n\
    \            var lastBracketIndex = 0\n            var nestingLevel = 1\n    \
    \        while (index < string.length) {\n                if (string.charAt(index)\
    \ == '[') {\n                    nestingLevel += 1\n                }\n      \
    \          if (string.charAt(index) == ']') {\n                    nestingLevel\
    \ -= 1\n                }\n                index += 1\n                if (nestingLevel\
    \ == 0) {\n                    return true\n                }\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnqj3lewo.scala:42)\n\tat Problem.main(tmpnqj3lewo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [\") && string.contains(\"]\") && string.contains(\"[\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpktps_d53.scala:24)\n\tat Problem.main(tmpktps_d53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // TODO:\
    \ complete the function\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ytsf3as.scala:25)\n\tat Problem.main(tmp9ytsf3as.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.HashSet[Char]()\n        var index = 0\n        while (index < string.length)\
    \ {\n            val current = string.charAt(index)\n            if (brackets.contains(current))\
    \ {\n                index += 1 // if we hit a bracket we just increment the index\
    \ to skip the bracket we already check\n            } else {\n               \
    \ brackets.add(current)\n            }\n        }\n        return brackets.size\
    \ == string.count('[') - string.count(']') > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jf55hs4.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var left\
    \ = 0\n        var right = 0\n        var opening = true\n        string.substring(0,1).contains(\"\
    [\")\n        string.substring(1,string.length).contains(\"]\")\n        for {\n\
    \            left <- string.indexOf(\"[\", 0)\n            right <- string.indexOf(\"\
    ]\", left)\n        } yield {\n            opening = opening && string.substring(left+1,\
    \ right).contains(\"[\")\n            opening = opening && string.substring(right+1,\
    \ string.length).contains(\"]\")\n        }.exists(identity)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3_uj9igv.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            left <- string.indexOf(\e[31m\"[\"\e[0m,\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value flatMap is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Complete\
    \ the code to solve this problem\n        // Do not change the code below.\n \
    \       val brackets = string\n        val openBrackets = new mutable.HashSet[Int]()\n\
    \        val closeBrackets = new mutable.HashSet[Int]()\n\n        val openBracketCount\
    \ = 0\n        val closeBracketCount = 0\n\n        // iterate over string and\
    \ add to openBrackets and closeBrackets respectively\n        for (i<-0 to brackets.length-1){\n\
    \            val nextChar = brackets(i)\n            if (nextChar == '['){\n \
    \               openBrackets.add(openBracketCount)\n                openBracketCount\
    \ += 1\n            }\n            else if (nextChar == ']'){\n              \
    \  closeBrackets.add(closeBracketCount)\n                closeBracketCount +=\
    \ 1\n            }\n        }\n\n        // iterate over string again and check\
    \ bracket pairs\n        for (i <- 0 to brackets.length-1){\n            val nextChar\
    \ = brackets(i)\n            if (openBrackets.contains(i) && closeBrackets.contains(i+1)){\n\
    \                return true\n            }\n        }\n\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjlp4yt0.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjlp4yt0.scala:24:32\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBrackets\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmjlp4yt0.scala:34:33 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                openBracketCount += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \    value += is not a member of Int - did you mean openBracketCount.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmjlp4yt0.scala:38:34 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                closeBracketCount += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value += is not a member of Int - did you mean closeBracketCount.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val m\
    \ = string.lastIndexOf(\"[\")\n        val n = string.length\n        if(m ==\
    \ -1)\n            return false\n        var lastBracketIndex = m\n        var\
    \ foundBracket = false\n        for(i <- m until n){\n            if(!foundBracket){\n\
    \                if(string.charAt(i) != '['){\n                    return false\n\
    \                }\n                foundBracket = true\n            }else{\n\
    \                if(string.charAt(i) != '['){\n                    return false\n\
    \                }\n            }\n        }\n        return true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_mifop9v.scala:41)\n\tat Problem.main(tmp_mifop9v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ < 2) {\n            return true\n        }\n\n        val brackets = mutable.ArrayBuffer(string)\n\
    \n        var closeBrackets : Boolean = false\n\n        while (closeBrackets\
    \ == false) {\n            var closeBracketsCount : Int = 0\n            for (index1\
    \ <- brackets.indices) {\n                val currentBracket = brackets(index1)\n\
    \                for (index2 <- index1 until brackets.size - 1) {\n          \
    \          val nextBracket = brackets(index2)\n                    if (currentBracket.equals('[')\
    \ && nextBracket.equals(']')) {\n                        closeBracketsCount +=\
    \ 1\n                    }\n                }\n            }\n            if (closeBracketsCount\
    \ > 0) {\n                closeBrackets = true\n            }\n        }\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjl7tqfn.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\[\\\\]|\\\\(|\\\\)|^$|\\\\[\\\\\
    ]]\").toList\n        val stack = new mutable.Stack[String]()\n        var openBracketsCount\
    \ = 0\n        var isNested = true\n\n        for(i <- 0 until brackets.length){\n\
    \            if(brackets(i) == \"[\"){\n                openBracketsCount += 1\n\
    \                stack += \"[\"\n            } else if(brackets(i) == \"]\"){\n\
    \                openBracketsCount -= 1\n                if(openBracketsCount\
    \ < 0){\n                    isNested = false\n                    break\n   \
    \             }\n                stack += \"]\"\n            } else if(brackets(i)\
    \ == \")\"){\n                openBracketsCount -= 1\n                if(openBracketsCount\
    \ < 0){\n                    isNested = false\n                    break\n   \
    \             }\n                stack += \")\"\n            }\n        }\n  \
    \      stack.nonEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9wf64ob4.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9wf64ob4.scala:33:20\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9wf64ob4.scala:40:20 ------------------------\e[0m\e[0m\n\e[31m40 |\e\
    [0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(\"\")\n        var opening = 0\n        val chars = string.map(c\
    \ => if (c == '[') brackets += c else c != '[')\n        val closing = chars.find(c\
    \ => c == ']').orElse(-1)\n        var closingBrackets = 0\n        for (c <-\
    \ chars) {\n            if (c == '[') opening++\n            if (c == ']') closingBrackets++\n\
    \        }\n        if (closing > -1 && closing - opening != closingBrackets -\
    \ opening) {\n            return false\n        }\n        for (bracket <- brackets.toList)\
    \ {\n            if (bracket.length() > 1) {\n                return true\n  \
    \          }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjtdh5ol4.scala:26:35 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (c == \e[31m'['\e[0m) opening++\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   expression expected but \e[31mif\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjtdh5ol4.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def subSequence(pos\
    \ : Int, i : Int) : List[Char] = {\n            if (i == string.length) {\n  \
    \              List[Char]()\n            } else {\n                val c = string(i)\n\
    \                subSequence(pos + 1, i + 1) match {\n                    case\
    \ Nil => List(c)\n                    case _ => List(c) + subSequence(pos + 1,\
    \ i + 1)\n                }\n            }\n        }\n        var result : Boolean\
    \ = false\n        def isNestedRecursive(i : Int) : Boolean = {\n            val\
    \ subSeq = subSequence(i, i)\n            val subSeqEmpty = subSeq.size == 0\n\
    \            if (subSeqEmpty) {\n                result = (i == (string.length\
    \ - 1))\n            }\n            else {\n                if (subSeq.size >=\
    \ 2) {\n                    result =  (subSeq.contains(subSeq.head) && isNestedRecursive(i\
    \ + 1))\n                }\n            }\n            result\n        }\n   \
    \     isNestedRecursive(0)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpgk_if6.scala:27:38 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mcase\e[0m _ => List(c) + subSequence(pos\
    \ + \e[31m1\e[0m, i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Char],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = mutable.Stack.empty[String]\n        stack.push(\"[\")\n        for( i <-\
    \ 0 until string.length) {\n            if( !stack.contains(\"[\") && stack.length\
    \ > 1 ) {\n                return false\n            }\n            if( string(i)\
    \ == \"[\" && stack.contains(\"[\") ) {\n                stack += \"[\"\n    \
    \        } else if( string(i) == \"]\" && stack.contains(\"]\") ) {\n        \
    \        stack += \"]\"\n            } else {\n                stack += string(i)\n\
    \            }\n        }\n        return stack.contains(\"[\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa37wy84y.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpa37wy84y.scala:26:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m( string(i) == \e[31m\"[\"\e\
    [0m && stack.contains(\e[31m\"[\"\e[0m) ) {\n\e[31m\e[31m   |\e[0m           \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpa37wy84y.scala:28:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \     } \e[33melse\e[0m \e[33mif\e[0m( string(i) == \e[31m\"]\"\e[0m && stack.contains(\e\
    [31m\"]\"\e[0m) ) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660029354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val m\
    \ = string.r\n        val brackets = m.findAllIn(m.replaceAllIn(m, \"[]\"))\n\
    \        if (brackets.size < 2) false\n        else {\n            val start =\
    \ brackets.head\n            val end = brackets.last\n            val left = brackets(1).toString.replaceFirst(\"\
    [\", \"\").replaceFirst(\"]\", \"\")\n            val right = brackets(2).toString.replaceFirst(\"\
    [\", \"\").replaceFirst(\"]\", \"\")\n            (left.length > 1 && left.equals(right))\
    \ && (left.length == right.lenght && left.charAt(0) == \"[\")\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcpu2msc1.scala:21:37 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = m.findAllIn(m.replaceAllIn(m,\
    \ \e[31m\"[]\"\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mreplaceAllIn\e[0m in \e[33mclass\e[0m \e[35mRegex\e\
    [0m with types\n\e[31m   |\e[0m (target: CharSequence, replacer: scala.util.matching.Regex.Match\
    \ => String): \n\e[31m   |\e[0m  String\n\e[31m   |\e[0m (target: CharSequence,\
    \ replacement: String): String\n\e[31m   |\e[0mmatch arguments ((m : scala.util.matching.Regex),\
    \ (\e[32m\"[]\"\e[0m : String))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcpu2msc1.scala:24:33\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstart\e[0m = brackets.head\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue head is not a member of scala.util.matching.Regex.MatchIterator\
    \ - did you mean brackets.end?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcpu2msc1.scala:25:31\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mend\e[0m = brackets.last\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue last is not a member of scala.util.matching.Regex.MatchIterator\
    \ - did you mean brackets.wait?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpcpu2msc1.scala:26:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36mleft\e[0m = brackets(\e[31m1\e[0m).toString.replaceFirst(\e[31m\"[\"\
    \e[0m, \e[31m\"\"\e[0m).replaceFirst(\e[31m\"]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \            \e[33mvalue\e[0m \e[35mbrackets\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpcpu2msc1.scala:27:24 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = brackets(\e\
    [31m2\e[0m).toString.replaceFirst(\e"
  stdout: ''
  timestamp: 1660029356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // A\
    \ valid subsequence of brackets has at least one nested bracket and no brackets\
    \ in the \n        // subsequence can match the opening bracket of the outer sequence.\
    \  \n        // In other words, a nested bracket does not allow an opening bracket.\n\
    \        val brackets = string.split(\"\"\"[\\[\\]]\"\"\").map(_.toInt).filter(x\
    \ => x > 0)\n        val openings = brackets.filter(x => x != 0).map(_.toInt)\n\
    \        val nestedBrackets = openings.filter(x => x != 0 && x != openings.last).toSet\n\
    \        nestedBrackets.isEmpty\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbv4tvkxk.scala:30)\n\tat Problem.main(tmpbv4tvkxk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ <= 0) return false\n        var index = 0\n        while ((index <= string.length\
    \ - 1) && (string(\"index\") != \"[\")) index++\n        while ((index <= string.length\
    \ - 1) && (string(\"index\") != \"(\")) index++\n        if (string.length <=\
    \ index) return false\n        if (string(\"index\") != \"[\") index++\n     \
    \   var count = 0\n        while (index <= string.length - 1) { \n           \
    \ if (string(\"index\") == \"[\") count++\n            if (string(\"index\") ==\
    \ \"(\") count--\n            if (count == 0) return true\n            index++\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgbjzwgie.scala:22:80 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mwhile\e[0m ((index <= string.length - \e\
    [31m1\e[0m) && (string(\e[31m\"index\"\e[0m) != \e[31m\"[\"\e[0m)) index++\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \      expression expected but \e[31mwhile\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpgbjzwgie.scala:25:43 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (string(\e[31m\"index\"\e[0m) !=\
    \ \e[31m\"[\"\e[0m) index++\n\e[31m\e[31m   |\e[0m                           \
    \                ^\e[0m\n\e[31m   |\e[0m                          expression expected\
    \ but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E018]\
    \ Syntax Error: /tmp/tmpgbjzwgie.scala:28:47 ---------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (string(\e[31m\"index\"\e[0m) ==\
    \ \e[31m\"[\"\e[0m) count++\n\e[31m\e[31m   |\e[0m                           \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \       expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpgbjzwgie.scala:31:19 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            index++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgbjzwgie.scala:22:55\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mwhile\e[0m ((index\
    \ <= string.length - \e[31m1\e[0m) && (string(\e[31m\"index\"\e[0m) != \e[31m\"\
    [\"\e[0m)) index++\n\e[31m\e[31m   |\e[0m                                    \
    \                   ^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1660029356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [\") && string.contains(\"]\") \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39unpxrh.scala:24)\n\tat Problem.main(tmp39unpxrh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029355
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var hasNesting\
    \ = 0\n        for(char <- string.toCharArray){\n            if( char == '[' ||\
    \ char == '{' || char == '('){\n                hasNesting += 1\n            }\n\
    \            if( char == ']' || char == '}' || char == ')'){\n               \
    \ hasNesting -= 1\n            }\n        }\n        return hasNesting > 0\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8e2qoisl.scala:32)\n\tat Problem.main(tmp8e2qoisl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // initialize\
    \ variables\n        val stack = mutable.Stack[String]()\n        val openings\
    \ = mutable.Set[String]()\n        val closings = mutable.Set[String]()\n    \
    \    var opening = false\n        val depth = mutable.Map[String, Int]()\n   \
    \     var depthValue = 0\n\n        // check each character in string\n      \
    \  for(c <- string.toCharArray) {\n            // if opening bracket is found\n\
    \            if(opening && c != '[') {\n                // if the opening bracket\
    \ is NOT closing a previous opening bracket\n                // then add this\
    \ closing bracket to list of closing brackets\n                if(openings.contains(c))\
    \ {\n                    closings += c\n                }\n            }\n   \
    \         // if the current character is an opening bracket\n            else\
    \ if(c == '[') {\n                // if the current depth is greater than the\
    \ previous depth\n                if(depthValue > depth(c)) {\n              \
    \      // set current depth to new depth\n                    depthValue += 1\n\
    \                }\n                // push current opening bracket to stack\n\
    \                stack.push(c)\n                // add current opening bracket\
    \ to list of opening brackets\n                openings += c\n            }\n\
    \            // if the current character is a closing bracket\n            else\
    \ if(c == ']') {\n                // if the current depth is less than the previous\
    \ depth\n                if(depthValue < depth(c)) {\n                    // set\
    \ current depth to new depth\n                    depthValue -= 1\n          \
    \      }\n                // pop the top of the stack which is the last bracket\
    \ and set depth\n                // to the value popped off\n                val\
    \ closingBracket = stack.pop()\n                depthValue -= 1\n            \
    \    depth(closingBracket) = depthValue\n                // remove closing bracket\
    \ from list of closing brackets\n                closings -= closingBracket\n\
    \            }\n            // if the current character is not an opening or closing\
    \ bracket\n            else {\n                // set current depth to new depth\n\
    \                depthValue += 1\n            }\n            // if current depth\
    \ is equal to zero\n            if(depthValue == 0) {\n                // if the\
    \ character is a closing bracket\n                if(closings.contains(c)) {\n\
    \                    // pop depth value off of stack and return to caller\n  \
    \                  depthValue -= 1\n                    return true\n        \
    \        }\n                // otherwise, this character is NOT a closing bracket\n\
    \                // therefore return false to caller\n                return false\n\
    \            }\n        }\n        // if the stack is empty then return false\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxi6md2uf.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxi6md2uf.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenings\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxi6md2uf.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosings\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxi6md2uf.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdepth\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n      string.nonEmpty\n\
    \      string match {\n        case \"\" => true\n        case str if (str.contains(\"\
    [[\")) => false\n        case _ => isNested(string.dropWhile(_ == '['))\n    \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuyjup0fs.scala:28)\n\tat Problem.main(tmpuyjup0fs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Only\
    \ square brackets in the string\n        string match {\n            case \"[\"\
    \ :: string => \n                string match {\n                    case \"[\"\
    \ :: string => \n                        string match {\n                    \
    \        case \"[\" :: string => \n                                string match\
    \ {\n                                    case \"[\" :: string => \n          \
    \                              string match {\n                              \
    \              case \"[\" :: string => \n                                    \
    \            string match {\n                                                \
    \    case \"[\" :: string => \n                                              \
    \          true\n                                                }\n         \
    \                                   case _ => false\n                        \
    \                }\n                                    case _ => false\n    \
    \                            }\n                            case _ => false\n\
    \                        }\n                    case _ => false\n            \
    \    }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[33m\e[33m-- [E029] Pattern Match Exhaustivity Warning: /tmp/tmpp7hbtifu.scala:31:48\
    \ -----\e[0m\e[0m\n\e[33m31 |\e[0m                                           \
    \     string \e[33mmatch\e[0m {\n\e[33m\e[33m   |\e[0m                       \
    \                         ^^^^^^\e[0m\n\e[33m   |\e[0m                       \
    \  \e[33mmatch\e[0m may not be exhaustive.\n\e[33m   |\e[0m\n\e[33m   |\e[0m \
    \                        It would fail on pattern case: List(_, _*), Nil\n\e[33m\
    \   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E030] Match case Unreachable Warning: /tmp/tmpp7hbtifu.scala:22:17\
    \ ---------\e[0m\e[0m\n\e[33m22 |\e[0m            \e[33mcase\e[0m \e[31m\"[\"\e\
    [0m :: string => \n\e[33m\e[33m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e\
    [33m   |\e[0m                 Unreachable case\n\e[31m\e[31m-- Error: /tmp/tmpp7hbtifu.scala:22:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     \e[33mcase\e[0m \e[31m\"[\"\e[0m :: string => \n\e[31m\e[31m   |\e[0m  \
    \               ^\e[0m\n\e[31m   |\e[0mthis case is unreachable since type String\
    \ is not a subclass of \e[33mclass\e[0m \e[35m::\e[0m\n2 warnings found\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.matches(\"\
    [\\\\[\\\\]]+\")\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkd605ai6.scala:24)\n\tat Problem.main(tmpkd605ai6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzphp25s3.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m20 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m21 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val nestedBrackets\
    \ = mutable.LinkedHashSet[String]()\n        val stack = new mutable.Stack[String]()\n\
    \n        var openBrackets = 0\n        var closeBrackets = 0\n\n        for (char\
    \ <- string.toCharArray()) {\n            if (char == '[') {\n               \
    \ openBrackets += 1\n            } else if (char == ']') {\n                openBrackets\
    \ -= 1\n            } else if (char == '[') {\n                closeBrackets +=\
    \ 1\n            } else if (char == ']') {\n                closeBrackets -= 1\n\
    \            } else if (char == ')') {\n                if (openBrackets > 0 &&\
    \ closeBrackets == 0) {\n                    nestedBrackets += stack.mkString(\"\
    \")\n                    stack = mutable.Stack[String]()\n                } else\
    \ if (openBrackets == 0 && closeBrackets == 0) {\n                    stack.push(\"\
    ]\")\n                } else if (openBrackets > 0 && closeBrackets > 0) {\n  \
    \                  stack.push(')')\n                }\n            }\n       \
    \ }\n\n        nestedBrackets.size == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_43jivp.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnestedBrackets\e[0m = mutable.LinkedHashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_43jivp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_43jivp.scala:38:28\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                    stack\
    \ = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code goes here\n        val pattern = \"\\\\[\\\\[\\\\[\\\\]\"\n        var\
    \ i = 1\n        while i < string.length { \n            var found = false\n \
    \           var count = 0\n            var x = string.indexOf(pattern, i)\n  \
    \          while (x > -1) {\n                if ((x + 1) == string.length) {\n\
    \                    found = true\n                    break\n               \
    \ }\n                if (string.charAt(x + 1) == '[') {\n                    count\
    \ += 1\n                } else {\n                    count -= 1\n           \
    \     }\n                x = string.indexOf(pattern, x + 1)\n            }\n \
    \           if (found && count == 0) {\n                i += pattern.length\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    if (i == string.length || i < string.length) {\n            return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjp5nrah_.scala:45:8 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mif\e[0m (i == string.length || i < string.length)\
    \ {\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        'do' expected,\
    \ but 'if' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjp5nrah_.scala:30:20\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def closeBracket(i\
    \ : Int, str : String) : Boolean = \n            str.charAt(i) == '[' && str.charAt(i+1)\
    \ == '['\n        def openBracket(i : Int, str : String) : Boolean = \n      \
    \      str.charAt(i) == '[' && str.charAt(i+1) == ']'\n        val str = string.toLowerCase\n\
    \        var openBracketCount : Int = 0\n        var closeBracketCount : Int =\
    \ 0\n        var isNested : Boolean = false\n        var lastIndex = str.length\
    \ - 1\n        for(i <- 0 until str.length){\n            if (closeBracket(i,\
    \ str)) {\n                closeBracketCount += 1\n            } else if(openBracket(i,\
    \ str)){\n                openBracketCount += 1\n            }\n            else\
    \ if (closeBracketCount != openBracketCount) {\n                isNested =  false\n\
    \            }\n            else if (openBracketCount != closeBracketCount){\n\
    \                isNested = true\n            }\n            else if(closeBracketCount\
    \ == openBracketCount){\n                if (closeBracket(i, str)) {\n       \
    \             closeBracketCount -= 1\n                } else if (openBracket(i,\
    \ str)) {\n                    openBracketCount -= 1\n                }\n    \
    \        }\n            if (i == lastIndex){\n                isNested =  false\n\
    \            }\n            lastIndex = i\n        }\n        return isNested\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8xu6fy2.scala:56)\n\tat Problem.main(tmpu8xu6fy2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.toList.foldLeft(true)\
    \ {\n            case (true, string) =>\n                val l = string.toList\n\
    \                val n = l(0)\n                val m = l(1)\n                (l.size\
    \ == 2) && {\n                    val r = l(2)\n                    (m == n) &&\
    \ (r.size == 2)\n                }\n            case (false, other) =>\n     \
    \           val l = string.toList\n                val n = l(0)\n            \
    \    val m = l(1)\n                (l.size == 2 && m != n) && (l.size == 3)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl86fj2xp.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = string.toList\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m       value toList is not a member of Char - did you mean string.toInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n      val array1\
    \ = string.toCharArray\n      val array2 = array1.slice(1, array1.length - 1)\n\
    \      val array3 = array2.map(c => if(c == '[') '[' else c )\n      array1.equals(array3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxtzmlm3f.scala:26)\n\tat Problem.main(tmpxtzmlm3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Loop\
    \ through the string\n        for( i <- 0 until string.length ) {\n          \
    \  val isNestedInsideBracket = (string(i) == '[' && string(i + 1) == '[')\n  \
    \          if ( !isNestedInsideBracket ) {\n                return false\n   \
    \         }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmp7t09bm.scala:30)\n\tat Problem.main(tmpmp7t09bm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzo9b4z1c.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m20 |\e\
    [0m        \n\e[31m21 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val numBrackets\
    \ = string.count('[')\n        val countOpenBrackets = string.count('{')\n   \
    \     val countCloseBrackets = string.count('}')\n        val countTotalBrackets\
    \ = (numBrackets - countOpenBrackets)*(numBrackets - countCloseBrackets)\n   \
    \     (countTotalBrackets > 0) || (countOpenBrackets == countCloseBrackets)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr5g3gtpk.scala:20:39\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumBrackets\e\
    [0m = string.count(\e[31m'['\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                                \
    \       Found:    (\e[31m'['\e[0m : Char)\n\e[31m   |\e[0m                   \
    \                    Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpr5g3gtpk.scala:21:45 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcountOpenBrackets\e[0m =\
    \ string.count(\e[31m'{'\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^\e[0m\n\e[31m   |\e[0m                              \
    \               Found:    (\e[31m'{'\e[0m : Char)\n\e[31m   |\e[0m           \
    \                                  Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr5g3gtpk.scala:22:46 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcountCloseBrackets\e[0m\
    \ = string.count(\e[31m'}'\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \                   Found:    (\e[31m'}'\e[0m : Char)\n\e[31m   |\e[0m       \
    \                                       Required: Char => Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // TODO:\
    \ Implement this function\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe_tnp5sn.scala:25)\n\tat Problem.main(tmpe_tnp5sn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // For\
    \ every opening bracket, keep track of the first closing bracket. \n        //\
    \ If there is no closing bracket in the substring, this means the string \n  \
    \      // is NOT nested\n        val openingBrackets = mutable.HashSet[Int]()\n\
    \        // For every closing bracket, keep track of the number of opening brackets\
    \ \n        // nested within it. If this number is not even, it means the string\
    \ is NOT nested\n        val closingBrackets = mutable.HashMap[Int, Int]()\n \
    \       \n        // Iterate over the string and look for brackets \n        for(i\
    \ <- 0 until string.length)\n        {\n            // If the character is a bracket,\
    \ add it to the set\n            if(string(i) == '[')\n                openingBrackets.add(i)\n\
    \            else if(string(i) == ']')\n                closingBrackets.update(openingBrackets.size\
    \ - 1, closingBrackets.last._1 + 1)\n        }\n        \n        // If the number\
    \ of opening brackets is not even, it means there are no valid \n        // brackets\
    \ nested\n        if(openingBrackets.size % 2 != 0)\n            return false\n\
    \        \n        // If the number of closing brackets is not even, it means\
    \ there are no valid \n        // brackets nested\n        val closedBracketsCount\
    \ = openingBrackets.size - closingBrackets.size\n        if(closedBracketsCount\
    \ % 2 != 0)\n            return false\n        \n        // Now that we know that\
    \ the string is valid, we can check if there are any nested\n        // brackets\n\
    \        val hasNestedBrackets = openingBrackets.forall(i => closingBrackets.contains(i))\n\
    \        \n        // If there are no brackets nested, the string is NOT nested\n\
    \        if(!hasNestedBrackets)\n            return false\n        \n        //\
    \ If we get here, it means there are valid brackets nested\n        true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx5v6a5p1.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx5v6a5p1.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string\
    \ match {\n            case \"\" => true\n            case _ => (string.substring(0,string.length()-1)\
    \ == \"[\" && string.substring(string.length()-1, string.length()).equals(\"]\"\
    ))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyuzvqekq.scala:26)\n\tat Problem.main(tmpyuzvqekq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = 0\n        string.matches(\"\\\\[.*\\\\].*\\\\[.*\\\\].*\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph8zchh9z.scala:24)\n\tat Problem.main(tmph8zchh9z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var count\
    \ : Int = 0\n        string.indexOf(\"[\", 0) match {\n            case -1 =>\
    \ false\n            case i =>\n                var j = i + 1\n              \
    \  var k = string.indexOf(\"]\", j)\n                while (k > 0 && k != j) {\n\
    \                    j = k\n                    k = string.indexOf(\"]\", j)\n\
    \                }\n                if (k > 0) {\n                    if (string.substring(i\
    \ + 1, j).indexOf(\"]\") != -1) {\n                        count = count + 1\n\
    \                    }\n                }\n        }\n        count > 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2yj2i9iy.scala:39)\n\tat Problem.main(tmp2yj2i9iy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new mutable.Stack[String]()\n        for (i <- 0 until string.length) {\n\
    \            val letter = string.charAt(i)\n            if (letter == '[') {\n\
    \                if (stack.size > 0) {\n                    if (!stack.isEmpty)\
    \ {\n                        if (!stack.isEmpty && stack.last.equals('[')) {\n\
    \                            return true\n                        }\n        \
    \            } else {\n                        stack += '['\n                \
    \    }\n                } else {\n                    stack += '['\n         \
    \       }\n            } else if (letter == ']') {\n                if (stack.size\
    \ > 0) {\n                    if (stack.last.equals('[')) {\n                \
    \        if (stack.size >= 2) {\n                            return true\n   \
    \                     }\n                    } else {\n                      \
    \  if (!stack.isEmpty && stack.last.equals('[')) {\n                         \
    \   return true\n                        }\n                    }\n          \
    \      } else {\n                    return false\n                }\n       \
    \     } else {\n                stack += letter\n            }\n        }\n  \
    \      return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ri9u3zt.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Initialize\
    \ a stack that will contain the string characters inside the brackets\n      \
    \  // the stack is always empty \n        val stack = mutable.Stack[Char]()\n\
    \        // Initialize a counter that counts how many times we have encountered\
    \ a left bracket \n        // We will use it as a flag to know if we should treat\
    \ the string as a nested or not \n        var leftBracketCount = 0\n        //\
    \ Initialize a counter to count the number of left brackets encountered \n   \
    \     var leftBracketCountWithinString = 0\n        // Iterate over all the characters\
    \ in the input string\n        for(ch <- string.toList){\n            // If the\
    \ character is a left bracket \n            if(ch == '[') {\n                //\
    \ Increment the count of left brackets \n                leftBracketCount += 1\n\
    \            }\n            // If the character is a right bracket \n        \
    \    else if(ch == '{') {\n                // Decrement the count of left brackets\
    \ \n                leftBracketCount -= 1\n                // If the count of\
    \ left brackets is equal to 0 \n                if(leftBracketCount == 0){\n \
    \                   // We have found a left bracket \n                    // so\
    \ we need to add it to the stack\n                    stack.push(ch)\n       \
    \             // Increment the counter\n                    leftBracketCountWithinString\
    \ += 1\n                }\n            }\n            // If the character is a\
    \ left bracket\n            else if(ch == '[' && stack.last == '[') {\n      \
    \          // We have found a right bracket \n                // so we need to\
    \ add it to the stack\n                stack.push(ch)\n                // Increment\
    \ the counter\n                leftBracketCountWithinString += 1\n           \
    \ }\n            // If the character is a left bracket\n            else if(ch\
    \ == '{' && stack.last == '{') {\n                // We have found a right bracket\
    \ \n                // so we need to add it to the stack\n                stack.push(ch)\n\
    \                // Decrement the counter\n                leftBracketCountWithinString\
    \ -= 1\n            }\n            // If no bracket is encountered\n         \
    \   else {\n                // Add the character to the stack\n              \
    \  stack.push(ch)\n            }\n        }\n        // If the input string contains\
    \ left brackets \n        // but it is not closed with right brackets\n      \
    \  // we will return false \n        if(leftBracketCountWithinString < 1 && leftBracketCount\
    \ != 0) {\n            return false\n        }\n        // If the input string\
    \ contains left brackets \n        // and it is closed with right brackets\n \
    \       // we will return true\n        if(leftBracketCountWithinString > 0 &&\
    \ leftBracketCount != 0) {\n            return true\n        }\n        // If\
    \ the input string does not contain any bracket\n        // we will return false\
    \ \n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmposux7s45.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [\")\n            && string.contains(\"]\") \n            && string.contains(\"\
    [\")\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp893l1mon.scala:26)\n\tat Problem.main(tmp893l1mon.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        \n  \
    \      // The subsequences that start with open bracket\n        val openBrackets\
    \ = mutable.ListBuffer[String]()\n        \n        // The subsequences that end\
    \ with open bracket\n        val closeBrackets = mutable.ListBuffer[String]()\n\
    \        \n        // The subsequences that end with closed bracket\n        val\
    \ closedBrackets = mutable.ListBuffer[String]()\n        \n        // The subsequences\
    \ that end with open and closed bracket\n        val openAndClosedBrackets = mutable.ListBuffer[String]()\n\
    \        \n        for(x <- string.toCharArray){\n            if(x == '['){\n\
    \                openBrackets += x.toString\n            }else if(x == ']'){\n\
    \                closeBrackets += x.toString\n            }else if(x == '{'){\n\
    \                closedBrackets += x.toString\n            }else if(x == '('){\n\
    \                openAndClosedBrackets += x.toString\n            }\n        }\n\
    \        \n        // If there are no brackets within the string, then return\
    \ false\n        if(openBrackets.size == 0 || closeBrackets.size == 0 || closedBrackets.size\
    \ == 0 || openAndClosedBrackets.size == 0){\n            return false\n      \
    \  }\n        \n        // Keep the open bracket sequence as long as it contains\
    \ openBrackets\n        var openBracketsIter = openBrackets.iterator\n       \
    \ while(openBracketsIter.hasNext){\n            var next = openBracketsIter.next\n\
    \            \n            // Keep a flag to determine if any open bracket was\
    \ found\n            var foundOpenBrackets = false\n            \n           \
    \ // Keep a flag to determine if any of the closed bracket sequences was found\n\
    \            var foundClosedBrackets = false\n            \n            // Keep\
    \ a flag to determine if any open and closed bracket sequences were found\n  \
    \          var foundOpenAndClosedBrackets = false\n            \n            //\
    \ The index of the last open bracket we found\n            var lastOpenBracketIndex\
    \ = -1\n            \n            // The index of the last closed bracket we found\n\
    \            var lastClosedBracketIndex = -1\n            \n            // The\
    \ index of the last open and closed bracket we found\n            var lastOpenAndClosedBracketIndex\
    \ = -1\n            \n            // Loop through the closeBrackets until we find\
    \ one that is before the next openBracket\n            while(closeBrackets.nonEmpty\
    \ && lastOpenBracketIndex < openBracketsIter.next){\n                var nextBracket\
    \ = closeBrackets.last\n                \n                // If we find an open\
    \ bracket before the next, then break out of the loop\n                if(nextBracket\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2f9cbrk.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2f9cbrk.scala:98:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m98 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpq2f9cbrk.scala:22:27 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2f9cbrk.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2f9cbrk.scala:28:29 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mclosedBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2f9cbrk.scala:31:36 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mopenAndClosedBrackets\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpq2f9cbrk.scala:80"
  stdout: ''
  timestamp: 1660029370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val numCloser\
    \ = string.count[\"\"]\n        if (numCloser == 0) false\n        else string.count(\"\
    [[]]\") > 0 || (string.count(\"[[]][]]][[[[[]\") > 0 || (string.count(\"[[]]\"\
    ) > 0 && (string.count(\"[[]][[\") > 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp67lazwve.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp67lazwve.scala:20:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnumCloser\e[0m = string.count[\e[31m\"\"\e[0m]\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \         \e[33mmethod\e[0m \e[35mcount\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m does not take type parameters\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp67lazwve.scala:22:26 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        \e[33melse\e[0m string.count(\e[31m\"[[]]\"\e[0m) > \e[31m0\e[0m || (string.count(\e\
    [31m\"[[]][]]][[[[[]\"\e[0m) > \e[31m0\e[0m || (string.count(\e[31m\"[[]]\"\e\
    [0m) > \e[31m0\e[0m && (string.count(\e[31m\"[[]][[\"\e[0m) > \e[31m0\e[0m))\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Found:    (\e[32m\"[[]]\"\e[0m : String)\n\e[31m   |\e\
    [0m                          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp67lazwve.scala:22:55 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m string.count(\e[31m\"[[]]\"\e\
    [0m) > \e[31m0\e[0m || (string.count(\e[31m\"[[]][]]][[[[[]\"\e[0m) > \e[31m0\e\
    [0m || (string.count(\e[31m\"[[]]\"\e[0m) > \e[31m0\e[0m && (string.count(\e[31m\"\
    [[]][[\"\e[0m) > \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                       \
    \                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                             Found:    (\e[32m\"[[]][]]][[[[[]\"\e[0m : String)\n\
    \e[31m   |\e[0m                                   Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp67lazwve.scala:22:94\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m string.count(\e\
    [31m\"[[]]\"\e[0m) > \e[31m0\e[0m || (string.count"
  stdout: ''
  timestamp: 1660029375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var firstChar\
    \ = string.head\n        var index = string.indexOf(\"[\")\n        if (index\
    \ == -1) {\n            return false\n        } else {\n            while (index\
    \ != -1) {\n                if (string.charAt(index - 1) != \"[\" ||\n       \
    \             string.charAt(index) !=  \"]\" ||\n                    string.charAt(index\
    \ - 2) != \"[\" ||\n                    string.charAt(index - 2) !=  \"]\") {\n\
    \                    return false\n                }\n                index =\
    \ string.indexOf(\"[\", index + 1)\n            }\n            return true\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzqzx75on.scala:26:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m (string.charAt(index -\
    \ \e[31m1\e[0m) != \e[31m\"[\"\e[0m ||\n\e[31m\e[31m   |\e[0m                \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpzqzx75on.scala:27:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \             string.charAt(index) !=  \e[31m\"]\"\e[0m ||\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpzqzx75on.scala:28:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    string.charAt(index - \e[31m2\e[0m)\
    \ != \e[31m\"[\"\e[0m ||\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpzqzx75on.scala:29:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    string.charAt(index - \e[31m2\e[0m)\
    \ !=  \e[31m\"]\"\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660029376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val input\
    \ = string\n        // Your code goes here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw7gs9zmw.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029375
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var bracketCount\
    \ = 0\n        var insideBracketCount = 0\n        for (c <- string) {\n     \
    \       if ('[' == c) {\n                insideBracketCount += 1\n           \
    \     bracketCount += 1\n            } else if (']' == c) {\n                insideBracketCount\
    \ -= 1\n                bracketCount -= 1\n            } else if ('[' == c) {\n\
    \                insideBracketCount += 1\n            } else if (']' == c) {\n\
    \                insideBracketCount -= 1\n            }\n        }\n        if\
    \ ((bracketCount > 0) && insideBracketCount == 0) {\n            return true\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq0ox0mkx.scala:41)\n\tat Problem.main(tmpq0ox0mkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n      val arr\
    \ = string.split(\"\\[\\]\") // Split the string with brackets\n      val map\
    \ = mutable.HashMap[Char, Int]()\n      arr.foreach { e =>\n        val c = e.head\n\
    \        if (map.contains(c)) {\n          map.put(c, map.get(c) + 1)\n      \
    \  }\n        else {\n          map.put(c, 1) // Add a new key with value of 1\n\
    \        }\n      }\n      val keyCount = map.size // Count the keys only\n  \
    \    if (keyCount % 2 == 0) true\n      else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpts9qpncg.scala:20:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36marr\e[0m = string.split(\e\
    [31m\"\\[\\]\"\e[0m) \e[34m// Split the string with brackets\e[0m\n\e[31m\e[31m\
    \   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m             \
    \                  invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpts9qpncg.scala:20:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e\
    [33mval\e[0m \e[36marr\e[0m = string.split(\e[31m\"\\[\\]\"\e[0m) \e[34m// Split\
    \ the string with brackets\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \          ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpts9qpncg.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mmap\e\
    [0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n         val\
    \ regex = \"\"\"\\[[^[]*\\]\"\"\".r\n         regex.findFirstIn(string).isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.regex.PatternSyntaxException: Unclosed character class near index\
    \ 8\n\\[[^[]*\\]\n        ^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2028)\n\
    \tat java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)\n\tat java.base/java.util.regex.Pattern.clazz(Pattern.java:2635)\n\
    \tat java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)\n\tat java.base/java.util.regex.Pattern.expr(Pattern.java:2069)\n\
    \tat java.base/java.util.regex.Pattern.compile(Pattern.java:1783)\n\tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)\n\
    \tat java.base/java.util.regex.Pattern.compile(Pattern.java:1069)\n\tat scala.util.matching.Regex.<init>(Regex.scala:234)\n\
    \tat scala.collection.StringOps$.r$extension(StringOps.scala:857)\n\tat Problem$.isNested(tmptg5sega_.scala:20)\n\
    \tat Problem$.main(tmptg5sega_.scala:24)\n\tat Problem.main(tmptg5sega_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scal"
  stdout: ''
  timestamp: 1660029377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n      string.length\
    \ == 0 || string.charAt(0) == string.charAt(string.length-1) || string.charAt(0)\
    \ == '}' && string.charAt(string.length-1) != '}'\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_xjbqov.scala:23)\n\tat Problem.main(tmpp_xjbqov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val openingSquareBrackets\
    \ = MutableSet[Char]()\n        val closingSquareBrackets = MutableSet[Char]()\n\
    \        \n        def findSquareBrackets(string : String, currentIndex : Int,\
    \ openingSquareBrackets : MutableSet[Char], closingSquareBrackets : MutableSet[Char],\
    \ nestedBracketCount : Int) : Boolean = {\n            if(currentIndex >= string.length())\
    \ {\n                return nestedBracketCount == 0\n            }\n         \
    \   \n            if(openingSquareBrackets.contains(string)) {\n             \
    \   openingSquareBrackets.add(string(_, currentIndex))\n                closingSquareBrackets.add(string(_,\
    \ currentIndex))\n                return findSquareBrackets(string, currentIndex\
    \ + 1, openingSquareBrackets, closingSquareBrackets, nestedBracketCount + 1)\n\
    \            }\n            \n            if(closingSquareBrackets.contains(string))\
    \ {\n                openingSquareBrackets.add(string(_, currentIndex))\n    \
    \            closingSquareBrackets.remove(string(_, currentIndex))\n         \
    \       return findSquareBrackets(string, currentIndex + 1, openingSquareBrackets,\
    \ closingSquareBrackets, nestedBracketCount + 1)\n            }\n            \n\
    \            val lastIndex = currentIndex - 1\n            if(lastIndex >= 0 &&\
    \ string(_, lastIndex) == '[') {\n                openingSquareBrackets.add(string(_,\
    \ currentIndex))\n                return findSquareBrackets(string, currentIndex\
    \ + 1, openingSquareBrackets, closingSquareBrackets, nestedBracketCount + 1)\n\
    \            }\n            \n            val lastChar = string(_, lastIndex)\n\
    \            if(lastChar != ']' && lastChar != '[') {\n                return\
    \ false\n            }\n            \n            closingSquareBrackets.add(string(_,\
    \ currentIndex))\n            return findSquareBrackets(string, currentIndex +\
    \ 1, openingSquareBrackets, closingSquareBrackets, nestedBracketCount + 1)\n \
    \       }\n        \n        val subString = string.substring(1, string.length()\
    \ - 1)\n        return findSquareBrackets(subString, 0, 0, openingSquareBrackets,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx3hv3g2a.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mopeningSquareBrackets\e\
    [0m = MutableSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: MutableSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpx3hv3g2a.scala:21:36 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mclosingSquareBrackets\e[0m = MutableSet[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: MutableSet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx3hv3g2a.scala:23:92\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mdef\e[0m \e\
    [36mfindSquareBrackets\e[0m(\e[36mstring\e[0m : \e[35mString\e[0m, \e[36mcurrentIndex\e\
    [0m : \e[35mInt\e[0m, \e[36mopeningSquareBrackets\e[0m : \e[35mMutableSet\e[0m[\e\
    [35mChar\e[0m], \e[36mclosingSquareBrackets\e[0m : \e[35mMutableSet\e[0m[\e[35mChar\e\
    [0m], \e[36mnestedBracketCount\e[0m : \e[35mInt\e[0m) : \e[35mBoolean\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                      Not found: type MutableSet\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx3hv3g2a.scala:23:134 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mdef\e[0m \e[36mfindSquareBrackets\e[0m(\e\
    [36mstring\e[0m : \e[35mString\e[0m, \e[36mcurrentIndex\e[0m : \e[35mInt\e[0m,\
    \ \e[36mopeningSquareBrackets\e[0m : \e[35mMutableSet\e[0m[\e[35mChar\e[0m], \e\
    [36mclosingSquareBrackets\e[0m : \e[35mMutableSet\e[0m[\e[35mChar\e[0m], \e[36mnestedBracketCount\e\
    [0m : \e[35mInt\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1660029379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        string.contains(\"\
    [[]\") && string.contains(\"]]]]]]]\") && string.contains(\"[[[[[\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptcgeidfp.scala:23)\n\tat Problem.main(tmptcgeidfp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stringLength\
    \ = string.length\n\n        // Loop through each index to check if brackets are\
    \ nested\n        val indexList = List(0)\n        for (i <- 0 until stringLength)\
    \ {\n            if (string(i) == '[') {\n                // Add the index to\
    \ the list\n                indexList += i\n            }\n        }\n\n     \
    \   // If the brackets are nested then return true\n        if (indexList.size\
    \ == stringLength) {\n            return true\n        }\n        else {\n   \
    \         return false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2yg0e713.scala:27:26 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                indexList += i\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of List[Int] - did you mean indexList.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracket_count\
    \ : Int = string.count(\"[]\")\n        val array_count : Int = string.count(\"\
    [\")\n        if (array_count == 1 && bracket_count == 0) true\n        if (array_count\
    \ == 0 && bracket_count > 0) false\n        if (array_count != 0 && bracket_count\
    \ == 0) false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsrh6d_3s.scala:20:47\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbracket_count\e\
    [0m : \e[35mInt\e[0m = string.count(\e[31m\"[]\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                            Found:    (\e[32m\"[]\"\e[0m : String)\n\
    \e[31m   |\e[0m                                               Required: Char =>\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsrh6d_3s.scala:21:45\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36marray_count\e\
    [0m : \e[35mInt\e[0m = string.count(\e[31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                            ^^^\e[0m\n\e[31m   |\e[0m       \
    \                                      Found:    (\e[32m\"[\"\e[0m : String)\n\
    \e[31m   |\e[0m                                             Required: Char =>\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsrh6d_3s.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (array_count\
    \ != \e[31m0\e[0m && bracket_count == \e[31m0\e[0m) \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpsrh6d_3s.scala:22:52\
    \ ----------------\e[0m\e[0m\n\e[33m22 |\e[0m        \e[33mif\e[0m (array_count\
    \ == \e[31m1\e[0m && bracket_count == \e[31m0\e[0m) \e[31mtrue\e[0m\n\e[33m\e\
    [33m   |\e[0m                                                    ^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ avail"
  stdout: ''
  timestamp: 1660029383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var inBrackets\
    \ : Boolean = false\n        var nesting = 0\n\n        // Use a while loop to\
    \ find brackets until there are no more\n        while(!inBrackets && nesting\
    \ < string.length){\n            // If the current character is not a bracket,\
    \ increment nesting\n            if(string.charAt(nesting) !=\"[\"){\n       \
    \         nesting += 1\n            }\n            // If the current character\
    \ is a bracket, decrement nesting\n            else if(string.charAt(nesting)\
    \ == \"[\"){\n                nesting -= 1\n            }\n            // If the\
    \ current character is a bracket, increment nesting\n            else if(string.charAt(nesting)\
    \ == \"]\"){\n                nesting += 1\n            }\n        }\n\n     \
    \   // If the current nesting count equals the length of the string, then there\
    \ are\n        // no nested brackets\n        if(nesting == string.length){\n\
    \            return true\n        }\n        else{\n            return false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfas8dxds.scala:26:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(string.charAt(nesting) !=\e\
    [31m\"[\"\e[0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpfas8dxds.scala:30:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(string.charAt(nesting)\
    \ == \e[31m\"[\"\e[0m){\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpfas8dxds.scala:34:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(string.charAt(nesting)\
    \ == \e[31m\"]\"\e[0m){\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660029383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracketedRegex\
    \ =\n            new scala.util.matching.Regex(\"\"\"\\[[^\\[\\]]*\\]\"\"\")\n\
    \        bracketedRegex.findAllIn(string).size > 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpajs8sbxn.scala:26)\n\tat Problem.main(tmpajs8sbxn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n      val brackets\
    \ = \"[{([])]\".r\n      val nestsBrackets = \"[]}]\".r\n      val nested = brackets.find(_\
    \ == string) match {\n        case Some(openBracket) => {\n          nestsBrackets.find(_\
    \ == string) match {\n            case Some(closeBracket) => true\n          \
    \  case None => false\n          }\n        }\n        case None => false\n  \
    \    }\n      nested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmiaokg3x.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      \e[33mval\e[0m \e[36mnested\e[0m = brackets.find(_\
    \ == string) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value find is not a member of scala.util.matching.Regex\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmiaokg3x.scala:24:24 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m          nestsBrackets.find(_ == string) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \          value find is not a member of scala.util.matching.Regex\n2 errors found\n"
  stdout: ''
  timestamp: 1660029384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        def getNestingLevels(str:\
    \ String) : List[Int] = {\n            def countOpenBrackets(str: String) : Int\
    \ = {\n                val pattern = \"\"\"\\[\"\"\".r\n                val list:\
    \ List[String] = str.split(pattern).toList\n                val count: List[Int]\
    \ = 0 until list.size\n                list.zip(count).filter(_._2 > 0).map(_._1).sum\n\
    \            }\n            if (str.length == 0) 0\n            else getNestingLevels(str.substring(1))\
    \ + countOpenBrackets(str)\n        }\n        def getNestingLevels2(str: String)\
    \ : List[Int] = {\n            val list: List[String] = str.split(\"\"\"\\[\"\"\
    \").toList\n            val count: List[Int] = 0 until list.size\n           \
    \ list.zip(count).filter(_._2 > 0).map(_._1).sum\n        }\n        val nestLevels\
    \ = getNestingLevels2(string)\n        if (nestLevels < 2) true\n        else\
    \ {\n            def validNestingLevels(n: Int, str: String): Boolean = {\n  \
    \              val chars: List[String] = str.substring(n).split(\"\"\"[\"\"\"\
    ).toList\n                chars.zipWithIndex.foldLeft(true)((acc, _) => acc &&\
    \ getNestingLevels(str.substring(chars(_._2).length + 1)) == n + 1)\n        \
    \    }\n            val stringToTest = string\n            val openBracket = stringToTest.substring(0,\
    \ stringToTest.indexOf(\"[\"))\n            val closeBracket = stringToTest.substring(stringToTest.indexOf(\"\
    ]\"))\n            val validNestingLevels2 = validNestingLevels(nestLevels, stringToTest)\n\
    \            if (openBracket == closeBracket) {\n                validNestingLevels2\
    \ || validNestingLevels(nestLevels2 - 1, stringToTest)\n            } else {\n\
    \                validNestingLevels2 || validNestingLevels(nestLevels - 1, stringToTest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprkd91t4k.scala:23:51\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m\
    \ \e[36mlist\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = str.split(pattern).toList\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (pattern : scala.util.matching.Regex)\n\
    \e[31m   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprkd91t4k.scala:24:39 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m: \e[35mList\e\
    [0m[\e[35mInt\e[0m] = \e[31m0\e[0m until list.size\n\e[31m\e[31m   |\e[0m    \
    \                                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                     Found:    Range\n\e[31m   |\e[0m       \
    \                                Required: List[Int]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmprkd91t4k.scala:25:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                list.zip(count).filter(_._2 > \e[31m0\e\
    [0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m                                    \
    \                          ^\e[0m\n\e[31m   |\e[0m                No implicit\
    \ Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                where:\
    \    B is a type variable with constraint >: String\n\e[31m   |\e[0m         \
    \       .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprkd91t4k.scala:27:33\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (str.length\
    \ == \e[31m0\e[0m) \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \          ^\e[0m\n\e[31m   |\e[0m                                 Found:    (\e\
    [31m0\e[0m : Int)\n\e[31m   |\e[0m                                 Required: List[Int]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprkd91t4k.scala:28:52\
    \ -----------"
  stdout: ''
  timestamp: 1660029384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val bracket_index\
    \ = string.indexOf(\"[\")\n        val squareBracketIndex = string.indexOf(\"\
    [[]\")\n        val nestedBrackets = Seq[Int]()\n        var bracket_cnt = 0\n\
    \        var squareBracketCnt = 1\n        var found = false\n        for (bracket_cnt\
    \ <- 0 until bracket_index until (bracket_index + bracket_index)) {\n        \
    \    if (string.charAt(bracket_index) == \"[\" && string.charAt(bracket_index\
    \ + 1) == \"[\") {\n                nestedBrackets += bracket_index\n        \
    \        bracket_cnt += 1\n            }\n            if (string.charAt(bracket_index)\
    \ == \"[\" && string.charAt(bracket_index + 1) == \"]\") {\n                if\
    \ (nestedBrackets.isEmpty || nestedBrackets.last() != squareBracketIndex || !found)\
    \ {\n                    return false\n                }\n                bracket_cnt\
    \ -= 1\n                found = false\n                squareBracketCnt += 1\n\
    \            }\n            if (string.charAt(bracket_index) == \"]\" && string.charAt(bracket_index\
    \ + 1) == \"[\") {\n                nestedBrackets += bracket_index\n        \
    \        squareBracketCnt += 1\n            }\n            if (string.charAt(bracket_index)\
    \ == \"]\" && string.charAt(bracket_index + 1) == \"]\") {\n                if\
    \ (nestedBrackets.isEmpty || nestedBrackets.last() != squareBracketIndex || !found)\
    \ {\n                    return false\n                }\n                bracket_cnt\
    \ -= 1\n                found = false\n            }\n            if (string.charAt(bracket_index)\
    \ == \"[\" && string.charAt(bracket_index + 1) == \"]\") {\n                if\
    \ (nestedBrackets.isEmpty || nestedBrackets.last() != squareBracketIndex || !found)\
    \ {\n                    return false\n                }\n                bracket_cnt\
    \ -= 1\n                found = true\n                squareBracketCnt -= 1\n\
    \            }\n        }\n        val validSubSeq = string.take(bracket_index\
    \ - nestedBrackets.last + 1)\n        for (i <- 0 until nestedBrackets.length)\
    \ {\n            if (validSubSeq.take(i).isEmpty || validSubSeq.take(i).last()\
    \ != nestedBrackets(i) || !found) {\n                return false\n          \
    \  }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjvo4k33n.scala:26:50 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m (bracket_cnt <- \e[31m0\e[0m until\
    \ bracket_index until (bracket_index + bracket_index)) {\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value until is not a member of Range - did you mean Range.unzip?\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjvo4k33n.scala:61:67 -----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m            \e[33mif\e[0m (validSubSeq.take(i).isEmpty\
    \ || validSubSeq.take(i).last() != nestedBrackets(i) || !found) {\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 \e[33mmethod\e[0m \e[35mlast\e[0m in \e[33mclass\e\
    [0m \e[35mStringOps\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val openingBrackets\
    \ = string.count(\"[\")\n        val closingBrackets = string.count(\"]\")\n\n\
    \        val squareBrackets = openingBrackets - closingBrackets\n\n        if\
    \ (openingBrackets == 0 || closingBrackets == 0) {\n            return false\n\
    \        } else {\n            val openingIndex = string.indexOf(\"[\")\n    \
    \        val closingIndex = string.indexOf(\"]\", openingIndex + 1)\n\n      \
    \      if (closingIndex < openingIndex) {\n                return false\n    \
    \        } else {\n                val subsequence = string.substring(openingIndex\
    \ + 1, closingIndex)\n                if (squareBrackets != subsequence.count(\"\
    [\")) {\n                    return false\n                } else {\n        \
    \            return true\n                }\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbx16r7or.scala:20:43\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = string.count(\e[31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                         ^^^\e[0m\n\e[31m   |\e[0m                          \
    \                 Found:    (\e[32m\"[\"\e[0m : String)\n\e[31m   |\e[0m     \
    \                                      Required: Char => Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbx16r7or.scala:21:43 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = string.count(\e\
    [31m\"]\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \    ^^^\e[0m\n\e[31m   |\e[0m                                           Found:\
    \    (\e[32m\"]\"\e[0m : String)\n\e[31m   |\e[0m                            \
    \               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbx16r7or.scala:35:56 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m                \e[33mif\e[0m (squareBrackets != subsequence.count(\e\
    [31m\"[\"\e[0m)) {\n\e[31m\e[31m   |\e[0m                                    \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \                Found:    (\e[32m\"[\"\e[0m : String)\n\e[31m   |\e[0m      \
    \                                         Required: Char => Boolean\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brack\
    \ = string.indexOf(\"[\")\n        if (brack == -1) false\n        else {\n  \
    \          val nest = string.indexOf(\"]\", brack+1)\n            if (nest ==\
    \ -1) false\n            else string.substring(nest, brack+1).contains(\"[]\"\
    )\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 2, end 1, length 4\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.isNested(tmpe197an75.scala:25)\n\tat Problem$.main(tmpe197an75.scala:29)\n\
    \tat Problem.main(tmpe197an75.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029383
