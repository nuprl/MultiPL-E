language: scala
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val numbers_set = numbers.toSet\n        if\
    \ (numbers_set.nonEmpty) {\n            // The product of all the numbers in the\
    \ numbers_set.\n            val product = numbers_set.product * numbers_set.size.toLong\n\
    \            // The sum of the numbers in the numbers_set.\n            val sum\
    \ = numbers_set.sum\n            // The sum and product of all the numbers in\
    \ the numbers list multiplied by their absolute values.\n            val sumAndProduct\
    \ = numbers map { n => n * math.abs(n) }\n            // Return the sum and product\
    \ tuple.\n            (sum, product)\n        } else {\n            // If there\
    \ are no numbers in numbers_set, the sum is 0 and product is 1.\n            (0l,\
    \ 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1d0btw0n.scala:28)\n\tat Problem.main(tmp1d0btw0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n          (0 , 0)\n\
    \        } else {\n          val product = numbers(0)\n          val sum = 0\n\
    \          numbers.foreach {\n              a =>\n              sum += a\n   \
    \           product *= a\n          }\n          (sum, product)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2yyav5v7.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m              sum += a\n\e[31m\e[31m   |\e[0m       \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m              value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2yyav5v7.scala:19:22\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m              product *=\
    \ a\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \        value *= is not a member of Long - did you mean product.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) Tuple2(0l, 1l)\n    \
    \    else numbers.foldLeft((0l, 1l)) { (acc, num) => (acc + (num.toLong), acc\
    \ * (num.toLong)) }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprvqm5hbv.scala:12:61 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m numbers.foldLeft((\e[31m0l\e\
    [0m, \e[31m1l\e[0m)) { (acc, num) => (acc + (num.toLong), acc * (num.toLong))\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \      ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Long, Long), but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprvqm5hbv.scala:12:81 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m numbers.foldLeft((\e[31m0l\e\
    [0m, \e[31m1l\e[0m)) { (acc, num) => (acc + (num.toLong), acc * (num.toLong))\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member\
    \ of (Long, Long), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum: Long = 0\n        var product: Long\
    \ = 1\n        numbers.foreach(n => {\n            sum+=n\n            product*=n\n\
    \        })\n        return Tuple2(sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val tsum = numbers.foldLeft(0L) { (sum, i)\
    \ => sum + i }\n        val tprod = numbers.foldLeft(1L) { (prod, i) => prod *\
    \ i }\n        (tsum, tprod)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def loop(nums : List[Long], acc : Tuple2[Long,\
    \ Long]) : Tuple2[Long, Long] = {\n            if (nums.isEmpty) acc\n       \
    \     else {\n                loop(nums.tail, acc._1 +  nums.head, acc._2 + nums.last)\n\
    \            }\n        }\n        loop(numbers, (0, 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3crw8658.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                loop(nums.tail,\
    \ acc._1 +  nums.head, acc._2 + nums.last)\n\e[31m\e[31m   |\e[0m            \
    \                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Found:    Long\n\e[31m   |\e[0m                            \
    \    Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp3crw8658.scala:14:60\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \         loop(nums.tail, acc._1 +  nums.head, acc._2 + nums.last)\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtoo many arguments for \e[33mmethod\e[0m \e[35mloop\e[0m:\
    \ (nums: List[Long], acc: (Long, Long)): (Long, Long)\n2 errors found\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        var product = 1\n   \
    \     for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtv_xo9l.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtv_xo9l.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach{number => sum += number; product *= number}\n        (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwvi77y42.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach{\e[36mnumber\e[0m => sum += number;\
    \ product *= number}\n\e[31m\e[31m   |\e[0m                                  ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwvi77y42.scala:13:57\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach{\e\
    [36mnumber\e[0m => sum += number; product *= number}\n\e[31m\e[31m   |\e[0m  \
    \                                               ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value *= is not a member of Int - did you mean Int.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val product = 1\n        val sum = 0\n   \
    \     numbers.foldLeft(Tuple2(sum, product)) {\n            case (sum, number)\
    \ => sum + number -> product * number\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd9_m9jyr.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m (sum, number) => sum + number\
    \ -> product * number\n\e[31m\e[31m   |\e[0m                                 \
    \ ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Int, Int), but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach(x => sum = sum + x)\n        sum = sum.toLong\n        numbers.foreach(x\
    \ => product = product * x)\n        product = product.toLong\n        return\
    \ Tuple2(sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7kq_qtx3.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e\
    [0m => sum = sum + x)\n\e[31m\e[31m   |\e[0m                                 \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:    Long\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7kq_qtx3.scala:14:18 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        sum = sum.toLong\n\e[31m\e[31m   |\e[0m     \
    \         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:    Long\n\e[31m\
    \   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7kq_qtx3.scala:15:39 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        numbers.foreach(\e[36mx\e[0m => product = product\
    \ * x)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    Long\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7kq_qtx3.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        product = product.toLong\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val numberList = numbers.toList\n        val\
    \ sum = numberList(0)\n        val product = 1\n        numberList.tail.foreach\
    \ {\n            x => sum *= x\n            product *= x\n        }\n        (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptvhu3otw.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[36mx\e[0m => sum *= x\n\e[31m\e[31m  \
    \ |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m                 value *=\
    \ is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmptvhu3otw.scala:16:20 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            product *= x\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n\n \
    \       // For each number in numbers list\n        numbers.foreach {number =>\n\
    \            // add number to sum\n            sum += number\n\n            //\
    \ multiply each number in numbers list\n            product *= number\n      \
    \  }\n\n        // Return tuple consisting of a sum and a product of all the numbers\
    \ in a list.\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsitn1yo5.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsitn1yo5.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum: Long = 0\n        var prod: Long\
    \ = 1\n        numbers.foreach(number => {\n            sum += number\n      \
    \      prod *= number\n        })\n        (sum, prod)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0z21nloc.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var result = 1\n        var product = 1\n\
    \        for (i<- numbers) {\n            result *= i\n            product *=\
    \ i\n        }\n        return result -> product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzzg6uhqo.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            result *= i\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzzg6uhqo.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= i\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpzzg6uhqo.scala:17:15 --------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mreturn\e[0m result -> product\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (Int, Int)\n\e[31m   |\e[0m               Required: (Long, Long)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            (0L, 1L)\n\
    \        }\n        else {\n            var product = 1L\n            var sum\
    \ = 0L\n            numbers.foreach { number =>\n                product = product\
    \ * number\n                sum = sum + number\n            }\n            (sum,\
    \ product)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0L\n        var product :\
    \ Long = 1L\n        numbers.foreach(n => {\n            sum += n\n          \
    \  product *= n\n        })\n        Tuple2(sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result = new mutable.MutableTuple[Long,\
    \ Long]()\n        for (i<- 0 until numbers.size) {\n            val product =\
    \ numbers.last * i\n            val sum    = numbers.sum - i\n            result._1.put(sum,\
    \ product)\n            result._2.put(i, sum * product)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdy_6jgw4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableTuple[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     for((i : Long) <- numbers){\n            sum = sum + i\n            product\
    \ = product * i\n        }\n        return (sum.toLong, product.toLong)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphz3j5byi.scala:14:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum = sum + i\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphz3j5byi.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            product = product * i\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) (0l, 1l)\n        else\
    \ {\n            var sum = 0L\n            var product = 1L\n            var last:\
    \ Long = 0L\n            numbers.foreach { x =>\n                sum = sum + x\n\
    \                product = product * x\n            }\n            (sum, product)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            (0l, 1l)\n\
    \        }\n        else {\n            val product = 1l\n            var sum\
    \ = 0l\n            numbers foreach (x => sum += x)\n            numbers foreach\
    \ (x => product *= x)\n            (sum, product)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkxn20r19.scala:18:42 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            numbers foreach (\e[36mx\e[0m => product\
    \ *= x)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m             value *= is not a member of Long - did you mean product.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def recursiveSumProduct(head : Long, result\
    \ : Long) : Tuple2[Long, Long] = {\n            if (numbers.length == 1) {\n \
    \               result -> (head)\n            } else {\n                recursiveSumProduct(numbers.head,\
    \ result + (head * numbers.head))\n            }\n        }\n        recursiveSumProduct(numbers.head,\
    \ 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.sumProduct(tmpsax97x42.scala:18)\n\
    \tat Problem$.main(tmpsax97x42.scala:21)\n\tat Problem.main(tmpsax97x42.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        require(numbers.nonEmpty)\n        val sum\
    \ = numbers.sum\n        val product = numbers.map(_.toLong).reduce(_ * _)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed\n\tat scala.Predef$.require(Predef.scala:324)\n\
    \tat Problem$.sumProduct(tmp3ngx9u6i.scala:11)\n\tat Problem$.main(tmp3ngx9u6i.scala:17)\n\
    \tat Problem.main(tmp3ngx9u6i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach(i => { sum += i; product *= i; })\n        return (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3uzk7jac.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mi\e[0m => { sum += i; product\
    \ *= i; })\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3uzk7jac.scala:13:49\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e\
    [36mi\e[0m => { sum += i; product *= i; })\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \   value *= is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result: mutable.ListBuffer[(Long, Long)]\
    \ = mutable.ListBuffer()\n        numbers.foreach(number => result += ((number,\
    \ number * number)))\n        result.head._1 * result.head._2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_lzg6s3.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: mutable.ListBuffer[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m)] = mutable.ListBuffer()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_lzg6s3.scala:11:55\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: mutable.ListBuffer[(\e[35mLong\e[0m, \e[35mLong\e[0m)] = mutable.ListBuffer()\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       for {\n            number <- numbers\n            sum += number\n    \
    \        product *= number\n        } yield (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkcueehqr.scala:16:0 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            product *= number\n\e[31m\e[31m   |\e[0m^^^^^^^\e\
    [0m\n\e[31m   |\e[0m'<-' expected, but 'end of statement' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpkcueehqr.scala:17:8 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        } \e[33myield\e[0m (sum, product)\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '<-' expected, but '}' found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // If there is nothing to sum up\n       \
    \ if (numbers.isEmpty) {\n            return (0l, 1l)\n        }\n\n        //\
    \ A mutable array to store intermediate result\n        val sumArray = mutable.Array[Long](0l)\n\
    \        val productArray = mutable.Array[Long](1l)\n\n        // Iterate over\
    \ all numbers, adding them to both sumArray and productArray\n        numbers.foreach{\
    \ number =>\n            sumArray += number\n            productArray *= number\n\
    \        }\n\n        // Return result as a tuple\n        return (sumArray.toList,\
    \ productArray.toList)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdjt15d48.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msumArray\e[0m = mutable.Array[\e\
    [35mLong\e[0m](\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdjt15d48.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mproductArray\e[0m = mutable.Array[\e\
    [35mLong\e[0m](\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.reduceLeft(_ + _)\n    \
    \    val product = numbers.reduceLeft(_ * _)\n        (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.sumProduct(tmpa014qv4t.scala:11)\n\
    \tat Problem$.main(tmpa014qv4t.scala:16)\n\tat Problem.main(tmpa014qv4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val total = 0\n        val product = 1\n \
    \       numbers foreach { number =>\n            total = total + number\n    \
    \        product = product * number\n        }\n        (total, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgz1xtql2.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            total = total + number\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgz1xtql2.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product = product\
    \ * number\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val numbersInt = numbers.map(x => x.toInt)\n\
    \        val product = numbers.reduceLeft(_ * _)\n        val sum = numbersInt.reduce(_\
    \ + _)\n        Tuple2(sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.sumProduct(tmpj22fa9fa.scala:12)\n\
    \tat Problem$.main(tmpj22fa9fa.scala:17)\n\tat Problem.main(tmpj22fa9fa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft(0l, 1l) {\n            case\
    \ (sum, next) => sum + next\n            case (sum, 0l) => sum\n            case\
    \ (1l, product) => product\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcjsj08gd.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m (sum, next) => sum + next\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (Long, Long), but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpcjsj08gd.scala:14:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m (\e[31m1l\e[0m, product)\
    \ => product\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m\
    \  Values of types Long and (Long, Long) cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjsj08gd.scala:14:34 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m (\e[31m1l\e[0m, product)\
    \ => product\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (product : Long)\n\
    \e[31m   |\e[0m                                  Required: (Long, Long)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Write your code here.\n        val product\
    \ = 1l\n        val sum = 0l\n        numbers.foreach(number => sum = sum + number)\n\
    \        numbers.foreach(number => product = product * number)\n        Tuple2(sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpolyeypp0.scala:14:38 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum = sum\
    \ + number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Reassignment to val sum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpolyeypp0.scala:15:42 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ = product * number)\n\e[31m\e[31m   |\e[0m                                 \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Reassignment to val product\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) { (x, y) =>\n \
    \           x + (y * numbers.last) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4gtea9jp.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            x + (y * numbers.last) }\n\e[31m\e[31m  \
    \ |\e[0m            ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Long,\
    \ Long), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        numbers.foreach(x => { sum += x; product = product * x})\n\
    \        return (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val zero = 0L\n        val one = 1L\n    \
    \    numbers.foldLeft(zero, one)((x, y) => x * y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8xk9woay.scala:13:48 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foldLeft(zero, one)((\e[36mx\e[0m, \e\
    [36my\e[0m) => x * y)\n\e[31m\e[31m   |\e[0m                                 \
    \             ^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member of (Long, Long),\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val product = 1L\n        val sum = numbers.reduce(_\
    \ + _) + product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumProduct(tmpb2n9clex.scala:12)\n\tat Problem$.main(tmpb2n9clex.scala:16)\n\
    \tat Problem.main(tmpb2n9clex.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val totalSum = numbers.foldLeft(0l) { (result,\
    \ num) =>\n            result += num\n        }\n        val totalProduct = numbers.foldLeft(1l)\
    \ { (result, num) =>\n            result * num\n        }\n        (totalSum,\
    \ totalProduct)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwsl3v7uc.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result += num\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      val n = numbers.length\n      if(n == 0) (0,\
    \ 1) else { \n        val total = numbers.foldLeft(0L){ (sum, i) => (sum + i)\
    \ }\n        val product = numbers.foldLeft(1L){ (product, i) => (product * i)\
    \ }\n        (total, product) \n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = numbers.reduce((n1, n2) => n1 +\
    \ n2)\n        var product = numbers.reduce((n1, n2) => n1 * n2)\n        (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumProduct(tmpi36j24is.scala:11)\n\tat Problem$.main(tmpi36j24is.scala:16)\n\
    \tat Problem.main(tmpi36j24is.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) {\n           \
    \ case ((sum, product), number) => sum + number -> product\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpurf92qhp.scala:18)\n\tat Problem.main(tmpurf92qhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) (0, 1l) else numbers.foldLeft((0l,\
    \ 1l)) {\n            case ((sum, product), number) => new Tuple2(sum + number,\
    \ product * number)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if(numbers.isEmpty) {\n            return\
    \ (0l, 1l)\n        }\n        val pairs = numbers.map(n => (n, 1L)).reduce((x,\
    \ y) => x * y)\n        val sum = pairs._1\n        val product = pairs._2\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz8cfqawy.scala:14:65 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = numbers.map(\e\
    [36mn\e[0m => (n, \e[31m1L\e[0m)).reduce((\e[36mx\e[0m, \e[36my\e[0m) => x * y)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member of (Long, Long), but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        for (x <- numbers) {\n            result += x\n        }\n        result.toList\
    \ match {\n            case Nil => (0l, 1l)\n            case l => (l.sum, l.product)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwe6e9tl.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = (0.to(numbers.length).map(_ => numbers.sum)).toSet\n\
    \        val product = (0.to(numbers.length).map(_ => numbers.product)).toSet\n\
    \        (sum reduce ( (a,b) => a+b), product reduce ( (a,b) => a*b) )\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.reduceLeft(_ + _)\n    \
    \    val product = numbers.reduceLeft(_ * _)\n        (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.sumProduct(tmpa014qv4t.scala:11)\n\
    \tat Problem$.main(tmpa014qv4t.scala:16)\n\tat Problem.main(tmpa014qv4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       if (numbers.isEmpty) Tuple2(sum, product)\n        else {\n          \
    \  numbers.foreach { x =>\n                sum += x\n                product *=\
    \ x\n            }\n            Tuple2(sum, product)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqz_i3whc.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqz_i3whc.scala:17:24\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                product *=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \          value *= is not a member of Long - did you mean product.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val total = numbers.reduce((a, b) => a + b)\n\
    \        val prod = numbers.reduce((a, b) => a * b)\n        (total, prod)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumProduct(tmp93f082lb.scala:11)\n\tat Problem$.main(tmp93f082lb.scala:16)\n\
    \tat Problem.main(tmp93f082lb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val (sum, product) = (0l, 1l)\n        for\
    \ (number <- numbers) {\n            sum += number\n            product *= number\n\
    \        }\n        (sum.toLong, product.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1o4rzzjh.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1o4rzzjh.scala:14:20\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum +=x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // TODO: replace with foldLeft() call\n  \
    \      // TODO: replace with foldRight() call\n        numbers.foldRight((0l,\
    \ 1l)) {\n            (sum, number) => {\n                // TODO: replace with\
    \ if() statement\n                val (sum, product) = sum.updated(sum._1 + number,\
    \ sum._2 * number)\n                Tuple2(sum, product)\n            }\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp4ifekiz.scala:16:21 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m (sum, product) = sum.updated(sum._1\
    \ + number, sum._2 * number)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp4ifekiz.scala:16:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e\
    [0m (sum, product) = sum.updated(sum._1 + number, sum._2 * number)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product = 1l\n        var sum = 0l\n \
    \       for (number <- numbers) {\n            sum = (sum + number).toLong\n \
    \           product = (product * number).toLong\n        }\n        sum = (sum).toLong\n\
    \        product = (product).toLong\n        return (sum, product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.reduce((x, y) => x + y)\n\
    \        val product = numbers.reduce((x, y) => x * y)\n        (sum.toLong, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumProduct(tmpppis0gua.scala:11)\n\tat Problem$.main(tmpppis0gua.scala:16)\n\
    \tat Problem.main(tmpppis0gua.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { n => \n            sum = sum + n\n            product\
    \ = product * n\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpihkao_rz.scala:14:16 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum = sum + n\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val sum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpihkao_rz.scala:15:20 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            product = product * n\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val product\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Solution 1 by Recursion\n        // Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr03g5erz.scala:10:64\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m    \e[33mdef\e[0m \e[36msumProduct\e\
    [0m(\e[36mnumbers\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mTuple2\e[0m[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                   \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                          Found:    Unit\n\e[31m   |\e[0m   \
    \                                               Required: (Long, Long)\n\e[31m11\
    \ |\e[0m        \e[34m// Solution 1 by Recursion\e[0m\n\e[31m12 |\e[0m       \
    \ \e[34m// Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base Case: Base\
    \ Cas"
  stdout: ''
  timestamp: 1660010149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val list = numbers.toList\n        val sum\
    \ = 0L\n        val product = 1L\n        for(i <- 0 until list.size){\n     \
    \       sum += list(i)\n        }\n        for(i <- 0 until list.size){\n    \
    \        product *= list(i)\n        }\n        new Tuple2[Long, Long](sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoikhh4np.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += list(i)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoikhh4np.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            product *= list(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft(0l, 1l) { (sum, number) =>\
    \ sum * number + sum }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jsvxj7q.scala:11:56 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        numbers.foldLeft(\e[31m0l\e[0m, \e[31m1l\e[0m)\
    \ { (\e[36msum\e[0m, \e[36mnumber\e[0m) => sum * number + sum }\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue * is not a member of (Long, Long), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0, 1l)) { (sum, num) =>\
    \ (sum + num, num) }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpboqxmh1d.scala:11:55 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        numbers.foldLeft((\e[31m0\e[0m, \e[31m1l\e[0m))\
    \ { (\e[36msum\e[0m, \e[36mnum\e[0m) => (sum + num, num) }\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (Int, Long), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010152
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum : List[Long] = numbers.toList\n  \
    \      val product : List[Long] = numbers.map (_*1).toList\n        Tuple2(sum.sum,\
    \ product.sum)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqsj6cl.scala:16)\n\tat Problem.main(tmpowqsj6cl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result = numbers.reduce((_+_), 0l).product\n\
    \        result match {\n            case 0 => (0l, 1l)\n            case 1 =>\
    \ (numbers.toList.sum, 1l)\n            case _ => (result, numbers.toList.product)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpkaus_vbw.scala:11:37 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = numbers.reduce((_+_),\
    \ \e[31m0l\e[0m).product\n\e[31m\e[31m   |\e[0m                              \
    \       ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   (_$1, _$2) => _$1 + _$2.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpkaus_vbw.scala:11:39 -----------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = numbers.reduce((_+_), \e[31m0l\e\
    [0m).product\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   (_$1, _$2) => _$1 + _$2.\n2 errors found\n"
  stdout: ''
  timestamp: 1660010149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product = numbers.head\n        var sum\
    \ = 0\n        for (i <- numbers.tail) {\n            sum += i\n            product\
    \ *= i\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdfj31e10.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     for (n <- numbers)\n            sum += n\n            product *= n\n   \
    \     (sum.toLong, product.toLong)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbwg_yqzk.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbwg_yqzk.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = new mutable.HashSet[Long]()\n  \
    \      val product = 1L\n        numbers.foreach(number => sum += number)\n  \
    \      sum = sum.toList\n        numbers.foreach(number => product *= number)\n\
    \        sum.toList.zip(product).map { case (sum, product) => (sum, product) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_lqimpj.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5_lqimpj.scala:14:12 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        sum = sum.toList\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val sum\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5_lqimpj.scala:15:42\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        numbers.foreach(\e\
    [36mnumber\e[0m => product *= number)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value *= is not\
    \ a member of Long - did you mean product.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010152
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val numberList = numbers.toList\n        if\
    \ (numberList.isEmpty) \n            (0l, 1l)\n        else {\n            val\
    \ sum = numberList.foldLeft(0l) { (sum, i) => (sum + i); } // sum is initialized\
    \ to 0\n            val product = numberList.foldLeft(1l) { (product, i) => (product\
    \ * i); } // product is initialized to 1\n            (sum, product)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        numbers.foreach {\n            x => sum += x\n           \
    \ product *= x\n        }\n        sum.toLong, product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzzwossg0.scala:17:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sum.toLong, product\n\e[31m\e[31m   |\e[0m  \
    \                ^\e[0m\n\e[31m   |\e[0m                  end of statement expected\
    \ but ',' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) (0, 1L)\n        else\
    \ numbers.foldLeft(0L)(_ + _ * numbers.head) match {\n            case 0 => 0L,\
    \ 1L\n            case _ => (0L, numbers(1).toLong * numbers.head)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq0e4nxkx.scala:13:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m \e[31m0\e[0m => \e[31m0L\e\
    [0m, \e[31m1L\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        end of statement expected but ',' found\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach(x => {\n            sum +=x\n            product *= x\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5yxho7zt.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum +=x\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5yxho7zt.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= x\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n\n        numbers.foreach( x => { sum += x ; product *= x; })\n  \
    \      (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.length == 0) (0, 1l)\n       \
    \ else {\n            val product = numbers.head\n            val sum = (numbers.tail).reduceLeft(_\
    \ * _)\n            (sum, product)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgf4zn2wv.scala:20)\n\tat Problem.main(tmpgf4zn2wv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) { (sum, curr) =>\n\
    \            (sum + curr, curr * sum)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvzxugox.scala:12:17 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            (sum + curr, curr * sum)\n\e[31m\e[31m  \
    \ |\e[0m             ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Long,\
    \ Long), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpbvzxugox.scala:12:30 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            (sum + curr, curr * sum)\n\e[31m\e[31m  \
    \ |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((sum : (Long, Long)))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val numbersSum = numbers.foldLeft(0L)((acc,\
    \ x) => acc + x)\n        val numbersProduct = numbers.foldLeft(1L)((acc, x) =>\
    \ acc * x)\n        (numbersSum, numbersProduct)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // We need mutable variables to store the\
    \ sum and product in each iteration\n        var sum = 0L\n        var product\
    \ = 1L\n        // Loop through the given list\n        for (number <- numbers)\
    \ {\n            // Add number to sum\n            sum += number\n           \
    \ // Multiply product with number\n            product *= number\n        }\n\
    \        // Return the sum and product (tuple)\n        Tuple2(sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def total(numbers : List[Long]) : (Long, Long)\
    \ = {\n            val sum = numbers.foldLeft(0l, 1l) { (sum, num) => sum + num\
    \ }\n            val product = numbers.foldLeft(1l, 1l) { (product, num) => product\
    \ * num }\n            (sum, product)\n        }\n\n        total(numbers)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_xve1x_c.scala:12:67 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = numbers.foldLeft(\e\
    [31m0l\e[0m, \e[31m1l\e[0m) { (\e[36msum\e[0m, \e[36mnum\e[0m) => sum + num }\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Long, Long), but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_xve1x_c.scala:13:79 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mproduct\e[0m = numbers.foldLeft(\e\
    [31m1l\e[0m, \e[31m1l\e[0m) { (\e[36mproduct\e[0m, \e[36mnum\e[0m) => product\
    \ * num }\n\e[31m\e[31m   |\e[0m                                             \
    \                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member\
    \ of (Long, Long), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_xve1x_c.scala:14:13 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (sum, product)\n\e[31m\e[31m   |\e[0m   \
    \          ^^^\e[0m\n\e[31m   |\e[0m             Found:    (sum : (Long, Long))\n\
    \e[31m   |\e[0m             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_xve1x_c.scala:14:18 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            (sum, product)"
  stdout: ''
  timestamp: 1660010159
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val ts = numbers.toSeq\n        val tl = ts.size\n\
    \        if (tl == 0) {\n            (0l, 1l)\n        }\n        val sum = (0\
    \ to tl).foldLeft(0l)(_ + _)\n        val prod = (0 to tl).foldLeft(1l)(_ * _)\n\
    \        (sum, prod)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph6l3y06u.scala:21)\n\tat Problem.main(tmph6l3y06u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val s = numbers.getOrElse(0l, 1l)\n      \
    \  val p = 1\n        numbers.map{ n => p *= n}\n        (s, p)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqg9h7li.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = numbers.getOrElse(\e\
    [31m0l\e[0m, \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value getOrElse is not a member of List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqg9h7li.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.map{ \e[36mn\e[0m => p *= n}\n\e[31m\e\
    [31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m            \
    \        value *= is not a member of Int - did you mean p.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     numbers.foreach{ number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp_kmhxfl.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp_kmhxfl.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     for ((i <- numbers) ; sum <- sum + i)\n            product = product * i\n\
    \        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvxxn3ls_.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m ((i <- numbers) ; sum <- sum +\
    \ i)\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m   |\e[0m          \
    \      ')' expected, but '<-' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvxxn3ls_.scala:13:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m\
    \ ((i <- numbers) ; sum <- sum + i)\n\e[31m\e[31m   |\e[0m                   \
    \         ^\e[0m\n\e[31m   |\e[0m                            '<-' expected, but\
    \ ';' found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))( (sum, cur) =>\
    \ sum.productElement(cur) -> (sum + cur) )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyygrdl0y.scala:11:69\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbers.foldLeft((\e\
    [31m0l\e[0m, \e[31m1l\e[0m))( (\e[36msum\e[0m, \e[36mcur\e[0m) => sum.productElement(cur)\
    \ -> (sum + cur) )\n\e[31m\e[31m   |\e[0m                                    \
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                Found:    (cur : Long)\n\e[31m   |\e[0m     \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyygrdl0y.scala:11:82 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        numbers.foldLeft((\e[31m0l\e[0m, \e[31m1l\e[0m))(\
    \ (\e[36msum\e[0m, \e[36mcur\e[0m) => sum.productElement(cur) -> (sum + cur) )\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Long,\
    \ Long), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers match {\n            case Nil => (sum, product)\n            case\
    \ head :: tail => {\n                sum += head\n                product *= tail.head\n\
    \            }\n        }\n        Tuple2(sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp_v04iip.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                sum += head\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp_v04iip.scala:17:24\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                product *=\
    \ tail.head\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result = mutable.Buffer.empty[Tuple2[Long,\
    \ Long]]\n        numbers.foreach { number =>\n            result += {\n     \
    \           val product = 1\n                val sum = 0\n                while\
    \ (number > 0) {\n                    sum = sum + number\n                   \
    \ product = product * number\n                    number -= 1\n              \
    \  }\n                (sum, product)\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            (0l, 1l)\n        } else {\n            result.take(2).unzip._1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpct1j7zdj.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Buffer.empty[\e\
    [35mTuple2\e[0m[\e[35mLong\e[0m, \e[35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m    \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Create a variable and assign 0\n      \
    \  var product = 1l\n        var sum = 0l\n        numbers.foreach { number =>\n\
    \            // Update sum and product variable for each number\n            sum\
    \ += number\n            product *= number\n        }\n        // Return sum and\
    \ product variable\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var prod = 0l\n        var sum = 0l\n    \
    \    numbers.foreach { x => prod *= x; sum += x }\n        return (sum.toLong,\
    \ prod.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu46og1gt.scala:17)\n\tat Problem.main(tmpu46og1gt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product = 1\n        var sum = 0\n\n \
    \       numbers.foreach(n => {\n            sum = sum + n\n            product\
    \ = product * n\n        })\n\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsywxqots.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            sum = sum + n\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsywxqots.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            product = product * n\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = new mutable.HashMap[Long, Long]()\n\
    \        val product = new mutable.HashMap[Long, Long]()\n        numbers.foreach(number\
    \ => if (sum.contains(number)) sum += 1 (number.toLong) else sum.put number 0l)\n\
    \        numbers.foreach(number => if (product.contains(number)) product += 1\
    \ (number.toLong) else product.put number 1l)\n        (sum.get(numbers.head.asInstanceOf[Long]),\
    \ product.get(numbers.head.asInstanceOf[Long]))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaj8w6nym.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaj8w6nym.scala:12:26\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mproduct\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010160
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val product = numbers.foldLeft(1L)(_ * _)\n\
    \        val sum = numbers.foldLeft(0L)(_ + _)\n        (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Initialize sum and product\n        val\
    \ sum = numbers.reduce((x, y) => x + y)\n        val product = numbers.reduce((x,\
    \ y) => x * y)\n        // Return a tuple with sum and product\n        (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumProduct(tmpgx1z0m5b.scala:12)\n\tat Problem$.main(tmpgx1z0m5b.scala:18)\n\
    \tat Problem.main(tmpgx1z0m5b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val list: List[Long] = numbers.toList\n  \
    \      val product = productElement(list)\n        if (product == 0l) (0l, 1l)\
    \ else (product, product * productElement(list))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_5bbb88l.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = productElement(list)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: productElement\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach{ x => sum += x; product *= x }\n        (sum.toLong, product.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnfcnkbqo.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach{ \e[36mx\e[0m => sum += x; product\
    \ *= x }\n\e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnfcnkbqo.scala:13:48 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach{ \e[36mx\e[0m => sum += x; product\
    \ *= x }\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value *= is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        numbers match {\n            case head :: tail =>\n      \
    \          for (n <- tail) {\n                    sum = (sum + n) match {\n  \
    \                      case sum if sum > 0 => sum\n                        case\
    \ _ => 0\n                    }\n                    product = (product * n) match\
    \ {\n                        case product if product > 0 => product\n        \
    \                case _ => 1\n                    }\n                }\n     \
    \       case _ => println(\"You can't sum over an empty list!\")\n        }\n\
    \        return (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo6qgs37g.scala:31)\n\tat Problem.main(tmpo6qgs37g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'You can''t sum over an empty list!

    '
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val total = 0L\n        var product = 1L\n\
    \        for(number <- numbers) {\n            total = total + number\n      \
    \      product = product * number\n        }\n        (total, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxo43t5e7.scala:14:18 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            total = total + number\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val total\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      var sum = numbers.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n      val product = numbers.foldLeft(1l) { (product, element)\
    \ => product * element }\n      (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     for( num <- numbers) {\n            sum = num + sum\n            product\
    \ = product * num\n        }\n        ((sum, product))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3rp93sp_.scala:14:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum = num + sum\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \           Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3rp93sp_.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product = product\
    \ * num\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    Long\n\e[31m   |\e[0m              \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // sum : 0\n        // product : 1\n     \
    \   var sum = 0\n        // productList : List[Long]()\n        var productList\
    \ = new mutable.MutableList[Long]()\n\n        // loop through the list and add\
    \ each number to the sum and product list\n        numbers.foreach {\n       \
    \     number =>\n                sum = sum + number\n            productList.add(number)\n\
    \        }\n\n        // return the sum and product list\n        (sum, productList.product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_hzvfbe6.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mproductList\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_hzvfbe6.scala:20:22\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                sum = sum + number\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) {\n           \
    \ (sum: Long, num: Long) => sum + (num, 1l)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpt113iauz.scala:12:42 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            (\e[36msum\e[0m: \e[35mLong\e[0m, \e[36mnum\e\
    [0m: \e[35mLong\e[0m) => sum + (num, \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments\
    \ ((Long, Long))\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldRight((0l, 1l))((acc, val) =>\
    \ {\n            val sum = acc.get._1 + val\n            val product = acc.get._2\
    \ * val\n            (sum, product)\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_39548lc.scala:11:42 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        numbers.foldRight((\e[31m0l\e[0m, \e[31m1l\e\
    [0m))((\e[36macc\e[0m, \e[33mval\e[0m) => {\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31mval\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_39548lc.scala:12:35 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = acc.get._1\
    \ + \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m                                   ^^^\e\
    [0m\n\e[31m   |\e[0m                                   expression expected but\
    \ \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_39548lc.scala:12:26\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m\
    \ \e[36msum\e[0m = acc.get._1 + \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m        \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                      value get is\
    \ not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_39548lc.scala:15:9\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        })\n\e[31m\e[31m   |\e\
    [0m         ^\e[0m\n\e[31m   |\e[0m         Found:    Unit\n\e[31m   |\e[0m  \
    \       Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val (sum, product) = numbers.foldLeft(0l,\
    \ 1l) {\n          case ((sumBefore, productBefore), number) => \n           \
    \ (sumBefore + number, productBefore * number)\n        }\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) (0, 1L)\n        else\
    \ {\n            var sum = numbers.head\n            var product = 1L\n      \
    \      for (number <- numbers.tail) {\n                sum = sum + number\n  \
    \              product = product * number\n            }\n            sum, product\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprw8bwv8y.scala:19:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum, product\n\e[31m\e[31m   |\e[0m     \
    \          ^\e[0m\n\e[31m   |\e[0m               end of statement expected but\
    \ ',' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) {\n           \
    \ case ((sum, product), next) => next+(sum, product)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyw8l8n2i.scala:12:47 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m ((sum, product), next) =>\
    \ next+(sum, product)\n\e[31m\e[31m   |\e[0m                                 \
    \          ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e\
    [31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m \
    \  |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments ((Long, Long))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val summands = (1 to numbers.size)\n     \
    \       .toList\n            .map(_.toLong)\n            .toList\n           \
    \ .foldLeft(0L)((sum, number) => sum + number)\n        val product = (1 to numbers.size)\n\
    \            .toList\n            .map(_.toLong)\n            .reduceLeft(_ *\
    \ _)\n        (summands, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.sumProduct(tmpzzl8gjd2.scala:19)\n\
    \tat Problem$.main(tmpzzl8gjd2.scala:23)\n\tat Problem.main(tmpzzl8gjd2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum : Long = numbers.reduce((x, y) =>\
    \ x + y);\n        val product : Long = numbers.reduce((x, y) => x * y);\n   \
    \     return (sum, product)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumProduct(tmp20me1wo5.scala:11)\n\tat Problem$.main(tmp20me1wo5.scala:16)\n\
    \tat Problem.main(tmp20me1wo5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val mutableSum = mutable.Map[Long, Long]()\n\
    \        val mutableProduct = mutable.Map[Long, Long]()\n        numbers.foreach(n\
    \ => {\n            val sum = mutableSum + (n -> 0l)\n            val product\
    \ = mutableProduct + (n -> 1l)\n        })\n        val sum = mutableSum.mapValues\
    \ { _._2 }.sum\n        val product = mutableProduct.mapValues { _._2 }.product\n\
    \        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplneu9wni.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmutableSum\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplneu9wni.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mmutableProduct\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum :Long = 0\n        var product :Long\
    \ = 1\n        numbers.foreach(x => {\n            sum += x\n            product\
    \ *= x\n        })\n        return (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      numbers.foldLeft((0l, 1l))((sum, num) => {\n\
    \        sum += num\n        (sum, num * sum)\n      })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8x49b5xe.scala:12:12 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        sum += num\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of (Long, Long) - did you\
    \ mean sum.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8x49b5xe.scala:13:9\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        (sum, num * sum)\n\e\
    [31m\e[31m   |\e[0m         ^^^\e[0m\n\e[31m   |\e[0m         Found:    (sum :\
    \ (Long, Long))\n\e[31m   |\e[0m         Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmp8x49b5xe.scala:13:18 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        (sum, num * sum)\n\e[31m\e[31m   |\e[0m     \
    \         ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e\
    [31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m \
    \  |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((sum : (Long, Long)))\n3 errors found\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     numbers.map(x => product = product*x).add((sum, x)).foldLeft((sum, product))((sum,\
    \ (sum, product))) match {\n            case ((sum, product), (x: Long)) => (sum\
    \ + x, product)\n            case (sum, product) => (sum, product)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw2ogifac.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.map(\e[36mx\e\
    [0m => product = product*x).add((sum, x)).foldLeft((sum, product))((sum, (sum,\
    \ product))) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                       \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \  Found:    Long\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2ogifac.scala:13:56\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.map(\e[36mx\e\
    [0m => product = product*x).add((sum, x)).foldLeft((sum, product))((sum, (sum,\
    \ product))) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                       \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                                    Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw2ogifac.scala:14:55 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m ((sum, product), (x: Long))\
    \ => (sum + x, product)\n\e[31m\e[31m   |\e[0m                               \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                          Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = numbers.reduce((x, y) => x + y)\n\
    \        var product = 1\n        for (number <- numbers) {\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfli7k096.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            product *= number\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product = 1L\n        var sum = 0L\n \
    \       for (n <- numbers) {\n            product = product * n\n            sum\
    \ += n\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010173
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val summation = numbers.foldLeft(0L){_+_}\n\
    \        val product = numbers.foldLeft(1L){_*_}\n        (summation, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft[(Long, Long)]((0l, 1l)) {\n\
    \            (total, num) => {\n                total + num\n            }\n \
    \       } match {\n            case (totalSoFar, num) => totalSoFar*num\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe_kda7mp.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                total + num\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Long,\
    \ Long), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe_kda7mp.scala:16:38 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (totalSoFar, num) => totalSoFar*num\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    Long\n\e[31m  \
    \ |\e[0m                                      Required: (Long, Long)\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val product = 1\n        val sum = 0\n\n \
    \       // If list is empty, return 0, 0\n        if(numbers.isEmpty) {\n    \
    \        return (sum, product)\n        }\n\n        // If no number in list,\
    \ return 0, 0\n        if(numbers.size == 0) {\n            return (sum, 0)\n\
    \        }\n\n        // Use a for loop to sum the numbers in a list\n       \
    \ for(number <- numbers) {\n            sum += number\n        }\n\n        //\
    \ Use a for loop to multiply every number in the list\n        for(number <- numbers)\
    \ {\n            product *= number\n        }\n\n        return (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp82x7_l_1.scala:26:16 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp82x7_l_1.scala:31:20\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      val list = numbers.toList\n      if (list.size\
    \ == 0) (0, 1l) else (list.head, list.tail.foldLeft(1l)(_ * _))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfu6sy35i.scala:16)\n\tat Problem.main(tmpfu6sy35i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val s = numbers.foldLeft(0L, 1L)\n       \
    \ val p = numbers.map(_.toLong).foldLeft(1L, 0L)\n        val tuple = Tuple2(s,\
    \ p)\n        return tuple\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7l4xi8i.scala:14:15\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m tuple\n\
    \e[31m\e[31m   |\e[0m               ^^^^^\e[0m\n\e[31m   |\e[0mFound:    (tuple\
    \ : ((((Long, Long), Long) => (Long, Long)) => (Long, Long), (((Long, Long)\n\e\
    [31m   |\e[0m  , \n\e[31m   |\e[0mLong) => (Long, Long)) => (Long, Long)))\n\e\
    [31m   |\e[0mRequired: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) throw new Exception(\"\
    Cannot calculate sum and product of an empty list\")\n        val n = numbers.head.asInstanceOf[Long]\n\
    \        numbers.tail.foldLeft(0l, 1l) {\n            case(sum, element) => sum\
    \ + element\n            case(sum, product) => product * (sum.toLong * n) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn6ivudc_.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m(sum, element) => sum + element\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (Long, Long), but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn6ivudc_.scala:15:49\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e\
    [0m(sum, product) => product * (sum.toLong * n) }\n\e[31m\e[31m   |\e[0m     \
    \                                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of (Long, Long), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product = 1l\n        var sum = 0l\n\n\
    \        for (number <- numbers) {\n            sum = sum + number\n         \
    \   product = product * number\n        }\n\n        (sum, product)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result = numbers.foldLeft[(Long, Long),\
    \ (Long, Long)](\n            Tuple2(Long(0), Long(1))\n        )((acc, value)\
    \ => {\n            (acc._1 + value, acc._2 * value)\n        })\n        result._1,\
    \ result._2\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpl9immxu_.scala:16:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result._1, result._2\n\e[31m\e[31m   |\e[0m \
    \                ^\e[0m\n\e[31m   |\e[0m                 end of statement expected\
    \ but ',' found\n\e[31m\e[31m-- [E023] Syntax Error: /tmp/tmpl9immxu_.scala:11:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = numbers.foldLeft[(\e[35mLong\e[0m, \e[35mLong\e[0m), (\e\
    [35mLong\e[0m, \e[35mLong\e[0m)](\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   Too many type arguments for scala.collection.LinearSeqOps.foldLeft[B]\n\
    \e[31m   |\e[0m   expected: [B]\n\e[31m   |\e[0m   actual:   [\e[35mTuple2\e[0m[\e\
    [35mLong\e[0m, \e[35mLong\e[0m], \e[35mTuple2\e[0m[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpl9immxu_.scala:12:19\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            Tuple2(Long(\e\
    [31m0\e[0m), Long(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                   ^^^^\e\
    [0m\n\e[31m   |\e[0m                   \e[33mobject\e[0m \e[35mLong\e[0m in \e\
    [33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpl9immxu_.scala:12:28 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            Tuple2(Long(\e[31m0\e[0m), Long(\e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e\
    [0m                   \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mpackage\e[0m\
    \ \e[35mscala\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach{n => sum += n; product *= n}\n        (sum.toLong, product.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjokd0rnw.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach{\e[36mn\e[0m => sum += n; product\
    \ *= n}\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjokd0rnw.scala:13:47 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach{\e[36mn\e[0m => sum += n; product\
    \ *= n}\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value *= is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) Tuple2(0l, 1l)\n    \
    \    else numbers.foldLeft(0l) { (sum, number) => sum + number } match {\n   \
    \         case 0l => Tuple2(0l, 1l)\n            case 1l => numbers.tail.foldLeft(1l)\
    \ { (product, number) => product * number }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkwqqphyg.scala:14:49\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m \e\
    [31m1l\e[0m => numbers.tail.foldLeft(\e[31m1l\e[0m) { (product, number) => product\
    \ * number }\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m   \
    \                    Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       numbers.foreach(number => sum ++= number);\n        (sum, product)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0e1jdd6v.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum ++=\
    \ number);\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value ++= is not a member of\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) { case ((sum, product),\
    \ number) => sum * number + product }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ll2_0y5.scala:11:70\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbers.foldLeft((\e\
    [31m0l\e[0m, \e[31m1l\e[0m)) { \e[33mcase\e[0m ((sum, product), number) => sum\
    \ * number + product }\n\e[31m\e[31m   |\e[0m                                \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                  Found:    Long\n\e[31m  \
    \ |\e[0m                                                  Required: (Long, Long)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach {\n            num => sum += num;\n            product *=\
    \ num;\n        }\n        sum.toLong, product.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzqcj5c73.scala:17:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sum.toLong, product.toLong\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  end of statement\
    \ expected but ',' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzqcj5c73.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[36mnum\e[0m\
    \ => sum += num;\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzqcj5c73.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            product *= num;\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        numbers.foreach(number => sum = sum + number)\n        numbers.foreach(number\
    \ => product = product * number)\n        return (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val lSum = numbers.foldLeft(0l)(_ + _)\n \
    \       val lProduct = numbers.foldLeft(1l)(_ * _)\n        (lSum, lProduct)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val numberSet = numbers.length flatMap numbers.toSet\n\
    \        (numberSet.sum, numberSet.product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgbc7wqv4.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumberSet\e[0m = numbers.length\
    \ flatMap numbers.toSet\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value flatMap is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product = numbers.head.toLong\n      \
    \  var sum = numbers.head.toLong\n        for (i <- numbers) {\n            sum\
    \ += i\n            product *= i\n        }\n        Tuple2(sum, product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.sumProduct(tmpbpa9qqd7.scala:11)\n\
    \tat Problem$.main(tmpbpa9qqd7.scala:20)\n\tat Problem.main(tmpbpa9qqd7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            (0l, 1l)\n\
    \        } else if (numbers.size == 1) {\n            (numbers.head, 1l)\n   \
    \     } else {\n            val res = numbers.reduce((a, b) => a + b)\n      \
    \      val product = numbers.reduce(1l).product(numbers.size)\n            (res,\
    \ product)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpenqqrl8h.scala:17:41\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mproduct\e[0m = numbers.reduce(\e[31m1l\e[0m).product(numbers.size)\n\e[31m\e\
    [31m   |\e[0m                                         ^^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    (\e[31m1L\e[0m : Long)\n\e\
    [31m   |\e[0m                                         Required: (Long, Long) =>\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val length = numbers.length\n        val sum\
    \ = numbers.reduceLeft(_ + _)\n        val product = numbers.reduceLeft(_ * _)\n\
    \        Tuple2(sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.sumProduct(tmps_5txpaz.scala:12)\n\
    \tat Problem$.main(tmps_5txpaz.scala:17)\n\tat Problem.main(tmps_5txpaz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft(Tuple2[Long, Long](0l, 1l))\
    \ {\n            case (sum, num) => {\n                val product = sum._1 *\
    \ num._1\n                (sum._2 + num, product)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvky2v3g9.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mval\e[0m \e[36mproduct\e[0m = sum._1\
    \ * num._1\n\e[31m\e[31m   |\e[0m                                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value _1 is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val listIterator = numbers.iterator\n    \
    \    val sum = 0l\n        val product = 1l\n        while (listIterator.hasNext)\
    \ {\n            val i = listIterator.next()\n            sum += i\n         \
    \   product *= i\n        }\n        sum.toLong, product.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7xhjjvgg.scala:19:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        sum.toLong, product.toLong\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  end of statement\
    \ expected but ',' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7xhjjvgg.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += i\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp7xhjjvgg.scala:17:20 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            product *= i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Long - did you mean\
    \ product.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = numbers.head\n        var product\
    \ = numbers.head\n        val numbers1 = numbers.tail\n        for (number <-\
    \ numbers1) {\n            sum += number\n            product *= number\n    \
    \    }\n        Tuple2(sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.sumProduct(tmphwv2ixez.scala:11)\n\
    \tat Problem$.main(tmphwv2ixez.scala:21)\n\tat Problem.main(tmphwv2ixez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result = new mutable.ListBuffer[(Long,\
    \ Long)]()\n        numbers.foreach { number =>\n            result += (number,\
    \ number * number.toLong)\n        }\n        val sum = result.foldLeft((0l, 1l))\
    \ { (acc, x) => acc + (x._1, x._2) }._1\n        val product = result.foldLeft((0l,\
    \ 1l)) { (acc, x) => acc + (x._1, x._2) }._2\n        (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz1r5dzk8.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[(\e[35mLong\e[0m, \e[35mLong\e[0m)]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // We need to return two values, so here we\
    \ declare our return type as a tuple.\n        numbers.foldLeft((0l, 1l)) {\n\
    \            case ((sum, product), (number: Long)) =>\n                ((sum +\
    \ number, product * number))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            return\
    \ (0l, 1l)\n        }\n        val numbers_copy = numbers.distinct\n        val\
    \ sum = numbers_copy.reduce(0l)\n        val product = numbers_copy.foldLeft(1l)(_\
    \ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp76fq82nn.scala:15:38\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m = numbers_copy.reduce(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                        ^^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    (\e[31m0L\e[0m : Long)\n\e[31m   |\e[0m                 \
    \                     Required: (Long, Long) => Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def computeSum(ns : List[Long]) : Long = ns.sum\n\
    \        def computeProduct(ns : List[Long]) : Long = ns match {\n           \
    \ case Nil => (1l, 1l)\n            case x :: xs => (x * computeProduct(xs), computeSum(xs))\n\
    \        }\n        computeProduct(numbers)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk1bfosmt.scala:13:24\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m Nil\
    \ => (\e[31m1l\e[0m, \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    (Long, Long)\n\
    \e[31m   |\e[0m                        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpk1bfosmt.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m x :: xs => (x * computeProduct(xs),\
    \ computeSum(xs))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (Long, Long)\n\e[31m\
    \   |\e[0m                            Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpk1bfosmt.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        computeProduct(numbers)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\
    \e[31m   |\e[0m        Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = numbers.reduce((a, b) => a + b);\n\
    \        var product = numbers.reduce((a, b) => a * b); \n        return (sum.toLong,\
    \ product.toLong);\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumProduct(tmptqg7pcx6.scala:11)\n\tat Problem$.main(tmptqg7pcx6.scala:16)\n\
    \tat Problem.main(tmptqg7pcx6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldRight[(Long, Long)](Tuple2(0,1))((a,\
    \ b) => a + (b._1 * b._2))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1t0i5k1p.scala:11:63\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbers.foldRight[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m)](Tuple2(\e[31m0\e[0m,\e[31m1\e[0m))((\e[36ma\e\
    [0m, \e[36mb\e[0m) => a + (b._1 * b._2))\n\e[31m\e[31m   |\e[0m              \
    \                                                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    Long\n\e\
    [31m   |\e[0m                                                  Required: (Long,\
    \ Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldRight((0l, 1l)) {\n          \
    \  (acc, x) => Tuple2(acc._1 + x, acc._2 * x)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpamdbfw42.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            (\e[36macc\e[0m, \e[36mx\e[0m) => Tuple2(acc._1\
    \ + x, acc._2 * x)\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value _1 is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpamdbfw42.scala:12:47 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            (\e[36macc\e[0m, \e[36mx\e[0m) => Tuple2(acc._1\
    \ + x, acc._2 * x)\n\e[31m\e[31m   |\e[0m                                    \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _2 is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product = 1l\n        var sum = 0l\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        val ans = if(sum == 0l) 0l else (sum, product)\n        ans\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgkxarqe2.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        ans\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (ans : Matchable)\n\
    \e[31m   |\e[0m        Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) tuple((0l, 1l))\n   \
    \     else {\n            val sum = numbers.foldLeft((0l, 1l))((acc, curr) =>\
    \ curr._1 + acc._2) // Sum numbers\n            val product = numbers.foldLeft((0l,\
    \ 1l))((acc, curr) => curr._1 * acc._2) // Multiply numbers\n            tuple((sum._1,\
    \ product._1)) // Return tuples\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsorcz72p.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (numbers.isEmpty) tuple((\e[31m0l\e\
    [0m, \e[31m1l\e[0m))\n\e[31m\e[31m   |\e[0m                             ^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: tuple\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsorcz72p.scala:13:69 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = numbers.foldLeft((\e\
    [31m0l\e[0m, \e[31m1l\e[0m))((\e[36macc\e[0m, \e[36mcurr\e[0m) => curr._1 + acc._2)\
    \ \e[34m// Sum numbers\e[0m\n\e[31m\e[31m   |\e[0m                           \
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                              value _1 is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsorcz72p.scala:14:73 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mproduct\e[0m = numbers.foldLeft((\e\
    [31m0l\e[0m, \e[31m1l\e[0m))((\e[36macc\e[0m, \e[36mcurr\e[0m) => curr._1 * acc._2)\
    \ \e[34m// Multiply numbers\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \                                              ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                       value _1 is not a member of Long\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsorcz72p.scala:15:12 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            tuple((sum._1, product._1)) \e[34m// Return\
    \ tuples\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          Not found: tuple\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result = numbers.foldLeft((0l, 1l))( (tuple,\
    \ (sum, product)) => \n                (sum + tuple._1, product * tuple._2))\n\
    \        result._2\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8z5h04mj.scala:11:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = numbers.foldLeft((\e\
    [31m0l\e[0m, \e[31m1l\e[0m))( (\e[36mtuple\e[0m, (sum, product)) => \n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            not a legal formal\
    \ parameter\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8z5h04mj.scala:12:17\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                (sum + tuple._1,\
    \ product * tuple._2))\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m\
    \   |\e[0m                 Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8z5h04mj.scala:12:33 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m                (sum + tuple._1, product * tuple._2))\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: product\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8z5h04mj.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        result._2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required: (Long,\
    \ Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Step 1: Get the sum and product of the\
    \ list.\n        var sum = 0L\n        var product = 1L\n        for(i<- numbers)\
    \ {\n            sum += i\n            product *= i\n        }\n\n        // Step\
    \ 2: Return the tuple as the sum and product of the list.\n        return (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        numbers.foreach(x => sum += x)\n        product = product*numbers.count\n\
    \        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmphu8rcvif.scala:14:25 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        product = product*numbers.count\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((Long => Boolean) => Int)\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum: Long = 0\n        val product: Long\
    \ = 1\n        numbers.foreach{\n            sum = (sum + _)\n            product\
    \ = (product * _)\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpsn3y5icg.scala:14:25 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum = (sum + _)\n\e[31m\e[31m   |\e[0m  \
    \                       ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   _$1 => sum + _$1.\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpsn3y5icg.scala:15:33 -----------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            product = (product * _)\n\e[31m\e[31m   |\e[0m\
    \                                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => product * _$2.\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product = 1l\n        var sum = 0L\n\n\
    \        for (number <- numbers) {\n            sum = sum + number\n         \
    \   product = product * number\n        }\n\n        (sum, product)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val list = numbers.foldLeft(mutable.ListBuffer[Long]())\
    \ { (list, elem) => list += elem; list }\n        val length = list.size\n   \
    \     val sum = list.sum\n        val product = list.foldLeft(1L) { (product,\
    \ elem) => product * elem }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfz50bqc.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = numbers.foldLeft(mutable.ListBuffer[\e\
    [35mLong\e[0m]()) { (\e[36mlist\e[0m, \e[36melem\e[0m) => list += elem; list }\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppfz50bqc.scala:11:87 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = numbers.foldLeft(mutable.ListBuffer[\e\
    [35mLong\e[0m]()) { (\e[36mlist\e[0m, \e[36melem\e[0m) => list += elem; list }\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ += is not a member of Any - did you mean list.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmppfz50bqc.scala:12:26 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlength\e[0m = list.size\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \         value size is not a member of Any\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppfz50bqc.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36msum\e[0m = list.sum\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value sum is not\
    \ a member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppfz50bqc.scala:14:27\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mproduct\e[0m = list.foldLeft(\e[31m1L\e[0m) { (\e[36mproduct\e[0m, \e[36melem\e\
    [0m) => product * elem }\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value foldLeft is not a member of Any\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val (sum, product) = numbers.foldLeft((0l,\
    \ 1l)) {\n            case ((sumI, productI), numberI) => \n                (sumI\
    \ + numberI, productI * numberI)\n        }\n        (sum, product)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010189
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach{ x =>\n            sum += x\n            product *= x\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010192
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var totalSum = 0L\n        var product = 1L\n\
    \        numbers.foreach(x => totalSum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        Tuple2(totalSum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt2r_mhl6.scala:10:64\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m    \e[33mdef\e[0m \e[36msumProduct\e\
    [0m(\e[36mnumbers\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mTuple2\e[0m[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                   \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                          Found:    Unit\n\e[31m   |\e[0m   \
    \                                               Required: (Long, Long)\n\e[31m11\
    \ |\e[0m        \e[34m// Your code here\e[0m\n\e[31m12 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     for (i <- numbers) {\n            sum += i\n            product *= i\n \
    \       }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uw1rloc.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uw1rloc.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= i\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach{n =>\n            sum += n\n            product *= n\n \
    \       }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6oeu84jt.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6oeu84jt.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) { (acc, elem) =>\n\
    \            (acc + elem, acc * elem)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpso9jbwfm.scala:12:17 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            (acc + elem, acc * elem)\n\e[31m\e[31m  \
    \ |\e[0m             ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Long,\
    \ Long), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpso9jbwfm.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            (acc + elem, acc * elem)\n\e[31m\e[31m  \
    \ |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member\
    \ of (Long, Long), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       numbers.foreach{ n =>\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers foreach (x => { sum += x; product *= x})\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjc6d1yvu.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers foreach (\e[36mx\e[0m => { sum += x;\
    \ product *= x})\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjc6d1yvu.scala:13:50\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers foreach (\e\
    [36mx\e[0m => { sum += x; product *= x})\n\e[31m\e[31m   |\e[0m              \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010195
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l,1l)) { (sum, value) =>\n\
    \            val (sum2, prod) = sum\n            ((sum2 + value.toLong, sum2 +\
    \ value.toLong * prod))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulzt42vb.scala:18)\n\tat Problem.main(tmpulzt42vb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010198
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // 1. Calculate a sum\n        var sum = 0l\n\
    \        // 2. Calculate a product\n        var product = 1l\n        // 3. Iterate\
    \ through all numbers\n        numbers.foreach{number =>\n            // 4. Add\
    \ to sum\n            sum = sum + number\n            // 5. Multiply each number\
    \ by product\n            product = product * number\n        }\n        // 6.\
    \ Return result tuple with sum and product\n        (sum, product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       numbers.foreach(number => {\n            sum += number\n            product\
    \ *= number\n        })\n        return Tuple2(sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // TODO: Remove duplicates\n        val numberSet\
    \ = numbers.toSet\n        val product = 1l.toLong\n        var sum = numberSet.head\n\
    \        val totalNumber = numbers.length\n        while (numberSet.tail.nonEmpty)\
    \ {\n            val current = numberSet.tail.head\n            sum *= current\n\
    \            product *= current\n            numberSet -= current\n        }\n\
    \        return (sum.toLong, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpakqreo_4.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            product *= current\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean product.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpakqreo_4.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            numberSet -=\
    \ current\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \      value -= is not a member of Set[Long] - did you mean numberSet.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      var sum = 0\n      var product = 1\n      var\
    \ current = 0\n      for (number <- numbers) {\n        current = product * number\n\
    \        sum = sum + current\n        product = current / number\n      }\n  \
    \    Tuple2(sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5m3v9crd.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        current = product * number\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5m3v9crd.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        product = current / number\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def sumProduct(numbers: List[Long], sum: Long,\
    \ product: Long, currentSum: Long = 0) : Tuple2[Long, Long] = {\n            if\
    \ (numbers.isEmpty) {\n                return (sum, product)\n            }\n\
    \            val currentSum = currentSum + numbers.head\n            val nextProduct\
    \ = product * numbers.head\n            val nextSum = sum + numbers.head\n   \
    \         val newTuple = sumProduct(numbers.tail, nextSum, nextProduct, currentSum)\n\
    \            (newTuple._1, newTuple._2)\n        }\n        val tuple = sumProduct(numbers,\
    \ 0l, 1l)\n        tuple.tail\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppj9ocf05.scala:15:29 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcurrentSum\e[0m = currentSum\
    \ + numbers.head\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e[35mcurrentSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppj9ocf05.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        tuple.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mTuple\e[0m\e[1m\e[31m.\e[0m\e[1m\e[31mTail\e[0m\e[1m\e[31m[\e[0m(Long, Long)\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: (Long, Long)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // For the first element in the list, add\
    \ the numbers and return that sum. \n        // For the rest of the elements in\
    \ the list, add the numbers and return the sum of the two sums.\n        // Sum\
    \ the two sums together and return that sum.\n        if (numbers.isEmpty) (0,\
    \ 1L) \n        else numbers.head + sumProduct(numbers.tail)._2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptveurtgp.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m numbers.head\
    \ + sumProduct(numbers.tail)._2\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Long\n\e[31m   |\e[0m             Required:\
    \ (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            return\
    \ (0l, 1l)\n        }\n        val firstElement = numbers.head\n        var secondElement\
    \ = numbers.tail.head\n        var sum = firstElement\n        var product = secondElement\n\
    \        for (number <- numbers.tail) {\n            sum += number\n         \
    \   product *= number\n        }\n        return Tuple2(sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9zgc5b0r.scala:28)\n\tat Problem.main(tmp9zgc5b0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft( (0L, 1L) ) {\n         \
    \   ((sum, product) => {\n                sum + number\n                product\
    \ * number\n            })\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw867773d.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                sum + number\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Long, Long),\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpw867773d.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                sum + number\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ number\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw867773d.scala:14:26\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m                product *\
    \ number\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          Not found: number\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val (sum, product) = numbers.foldLeft((0l,\
    \ 1l)) { (acc, n) =>\n            (acc._1 + n, acc._2 * n)\n        }\n      \
    \  (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     var count = 0\n        for(n <- numbers) {\n            count += 1\n   \
    \         sum += n\n            product *= n\n        }\n        if(count < numbers.length)\
    \ {\n            sum = 0\n            product = 1\n        }\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqz3dxz0b.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqz3dxz0b.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean product.!=?\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpqz3dxz0b.scala:20:16 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val sum\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqz3dxz0b.scala:21:20 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            product = \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ product\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) {\n           \
    \ case ((sum, product), next) => sum + next * product\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfkba_h7a.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m ((sum,\
    \ product), next) => sum + next * product\n\e[31m\e[31m   |\e[0m             \
    \                              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                       Found:    Long\n\e[31m   |\e[0m      \
    \                                     Required: (Long, Long)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum: Long = 0\n        var product: Long\
    \ = 1\n        numbers.foreach(x => {\n            sum += x\n            product\
    \ *= x\n        })\n        return (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // use mutable accumulator and recursion\n\
    \        var sum: Long = 0\n        var product: Long = 1\n        def loop (n:\
    \ Long, acc: Long): Long = {\n            if (n > 0) acc = acc + n\n         \
    \   if (n > 0) sum = sum + n\n            product *= acc\n            return acc\n\
    \        }\n        numbers.map(loop(_, 0))\n        (sum, product)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp56nwvx03.scala:15:27 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (n > \e[31m0\e[0m) acc = acc\
    \ + n\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Reassignment to val acc\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum : Long = 0l\n        val product:\
    \ Long = 1l\n        for ( number <- numbers ) sum += number\n        for ( number\
    \ <- numbers ) product *= number\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpemkr2ypu.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m ( number <- numbers ) sum += number\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpemkr2ypu.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m ( number <- numbers ) product\
    \ *= number\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      val result = new mutable.ArrayBuffer[(Long,\
    \ Long)]\n      numbers.foreach { number =>\n        val result = number :: result\n\
    \      }\n      val sum = 1l.toLong * result.length\n      val product = 1l.toLong\n\
    \      (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp90gckwlz.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[(\e[35mLong\e[0m, \e[35mLong\e[0m)]\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.map(n => (n, 1l*n)) reduce ((sum,\
    \ product) => sum + product )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1r_ajwjf.scala:11:66 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        numbers.map(\e[36mn\e[0m => (n, \e[31m1l\e[0m*n))\
    \ reduce ((\e[36msum\e[0m, \e[36mproduct\e[0m) => sum + product )\n\e[31m\e[31m\
    \   |\e[0m                                                              ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (Long, Long), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Use mutable variables to avoid reusing\
    \ them for multiple uses\n        val product = mutable.Map.empty[Long, Long]\n\
    \        val sum = mutable.Map.empty[Long, Long]\n\n        // Sum up the numbers\
    \ in the list\n        numbers.foreach(n => sum += n -> (sum.getOrElse(n, 0l)\
    \ + n.toLong))\n\n        // Multiply each number in the list with the product\
    \ of it's predecessor\n        numbers.takeWhile(n => n >= 0).foreach(n => {\n\
    \            // Multiply this number by sum of numbers till we get a negative\
    \ number\n            val p = sum.getOrElse(n - 1l, 0l) * product.getOrElse(n\
    \ - 1l, 1l)\n\n            // If this product is greater than the current sum,\
    \ update the sum\n            if (p > sum.get(n)) {\n                sum.update(n,\
    \ p)\n            }\n            // If this product is less than the current sum,\
    \ update the product\n            else if (p < sum.get(n)) {\n               \
    \ product.update(n, p)\n            }\n        })\n\n        // Return the tuple\
    \ with the sum and product\n        (sum.toMap, product.toMap)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprp32htp4.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprp32htp4.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val product = 1l\n        var sum = 0l\n \
    \       for (n <- numbers) {\n            sum += n\n            product *= n\n\
    \        }\n        val product = product.toLong\n        val sum = sum.toLong\n\
    \        return (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6pc0hr9q.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = product.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mproduct\
    \ is already defined as \e[33mvalue\e[0m \e[35mproduct\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6pc0hr9q.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36msum\e[0m = sum.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvariable\e[0m \e[35msum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6pc0hr9q.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            product *= n\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Long - did you mean\
    \ product.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft(new Long(0l),new Long(1l))((sum,\
    \ number) => new Tuple2[Long, Long](sum + number, sum * number))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwie8gd52.scala:11:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        numbers.foldLeft(\e[33mnew\e[0m \e[35mLong\e\
    [0m(\e[31m0l\e[0m),\e[33mnew\e[0m \e[35mLong\e[0m(\e[31m1l\e[0m))((\e[36msum\e\
    [0m, \e[36mnumber\e[0m) => \e[33mnew\e[0m \e[35mTuple2\e[0m[\e[35mLong\e[0m, \e\
    [35mLong\e[0m](sum + number, sum * number))\n\e[31m\e[31m   |\e[0m           \
    \                       ^^\e[0m\n\e[31m   |\e[0m         too many arguments for\
    \ \e[33mconstructor\e[0m \e[35mLong\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m:\
    \ (): Long\n\e[31m\e[31m-- Error: /tmp/tmpwie8gd52.scala:11:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        numbers.foldLeft(\e[33mnew\e[0m \e[35mLong\e\
    [0m(\e[31m0l\e[0m),\e[33mnew\e[0m \e[35mLong\e[0m(\e[31m1l\e[0m))((\e[36msum\e\
    [0m, \e[36mnumber\e[0m) => \e[33mnew\e[0m \e[35mTuple2\e[0m[\e[35mLong\e[0m, \e\
    [35mLong\e[0m](sum + number, sum * number))\n\e[31m\e[31m   |\e[0m           \
    \                                    ^^\e[0m\n\e[31m   |\e[0m         too many\
    \ arguments for \e[33mconstructor\e[0m \e[35mLong\e[0m in \e[33mclass\e[0m \e\
    [35mLong\e[0m: (): Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwie8gd52.scala:11:96\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbers.foldLeft(\e\
    [33mnew\e[0m \e[35mLong\e[0m(\e[31m0l\e[0m),\e[33mnew\e[0m \e[35mLong\e[0m(\e\
    [31m1l\e[0m))((\e[36msum\e[0m, \e[36mnumber\e[0m) => \e[33mnew\e[0m \e[35mTuple2\e\
    [0m[\e[35mLong\e[0m, \e[35mLong\e[0m](sum + number, sum * number))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ (Long, Long), but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwie8gd52.scala:11:110 -----------------------\e\
    [0m\e[0m\n\e["
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n   \
    \     numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        val sumProducted = (sum.toLong, product.toLong)\n       \
    \ return sumProducted\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpufomq4fw.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpufomq4fw.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010207
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers foreach { n =>\n            sum += n\n            product *= n\n\
    \        }\n        val result = new Tuple2[Long, Long](sum, product)\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010208
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      var sum :Long = 0\n      var product :Long =\
    \ 1\n      var size = numbers.length\n      numbers.foreach { number =>\n    \
    \    sum += number\n        product *= number\n      }\n      (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0\n        var product = 1\n\n \
    \       if (numbers.isEmpty)\n            (sum, product)\n        else\n     \
    \       numbers.foldLeft(List((sum, product)), (acc, x) => {\n               \
    \ var sum = acc\n                var product = acc\n                if (x != 0)\n\
    \                    (sum + x, product * x)\n                else\n          \
    \          (sum + x, product * 1)\n            })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpjfbq871s.scala:17:52 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            numbers.foldLeft(List((sum, product)), (\e\
    [36macc\e[0m, \e[36mx\e[0m) => {\n\e[31m\e[31m   |\e[0m                      \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \       I could not infer the type of the parameter acc.\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpjfbq871s.scala:17:57 -----------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            numbers.foldLeft(List((sum, product)), (\e[36macc\e\
    [0m, \e[36mx\e[0m) => {\n\e[31m\e[31m   |\e[0m                               \
    \                          ^\e[0m\n\e[31m   |\e[0m                          Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          I\
    \ could not infer the type of the parameter x.\n2 errors found\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => {\n            sum = sum + x\n            product\
    \ = product * x\n        })\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val listIterator = numbers.iterator\n    \
    \    val sum = 0\n        val product = 1\n        while (listIterator.hasNext)\
    \ {\n            val nextNum = listIterator.next\n            val newProduct =\
    \ product * nextNum\n            val newSum = sum + nextNum\n            (newSum,\
    \ newProduct)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppe1qlxz1.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (listIterator.hasNext)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: (Long, Long)\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36mnextNum\e[0m = listIterator.next\n\e[31m16 |\e[0m            \e[33mval\e\
    [0m \e[36mnewProduct\e[0m = product * nextNum\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mnewSum\e[0m = sum + nextNum\n\e[31m18 |\e[0m            (newSum, newProduct)\n\
    \e[31m19 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) (0, 1) else numbers.foldRight((0,1l))\
    \ {\n            case ((sum, product), num) =>\n                val (newSum, newProduct)\
    \ = num + sum, num * product\n                (newSum, newProduct)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplaercnux.scala:13:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mval\e[0m (newSum, newProduct) =\
    \ num + sum, num * product\n\e[31m\e[31m   |\e[0m                            \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \    end of statement expected but ',' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmplaercnux.scala:13:47 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mval\e[0m (newSum, newProduct) = num + sum, num *\
    \ product\n\e[31m\e[31m   |\e[0m                                           ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (Int, Long), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmplaercnux.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mval\e[0m (newSum, newProduct) =\
    \ num + sum, num * product\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplaercnux.scala:13:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mval\e\
    [0m (newSum, newProduct) = num + sum, num * product\n\e[31m\e[31m   |\e[0m   \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \  Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      var sum = 0\n      var product = 1\n      for\
    \ (i <- numbers) sum += i\n      for (i <- numbers) product *= i\n      (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8lptkzgl.scala:13:29 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mfor\e[0m (i <- numbers) sum += i\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8lptkzgl.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mfor\e[0m (i <- numbers) product *= i\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 value *= is not a member of Int - did you mean Int.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if(numbers.isEmpty) (1, 0)\n        else (numbers.reduceLeft(_\
    \ + _), (numbers.reduce(_ * _)))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9eox0dho.scala:15)\n\tat Problem.main(tmp9eox0dho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // We start by calculating the sum\n     \
    \   var sum = 0\n        for (i <- numbers) sum += i\n        // We then calculate\
    \ the product\n        var product = 1\n        for (i <- numbers) product *=\
    \ i\n        // And we return them both\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpubdmw8sr.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- numbers) sum += i\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpubdmw8sr.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- numbers) product *= i\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value *= is not a member of Int - did you mean Int.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val nums = numbers.toList.map(_.toLong)\n\
    \        (numbers.reduceLeft((l, r) => l + r), numbers.reduceLeft((l, r) => l\
    \ * r))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.sumProduct(tmp79ag2y_a.scala:12)\n\
    \tat Problem$.main(tmp79ag2y_a.scala:15)\n\tat Problem.main(tmp79ag2y_a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if(numbers.isEmpty) (0, 1L)\n        else\
    \ (numbers.reduceLeft((a, b) => a + b), numbers.reduceRight((a, b) => a * b))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            (0l, 1l)\n\
    \        } else if (numbers.head == 0l) {\n            (0l, 1l)\n        } else\
    \ {\n            val sum = numbers.sum\n            val product = numbers.foldLeft(1l)\
    \ { (acc, n) => acc * n }\n            Tuple2(sum, product)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L) { (sum, number)\
    \ => sum + number}\n        val product = numbers.foldLeft(1L) { (product, number)\
    \ => product * number}\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val product = 1l\n        val sum = numbers.foldLeft(0l)(\
    \ (current, sumNumber) => current + sumNumber)\n        (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvgtj5ily.scala:18)\n\tat Problem.main(tmpvgtj5ily.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = new mutable.HashMap[Long, Long]()\n\
    \        numbers.foreach{n =>\n            if (sum.containsKey(n)) {\n       \
    \         sum(n) = sum(n) + n\n            } else {\n                sum(n) =\
    \ n\n            }\n        }\n        val product = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach{n =>\n            product(n) = n\n        }\n\
    \        (sum(numbers.map(x => x.toLong)), product(numbers.map(x => x.toLong)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsol6hz22.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsol6hz22.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mproduct\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = new scala.collection.mutable.HashMap[Long,\
    \ Long]()\n        val product = new scala.collection.mutable.HashMap[Long, Long]()\n\
    \        numbers.foreach(number => sum += number -> 1l)\n        numbers.foreach(number\
    \ => product += number -> 1l)\n        return (sum.toMap(0), product.toMap(0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9bc_i9vu.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mreturn\e[0m (sum.toMap(\e\
    [31m0\e[0m), product.toMap(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \             ^\e[0m\n\e[31m   |\e[0m                          Found:    (\e[31m0\e\
    [0m : Int)\n\e[31m   |\e[0m                          Required: (Long, Long) <:<\
    \ (Any, Any)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9bc_i9vu.scala:15:44\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mreturn\e[0m (sum.toMap(\e\
    [31m0\e[0m), product.toMap(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \             Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m                \
    \                   Required: (Long, Long) <:< (Any, Any)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((acc, cur) => (acc\
    \ match {\n            case (acc, 0) => (acc,cur)\n            case (acc, cur)\
    \ => (acc + cur, acc)\n        }))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2r7sb3pi.scala:18)\n\tat Problem.main(tmp2r7sb3pi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val summation = 0\n        val product = 1\n\
    \        var lastNumber = -1\n\n        for {\n            i <- numbers.reverse\n\
    \        } yield {\n            if (i != lastNumber) {\n                lastNumber\
    \ = i\n                product = i\n            } else {\n                summation\
    \ += i\n            }\n            (summation, product)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdatmsoge.scala:19:29\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                lastNumber =\
    \ i\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    (i : Long)\n\e[31m   |\e[0m          \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdatmsoge.scala:20:26 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                product = i\n\e[31m\e[31m   |\e[0m                   \
    \       ^\e[0m\n\e[31m   |\e[0m                          Found:    (i : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdatmsoge.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                summation += i\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean summation.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = mutable.MutableList[Long]()\n  \
    \      val product = mutable.MutableList[Long]()\n        numbers.foreach { n\
    \ =>\n            sum :+= n\n            product :+= n\n        }\n        sum\
    \ match {\n            case Nil => (0l, 1l)\n            case x => product match\
    \ {\n                case Nil => (0l, 1l)\n                case x => x\n     \
    \       }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfiwwqtm0.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfiwwqtm0.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val product = 1\n        val sum = 0L\n  \
    \      numbers.foreach { num =>\n            sum += num\n            product *=\
    \ num\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz1fikfcu.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += num\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz1fikfcu.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= num\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      numbers.foldLeft((0l, 1l)) { (tuple: (Long,\
    \ Long), number: Long) =>\n        if (tuple == (0l, 1l)) {\n          tuple =\
    \ (0l, 1l)\n        } else {\n          tuple = (tuple._1 + number, tuple._2 *\
    \ number)\n        }\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwfqofplx.scala:13:16 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m          tuple = (\e[31m0l\e[0m, \e[31m1l\e[0m)\n\e\
    [31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Reassignment\
    \ to val tuple\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwfqofplx.scala:15:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m          tuple = (tuple._1\
    \ + number, tuple._2 * number)\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Reassignment to val tuple\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val product = numbers.foldLeft(1l)((acc, x)\
    \ => acc * x)\n        val sum = numbers.reduce((acc, x) => acc + x)\n       \
    \ (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumProduct(tmponxe05qb.scala:12)\n\tat Problem$.main(tmponxe05qb.scala:16)\n\
    \tat Problem.main(tmponxe05qb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010212
