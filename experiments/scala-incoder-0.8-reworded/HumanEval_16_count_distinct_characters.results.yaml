language: scala
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0\n        for (char <- string) {\n            if (string.contains(char))\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr3a4meun.scala:21)\n\tat Problem.main(tmpr3a4meun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCharacters\
    \ = Set.empty[Char]\n        var count = 1\n        for (character <- string)\
    \ {\n            distinctCharacters += character\n            count += 1\n   \
    \     }\n        return distinctCharacters.toList.distinct + count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\"\
    )) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptsnokwak.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m distinctCharacters.toList.distinct\
    \ + count\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Char], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val count\
    \ = mutable.HashMap.empty[String, Long]\n        string.foreach(char=>{\n    \
    \        var counter: Long = 0\n            if(!count.contains(char.toLowerCase))\
    \ counter += 1 else counter = counter + 1\n            if(!count.contains(char.toUpperCase))\
    \ counter += 1 else counter = counter + 1\n            count.put(char, counter)\n\
    \        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_owaw7aq.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var countDistinctCharacters\
    \ = 1\n        string.foreach(s => {\n            s match {\n                case\
    \ char => countDistinctCharacters = countDistinctCharacters + 1\n            \
    \    case _ => countDistinctCharacters = countDistinctCharacters + countDistinctCharacters\n\
    \            }\n        })\n        countDistinctCharacters\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpza1u8_6f.scala:20)\n\tat Problem.main(tmpza1u8_6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(1L)((a,\
    \ b) => (a.asInstanceOf[Long] + b.asInstanceOf[Long]).asInstanceOf[Long])\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwtdcjt_.scala:13)\n\tat Problem.main(tmprwtdcjt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = new mutable.HashSet[Char]()\n        string.foreach(charSet.update(_))\n \
    \       charSet.size()\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpenspmuju.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charArray\
    \ = string.toLowerCase().toCharArray\n        val countMap = mutable.HashMap[Char,Int]()\n\
    \        charArray.foreach(char=>{\n            countMap += (char)=>countMap.getOrElse(char,0)+1\n\
    \        })\n        countMap.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb3vxu0uy.scala:13:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            countMap += (char)=>countMap.getOrElse(char,\e\
    [31m0\e[0m)+\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            not a legal formal parameter\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb3vxu0uy.scala:11:23 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCharacters\
    \ = 0L\n        string.foreach { x =>\n            if(!string.exists(y => x ==\
    \ y))\n                distinctCharacters += 1\n        }\n        return distinctCharacters\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqua0filq.scala:19)\n\tat Problem.main(tmpqua0filq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0\n        var chars = new mutable.HashSet[Char]()\n        for (i <- 0 to\
    \ string.length - 1) {\n            if (chars.contains(string.charAt(i))) {\n\
    \                count += 1\n            } else {\n                chars.add(string.charAt(i))\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_sv3gkrf.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mchars\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var counter\
    \ = 0\n        for(character <- string.toCharArray) {\n            if(string.count(_\
    \ == character) != 0) {\n                counter += 1\n            }\n       \
    \ }\n        counter.toLong\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr8s5wwv_.scala:21)\n\tat Problem.main(tmpr8s5wwv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val counts\
    \ = HashMap[Char, Long]()\n        for (x <- string.toList) counts(x) += 1\n \
    \       counts.foldLeft(0)((x, y) => x + y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmph_bqrmee.scala:12:39 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        counts.foldLeft(\e[31m0\e[0m)((\e[36mx\e[0m,\
    \ \e[36my\e[0m) => x + y)\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m  (x: String): String\n\e[31m   |\e[0m match arguments ((y : (Char, Long)))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        def countChar(character\
    \ : Char) : Long = {\n            val counter = mutable.LinkedHashMap.empty[Char,\
    \ Int]\n            for (c <- string) {\n                if (c != character) {\n\
    \                    counter(c) += 1\n                }\n            }\n     \
    \       counter.values.toSet.size // number of distinct characters\n        }\n\
    \        return string.map(x => x.toUpperCase()).map(x => countChar(x)).reduceLeft(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmhy29xr5.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mcounter\e[0m = mutable.LinkedHashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmhy29xr5.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mreturn\e[0m\
    \ string.map(\e[36mx\e[0m => x.toUpperCase()).map(\e[36mx\e[0m => countChar(x)).reduceLeft(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val distinctCounts\
    \ = mutable.TreeMap[Char, Long]()\n        for(i <- 0 until string.length){\n\
    \            val char = string.charAt(i)\n            distinctCounts(char) match\
    \ {\n                case None => {\n                    distinctCounts += (char\
    \ -> 1)\n                }\n                case Some(_) => {\n              \
    \      distinctCounts += (char -> distinctCounts(char) + 1)\n                }\n\
    \            }\n        }\n        distinctCounts.valuesIterator.map(_.toLong).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsai2ro1x.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdistinctCounts\e[0m = mutable.TreeMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(c => c.toChar)\n        val unique = chars.distinct\n        unique.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqpj5f3.scala:17)\n\tat Problem.main(tmp1aqpj5f3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charArray\
    \ = string.toLowerCase().toCharArray\n        val charSet = new mutable.HashSet[Char]()\n\
    \        charArray.foreach{ c => \n            c match {\n                case\
    \ c if charSet.contains(c) => charSet.remove(c)\n                case _ => charSet.add(c)\n\
    \            }\n        }\n        return charSet.size \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxulrkb1g.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcharSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if(string.isEmpty){\n\
    \            return 0\n        }\n        val distinctCharacterSet = mutable.Set.empty[Char]\n\
    \        string.foreach(distinctCharacterSet += _)\n        return distinctCharacterSet.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgrk3mpkm.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdistinctCharacterSet\e[0m\
    \ = mutable.Set.empty[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010427
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = string.map(_.toLower)\n        val uniqueCharSet = charSet.toSet\n       \
    \ uniqueCharSet.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.map\
    \ { c =>\n            val toUpper = c.toUpperCase()\n            val toLower =\
    \ c.toLowerCase()\n            if (toUpper == toLower) 1\n            else if\
    \ (toUpper < toLower) toUpper.toString.length + (toLower.toString.length - 1)\n\
    \            else toLower.toString.length + (toUpper.toString.length - 1)\n  \
    \      }.distinct\n\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd9ucuoz5.scala:11:28 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mtoUpper\e[0m = c.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpd9ucuoz5.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mtoLower\e[0m = c.toLowerCase()\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft[Long](0)\
    \ { case (acc, char) =>\n            char match {\n                case c if c.isUpperCase\
    \ => acc + Character.isUpperCase(c) ?? 0\n                case c if c.isLowerCase\
    \ => acc + Character.isLowerCase(c) ?? 0\n                case _             \
    \    => acc + 0\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmi_bga2.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e[0m c \e[33mif\e[0m c.isUpperCase\
    \ => acc + Character.isUpperCase(c) ?? \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \        value isUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmppmi_bga2.scala:12:74 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m                \e[33mcase\e[0m c \e[33mif\e[0m c.isUpperCase =>\
    \ acc + Character.isUpperCase(c) ?? \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value ?? is not a member of\
    \ Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmi_bga2.scala:13:28\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e\
    [0m c \e[33mif\e[0m c.isLowerCase => acc + Character.isLowerCase(c) ?? \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value isLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmi_bga2.scala:13:74 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e[0m c \e[33mif\e[0m c.isLowerCase\
    \ => acc + Character.isLowerCase(c) ?? \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value ?? is not a member of\
    \ Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val distinctCount\
    \ = scala.collection.mutable.HashMap.empty[String, Int]\n        for (c <- string)\
    \ {\n            distinctCount.getOrElseUpdate(c, 0) += 1\n        }\n       \
    \ distinctCount.values.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprm4fkfjf.scala:12:42\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            distinctCount.getOrElseUpdate(c,\
    \ \e[31m0\e[0m) += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \        Found:    (c : Char)\n\e[31m   |\e[0m                               \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.toSet\n        val distinct = chars.distinct\n        distinct.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxsljvis0.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinct\e[0m = chars.distinct\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value distinct is not a member of Set[Char]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val buffer\
    \ = new collection.mutable.ArrayBuffer[Char]\n        var count = 0L\n       \
    \ for (c <- string) {\n            buffer += c\n            count += 1\n     \
    \   }\n        return buffer.distinct.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdjt48rfi.scala:21)\n\tat Problem.main(tmpdjt48rfi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var charCount\
    \ = string.size\n        var distinctCharCount = charCount\n        for (letter\
    \ <- string) {\n            charCount -= 1\n            if (charCount == 0) {\n\
    \                distinctCharCount += 1\n            }\n        }\n        distinctCharCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplseis9f4.scala:22)\n\tat Problem.main(tmplseis9f4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val set\
    \ = new mutable.HashSet[Char]()\n        for (char : String <- string.toCharArray)\
    \ {\n            set.add(char)\n        }\n        return set.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\"\
    )) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_rzfxlyd.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_rzfxlyd.scala:11:13\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (char\
    \ : \e[35mString\e[0m <- string.toCharArray) {\n\e[31m\e[31m   |\e[0m        \
    \     ^\e[0m\n\e[31m   |\e[0m             Found:    String => Nothing\n\e[31m\
    \   |\e[0m             Required: Char => Any\n\e[31m12 |\e[0m            set.add(char)\n\
    \e[31m13 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val mutableSet\
    \ = scala.collection.mutable.Set[Char]()\n        for (i <- 0 until string.length)\
    \ {\n            val current = string.charAt(i)\n            if (!mutableSet.contains(current))\
    \ {\n                mutableSet += current\n            }\n        }\n       \
    \ mutableSet.length\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi9h9k43h.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        mutableSet.length\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value length is not a member\
    \ of scala.collection.mutable.Set[Char]\n1 error found\n"
  stdout: ''
  timestamp: 1660010438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val hashSet\
    \ = new mutable.HashSet[Char]()\n        var count = 0\n        for(str <- string){\n\
    \            hashSet+=str\n            count += 1\n        }\n        return hashSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkvikx4m9.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val distinct\
    \ = scala.collection.mutable.HashSet[Char]()\n        string.foreach(x => distinct.add(x))\n\
    \        distinct.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfl323wm.scala:17)\n\tat Problem.main(tmppfl323wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = mutable.Set[Char]()\n        for(i <- 0 until string.length){\n          \
    \  val c = string.charAt(i)\n            if(!charSet.contains(c)){\n         \
    \       charSet += c\n            }\n        }\n        return charSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsoli4qb7.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharSet\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ : Long = 0\n        var lowerChars = string.lower\n        var upperChars =\
    \ string.upper\n\n        while(lowerChars.length != 0 && upperChars.length !=\
    \ 0) {\n            if(lowerChars(0) == upperChars(0)) {\n                lowerChars\
    \ = lowerChars.substring(1);\n                upperChars = upperChars.substring(1);\n\
    \                result += 1\n            }\n            else {\n            \
    \    if(lowerChars(0) > upperChars(0)) {\n                    result += 1\n  \
    \              }\n                else {\n                    result -= 1\n  \
    \              }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7l9pgnc4.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mlowerChars\e[0m = string.lower\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      value lower is not a member of String - did you mean string.coder?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7l9pgnc4.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mupperChars\e[0m = string.upper\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      value upper is not a member of String - did you mean string.coder?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val uniqueChars\
    \ = string.toLowerCase +: string.toUpperCase +: string.dropRight(1)\n        uniqueChars.distinct\n\
    \            .foldLeft((0,0)){\n                case ((count, prevChar), nextChar)\
    \ => (count+1, prevChar +: nextChar)\n            }._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx8bdhkwv.scala:13:73 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e[0m ((count, prevChar), nextChar)\
    \ => (count+\e[31m1\e[0m, prevChar +: nextChar)\n\e[31m\e[31m   |\e[0m       \
    \                                                                  ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value +: is not a member\
    \ of Matchable\n1 error found\n"
  stdout: ''
  timestamp: 1660010438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charCounts\
    \ : mutable.HashMap[Char, Long] = mutable.HashMap.empty\n        for (char <-\
    \ string.toCharArray){\n            if (charCounts.contains(char)) charCounts(char)\
    \ += 1\n            else charCounts += char -> 1\n        }\n        charCounts.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rukjvvk.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharCounts\e[0m : mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m] = mutable.HashMap.empty\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rukjvvk.scala:10:55\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mcharCounts\e[0m : mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m] = mutable.HashMap.empty\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var chars\
    \ = mutable.Set.empty[Char]\n        for(c <- string.toCharArray) chars += c\n\
    \        chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjtrfso9.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mchars\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val unique\
    \ = mutable.HashSet[String]()\n        for( c <- string.toCharArray ) {\n    \
    \        if( unique.contains(c) ) {\n                unique(c) = unique(c) + 1\n\
    \            } else {\n                unique.add(c)\n            }\n        }\n\
    \        return unique.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0c380h4s.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCharacters\
    \ : Long = 0\n        string.foreach(char=>{\n            val isCharInSet = Set(\"\
    a\"...\"z\").contains(char)\n            if (isCharInSet) distinctCharacters =\
    \ distinctCharacters + 1\n        })\n        return distinctCharacters\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjelt616h.scala:12:38 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36misCharInSet\e[0m = Set(\e\
    [31m\"a\"\e[0m...\e[31m\"z\"\e[0m).contains(char)\n\e[31m\e[31m   |\e[0m     \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \               an identifier expected, but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charArray\
    \ = string.map(c => c.toLowerCase).toCharArray\n        val distinctCharacters\
    \ = mutable.Set.empty[Char]\n        for (c <- charArray) {\n            if (!distinctCharacters.contains(c))\
    \ {\n                distinctCharacters += c\n            }\n        }\n     \
    \   distinctCharacters.size\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rfn7yyf.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharArray\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase).toCharArray\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3rfn7yyf.scala:11:33 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctCharacters\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if(string.length\
    \ == 0) {\n            return 0\n        }\n        var count = 0\n        var\
    \ isUpper = true\n        for(c <- string) {\n            if(!isUpper && c.toUpper\
    \ != c.toLowerCase) {\n                count++\n                isUpper = !isUpper\n\
    \            }\n            if(!isUpper && c.toLower != c.toUpper) {\n       \
    \         count++\n                isUpper = !isUpper\n            }\n       \
    \ }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3w6dkoex.scala:18:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                isUpper = !isUpper\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- Error: /tmp/tmp3w6dkoex.scala:22:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \         isUpper = !isUpper\n\e[31m\e[31m   |\e[0m                        ^\e\
    [0m\n\e[31m   |\e[0m                        end of statement expected but '='\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3w6dkoex.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(!isUpper && c.toUpper != c.toLowerCase)\
    \ {\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3w6dkoex.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                count++\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value ++ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3w6dkoex.scala:21:21 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                count++\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value ++ is not a member of Int\n5 errors found\n"
  stdout: ''
  timestamp: 1660010443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0; val strArray = string.toLowerCase // convert the string to all lower case\n\
    \        for (char <- strArray) {\n            if (strArray.contains(char)) {\n\
    \                count = count + 1\n            }\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaoyijlbq.scala:21)\n\tat Problem.main(tmpaoyijlbq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if (string.length\
    \ == 0) return 1\n        var chars = \"\"\n        for (x <- string) chars =\
    \ x + chars\n        return chars.distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyecn8hcp.scala:13:21\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m chars.distinct\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \          Found:    String\n\e[31m   |\e[0m               Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var unique\
    \ = 0L\n        for (c <- string) {\n            if (string.count(_ == c) == 1)\
    \ unique += 1L\n        }\n        unique\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2lejafa2.scala:20)\n\tat Problem.main(tmp2lejafa2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Convert\
    \ input string to a mutable set\n        val chars = string.toSet\n\n        //\
    \ Compute the number of distinct characters\n        val distinct = chars.size\n\
    \n        // Return the result\n        distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn_44nrne.scala:22)\n\tat Problem.main(tmpn_44nrne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCharacters\
    \ = \"\"\n        var count = 0\n        for (i<-0 until string.length){\n   \
    \         val character = string.charAt(i)\n            if (character.toUpperCase\
    \ == character) {\n                distinctCharacters += character\n         \
    \   } else {\n                distinctCharacters = distinctCharacters.toLowerCase\n\
    \                distinctCharacters += character\n            }\n            if\
    \ (distinctCharacters.toLowerCase.length == 1){\n                count +=1\n \
    \           }\n            distinctCharacters = distinctCharacters.toLowerCase\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvyu_fp0j.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (character.toUpperCase == character)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = mutable.Map[Char, Long]()\n        var c = -1\n        for(i <- string.toCharArray){\n\
    \            c += 1\n            if(count.contains(i)){\n                count(i)\
    \ += 1\n            } else {\n                count(i) = 1\n            }\n  \
    \      }\n        count.map(_._2).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7my6li4d.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string match\
    \ {\n            case \"[\\\\W\\\\D]+\" => string.count(\"[\\\\W\\\\D]+\")\n \
    \           case _ => 0\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptwinhou7.scala:11:45\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m \e\
    [31m\"[\\\\W\\\\D]+\"\e[0m => string.count(\e[31m\"[\\\\W\\\\D]+\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    (\e[32m\"[\\\\\
    W\\\\D]+\"\e[0m : String)\n\e[31m   |\e[0m                                   \
    \     Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var charArray\
    \ = Array[Char](string.toCharArray)\n        var distinctCharacterCount : Long\
    \ = 1\n        charArray.filter(x => x != ' ').foreach { x =>\n            if\
    \ (charArray.contains(x.toString)) {\n                distinctCharacterCount =\
    \ distinctCharacterCount + 1\n            }\n        }\n        distinctCharacterCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpliotdya0.scala:10:36\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mcharArray\e\
    [0m = Array[\e[35mChar\e[0m](string.toCharArray)\n\e[31m\e[31m   |\e[0m      \
    \                              ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                              Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mChar\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                    Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpliotdya0.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (charArray.contains(x.toString))\
    \ {\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    String\n\e[31m   |\e\
    [0m                                   Required: Char\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charArray\
    \ = string.map(x => x.toLower).map(_.toInt).toArray\n        val charSet = scala.collection.mutable.Set[Char]()\n\
    \        charArray.foreach(x => charSet += x)\n        charSet.size\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\"\
    )) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpizy_vv1x.scala:12:42\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        charArray.foreach(\e\
    [36mx\e[0m => charSet += x)\n\e[31m\e[31m   |\e[0m                           \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \    Found:    (x : Int)\n\e[31m   |\e[0m                                    \
    \      Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val count\
    \ = mutable.HashSet.empty[Char]\n        var count = 0\n        for (letter <-\
    \ string) {\n            if(!count.contains(letter)) count += letter\n       \
    \ }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa7cepajv.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7cepajv.scala:10:20\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.HashSet.empty[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010439
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        def count(string\
    \ : String, prefix : String) : Long = {\n            val stringLength = string.length\n\
    \            val newPrefix = prefix + string(0)\n            if (stringLength\
    \ == 1) 1\n            else count(string.substring(1), newPrefix) + (newPrefix.toLowerCase.indexOf(string(1)).toLong\
    \ - newPrefix.toLowerCase.indexOf(string(0)).toLong)\n        }\n        return\
    \ count(string, \"a\")\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.count$1(tmpmq9a10qo.scala:12)\n\
    \tat Problem$.countDistinctCharacters(tmpmq9a10qo.scala:16)\n\tat Problem$.main(tmpmq9a10qo.scala:19)\n\
    \tat Problem.main(tmpmq9a10qo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val map\
    \ = mutable.Map.empty[Char, Long]\n        for( character <- string )\n      \
    \      map( character.toChar ) += 1\n        map.toSeq.map( c => c._1 ).distinct\n\
    \            .foldLeft(0l) { (l, char) => l += map.getOrElse(char, 0l) }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzevdwqo0.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.filterNot(_\
    \ == '-').foldLeft(0) { (sum, s) =>\n            if (sum > s.length) sum\n   \
    \         else sum + s.length\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivz8qsbf.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (sum > s.length) sum\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \          value length is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpivz8qsbf.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m            \e[33melse\e[0m sum + s.length\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value\
    \ length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0\n        for (character <- string) {\n            count += (character)\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcty3po9t.scala:18)\n\tat Problem.main(tmpcty3po9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(0L)((count,\
    \ letter) =>\n            if (letter.equalsIgnoreCase(string.head)) (count + 1L)\
    \ else (count))\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsfgt2nk5.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (letter.equalsIgnoreCase(string.head))\
    \ (count + \e[31m1L\e[0m) \e[33melse\e[0m (count))\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ equalsIgnoreCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val characterSet\
    \ = new mutable.HashSet[Char]()\n        var count = 0\n        for(c <- string)\
    \ if (characterSet.contains(c)) count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0sjvwq6.scala:10:31 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharacterSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var unique\
    \ = Set.empty[Char]\n        for (c <- string) {\n            unique += c\n  \
    \      }\n        return unique.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc855fmfj.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m unique.length\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value length\
    \ is not a member of scala.collection.mutable.Set[Char]\n1 error found\n"
  stdout: ''
  timestamp: 1660010448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        def getCharacter(string:\
    \ String) : String = {\n            def getChar(str: String) : String = {\n  \
    \              str.substring(0,1)\n            }\n            getChar(string)\n\
    \        }\n        def count(string : String) : Long = {\n            def count(chars\
    \ : String) : Long = {\n                chars.count{ char =>\n               \
    \     string.count(getCharacter(char))\n                }\n            }\n   \
    \         count(string)\n        }\n        count(string)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptf1wksnd.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    string.count(getCharacter(char))\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    (char :\
    \ Char)\n\e[31m   |\e[0m                                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if(string.isEmpty)\
    \ return 0\n        val chars = string.flatMap(_.toChar).distinct\n        chars.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpea2lpolq.scala:11:27 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.flatMap(_.toChar).distinct\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mflatMap\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m with types\n\e[31m   |\e[0m (f: Char => String):\
    \ String\n\e[31m   |\e[0m [B](f: Char => IterableOnce[B]): IndexedSeq[B]\n\e[31m\
    \   |\e[0mmatch arguments (Char => Char)\n1 error found\n"
  stdout: ''
  timestamp: 1660010446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var uniqueCharsCount\
    \ = 0L\n        for(x <- string.toCharArray) {\n            uniqueCharsCount +=\
    \ 1\n            if(uniqueCharsCount > 1) {\n                uniqueCharsCount\
    \ = 1\n            }\n        }\n        return uniqueCharsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd_ind4m4.scala:21)\n\tat Problem.main(tmpd_ind4m4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val ret\
    \ = new mutable.HashSet[Char]()\n        string.foreach(c => if (ret.contains(c.toLower))\
    \ ret.remove(c.toLower) else ret.add(c.toLower))\n        ret.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\"\
    )) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnc5mz119.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mret\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val uniqueCharacters\
    \ = string.distinct\n        var count = 1\n        var newString = \"\"\n   \
    \     for (c <- uniqueCharacters) {\n            if (newString.contains(c)) {\n\
    \                count += 1\n            } else {\n                newString +=\
    \ c\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmvmembi.scala:24)\n\tat Problem.main(tmpjmvmembi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // TODO:\
    \ write code here\n        val chars = string.map(c => c.toLower)\n        val\
    \ uniqueChars = mutable.Set.empty[Char]\n        chars foreach { c =>\n      \
    \      uniqueChars += c\n        }\n        uniqueChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9z3_165.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinct_chars\
    \ = Map[Char, Int]()\n        for(i <- string.toCharArray) {\n            distinct_chars(i)\
    \ = distinct_chars(i) match {\n            case 0 => 1\n            case x =>\
    \ x + 1\n            }\n        }\n        distinct_chars.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: a\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.countDistinctCharacters$$anonfun$1(tmpyvj24xf3.scala:12)\n\
    \tat Problem$.countDistinctCharacters$$anonfun$adapted$1(tmpyvj24xf3.scala:16)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1333)\n\tat Problem$.countDistinctCharacters(tmpyvj24xf3.scala:16)\n\
    \tat Problem$.main(tmpyvj24xf3.scala:21)\n\tat Problem.main(tmpyvj24xf3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if (string.length\
    \ == 0)\n            return 0L\n        var distinctChar = 0L\n        string.foreach(char\
    \ => distinctChar += if (char.toLowerCase() != char) 1 else 0)\n        distinctChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1thfbco3.scala:13:47 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        string.foreach(\e[36mchar\e[0m => distinctChar\
    \ += \e[33mif\e[0m (char.toLowerCase() != char) \e[31m1\e[0m \e[33melse\e[0m \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \    ^^\e[0m\n\e[31m   |\e[0m                                        expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1thfbco3.scala:13:44 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        string.foreach(\e[36mchar\e[0m => distinctChar += \e[33mif\e[0m (char.toLowerCase()\
    \ != char) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010451
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ : Long = 0\n        for (i <- 0 until string.length) {\n            var count\
    \ : Long = 1\n            var char = string(i)\n            for (j <- i + 1 until\
    \ string.length)\n                if (string(i) == string(j)) {\n            \
    \        count += 1\n                }\n            if (count > 1) {\n       \
    \         result += count\n            }\n        }\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\"\
    )) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfos4g4hp.scala:26)\n\tat Problem.main(tmpfos4g4hp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCharsCount\
    \ = 0\n        for (i <- 0 to string.length-1){\n            var charToAdd = string.charAt(i)\n\
    \            if(!distinctCharsCount.contains(charToAdd)){\n                distinctCharsCount\
    \ += 1\n            }\n        }\n        distinctCharsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphc5c9fna.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(!distinctCharsCount.contains(charToAdd)){\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value contains is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660010451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val counts\
    \ = mutable.HashMap.empty[Char, Int]\n        for (ch <- string)\n           \
    \ counts.update(ch, counts(ch)+1)\n        counts.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6d3732j6.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0\n        for (i <- string.toCharArray) {\n            count += string.count(_\
    \ == i)\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo8n_5war.scala:19)\n\tat Problem.main(tmpo8n_5war.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ : Long = 0\n        for (char <- string) {\n            count = count + 1\n\
    \        }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7gtrcn8a.scala:19)\n\tat Problem.main(tmp7gtrcn8a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCharacters\
    \ = MutableList.empty[Char]\n        for (char <- string.toCharArray) {\n    \
    \        if(!distinctCharacters.contains(char)){\n                distinctCharacters\
    \ = distinctCharacters :+ char\n            }\n        }\n        distinctCharacters.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuv5o7jqz.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mdistinctCharacters\e[0m\
    \ = MutableList.empty[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \       Not found: MutableList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010450
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(0)((i,\
    \ c) => i + string.count(_ == c))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf3e5wndd.scala:15)\n\tat Problem.main(tmpf3e5wndd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val resultSet\
    \ = mutable.Set[Char]()\n        var count = 0L\n        for(char <- string.toList){\n\
    \            if(resultSet.contains(char)){\n                count += 1L\n    \
    \        } else {\n                resultSet.add(char)\n            }\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy_in3rq3.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ : Long = 0\n        var char : Char = string.head\n        for(i <- string.tail)\
    \ {\n            if(i == string.last) {\n                if(char != string.head)\
    \ count += 1\n            }\n            else {\n                if(i != string.head\
    \ && char != string.head) {\n                    count += 1\n                }\n\
    \                char : Char = i\n            }\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpleojw6id.scala:20:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                char : \e[35mChar\e[0m = i\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               end of statement expected but '=' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.map(x\
    \ => x.toLowerCase -> 1).groupBy(_._1).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ct8pjd_.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.map(\e[36mx\e[0m => x.toLowerCase -> \e\
    [31m1\e[0m).groupBy(_._1).size\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value toLowerCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ : Long = 0\n        for (char1 <- string.toLowerCase if char1 != \"z\") {\n\
    \            for (char2 <- string.toLowerCase if char2 != \"z\") {\n         \
    \       if (char1 != char2) result = result + 1\n            }\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe4jb7t5u.scala:11:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (char1 <- string.toLowerCase \e\
    [33mif\e[0m char1 != \e[31m\"z\"\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpe4jb7t5u.scala:12:48 -----------------------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (char2 <- string.toLowerCase \e\
    [33mif\e[0m char2 != \e[31m\"z\"\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \                                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinct\
    \ = string.foldLeft(0l){\n            (acc, element) => if (element.length !=\
    \ acc.value) acc + 1 else acc\n        }\n        distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ydwsf82.scala:11:42 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            (\e[36macc\e[0m, \e[36melement\e[0m) => \e\
    [33mif\e[0m (element.length != acc.value) acc + \e[31m1\e[0m \e[33melse\e[0m acc\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value length is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = Set[Char]()\n        for(ch <- string) {\n            charSet += ch\n    \
    \    }\n        charSet.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprlvqre9a.scala:19)\n\tat Problem.main(tmprlvqre9a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ = 1\n        for (x <- string.toLowerCase ; y <- string) {\n            if (x\
    \ != y) result = result + 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz9oiky6k.scala:17)\n\tat Problem.main(tmpz9oiky6k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0\n        for(char <- string.toLower) count += (string.count(_ == char))\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgcim1hl3.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(char <- string.toLower) count\
    \ += (string.count(_ == char))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toLower is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string match\
    \ {\n            case \"\" => 0\n            case _ => string.foldLeft(1L){ (sum,\
    \ cur) => sum + math.pow(Character.toLowerCase(cur).toInt,2) }\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7otw40_z.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _\
    \ => string.foldLeft(\e[31m1L\e[0m){ (sum, cur) => sum + math.pow(Character.toLowerCase(cur).toInt,\e\
    [31m2\e[0m) }\n\e[31m\e[31m   |\e[0m                                         \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Found:    Double\n\
    \e[31m   |\e[0m                                                        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 1\n        var charCount = 0\n        for(char <- string) {\n            if(char.equalsIgnoreCase(string.head))\n\
    \                count += 1\n            else {\n                charCount +=\
    \ 1\n                if(count > charCount)\n                    count = charCount\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7mes5lgn.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(char.equalsIgnoreCase(string.head))\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value equalsIgnoreCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val hashSet\
    \ = HashSet[Char]()\n        for (elem <- string) hashSet += (elem.toLowerCase\
    \ -> 1)\n        hashSet.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz6jdqnds.scala:11:46 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (elem <- string) hashSet += (elem.toLowerCase\
    \ -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val hashMap\
    \ = new mutable.HashMap[String, Long]\n        for (c <- string.toCharArray) {\n\
    \            if (hashMap.contains(c)) {\n                hashMap(c) = (hashMap(c)\
    \ + 1)\n            } else {\n                hashMap(c) = 1 // Only add 1 if\
    \ the character is not already present\n            }\n        }\n        hashMap.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe5wxnvg1.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mhashMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCount\
    \ : Long = 0\n        for (letter <- string) {\n            var flag = true\n\
    \            for(c <- letter) {\n                if (c != letter) {\n        \
    \            flag = false\n                }\n            }\n            if (flag)\
    \ {\n                distinctCount += 1\n            }\n        }\n        return\
    \ distinctCount\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_0z7wzr7.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m(c <- letter) {\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \   value foreach is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val list\
    \ = mutable.ListBuffer[Char]()\n        for (letter <- string.toLowerCase ; letter\
    \ != \"\") {\n            list += letter\n        }\n        list.distinct().length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpilyo_5qu.scala:11:56 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (letter <- string.toLowerCase\
    \ ; letter != \e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                         '<-' expected, but ')' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpilyo_5qu.scala:10:19 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val alphabets\
    \ = string.map(c => (c.toLowerCase, c.toUpperCase)).filter(_._1 != _._1).map(_._2).distinct\n\
    \        alphabets.map(_._1.size).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpan3tffb4.scala:10:43 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36malphabets\e[0m = string.map(\e\
    [36mc\e[0m => (c.toLowerCase, c.toUpperCase)).filter(_._1 != _._1).map(_._2).distinct\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpan3tffb4.scala:10:58\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36malphabets\e[0m = string.map(\e[36mc\e[0m => (c.toLowerCase, c.toUpperCase)).filter(_._1\
    \ != _._1).map(_._2).distinct\n\e[31m\e[31m   |\e[0m                         \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                     value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpan3tffb4.scala:10:81 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36malphabets\e[0m = string.map(\e\
    [36mc\e[0m => (c.toLowerCase, c.toUpperCase)).filter(_._1 != _._1).map(_._2).distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \          value _1 is not a member of Nothing\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpan3tffb4.scala:11:24 ------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        alphabets.map(_._1.size).sum\n\e[31m\e[31m   |\e[0m          \
    \            ^^^^\e[0m\n\e[31m   |\e[0mvalue _1 is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import concurrent.duration.durationToPair\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val distinct\
    \ = mutable.ListBuffer[Char]()\n        for( char <- string.toCharArray() ) {\n\
    \            if( !distinct.contains(char) ) {\n                distinct += char\n\
    \            }\n        }\n        distinct.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqe9ye0a.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdistinct\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Create\
    \ HashMap with value being empty String\n        var map = new HashMap[Char, String]()\n\
    \        for(c <- string.toCharArray) map.put(c, \"\")\n        // Iterate through\
    \ HashMap and count distinct characters\n        for(c <- map.keys) if(map.get(c)\
    \ != \"\") map.get(c).length\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiy28abe4.scala:14:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(c <- map.keys) \e[33mif\e[0m(map.get(c)\
    \ != \e[31m\"\"\e[0m) map.get(c).length\n\e[31m\e[31m   |\e[0m               \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types Option[String]\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpiy28abe4.scala:14:59 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mfor\e[0m(c <- map.keys) \e[33mif\e[0m(map.get(c) != \e[31m\"\
    \"\e[0m) map.get(c).length\n\e[31m\e[31m   |\e[0m                            \
    \                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \         value length is not a member of Option[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCount\
    \ = 0L\n        string.foreach {\n            char =>\n                if (char\
    \ != char.toLowerCase()) {\n                    if (distinctCount > 1L) {\n  \
    \                      distinctCount = 0L\n                    }\n           \
    \     }\n                distinctCount = distinctCount + 1\n        }\n      \
    \  return distinctCount\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv7p3ybzb.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mif\e[0m (char != char.toLowerCase())\
    \ {\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value toLowerCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.foldLeft(mutable.Map[Char,Long]()){\n            case (m,c) =>  c ->\
    \ (m.getOrElse(c,0)+1)\n        }\n        string.map(_.toUpperCase()).map(_.toLowerCase).foldLeft(0){\n\
    \            case (m,c) =>  m + (m.getOrElse(c,0)+chars.getOrElse(c,0).toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpet9u8_m5.scala:10:36 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.foldLeft(mutable.Map[\e\
    [35mChar\e[0m,\e[35mLong\e[0m]()){\n\e[31m\e[31m   |\e[0m                    \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpet9u8_m5.scala:11:35 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m            \e[33mcase\e[0m (m,c) =>  c -> (m.getOrElse(c,\e[31m0\e[0m)+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value getOrElse is not a\
    \ member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpet9u8_m5.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        string.map(_.toUpperCase()).map(_.toLowerCase).foldLeft(\e\
    [31m0\e[0m){\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   value toUpperCase is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val characterMap\
    \ = new mutable.HashMap()\n        for (char <- string) {\n            characterMap\
    \ += (char -> characterMap.getOrElse(char, 0) + 1l)\n        }\n        characterMap.size\
    \ + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeipy3e0y.scala:10:31 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharacterMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Your\
    \ code goes here\n        val chars = string.foldLeft(List.empty[Char]())((acc,\
    \ elem) => acc :+ elem.toUpperCase())\n        chars.distinct.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp89_yxhcs.scala:11:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.foldLeft(List.empty[\e\
    [35mChar\e[0m]())((\e[36macc\e[0m, \e[36melem\e[0m) => acc :+ elem.toUpperCase())\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter n of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e[0m: (n: Int): Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp89_yxhcs.scala:11:75 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.foldLeft(List.empty[\e\
    [35mChar\e[0m]())((\e[36macc\e[0m, \e[36melem\e[0m) => acc :+ elem.toUpperCase())\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \       value :+ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp89_yxhcs.scala:11:83 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mchars\e[0m = string.foldLeft(List.empty[\e[35mChar\e\
    [0m]())((\e[36macc\e[0m, \e[36melem\e[0m) => acc :+ elem.toUpperCase())\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \       value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp89_yxhcs.scala:12:14 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        chars.distinct.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value distinct is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1660010465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Convert\
    \ string to char array for easier operations\n        val charArray = string.map(c\
    \ => c.toChar)\n        // Get a HashSet for faster lookup\n        val set =\
    \ new mutable.HashSet[Char]()\n        // Iterate through each character of the\
    \ string and add them to the set\n        for(i <- 0 until charArray.length) {\n\
    \            set += charArray(i)\n        }\n        // Now get the number of\
    \ distinct characters\n        set.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbangx76e.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = new scala.collection.mutable.LinkedHashSet[Char](string.length)\n        var\
    \ cnt = 0\n        for (i <- 0 to string.length - 1) {\n            if (chars.contains(string(i).toLowerCase))\
    \ {\n                chars(string(i).toLowerCase) = chars(string(i).toLowerCase)\
    \ + 1\n            } else {\n                chars(string(i).toLowerCase) = 1\n\
    \                cnt += 1\n            }\n        }\n        cnt.toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdgp2sgor.scala:10:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = \e[33mnew\e\
    [0m scala.collection.mutable.LinkedHashSet[\e[35mChar\e[0m](string.length)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mLinkedHashSet\e[0m in \e[33mclass\e[0m \e[35mLinkedHashSet\e[0m: ():\
    \ scala.collection.mutable.LinkedHashSet[Char]\n1 error found\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = new mutable.LinkedHashSet[Char]()\n        for (ch <- string) {\n        \
    \    charSet += ch\n        }\n        return charSet.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdz4t9461.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharSet\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val count\
    \ = new mutable.HashMap[Char, Long]()\n        string.foreach(_.toLowerCase match{\n\
    \            case x => count.put(x.toChar, count.getOrElse(x.toChar, 0L) + 1)\n\
    \            case _ => ()\n        })\n        count.foldLeft(0L){ _ + _._2 }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9l_sreg.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt9l_sreg.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        string.foreach(_.toLowerCase\
    \ \e[33mmatch\e[0m{\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value toLowerCase is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val distinctCharacterCount\
    \ = HashMap[Char, Int]()\n        for (i <- 0 to string.length-1) {\n        \
    \    val char = string.charAt(i)\n            if(!distinctCharacterCount.contains(char))\
    \ {\n                distinctCharacterCount(char) = 1\n            } else {\n\
    \                distinctCharacterCount(char) += 1\n            }\n        }\n\
    \        distinctCharacterCount.values.toSet.size // Return distinct character\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkzivd_z7.scala:23)\n\tat Problem.main(tmpkzivd_z7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val characterSet\
    \ = Set[Char]()\n        val distinctCharacterCount = mutable.Map.empty[Char,\
    \ Long]\n        for ((c, i) <- string.getChars)\n            characterSet.add(c)\n\
    \        for (c <- characterSet)\n            distinctCharacterCount += ((c, characterSet.count(c)))\n\
    \        distinctCharacterCount.foldLeft(0l)((acc, el) => acc + el._2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptkm0_17p.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctCharacterCount\e\
    [0m = mutable.Map.empty[\e[35mChar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptkm0_17p.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m ((c, i) <- string.getChars)\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ withFilter is not a member of (Int, Int, Array[Char], Int) => Unit\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ = 0\n        val arr = string.flatMap(_.toLower)\n        arr.foreach { x =>\
    \ result = result + (arr(x) - x.toLowerCase) }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8u_l2x2z.scala:11:25 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = string.flatMap(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mflatMap\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m with types\n\e[31m   |\e[0m (f: Char => String):\
    \ String\n\e[31m   |\e[0m [B](f: Char => IterableOnce[B]): IndexedSeq[B]\n\e[31m\
    \   |\e[0mmatch arguments (Char => Char)\n1 error found\n"
  stdout: ''
  timestamp: 1660010464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val distinctCharacters\
    \ = string.groupBy(i => (String.valueOf((i))))\n        distinctCharacters.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3w511j92.scala:16)\n\tat Problem.main(tmp3w511j92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = string.map(_.toLower)\n            .distinct\n            .map(_.toChar)\n\
    \            .toSet\n        val length = charSet.size\n        if (length ==\
    \ 0)\n            0\n        else\n            charSet.size / length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp023b9r8v.scala:22)\n\tat Problem.main(tmp023b9r8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var charsCount\
    \ : Long = 0\n        for(i <- 0 until string.length) {\n            var char\
    \ : Char = string(i)\n            charsCount += (string.count(_ == char) + string.count(_\
    \ == char.toLowerCase) + string.count(_ == char.toUpperCase))\n        }\n   \
    \     charsCount\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2jx2fgla.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            charsCount += (string.count(_ == char) +\
    \ string.count(_ == char.toLowerCase) + string.count(_ == char.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2jx2fgla.scala:13:76 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            charsCount += (string.count(_ == char) + string.count(_\
    \ == char.toLowerCase) + string.count(_ == char.toUpperCase))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2jx2fgla.scala:13:114 -----------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m            charsCount += (string.count(_ == char) + string.count(_ == char.toLowerCase)\
    \ + string.count(_ == char.toUpperCase))\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toUpperCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660010468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Your\
    \ code goes here\n        var distinctCharacters : Int = 0\n        var charSet\
    \ : mutable.Set[Char] = new mutable.HashSet[Char]\n        var charCount : mutable.Map[Char,\
    \ Long] = new mutable.HashMap[Char, Long]\n\n        for(i <- 0 to string.length){\n\
    \            charCount += charSet(i)\n            charSet(i) = string(i)\n   \
    \         charCount += charSet.count(string(i))\n        }\n        distinctCharacters\
    \ = charCount.size\n\n        charCount.clear()\n        charSet.clear()\n   \
    \     charCount = null\n        charSet = null\n\n        distinctCharacters\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_rh6vfn.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mcharSet\e[0m : mutable.Set[\e\
    [35mChar\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mChar\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk_rh6vfn.scala:12:46 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mvar\e[0m \e[36mcharSet\e[0m : mutable.Set[\e[35mChar\e[0m] =\
    \ \e[33mnew\e[0m mutable.HashSet[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m     \
    \                                         ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_rh6vfn.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mcharCount\e[0m : mutable.Map[\e\
    [35mChar\e[0m, \e[35mLong\e[0m] = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e\
    [0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_rh6vfn.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mcharCount\e[0m : mutable.Map[\e\
    [35mChar\e[0m, \e[35mLong\e[0m] = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e\
    [0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n      string.map(_.getBytes).distinct.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphm4epz9p.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m      string.map(_.getBytes).distinct.length\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \  value getBytes is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var characterCount\
    \ : Long = 0\n        for(char <- string.toCharArray) {\n            characterCount\
    \ += (string.indexOf(char).toDouble == -1) ? 0 : 1\n        }\n        return\
    \ characterCount\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvd8tfgeo.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            characterCount += (string.indexOf(char).toDouble\
    \ == -\e[31m1\e[0m) ? \e[31m0\e[0m : \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvd8tfgeo.scala:12:68\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            characterCount\
    \ += (string.indexOf(char).toDouble == -\e[31m1\e[0m) ? \e[31m0\e[0m : \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value ? is not a member of Boolean\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val uniqueChars\
    \ = string.foldLeft(Set[Char]())( (acc, c) => acc + (if (acc.contains(c)) 1 else\
    \ 0) )\n        uniqueChars.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpis0ilvdf.scala:15)\n\tat Problem.main(tmpis0ilvdf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Initialize\
    \ a Set[Character] to store the characters found\n        var distinctCharacters\
    \ = Set[Character]()\n        for (i <- string) {\n            distinctCharacters\
    \ += i.toLowerCase \n        }\n        // Return the length of the Set\n    \
    \    distinctCharacters.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtjxlnln.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            distinctCharacters += i.toLowerCase \n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toLowerCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charCounts\
    \ = mutable.HashMap[Char, Int]()\n        for (c <- string) {\n            charCounts(c.toLowerCase())\
    \ match {\n                case Some(count) => charCounts(c.toLowerCase()) +=\
    \ 1\n                case None => charCounts(c.toLowerCase()) += 1\n         \
    \   }\n        }\n        charCounts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwzay7en.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharCounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val countDistinctChars\
    \ = HashSet[String]()\n        for (x <- string) countDistinctChars += x\n   \
    \     countDistinctChars.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyfzi37sh.scala:11:48\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (x <-\
    \ string) countDistinctChars += x\n\e[31m\e[31m   |\e[0m                     \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                      Found:    (x : Char)\n\e[31m   |\e[0m                 \
    \                               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(0){\
    \ (a, b) => { a += b.toString.toCharArray.distinct.size; a } }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsn6h_ihc.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.foldLeft(\e[31m0\e[0m){ (\e[36ma\e[0m,\
    \ \e[36mb\e[0m) => { a += b.toString.toCharArray.distinct.size; a } }\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value += is not a member of Int - did you mean a.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val counts\
    \ = mutable.Map.empty[String, Long]\n        for (c <- string.toCharArray) {\n\
    \            val oldCount = counts.getOrElse(c.toString, 0L)\n            counts\
    \ = counts + (c -> oldCount + 1L)\n        }\n        counts.values.toList.distinct.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobnofw49.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpobnofw49.scala:13:19 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            counts = counts + (c -> oldCount + \e[31m1L\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val counts\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinct_characters\
    \ = 0\n        string.foreach(x => {\n            distinct_characters += distinct_characters.distinctChars().count()\
    \ - distinct_characters * distinct_characters().length()\n        })\n       \
    \ distinct_characters\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgn1nd9e8.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            distinct_characters += distinct_characters.distinctChars().count()\
    \ - distinct_characters * distinct_characters().length()\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgn1nd9e8.scala:12:55 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m            distinct_characters += distinct_characters.distinctChars().count()\
    \ - distinct_characters * distinct_characters().length()\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value distinctChars is not a member\
    \ of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ = 1L\n        var last = \"\"\n        for(i <- 0 until string.length) {\n \
    \           if(string.charAt(i) == last) result = result + 1\n            else\
    \ last = string.charAt(i)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9_lzwcvy.scala:13:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(string.charAt(i) == last) result\
    \ = result + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_lzwcvy.scala:14:37\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m last\
    \ = string.charAt(i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Char\n\e[31m   |\e[0m  \
    \                      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if (string.isEmpty)\
    \ return 0\n        val result = new mutable.HashSet[Char]()\n        for(c <-\
    \ string.toCharArray) result += c\n        return result.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9o7adu6.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(0l){\
    \ (sum, character) => sum + if(Character.isLetter(character)) 1 else if (Character.isUpperCase(character))\
    \ 2 else 0 }\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcqu7lds1.scala:10:55 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.foldLeft(\e[31m0l\e[0m){ (\e[36msum\e\
    [0m, \e[36mcharacter\e[0m) => sum + \e[33mif\e[0m(Character.isLetter(character))\
    \ \e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (Character.isUpperCase(character))\
    \ \e[31m2\e[0m \e[33melse\e[0m \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m         \
    \                                              ^^\e[0m\n\e[31m   |\e[0m      \
    \                                  expression expected but \e[31mif\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n      string.foldLeft(0L){\
    \ (count, c) =>\n        val value = c.toUpperCase().count(_ == 'A') + 1\n   \
    \     if (count < value)\n          count\n        else\n          value\n   \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78iqdbc3.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mvalue\e[0m = c.toUpperCase().count(_\
    \ == \e[31m'A'\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value toUpperCase is\
    \ not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ = 0\n        string.foreach {\n            x =>\n                if (x.isUpper)\n\
    \                    result += 2\n                else\n                    result\
    \ += 1\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pqc7a4z.scala:23)\n\tat Problem.main(tmp6pqc7a4z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Create\
    \ a char array from our string\n        val charArray = string.toCharArray\n \
    \       // Create a set and iterate through each char to find out how many chars\
    \ are distinct (case insensitive)\n        val distinctChars = mutable.Set.empty[Char]\n\
    \        for (i <- 0 until charArray.length)\n            distinctChars += charArray(i)\n\
    \        // Return size of the set (number of distinct chars)\n        return\
    \ distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1taqhq1.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0\n        var i = 0\n        while (i < string.length) {\n            if\
    \ (string(i) == string(i).toUpper) {\n                count += 1\n           \
    \ }\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpusy8_p8s.scala:22)\n\tat Problem.main(tmpusy8_p8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val counts\
    \ = mutable.HashMap[Char, Long]()\n        for(x <- string)\n            counts(x)\
    \ += 1\n\n        val sum = 0\n        for(x <- counts) {\n            sum +=\
    \ counts(x)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbqa5md3.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0\n        for(i <- 0 to string.length - 1) {\n            if(string.charAt(i)\
    \ == string.charAt(i).toLowerCase()) count += 1\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnw7qq6kb.scala:12:52 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m(string.charAt(i) == string.charAt(i).toLowerCase())\
    \ count += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.map\
    \ { ch => ch.toUpper }.distinct.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = string.map(_.toLower).toSet\n        charSet.size * (charSet.size + 1) / 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq1ratz4y.scala:15)\n\tat Problem.main(tmpq1ratz4y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var countDistinctChars\
    \ = string.count(c => c.toLowerCase == 'z')\n        for(i <- 0 until string.length)\n\
    \            countDistinctChars += string.count(c => c.toUpperCase == i.toString)\n\
    \        return countDistinctChars\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7tgvz6jt.scala:10:53 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mcountDistinctChars\e[0m\
    \ = string.count(\e[36mc\e[0m => c.toLowerCase == \e[31m'z'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                   ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7tgvz6jt.scala:12:31\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            countDistinctChars\
    \ += string.count(\e[36mc\e[0m => c.toUpperCase == i.toString)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7tgvz6jt.scala:12:54 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m            countDistinctChars += string.count(\e[36mc\e[0m =>\
    \ c.toUpperCase == i.toString)\n\e[31m\e[31m   |\e[0m                        \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value toUpperCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = HashSet.empty[Char]\n        for (c <- string) {\n            if (!charSet.contains(c))\
    \ {\n                charSet.add(c)\n            }\n        }\n        charSet.size()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpmf03q3lk.scala:16:16 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        charSet.size()\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e[0m \e[35msize\e[0m\
    \ in \e[33mclass\e[0m \e[35mHashSet\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Create\
    \ a list of characters\n        val characters = string.map(_.toLower).toList\n\
    \n        // Create a list of sets, where each element of the set is either unique\
    \ or doesn't exist in the string\n        val sets = characters.distinct.toList.map(x\
    \ => Set(x))\n\n        // Sum up all the counts\n        return sets.reduceLeft(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg1k64v4r.scala:17:35\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mreturn\e[0m sets.reduceLeft(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                    Found:    (_$3 : scala.collection.mutable.Set[Char])\n\
    \e[31m   |\e[0m                    Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(0){\n\
    \            case ((acc, x) :: xs, y) =>\n                if (x == y) acc + 1\
    \ else acc\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vasbjci.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m (x == y) acc + \e[31m1\e\
    [0m \e[33melse\e[0m acc\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8vasbjci.scala:12:41 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m                \e[33mif\e[0m (x == y) acc + \e[31m1\e[0m\
    \ \e[33melse\e[0m acc\n\e[31m\e[31m   |\e[0m                                 \
    \        ^^^\e[0m\n\e[31m   |\e[0m                                         Found:\
    \    (acc : Any)\n\e[31m   |\e[0m                                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if(string\
    \ == null || string.isEmpty) {\n            return 0\n        }\n        var count\
    \ = HashSet.empty[Char]\n        for (i <- 0 until string.length) {\n        \
    \    val ch = string(i)\n            if (ch.toUpperCase == ch) {\n           \
    \     count += ch.toUpperCase\n            }\n        }\n        return count.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa53nq93o.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (ch.toUpperCase == ch) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpa53nq93o.scala:17:28 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m                count += ch.toUpperCase\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          value toUpperCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charMap\
    \ = mutable.LinkedHashMap[Char, Long]()\n        for (cc <- string.toCharArray)\
    \ {\n            charMap +=((cc, charMap.getOrElse(cc, 0L) + 1))\n        }\n\
    \        charMap.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyg56ls6l.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharMap\e[0m = mutable.LinkedHashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var sum\
    \ = 0L\n        var characterIndex = 0L\n        string.foreach(c => {\n     \
    \       if (Character.isLetter(c)) {\n                sum += 1\n            }\n\
    \            characterIndex += 1\n        })\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzywztua9.scala:23)\n\tat Problem.main(tmpzywztua9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charList\
    \ = new mutable.ListBuffer[Char]()\n        for (i <- 0 until string.length) {\n\
    \            charList.append(string(i).toChar)\n        }\n        charList.distinct.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd8j9yh8m.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Create\
    \ an empty list where each character will be stored in as a String\n        val\
    \ charactersArray = mutable.ArrayBuffer.empty[String]\n        for(char <- string.toCharArray)\
    \ charactersArray.append(char.toString)\n\n        // Use HashSet to get rid of\
    \ duplicates, get the length\n        charactersArray.distinct.size\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\"\
    )) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw3jveb55.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcharactersArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val distinctChars\
    \ = new mutable.HashSet[Char]()\n        var total = 0L\n        for(i <- 0 until\
    \ string.length) {\n            val char = string(i)\n            if(!distinctChars.contains(char))\
    \ {\n                total += 1\n                distinctChars.add(char)\n   \
    \         }\n        }\n        return total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp61_u6no.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ = 0L\n        for(char <- string) {\n            if((string.indexOf(char) ==\
    \ string.lastIndexOf(char))) {\n                result += 2\n            } else\
    \ {\n                result += 1\n            }\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp350tefew.scala:22)\n\tat Problem.main(tmp350tefew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charsSet\
    \ = string.map(c => c.toLower).toSet\n        charsSet.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.map(_.toLowerCase).distinct.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjfvxnw7b.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.map(_.toLowerCase).distinct.size\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        def countCharacter(string\
    \ : String) : Long = {\n            var count = 0L\n            var charIndex\
    \ = -1\n            while (charIndex < string.length) {\n                charIndex\
    \ += 1\n                var char: Char = string.charAt(charIndex)\n          \
    \      if (char.isLower || char.isUpper)\n                    count = count +\
    \ 1\n            }\n            return count\n        }\n\n        var charCountMap\
    \ = new mutable.HashMap[Char, Long]()\n        var distinctCharCount = 0L\n  \
    \      for (char <- string) {\n            if (!charCountMap.contains(char)) {\n\
    \                charCountMap.put(char, countCharacter(string))\n            \
    \    distinctCharCount += 1\n            }\n        }\n        return distinctCharCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfde_zgnm.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mcharCountMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val alphabet:\
    \ Set[Char] = string.map(_.toUpperCase).map(_.toLowerCase).toSet\n        string.map(x\
    \ => alphabet(x)).distinct.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwz6hu98.scala:10:47 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36malphabet\e[0m: \e[35mSet\e\
    [0m[\e[35mChar\e[0m] = string.map(_.toUpperCase).map(_.toLowerCase).toSet\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // Sort\
    \ the string first\n        val characterArray = string.toCharArray.sorted\n \
    \       val characterArraySet = characterArray.toSet\n        characterArraySet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89otm97v.scala:18)\n\tat Problem.main(tmp89otm97v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val counts\
    \ = mutable.Map.empty[String, Long]\n        for (c <- string) {\n           \
    \ if (counts.contains(c)) {\n                counts(c) = counts(c) + 1\n     \
    \       } else {\n                counts += c -> 1\n            }\n        }\n\
    \        counts.values.toSet.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdd22ls9l.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.split(\"\\\\W+\").filter(_.nonEmpty).distinct\n        chars.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi7o8ezzd.scala:15)\n\tat Problem.main(tmpi7o8ezzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var n =\
    \ 0\n        var i = 0\n        while (i < string.length) {\n            val c\
    \ = string(i)\n            if (Character.isLetter(c)) {\n                n +=\
    \ 1\n            }\n            i += 1\n        }\n        n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9qhtagaz.scala:24)\n\tat Problem.main(tmp9qhtagaz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCharacters\
    \ : Long = 1\n        var firstLetter = string.charAt(0)\n        string.drop(1).foreach(letter\
    \ => {\n            if(letter != firstLetter) {\n                distinctCharacters\
    \ = distinctCharacters + 1\n            }\n        })\n        distinctCharacters\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.countDistinctCharacters(tmpn14t39lu.scala:11)\n\tat Problem$.main(tmpn14t39lu.scala:20)\n\
    \tat Problem.main(tmpn14t39lu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var countDistinctCharacters\
    \ = string.size\n        for (i <- 0 until string.size) {\n            var currChar\
    \ = string(i)\n            while (currChar != string(i+1))\n                currChar\
    \ = string.charAt(i+1)\n            countDistinctCharacters = countDistinctCharacters\
    \ - string.indexOf(charToInt(currChar))\n        }\n        countDistinctCharacters\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptodwlall.scala:15:79 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            countDistinctCharacters = countDistinctCharacters\
    \ - string.indexOf(charToInt(currChar))\n\e[31m\e[31m   |\e[0m               \
    \                                                                ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                    Not found:\
    \ charToInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var freq\
    \ = Map[Char, Long]()\n        var count = 1\n\n        for (char <- string) {\n\
    \            freq += char\n            count += 1\n        }\n\n        val maxCount\
    \ = freq.values.max\n\n        var count = 0\n        for (char <- freq.values)\
    \ {\n            if (freq(char) == maxCount) count += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzydx2knw.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvariable\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzydx2knw.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            freq += char\n\e\
    [31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Found:    (char : Char)\n\e[31m   |\e[0m                    Required:\
    \ (Char, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzydx2knw.scala:22:21\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (freq(char)\
    \ == maxCount) count += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                     Found:    (char : Long)\n\e\
    [31m   |\e[0m                     Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010487
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val result\
    \ = new mutable.HashSet[Character]()\n        string.foreach(c => {\n        \
    \    result += c\n        })\n        result.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8rr0bxci.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mCharacter\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charMap\
    \ = mutable.Map[Char, Int]()\n        for (char <- string) {\n            val\
    \ count = charMap.getOrElse(char, 0)\n            charMap += (char -> (count +\
    \ 1))\n        }\n        charMap.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph83k8trv.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var n =\
    \ 0\n        var lastChar = \"\"\n        for (c <- string.toCharArray) {\n  \
    \          if (c != lastChar) {\n                lastChar = c\n              \
    \  n = 1\n            } else {\n                n += 1\n            }\n      \
    \  }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph_fyt_r3.scala:13:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (c != lastChar) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmph_fyt_r3.scala:14:27 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                lastChar = c\n\e[31m\e[31m   |\e[0m      \
    \                     ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (c : Char)\n\e[31m   |\e[0m                           Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0\n        for (char <- string.toList) {\n            if (string.forall(_.toLowerCase\
    \ == char)) {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprkycl40h.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (string.forall(_.toLowerCase\
    \ == char)) {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toLowerCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ : Int = 0\n        string.split(\"\\\\W+\").filter(s => s != \"\").foreach(s\
    \ => {\n            if(result.contains(s.toLowerCase)) result += 1\n         \
    \   else result += 1\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwy3txqf3.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m(result.contains(s.toLowerCase))\
    \ result += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value contains is not a member of Int\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var charCount\
    \ = 0L\n        string.foreach(charToLower => {\n            if (!charToLower.toString.contains(charToLower.toLowerCase))\
    \ charCount++\n        })\n        charCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo16jia22.scala:12:84 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (!charToLower.toString.contains(charToLower.toLowerCase))\
    \ charCount++\n\e[31m\e[31m   |\e[0m                                         \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo16jia22.scala:12:59\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m\
    \ (!charToLower.toString.contains(charToLower.toLowerCase)) charCount++\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 1\n        for (char1 <- string.toLower) {\n            for (char2 <- string.toUpper)\
    \ {\n                if ((char1 == char2) || (char1.isUpper) && (char2.isUpper))\
    \ {\n                    count += 1\n                } else if ((char1 == char2)\
    \ || (char1.isLower) && (char2.isLower)) {\n                    count += 1\n \
    \               } else if ((char1 == char2) || ((char1.isUpper) && (char2.isLower)))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfdfebx4t.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (char1 <- string.toLower) {\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      value toLower is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010489
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var result\
    \ = 0L\n        var temp = 0L\n        for (char <- string.toCharArray) {\n  \
    \          if ((Character.toUpperCase(char)) == char) {\n                result\
    \ = result + 1\n            } else {\n                temp = temp + 1\n      \
    \      }\n        }\n        result += temp\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1563ge0o.scala:25)\n\tat Problem.main(tmp1563ge0o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val array\
    \ = string.toList.toArray\n        var distinctCharacters = 0\n        var previousCharacter\
    \ = \"a\"\n        for (letter <- array) {\n            if(letter == previousCharacter)\
    \ {\n                distinctCharacters = distinctCharacters + 1\n           \
    \ } else {\n                distinctCharacters = distinctCharacters + (letter.toString.length)\n\
    \            }\n            previousCharacter = letter\n        }\n        return\
    \ distinctCharacters\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxwuun95f.scala:14:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(letter == previousCharacter)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxwuun95f.scala:19:32\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            previousCharacter\
    \ = letter\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                Found:    (letter : Char)\n\e[31m\
    \   |\e[0m                                Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var uniqueChars\
    \ = mutable.Set.empty[Char]\n        string.foreach { char =>\n            if\
    \ (uniqueChars.contains(char)) {\n                uniqueChars += char\n      \
    \      }\n            else {\n                uniqueChars += char\n          \
    \  }\n        }\n        return uniqueChars.size.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_0z9n8q.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36muniqueChars\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010487
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if (string.isEmpty)\
    \ {\n            return 0\n        }\n        var count : Long = 0\n        var\
    \ cur : Char = string.head\n        for (i <- 0 until string.length - 1) {\n \
    \           val next = string.apply(i + 1)\n            if (next == cur) {\n \
    \               count += 1\n            } else {\n                count = 0\n\
    \            }\n            cur = next\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpub2on6m_.scala:28)\n\tat Problem.main(tmpub2on6m_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(x => x.toUpperCase().toLowerCase + x.toUpperCase()).distinct\n\
    \        val count = chars.count(_ == 'a')\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm058o8xq.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mx\e[0m => x.toUpperCase().toLowerCase + x.toUpperCase()).distinct\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               value toUpperCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(1l)((acc,\
    \ element) => {\n            acc += element.groupBy(x => x).size\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqrzrtsuk.scala:11:16 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            acc += element.groupBy(\e[36mx\e[0m => x).size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpqrzrtsuk.scala:11:27 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m            acc += element.groupBy(\e[36mx\e[0m => x).size\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 value groupBy is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0;\n        for (char <- string.toCharArray) {\n            count = count\
    \ + (if (char != string.toLowerCase(char)\n                              || char\
    \ != string.toUpperCase(char)\n                              || char != string.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char != string.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase.toUpperCase(char)\n\
    \                              || char\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp36i3u1t.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp36i3u1t.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpp36i3u1t.scala:12:60 --------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m            count = count + (\e[33mif\e[0m (char != string.toLowerCase(char)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                              Found:\
    \    (char : Char)\n\e[31m   |\e[0m                                          \
    \    Required: java.util.Locale\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp36i3u1t.scala:13:60 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                              || char != string.toUpperCase(char)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                                              Found:\
    \    (char : Char)\n\e[31m   |\e[0m                                          \
    \    Required: java.util.Locale\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp36i3u1t.scala:14:72 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                              || char != string.toUpperCase.toUpperCase(char)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \            Found:    (char : Char)\n\e[31m   |\e[0m                        \
    \                      Required: java.util.Locale\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpp36i3u1t.scala:15:84 ----------"
  stdout: ''
  timestamp: 1660010498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.map(_.toLowerCase\
    \ + _.toUpperCase + _.toDigit).distinct.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpgtayi7s3.scala:10:19 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.map(_.toLowerCase + _.toUpperCase + _.toDigit).distinct.length\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Wrong number of parameters, expected: 1\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(0){\
    \ case (acc, c) => (acc + (c.toLowerCase().count(_ == 'a'))) }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzscd3ta4.scala:10:55 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.foldLeft(\e[31m0\e[0m){ \e[33mcase\e[0m\
    \ (acc, c) => (acc + (c.toLowerCase().count(_ == \e[31m'a'\e[0m))) }\n\e[31m\e\
    [31m   |\e[0m                                                     ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(1L){\n\
    \            case (acc, c) => if (acc.contains(c.toLowerCase)) acc + (c.toString.toLowerCase().length\
    \ - 1) else acc + c.toString.toString.length\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7wa9f9.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m (acc, c) => \e[33mif\e[0m\
    \ (acc.contains(c.toLowerCase)) acc + (c.toString.toLowerCase().length - \e[31m1\e\
    [0m) \e[33melse\e[0m acc + c.toString.toString.length\n\e[31m\e[31m   |\e[0m \
    \                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                       value contains is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpeb7wa9f9.scala:11:48 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m (acc, c) => \e[33mif\e[0m\
    \ (acc.contains(c.toLowerCase)) acc + (c.toString.toLowerCase().length - \e[31m1\e\
    [0m) \e[33melse\e[0m acc + c.toString.toString.length\n\e[31m\e[31m   |\e[0m \
    \                                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val nCharacters\
    \ = string.length\n        val distinctCharacters = mutable.Set[Char]()\n    \
    \    for(i <- 0 until nCharacters) {\n            val c = string(i).toChar\n \
    \           if(c >= 'A' && c <= 'Z') {\n                if(distinctCharacters.contains(c))\
    \ {\n                    distinctCharacters.remove(c)\n                } else\
    \ {\n                    distinctCharacters.add(c)\n                }\n      \
    \      }\n        }\n        distinctCharacters.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qty2sz_.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctCharacters\e[0m\
    \ = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val map\
    \ = collection.mutable.Map[Char, Int]()\n        string.foreach { char =>\n  \
    \          val oldCount = map.get(char)\n            if (oldCount == null) {\n\
    \                map.put(char, 1L)\n            } else {\n                map.put(char,\
    \ oldCount.toLong + 1) // or any other operation you want\n            }\n   \
    \     }\n        map.toSeq.distinct.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqyz94yu4.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                map.put(char,\
    \ \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^\e[0m\n\
    \e[31m   |\e[0m                              Found:    (\e[31m1L\e[0m : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpqyz94yu4.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                map.put(char, oldCount.toLong + \e[31m1\e\
    [0m) \e[34m// or any other operation you want\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of Option[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charArray\
    \ = string.toLowerCase.toCharArray\n        var distinct_characters = scala.collection.mutable.Set[Char]()\n\
    \        for(char <- charArray) {\n            distinct_characters += char\n \
    \       }\n        distinct_characters.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var sum\
    \ = 0\n        for (i <- string.toLowerCase if string.charAt(i) != 'z') sum +=\
    \ string.charAt(i)\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 97\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.countDistinctCharacters$$anonfun$1(tmpuizjrv9v.scala:11)\n\tat Problem$.countDistinctCharacters$$anonfun$adapted$1(tmpuizjrv9v.scala:11)\n\
    \tat scala.collection.StringOps$WithFilter.foreach(StringOps.scala:75)\n\tat Problem$.countDistinctCharacters(tmpuizjrv9v.scala:11)\n\
    \tat Problem$.main(tmpuizjrv9v.scala:16)\n\tat Problem.main(tmpuizjrv9v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = collection.mutable.Set[Char]()\n        for (c<-string.toCharArray) if (!charSet.add(c))\
    \ charSet += c\n        charSet.size()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpjej48u4q.scala:12:16 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        charSet.size()\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e[0m \e[35msize\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        def isInLowerCase(string\
    \ : String) : Boolean = {\n            string.toLowerCase == string\n        }\n\
    \        def getChar(string : String) : Int = {\n            string.toCharArray.head\n\
    \        }\n        val charArray = string.toCharArray\n        var count = 0\n\
    \        charArray.foreach {\n            char => {\n                if (isInLowerCase(string))\
    \ {\n                    count += char.toLowerCase == char\n                }\
    \ else {\n                    count += char == char\n                }\n     \
    \       }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb58evqes.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    count += char.toLowerCase == char\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpb58evqes.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    count += char.toLowerCase == char\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb58evqes.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    count += char == char\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ value += is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charsSet\
    \ = scala.collection.mutable.Set[Char]()\n        for(ch <- string) {\n      \
    \      charsSet+=(ch)\n        }\n        return charsSet.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_cu2udm.scala:19)\n\tat Problem.main(tmpw_cu2udm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var uniqueCharacterSet\
    \ = scala.collection.mutable.Set[String]()\n        for(i <- 0 until string.length)\n\
    \            uniqueCharacterSet.addIfAbsent(string(i).toLowerCase)\n        uniqueCharacterSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ozm9p06.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            uniqueCharacterSet.addIfAbsent(string(i).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue addIfAbsent is not a member of scala.collection.mutable.Set[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ozm9p06.scala:12:53 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            uniqueCharacterSet.addIfAbsent(string(i).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if (string.length\
    \ == 0) 0\n        else string.count(_ == 'a')  + string.count(_ == 'b') +\n \
    \           string.count(_ == 'c') +\n            string.count(_ == 'd') +\n \
    \           string.count(_ == 'e') +\n            string.count(_ == 'f') +\n \
    \           string.count(_ == 'g') +\n            string.count(_ == 'h') +\n \
    \           string.count(_ == 'i') +\n            string.count(_ == 'j') +\n \
    \           string.count(_ == 'k') +\n            string.count(_ == 'l') +\n \
    \           string.count(_ == 'm') +\n            string.count(_ == 'n') +\n \
    \           string.count(_ == 'o') +\n            string.count(_ == 'p') +\n \
    \           string.count(_ == 'q') +\n            string.count(_ == 'r') +\n \
    \           string.count(_ == 's') +\n            string.count(_ == 't') +\n \
    \           string.count(_ == 'u') +\n            string.count(_ == 'v') +\n \
    \           string.count(_ == 'w') +\n            string.count(_ == 'x') +\n \
    \           string.count(_ == 'y') +\n            string.count(_ == 'z')\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp94_pj8d8.scala:40)\n\tat Problem.main(tmp94_pj8d8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val res\
    \ = new mutable.HashSet[Char]()\n        for(ch <- string.toCharArray) {\n   \
    \         res.add(ch)\n        }\n        return res.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmhzc4dvg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val count\
    \ = mutable.HashMap.empty[String, Long].withDefaultValue(1L)\n        string.foreach(x\
    \ => if (count.contains(x)) count(x) += 1\n            else count(x) = 1)\n  \
    \      count.getOrElse(\"\", 0L)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcpo82109.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m].withDefaultValue(\e[31m1L\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val counter\
    \ = new mutable.HashSet[Character]\n        string.foreach{ c =>\n           \
    \ if(!counter.contains(c))\n                counter += c\n        }\n        counter.length()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpidvz0aly.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mCharacter\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010497
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(0)((ac,\
    \ char) => {\n            val lv = ac match {\n                case 0 => char.toLowerCase\n\
    \                case _ => char\n            }\n            if (lv.contains(lv))\
    \ ac + 1\n            else ac\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb8y9z793.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e[0m \e[31m0\e[0m => char.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value toLowerCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctChars\
    \ = 0L\n        var count = 1L\n        var startIndex = 0L\n        var endIndex\
    \ = 0L\n        for(char <- string) {\n            startIndex = string.indexOf(char,\
    \ startIndex)\n            endIndex = string.indexOf(char, startIndex + 1)\n \
    \           if(startIndex > endIndex) {\n                distinctChars += 1L\n\
    \                count = endIndex - startIndex\n            }\n            else\
    \ {\n                distinctChars += 1L\n                count = 0\n        \
    \    }\n            startIndex += 1\n        }\n        distinctChars\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3rkm1g44.scala:15:32 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            startIndex = string.indexOf(char, startIndex)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mindexOf\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String,\
    \ x$1: Int): Int\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int,\
    \ x$1: Int): Int\n\e[31m   |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mmatch arguments\
    \ ((char : Char), (startIndex : Long))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3rkm1g44.scala:16:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            endIndex\
    \ = string.indexOf(char, startIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e\
    [35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String, x$1: Int): Int\n\e[31m\
    \   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int, x$1: Int): Int\n\e[31m\
    \   |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mmatch arguments ((char : Char), Long)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010497
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.map(c\
    \ => c.toUpperCase).distinct.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg6g36b8l.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.map(\e[36mc\e[0m => c.toUpperCase).distinct.length\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value toUpperCase is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charCount\
    \ = mutable.HashMap[Char, Long]()\n        for (c <- string) {\n            charCount(c)\
    \ += 1\n        }\n        charCount.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoo_oaeqx.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharCount\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val alphabet\
    \ = string.map(_.toLowerCase).getOrElse(\"\")\n        val map = new mutable.HashMap[Char,\
    \ Int]()\n        string.foreach { c =>\n            map.getOrElse(c, 0) + 1\n\
    \        }\n        alphabet.length until alphabet.indexOf(\"z\") foreach { c\
    \ =>\n            val num = map.getOrElse(c, 0) + 1\n            map.put(c, num)\n\
    \        }\n        map.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuivhvtfd.scala:10:36 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36malphabet\e[0m = string.map(_.toLowerCase).getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuivhvtfd.scala:11:22\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charSet\
    \ = mutable.Set[Char]()\n        for(str <- string) {\n            for(c <- str.toCharArray)\
    \ {\n                if(!charSet.add(c)) {\n                    charSet += c\n\
    \                }\n            }\n        }\n        charSet.size + 1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzfrigmnq.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharSet\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzfrigmnq.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m(c <- str.toCharArray) {\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     value toCharArray is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.foldLeft(1)((\
    \ acc : Long, ele : Char) => {\n            val newAcc = acc + ele.toString.toUpperCase().length\
    \ - ele.toString.toLowerCase().length\n            if(newAcc > acc) {\n      \
    \          newAcc\n            } else {\n                acc\n            }\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4zrd2dw4.scala:10:27\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        string.foldLeft(\e[31m1\e\
    [0m)(( \e[36macc\e[0m : \e[35mLong\e[0m, \e[36mele\e[0m : \e[35mChar\e[0m) =>\
    \ {\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m \
    \                          Found:    (\e[1m\e[31mLong\e[0m, Char) => AnyVal\n\e\
    [31m   |\e[0m                           Required: (\e[1m\e[32mAnyVal\e[0m, Char)\
    \ => AnyVal\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mnewAcc\e[0m = acc\
    \ + ele.toString.toUpperCase().length - ele.toString.toLowerCase().length\n\e\
    [31m12 |\e[0m            \e[33mif\e[0m(newAcc > acc) {\n\e[31m13 |\e[0m      \
    \          newAcc\n\e[31m14 |\e[0m            } \e[33melse\e[0m {\n\e[31m15 |\e\
    [0m                acc\n\e[31m16 |\e[0m            }\n\e[31m17 |\e[0m        })\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinct\
    \ : Set[Char] = Set()\n        var index = 0\n        for(char <- string.toLowerCase\
    \ if char != 'z') {\n            if(distinct.contains(char)) \n              \
    \  distinct.update(char)\n            else {\n                distinct.add(char)\n\
    \                index++\n            }\n        }\n        distinct.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw5sqhlfx.scala:17:23 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpw5sqhlfx.scala:14:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \         distinct.update(char)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter included of \e[33mmethod\e\
    [0m \e[35mupdate\e[0m in \e[33mtrait\e[0m \e[35mSetOps\e[0m: (elem: Char, included:\
    \ Boolean): Unit\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw5sqhlfx.scala:20:17\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        distinct.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ length is not a member of collection.mutable.Set[Char]\n3 errors found\n"
  stdout: ''
  timestamp: 1660010502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val distinctCount\
    \ = mutable.Map[Char,Long]()\n        for (ch <- string) {\n            distinctCount\
    \ += ch -> (distinctCount(ch) + 1)\n        }\n        distinctCount.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeui6_vvb.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdistinctCount\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val counts\
    \ = mutable.HashMap[(String, Int), Int]()\n\n        for (x <- string) {\n   \
    \         val currentCount = counts.get(x)\n\n            if (currentCount ==\
    \ null) {\n                counts.put(x, 1)\n            } else {\n          \
    \      counts.put(x, currentCount + 1)\n            }\n        }\n\n        counts.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjbmy9ip8.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[(\e\
    [35mString\e[0m, \e[35mInt\e[0m), \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charCounts\
    \ = mutable.Map.empty[Character, Long]\n        for (c <- string.toCharArray)\n\
    \            if (!charCounts.contains(c))\n                charCounts += (c, 1)\n\
    \        val uniqueCharCount = charCounts.values.distinct().length\n        charCounts.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmk7lvb2m.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharCounts\e[0m = mutable.Map.empty[\e\
    [35mCharacter\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if (string.isEmpty)\
    \ return 0\n        var distinctCount = 0\n        var result = \"\"\n       \
    \ for (character <- string) {\n            if (!char.equalsIgnoreCase(character))\
    \ {\n                if (!result.isEmpty) {\n                    distinctCount\
    \ += 1\n                    result = result.substring(0, result.length - 1) +\
    \ character\n                } else {\n                    distinctCount += 1\n\
    \                    result = character\n                }\n            }\n  \
    \      }\n        distinctCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ijg53xc.scala:14:17 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (!char.equalsIgnoreCase(character))\
    \ {\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m        \
    \         Not found: char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0ijg53xc.scala:20:29 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                    result = character\n\e[31m\e[31m   |\e[0m        \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \     Found:    (character : Char)\n\e[31m   |\e[0m                          \
    \   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinct\
    \ = 0\n        string.foreach(x => { \n            if(x.toString.toUpperCase()\
    \ == x) {\n                distinct += 1\n            } else if(x.toString.toLowerCase()\
    \ == x) {\n                distinct += 1\n            }\n        })\n        distinct.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmgxpog59.scala:12:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m(x.toString.toUpperCase() ==\
    \ x) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpmgxpog59.scala:14:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(x.toString.toLowerCase()\
    \ == x) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010506
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctChars\
    \ = scala.collection.mutable.Set[Char]();\n        for (i <- string.toCharArray)\
    \ {\n            distinctChars += i\n        }\n        return distinctChars.size;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpto7loiih.scala:19)\n\tat Problem.main(tmpto7loiih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower).distinct.toSet.toList\n        if (chars.isEmpty) 0L\
    \ else chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val map\
    \ = mutable.Map[Char,Int]()\n        string.foreach(x => map.putIfAbsent(x.toLowerCase,map.getOrElse(x.toLowerCase,\
    \ 0) + 1L))\n        map.size \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpst13s0q_.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val count\
    \ = mutable.Map[Char,Int]()\n        for (c <- string){\n            if (count.contains(c)){\n\
    \                count(c) += 1\n            } else {\n                count(c)\
    \ = 1\n            }\n        }\n        count.values.toSet.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) ==\
    \ (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xw39seh.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        // A set\
    \ is a data structure that only contains distinct elements.\n        val distinctCharacters\
    \ = new mutable.HashSet[Char]()\n        // Iterate through all characters of\
    \ the string\n        for (char <- string.toCharArray()) {\n            // Check\
    \ if the character is already in the set\n            if (distinctCharacters.contains(char))\n\
    \                // If so, increment the count by 1\n                distinctCharacters\
    \ += char\n            else {\n                // If not, add it to the set\n\
    \                distinctCharacters.+= char\n            }\n        }\n      \
    \  // Return the number of distinct characters\n        distinctCharacters.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_79ywp3h.scala:20:42 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                distinctCharacters.+= char\n\e[31m\e\
    [31m   |\e[0m                                          ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_79ywp3h.scala:11:37\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mdistinctCharacters\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mChar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010505
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var numDistinct\
    \ = 0\n        for (character <- string) {\n            val found = string.indexOf(character,\
    \ numDistinct)\n            if (found != -1) {\n                numDistinct =\
    \ found + 1\n            }\n            else {\n                numDistinct =\
    \ numDistinct + 1\n            }\n        }\n        return numDistinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdfur6my2.scala:25)\n\tat Problem.main(tmpdfur6my2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        def charToLower(char\
    \ : Char) : Char = if (char >= 'A' && char <= 'Z') (char - 'A' + 'a') else char\n\
    \        string.foldLeft(0L) { (acc, _) =>\n            (acc * 26) + (charToLower(_).toUpperCase\
    \ == charToLower(_).toLowerCase)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1da109xy.scala:10:79\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mdef\e[0m \e[36mcharToLower\e\
    [0m(\e[36mchar\e[0m : \e[35mChar\e[0m) : \e[35mChar\e[0m = \e[33mif\e[0m (char\
    \ >= \e[31m'A'\e[0m && char <= \e[31m'Z'\e[0m) (char - \e[31m'A'\e[0m + \e[31m'a'\e\
    [0m) \e[33melse\e[0m char\n\e[31m\e[31m   |\e[0m                             \
    \                                                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                          Found:   \
    \ Int\n\e[31m   |\e[0m                                                       \
    \   Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1da109xy.scala:12:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            (acc * \e\
    [31m26\e[0m) + (charToLower(_).toUpperCase == charToLower(_).toLowerCase)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments\
    \ ((<?>, <?>) => <?>)\n2 errors found\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinct\
    \ : mutable.Set[Char] = Set()\n        for (i <- 0 until string.length)\n    \
    \        distinct += string.charAt(i)\n        distinct.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprq7qqnth.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mdistinct\e[0m : mutable.Set[\e\
    [35mChar\e[0m] = Set()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        string.count(c\
    \ => string.count(c) > 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwwhct2do.scala:10:39\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        string.count(\e[36mc\e\
    [0m => string.count(c) > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         Found:    (c : Char)\n\e[31m   |\e[0m                              \
    \         Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCount\
    \ = 0\n        for (character <- string.toCharArray) {\n            if (string.count(_\
    \ == character) == 1) {\n                distinctCount += 1\n            }\n \
    \       }\n        distinctCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8zw6_agr.scala:22)\n\tat Problem.main(tmp8zw6_agr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charArray\
    \ = string.map(_.toChar)\n        val charSet = charArray.toSet\n        charSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpixl9myx0.scala:17)\n\tat Problem.main(tmpixl9myx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        if(string\
    \ == null || string.isEmpty) return 0\n\n        val ret = new mutable.HashSet[Char]\n\
    \        for(x <- string) ret.add(x)\n\n        ret.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qj1ko1y.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mret\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val uniqueChars\
    \ = mutable.Set.empty[Char]\n        for (c <- string)\n            uniqueChars\
    \ += c\n\n        uniqueChars.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqvwv72lt.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var count\
    \ = 0L\n        for(char <- string.toLowerCase + string.toUpperCase)\n       \
    \     for(i <- 1L until string.length)\n                if(string.charAt(i) ==\
    \ char)\n                    count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfrjd8lwg.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mif\e[0m(string.charAt(i)\
    \ == char)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                 Found:    (i : Long)\n\e[31m   |\e\
    [0m                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val counts\
    \ = mutable.HashMap.empty[Char, Int]\n        for (character <- string.toLowerCase\
    \ if counts(character) == null) counts += (character -> 1)\n        counts.keys\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7_zliub.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val charsCounter\
    \ = mutable.HashSet[Char]()\n        for (c <- string) {\n            charsCounter\
    \ += c\n        }\n        charsCounter.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4fjy9j9.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcharsCounter\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010507
