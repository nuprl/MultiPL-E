language: scala
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.map(_.toLowerCase).getOrElse(List(\"*\"\
    ,\"/\",\"+\",\"-\",\"**\",\"//\"))\n        val numList = operand.map(_.toLong)\n\
    \        val opList = operator.toList\n        var sum = 0\n        \n       \
    \ // Use two for loops to compute the sum of operand and operator\n        for(\
    \ i <- 0 until numList.length ) {\n            for(j <- 0 until opList.length\
    \ ) {\n                sum = sum + opList(j) * numList(i)\n            }\n   \
    \     }\n        return sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3iokq5vj.scala:23:45 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moperator\e[0m = op.map(_.toLowerCase).getOrElse(List(\e\
    [31m\"*\"\e[0m,\e[31m\"/\"\e[0m,\e[31m\"+\"\e[0m,\e[31m\"-\"\e[0m,\e[31m\"**\"\
    \e[0m,\e[31m\"//\"\e[0m))\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value getOrElse is not a member of\
    \ List[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660013120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var opList = op.toList\n        val operand_copy = operand.clone()\n\
    \        val stack = mutable.Stack[Int]()\n        var count = 0\n\n        //\
    \ Operator list has at least one operator\n        opList.foreach(x => {\n   \
    \         val value = operand_copy(0)\n            val next_value = operand_copy(1)\n\
    \            val index = operand.indexOf(x)\n            operand_copy -= 1\n \
    \           if (index > 0) {\n                stack.push(operand(index))\n   \
    \             count += 1\n            }\n            else {\n                val\
    \ val = stack.pop()\n                val new_value = operand_copy(val) + value\n\
    \                operand_copy -= 1\n                stack.push(new_value)\n  \
    \              count += 1\n            }\n        })\n\n        // Operand list\
    \ has at least two operands\n        val value2 = operand_copy(0)\n        val\
    \ value3 = operand_copy(1)\n        operand_copy -= 1\n        if (operand_copy.nonEmpty)\
    \ {\n            stack.push(value2)\n            count += 1\n        }\n     \
    \   else {\n            val result2 = stack.pop()\n            val result3 = stack.pop()\n\
    \            val result = value2 + value3 * result2 - result3\n            operand_copy\
    \ -= 1\n            stack.push(result)\n            count += 1\n        }\n  \
    \      operand_copy.foreach(x => {\n            val value = operand_copy(0)\n\
    \            val next_value = operand_copy(1)\n            operand_copy -= 1\n\
    \            if (operand_copy.nonEmpty) {\n                stack.push(operand(index))\n\
    \                count += 1\n            }\n            else {\n             \
    \   val val = stack.pop()\n                val new_value = operand_copy(val) +\
    \ value\n                operand_copy -= 1\n                stack.push(new_value)\n\
    \                count += 1\n            }\n        })\n        stack.pop()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwi1z753t.scala:39:20 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                \e[33mval\e[0m \e[33mval\e[0m = stack.pop()\n\
    \e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m           \
    \         pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpwi1z753t.scala:40:45 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m                \e[33mval\e[0m \e[36mnew_value\e[0m = operand_copy(\e\
    [33mval\e[0m) + value\n\e[31m\e[31m   |\e[0m                                 \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmpwi1z753t.scala:72:20 ---------------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m                \e[33mval\e[0m \e[33mval\e[0m = stack.pop()\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m                   \
    \ pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwi1z753t.scala:73:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m73 |\e[0m                \e[33mval\e\
    [0m \e[36mnew_value\e[0m = operand_copy(\e[33mval\e[0m) + value\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31mval\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpwi1z753t.scala:24:35\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36moperand_copy\e[0m = operand.clone()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e\
    [0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot be accessed\
    \ as a member of (operand : List[Long]) from module class Problem$.\n\e[31m  \
    \ |\e[0m Access to protected \e[33mmeth"
  stdout: ''
  timestamp: 1660013117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operators = op.map(op => Operator.valueOf(op)).toList\n\
    \        val operands = operand.map(operand => operand.toInt).toList\n       \
    \ val length = operators.length\n        val first = operators.head\n        if\
    \ (length < 1 || length < operands.length) {\n            return 0\n        }\n\
    \        var ans = 0\n        // Recursive definition\n        def calc(i: Int,\
    \ j: Int, op : String, ops : List[String], o : List[Long]) : Long = {\n      \
    \      // End of recursion\n            if (i == length) {\n                return\
    \ ans * operands.head\n            }\n            val a = operators.apply(i)\n\
    \            val b = operators.apply(j)\n            if (a == 0) {\n         \
    \       calc(i, j + 1, op, ops, o)\n            } else {\n                // Handle\
    \ negative numbers\n                val c = if (j == 0) -operands.head\n     \
    \           else operands.apply(j)\n                // Recursive call\n      \
    \          val res = calc(i - 1, j - 1, op + a + b, ops, o :+ c)\n           \
    \     // Handle positive numbers\n                val d = if (i == length) 0\n\
    \                else operands.apply(i)\n                // Recursive call\n \
    \               val res1 = calc(i, j + 1, op + b + a, ops, o :+ d)\n         \
    \       // Handle zero numbers\n                val res = if (a == \"-\") res1\
    \ - res\n                else res1 + res\n                ans = res\n        \
    \    }\n        }\n        calc(length / 2, length / 2, first, operators, operands)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpriv2es0v.scala:23:37 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moperators\e[0m = op.map(\e\
    [36mop\e[0m => Operator.valueOf(op)).toList\n\e[31m\e[31m   |\e[0m           \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                 Not found: Operator\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpriv2es0v.scala:53:20 ---------------------------\e[0m\e\
    [0m\n\e[31m53 |\e[0m                \e[33mval\e[0m \e[36mres\e[0m = \e[33mif\e\
    [0m (a == \e[31m\"-\"\e[0m) res1 - res\n\e[31m\e[31m   |\e[0m                ^\e\
    [0m\n\e[31m   |\e[0mres is already defined as \e[33mvalue\e[0m \e[35mres\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m54 |\e[0m                \e\
    [33melse\e[0m res1 + res\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpriv2es0v.scala:55:22\
    \ --------------------\e[0m\e[0m\n\e[31m55 |\e[0m                ans = res\n\e\
    [31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (res : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpriv2es0v.scala:58:55\
    \ --------------------\e[0m\e[0m\n\e[31m58 |\e[0m        calc(length / \e[31m2\e\
    [0m, length / \e[31m2\e[0m, first, operators, operands)\n\e[31m\e[31m   |\e[0m\
    \                                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (operands : List[Int])\n\
    \e[31m   |\e[0m                                        Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Step 1: Find max length.\n        var maxLength = 0\n\
    \        var oper = 0\n        for (ope <- op) {\n            if (ope == '+' ||\
    \ ope == '-' || ope == '*' || ope == '/' || ope == '%' || ope == '**') {\n   \
    \             oper = oper\n                maxLength = op.size\n            }\n\
    \        }\n        // Step 2: Build a map of operators and their corresponding\
    \ operands.\n        var operatorMap : mutable.Map[String, List[Long]] = mutable.Map[String,\
    \ List[Long]]()\n        var i = 1\n        while ( i < maxLength ) {\n      \
    \      if (i == maxLength) {\n                operatorMap += (op(oper.charAt(0).toInt)\
    \ + oper.charAt(1).toInt) -> operand.take(i).reverse\n            } else {\n \
    \               operatorMap += (oper.charAt(0).toInt) + oper.charAt(1).toInt ->\
    \ operand.take(i).toList\n            }\n            i += 1\n        }\n     \
    \   // Step 3: Calculate the expression and return.\n        var result = 0L\n\
    \        var stack : List[Long] = List()\n        for ( key <- operatorMap.toList\
    \ ) {\n            stack = stack :+ operatorMap(key).head\n            result\
    \ += operatorMap(key).last\n        }\n        stack.reverse\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv4xfy424.scala:27:93 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (ope == \e[31m'+'\e[0m || ope\
    \ == \e[31m'-'\e[0m || ope == \e[31m'*'\e[0m || ope == \e[31m'/'\e[0m || ope ==\
    \ \e[31m'%'\e[0m || ope == \e[31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0msymbol literal '** is no longer supported,\n\e\
    [31m   |\e[0muse a string literal \"**\" or an application Symbol(\"**\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{**} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmpv4xfy424.scala:27:96\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \     \e[33mif\e[0m (ope == \e[31m'+'\e[0m || ope == \e[31m'-'\e[0m || ope ==\
    \ \e[31m'*'\e[0m || ope == \e[31m'/'\e[0m || ope == \e[31m'%'\e[0m || ope == \e\
    [31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m                                      \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                              unclosed character literal\n\e\
    [31m\e[31m-- Error: /tmp/tmpv4xfy424.scala:27:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (ope == \e[31m'+'\e[0m || ope\
    \ == \e[31m'-'\e[0m || ope == \e[31m'*'\e[0m || ope == \e[31m'/'\e[0m || ope ==\
    \ \e[31m'%'\e[0m || ope == \e[31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpv4xfy424.scala:27:30\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \     \e[33mif\e[0m (ope == \e[31m'+'\e[0m || ope == \e[31m'-'\e[0m || ope ==\
    \ \e[31m'*'\e[0m || ope == \e[31m'/'\e[0m || ope == \e[31m'%'\e[0m || ope == \e\
    [31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types "
  stdout: ''
  timestamp: 1660013122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var sum = 0L\n        operand.foreach{i =>\n           \
    \ val op = op(0)\n            if (op == \"+\") {\n                sum += i\n \
    \           } else if (op == \"-\") {\n                sum -= i\n            }\
    \ else if (op == \"*\") {\n                sum *= i\n            } else if (op\
    \ == \"//\") {\n                sum /= i\n            } else if (op == \"**\"\
    ) {\n                sum **= i\n            }\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg32ae2s9.scala:25:21 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mop\e[0m = op(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m      \
    \               Recursive \e[33mvalue\e[0m \e[35mop\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg32ae2s9.scala:35:20 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                sum **= i\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                value **= is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def doOp(op : List[String], operand : List[Long], r : Long)\
    \ : Long = {\n            // Base case\n            if((op.length == 0) || (operand.length\
    \ == 0)) {\n                return r\n            }\n            \n          \
    \  // Recursive case\n            val op = op(0)\n            val operand1 = operand(0)\n\
    \            val operand2 = operand(1)\n            val r = doOp(op,operand1,r)\
    \ + doOp(op,operand2,r)\n            doOp(op,operand,r)\n        }\n        val\
    \ op = op(0)\n        val operand1 = operand(0)\n        val operand2 = operand(1)\n\
    \        val r = doOp(op,operand1,0L) + doOp(op,operand2,0L)\n        doOp(op,operand,0L)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwhpgh26o.scala:30:21 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mop\e[0m = op(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m      \
    \               Recursive \e[33mvalue\e[0m \e[35mop\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwhpgh26o.scala:33:28 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = doOp(op,operand1,r)\
    \ + doOp(op,operand2,r)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (operand1 : Long)\n\e\
    [31m   |\e[0m                            Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwhpgh26o.scala:33:37 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = doOp(op,operand1,r)\
    \ + doOp(op,operand2,r)\n\e[31m\e[31m   |\e[0m                               \
    \      ^\e[0m\n\e[31m   |\e[0m                                     Recursive \e\
    [33mvalue\e[0m \e[35mr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwhpgh26o.scala:33:50 --------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = doOp(op,operand1,r)\
    \ + doOp(op,operand2,r)\n\e[31m\e[31m   |\e[0m                               \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                  Found:    (operand2 : Long)\n\e[31m   |\e[0m              \
    \                               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpwhpgh26o.scala:33:59 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = doOp(op,operand1,r)\
    \ + doOp(op,operand2,r)\n\e[31m\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1660013122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.size == 0) throw new ArithmeticException(\"operator\
    \ list is empty\")\n        if (operand.size == 0) throw new ArithmeticException(\"\
    operand list is empty\")\n        var sum = 0\n        val operator = op.head\n\
    \        val operands = operand.tail\n\n        for (i <- 1 to operands.size)\
    \ {\n            val op = operator.charAt(op.length - i - 1)\n            val\
    \ temp = if (op == '+') operands.head + operands.tail(i) else operands.head -\
    \ operands.tail(i)\n            sum =  sum + temp\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq3h07geo.scala:30:37 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mop\e[0m = operator.charAt(op.length\
    \ - i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \    ^\e[0m\n\e[31m   |\e[0m                                     Recursive \e\
    [33mvalue\e[0m \e[35mop\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpq3h07geo.scala:32:19 --------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            sum =  sum + temp\n\e[31m\e[31m   |\e[0m     \
    \              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:    Long\n\
    \e[31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operations = op zip (operand drop 1)\n        val numOperations\
    \ = operations.size\n        val operands = operations.map(x => x._2)\n      \
    \  val result = operands.foldLeft(0)((a, b) => a ++ b << 1)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu76iphnc.scala:26:54 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = operands.foldLeft(\e\
    [31m0\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a ++ b << \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                         value ++ is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660013121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Solution 1: \n        val exp = operand.toList.zipWithIndex.flatMap{case\
    \ (xs, i) =>\n            val op = op(i)\n            xs.zip(ops.map(_.apply))\n\
    \        }.filter(x => x != 0).sum\n\n        // Solution 2: \n        val exp\
    \ = operand.toList.zipWithIndex.flatMap{case (xs, i) =>\n            val op =\
    \ op(i)\n            xs.zip(ops.map(_.apply)).filter(_._1 != 0).sum\n        }\n\
    \n        // Solution 3:\n        val exp = operand.toList.zipWithIndex.flatMap{case\
    \ (xs, i) =>\n            val op = op(i)\n            ops.map(_.apply(xs)).sum\n\
    \        }\n\n        \n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfouxe1aj.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mexp\e[0m = operand.toList.zipWithIndex.flatMap{\e\
    [33mcase\e[0m (xs, i) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mexp\
    \ is already defined as \e[33mvalue\e[0m \e[35mexp\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mop\e[0m\
    \ = op(i)\n\e[31m32 |\e[0m            xs.zip(ops.map(_.apply)).filter(_._1 !=\
    \ \e[31m0\e[0m).sum\n\e[31m33 |\e[0m        }\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfouxe1aj.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mexp\e[0m = operand.toList.zipWithIndex.flatMap{\e\
    [33mcase\e[0m (xs, i) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mexp\
    \ is already defined as \e[33mvalue\e[0m \e[35mexp\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m37 |\e[0m            \e[33mval\e[0m \e[36mop\e[0m\
    \ = op(i)\n\e[31m38 |\e[0m            ops.map(_.apply(xs)).sum\n\e[31m39 |\e[0m\
    \        }\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfouxe1aj.scala:26:15\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            xs.zip(ops.map(_.apply))\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ zip is not a member of Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfouxe1aj.scala:26:19\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            xs.zip(ops.map(_.apply))\n\
    \e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m            \
    \       Not found: ops\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpfouxe1aj.scala:27:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ }.filter(x => x != \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                \
    \                 ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mCharIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNume"
  stdout: ''
  timestamp: 1660013121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var total = 0L\n        for(i <- 0 until operand.length)\n\
    \        {\n            total += operand(i)*op.head(i-1)\n        }\n        total\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.doAlgebra$$anonfun$1(tmp224vi0pw.scala:26)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.doAlgebra(tmp224vi0pw.scala:27)\n\
    \tat Problem$.main(tmp224vi0pw.scala:31)\n\tat Problem.main(tmp224vi0pw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = mutable.Stack[Long]()\n        for (e <- operand)\
    \ {\n            if (stack.size > 0) {\n                stack.push(e)\n      \
    \      } else if (stack.size != 0) {\n                stack.push(e * stack.pop)\n\
    \            }\n        }\n        val result = 0L\n        for (f <- op) {\n\
    \            if (f == \"+\") {\n                result = result + stack.pop()\n\
    \            } else if (f == \"-\") {\n                result = result - stack.pop()\n\
    \            } else if (f == \"*\") {\n                result = result * stack.pop()\n\
    \            } else if (f == \"//\") {\n                result = result / stack.pop()\n\
    \            } else if (f == \"**\") {\n                result = result ** stack.pop()\n\
    \            } else {\n                throw new Exception(\"Unknown Algebra Operation!\"\
    )\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11adcl6_.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp11adcl6_.scala:34:23 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                result = result + stack.pop()\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp11adcl6_.scala:36:23 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                result = result - stack.pop()\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp11adcl6_.scala:38:23 -----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                result = result * stack.pop()\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp11adcl6_.scala:40:23 -----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                result = result / stack.pop()\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp11adcl6_.scala:42:32 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                result = result ** stack.pop()\n\e[31m\e\
    [31m   |\e[0m                    "
  stdout: ''
  timestamp: 1660013121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if(!op.isEmpty && !operand.isEmpty) {\n            val ops\
    \ = op.zipWithIndex\n            val ops = ops.filter(_._2 != ops.length - 1)\n\
    \            val operands = operand.zipWithIndex\n            val operands = operands.filter(_._2\
    \ != operands.length - 1)\n            val left = operands(0)\n            val\
    \ right = operands(1)\n            var sum = 0L\n            val leftMap = ops.map(_._1)\n\
    \            val rightMap = ops.map(_._2)\n            ops.foreach {\n       \
    \         case (\"+\", j) => sum = sum + leftMap(j) * rightMap(j)\n          \
    \      case (\"-\", j) => sum = sum - leftMap(j) * rightMap(j)\n             \
    \   case (\"*\", j) => sum = sum + leftMap(j) * rightMap(j)\n                case\
    \ (\"//\", j) => sum = sum + (leftMap(j) floor / rightMap(j))\n              \
    \  case (\"**\", j) => sum = sum + (leftMap(j) ^ rightMap(j))\n            }\n\
    \            sum\n        } else {\n            0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4f939rwf.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mops\e[0m = ops.filter(_._2\
    \ != ops.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mops is already defined as \e[33mvalue\e[0m \e[35mops\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4f939rwf.scala:27:16 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mval\e[0m \e[36moperands\e[0m = operands.filter(_._2\
    \ != operands.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperands is already defined as \e[33mvalue\e[0m \e[35moperands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp4f939rwf.scala:34:39 --------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m                \e[33mcase\e[0m (\e[31m\"+\"\e[0m, j) => sum =\
    \ sum + leftMap(j) * rightMap(j)\n\e[31m\e[31m   |\e[0m                      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmp4f939rwf.scala:35:43 -----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mcase\e[0m (\e[31m\"-\"\e[0m, j)\
    \ => sum = sum - leftMap(j) * rightMap(j)\n\e[31m\e[31m   |\e[0m             \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Lo"
  stdout: ''
  timestamp: 1660013123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val length = operand.length\n        val operator = op.length\n\
    \        require(operator > 0 && length >= 2 && length == operator, \"Invalid\
    \ parameter values: operator length != operand length\")\n        require(op.length\
    \ > 0 && length >= 1, \"Invalid parameter values: operator list has only 1 operator\"\
    )\n        val opList = new mutable.LinkedList[Long]()\n        var sum = 0L\n\
    \        var i = 0\n        while (i < length) {\n            val op = op.head\n\
    \            val operand = operand(i).toLong\n            val opVal = operation(op,\
    \ operand)\n            opList += opVal\n            sum += opVal\n          \
    \  i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4bo9cn1y.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mopList\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4bo9cn1y.scala:31:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e\
    [0m \e[36mop\e[0m = op.head\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35mop\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4bo9cn1y.scala:32:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e\
    [0m \e[36moperand\e[0m = operand(i).toLong\n\e[31m\e[31m   |\e[0m            \
    \              ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e\
    [0m \e[35moperand\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4bo9cn1y.scala:33:24 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m            \e[33mval\e[0m \e[36mopVal\e[0m = operation(op, operand)\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \               Not found: operation\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var sum: Long = 0\n        var operatorCount = 0\n     \
    \   val numList = (operand.size).fill(0L).map(_ => 0)\n        val opList = (op.size).fill(0).map(_\
    \ => 0)\n        numList(0) = operand(0)\n        val opList2 = op.tail.map(op2\
    \ => numList(0) * op2(1))\n        for (i in 1 until operand.size-1) {\n     \
    \       numList(i) = operand(i) + numList(i-1)\n        }\n        val listSize\
    \ = (numList.size)\n        if (listSize <= 1) {\n            sum = numList(0)\n\
    \        } else if (listSize > 2) {\n            for (i in 1 until listSize-1)\
    \ {\n                sum += opList(operatorCount) * numList(i)\n            }\n\
    \            operatorCount += 1\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps2bpfngb.scala:29:42 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (i in \e[31m1\e[0m until operand.size-\e\
    [31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                                         \
    \ ^\e[0m\n\e[31m   |\e[0m                                          '<-' expected,\
    \ but '{' found\n\e[31m\e[31m-- [E020] Syntax Error: /tmp/tmps2bpfngb.scala:35:10\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        } \e[33melse\e\
    [0m \e[33mif\e[0m (listSize > \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \ ^^^^\e[0m\n\e[31m   |\e[0m          \e[33myield\e[0m or \e[33mdo\e[0m expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2bpfngb.scala:25:37\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mnumList\e[0m = (operand.size).fill(\e[31m0L\e[0m).map(_ => \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                      value fill is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps2bpfngb.scala:26:31 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopList\e[0m = (op.size).fill(\e\
    [31m0\e[0m).map(_ => \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value fill is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2bpfngb.scala:31:9\
    \ -------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import colle"
  stdout: ''
  timestamp: 1660013122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opIndex =op.indexWhere(c => c==\"*\").getOrElse(op.size-1)\n\
    \        val op1 = opIndex - 1\n        val op2 = opIndex + 1\n        var result\
    \ = 0\n        for (i<-1 to operand.size-1) {\n            if (i == op1) result\
    \ += (operand(i) * operand(op2))\n            if (i == op2) result -= (operand(i)\
    \ * operand(op1))\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4znknv8s.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopIndex\e[0m =op.indexWhere(\e\
    [36mc\e[0m => c==\e[31m\"*\"\e[0m).getOrElse(op.size-\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value getOrElse is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4znknv8s.scala:28:33 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (i == op1) result += (operand(i)\
    \ * operand(op2))\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4znknv8s.scala:29:33\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m\
    \ (i == op2) result -= (operand(i) * operand(op1))\n\e[31m\e[31m   |\e[0m    \
    \                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ -= is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660013122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var sum = 0\n        for( i <- 0 until operand.length )\
    \ {\n            sum += operate(op(i), operand(i))\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0di9rr0n.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            sum += operate(op(i), operand(i))\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0di9rr0n.scala:25:19 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            sum += operate(op(i), operand(i))\n\e[31m\e[31m   |\e[0m      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: operate\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Solution starts here.\n        // Define an empty list.\n\
    \        val res = mutable.ListBuffer.empty[Long]\n        \n        // If only\
    \ one operator, append operand to the list.\n        if(op.size === 1) {\n   \
    \         res += operand(0)\n        }\n        \n        // If two operators,\
    \ append the result of addition to the list.\n        if(op.size === 2) {\n  \
    \          res += operand(0) + operand(1)\n        }\n        \n        // If\
    \ more than two operators, append the result of multiplication to the list.\n\
    \        if(op.size >= 3) {\n            \n            // Initialize multiplication\
    \ result.\n            var mulRes : Long = 1\n            \n            // Loop\
    \ through the operandos and operators, evaluating \n            // the expression\
    \ and appending the result to the list.\n            for(i <- 0 until operand.size\
    \ - 1) {\n                val op1 = op(0)\n                val op2 = op(1)\n \
    \               val op3 = op(2)\n                val op4 = op(3)\n           \
    \     val op5 = op(4)\n                val op6 = op(5)\n                val op7\
    \ = op(6)\n                val op8 = op(7)\n                \n               \
    \ mulRes *= operand(i)\n                \n                if(op1 != \"+\") {\n\
    \                    if(op2 == \"+\") {\n                        res += mulRes\n\
    \                    } else if(op2 == \"-\") {\n                        res +=\
    \ mulRes * -1\n                    } else if(op2 == \"*\") {\n               \
    \         res += mulRes\n                    } else if(op2 == \"//\") {\n    \
    \                    res += mulRes / operand(i)\n                    } else if(op2\
    \ == \"**\") {\n                        res += mulRes ** operand(i)\n        \
    \            }\n                }\n                \n                if(op3 !=\
    \ \"+\") {\n                    if(op4 == \"+\") {\n                        res\
    \ += mulRes\n                    } else if(op4 == \"-\") {\n                 \
    \       res += mulRes * -1\n                    } else if(op4 == \"*\") {\n  \
    \                      res += mulRes\n                    } else if(op4 == \"\
    //\") {\n                        res += mulRes / operand(i)\n                \
    \    } else if(op4 == \"**\") {\n                        res += mulRes ** operand(i)\n\
    \                    }\n                }\n                \n                if(op5\
    \ != \"+\") {\n                    if(op6 == \"+\") {\n                      \
    \  res += mulRes\n                    } else if(op6 == \"-\") {\n            \
    \            res += mulRes * -1\n                    } else if(op6 == \"*\") {\n\
    \                        res += mulRes\n                    } else if(op6 == \"\
    //\") {\n                        res += mulRes / operand(i)\n                \
    \    } else if(op6 == \"**\") {\n                        res += mulRes ** operand(i)\n\
    \                    }\n                }\n                \n                if(op7\
    \ != \"+\"\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp20kt8up9.scala:100:4 ---------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp20kt8up9.scala:108:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m108 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp20kt8up9.scala:25:18 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp20kt8up9.scala:28:19 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(op.size === \e[31m1\e[0m) {\n\e\
    [31m\e[31m   |\e[0m           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value\
    \ === is not a member of Int - did you mean Int.==?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp20kt8up9.scala:33:19 ------------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m        \e[33mif\e[0m(op.size === \e[31m2\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value === is\
    \ not a member of Int - did you mean Int.==?\n\e[33m\e[33m-- Warning: /tmp/tmp20kt8up9.scala:101:4\
    \ ---------------------------------------\e[0m\e[0m\n\e[33m101 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m    |\e[0m    ^\e[0m\n\e[33m    |\e[0m    Line is indented too far\
    \ to the left, or a `}` is missing\n1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1660013121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val res = 0\n        // build up the expression\n      \
    \  val operandLength = operand.size\n        val operatorLength = op.size\n  \
    \      var i = operandLength-1\n        while (i >= 0) {\n            res += operand(i)\
    \ * op(operatorLength-i-1)\n            i -= 1\n        }\n        res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvg8uw1ae.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            res += operand(i) * op(operatorLength-i-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \         value += is not a member of Int - did you mean res.!=?\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpvg8uw1ae.scala:29:30 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            res += operand(i) * op(operatorLength-i-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e[0m\
    \ in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ (String)\n2 errors found\n"
  stdout: ''
  timestamp: 1660013120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val length = op.length\n        if (length < 2 || length\
    \ != operand.length)\n            throw new Exception(\"Invalid list\")\n    \
    \    val ops = op.map(x => x.toDouble)\n        val operands = operand.map(x =>\
    \ x.toInt)\n        val result = 0.0\n        for (i <- 0 until length)\n    \
    \        for (j <- 0 until length)\n                result += op(j)\n        \
    \    for (k <- 0 until operands(length))\n                result -= operands(k)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpex08zi7s.scala:31:23 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                result += op(j)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Double - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpex08zi7s.scala:33:23 ------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m                result -= operands(k)\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Double - did you mean result.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpex08zi7s.scala:34:8 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    (result : Double)\n\e[31m   |\e[0m        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val map = Map(op.length -> 0)\n        operand.foreach(\
    \ x => {\n            for(i <- 0 until op.length) map(i) += x % 2\n        })\n\
    \        val op = op.tail\n        operand.foreach( x => {\n            for(i\
    \ <- 0 until op.length) map(i) -= x % 2\n        })\n        operand.foreach(\
    \ x => {\n            for(i <- 0 until op.length) map(i) *= x % 2\n        })\n\
    \        operand.foreach( x => {\n            for(i <- 0 until op.length) map(i)\
    \ /= x % 2\n        })\n        operand.foreach( x => {\n            for(i <-\
    \ 0 until op.length) map(i) //= x % 2\n        })\n        val sum = 0L\n    \
    \    operand.foreach( x => {\n            val r = map(x) // % 2 == 1\n       \
    \     sum -= r\n        })\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvz852a3t.scala:27:17 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mop\e[0m = op.tail\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mop\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvz852a3t.scala:25:44 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m(i <- \e[31m0\e[0m until op.length)\
    \ map(i) += x % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \         Found:    (i : Int)\n\e[31m   |\e[0m                               \
    \             Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvz852a3t.scala:29:44 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[33mfor\e[0m(i <- \e[31m0\e[0m until op.length) map(i) -=\
    \ x % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \        ^\e[0m\n\e[31m   |\e[0m                                            Found:\
    \    (i : Int)\n\e[31m   |\e[0m                                            Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvz852a3t.scala:32:44\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until op.length) map(i) *= x % \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                            ^\e[0m\n\e[31m   |\e[0m  \
    \                                          Found:    (i : Int)\n\e[31m   |\e[0m\
    \                                            Required: Nothing\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvz852a3t.scala:35:44 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mfor\e[0m(i <- \e[31m0\e[0m until op.length)\
    \ map(i) "
  stdout: ''
  timestamp: 1660013122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def eval(operator: List[String], operands: List[Long], index:\
    \ Int): Long = {\n            if (index >= operator.length){\n               \
    \ return operands(0)\n            }\n            val operand1 = operands(index)\n\
    \            val operand2 = eval(operator, operands, index + 1)\n            val\
    \ operator1 = operator(index)\n            \n            val ret = operand1.getClass.getMethod(\"\
    $\"+operator1).invoke(operand1, operand2)\n            ret\n        }\n      \
    \  val operatorList = op\n        val operands = operand\n        val ret = 0\n\
    \        val ret2 = 0\n        val operator1 = operatorList(0)\n        val operator2\
    \ = operatorList(1)\n        val operand1 = operands(0)\n        val operand2\
    \ = operands(1)\n        val ret1 = eval(operatorList, operands, 0)\n        val\
    \ ret2 = eval(operatorList, operands, 1)\n        val ret = ret1 + ret2\n    \
    \    ret\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3bodvkbs.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mret2\e[0m = eval(operatorList,\
    \ operands, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mret2 is already defined as \e[33mvalue\e[0m \e[35mret2\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3bodvkbs.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36mret\e[0m = ret1 + ret2\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mret is already defined as\
    \ \e[33mvalue\e[0m \e[35mret\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3bodvkbs.scala:32:12 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            ret\n\e[31m\e[31m   |\e[0m            ^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (ret : Object)\n\e[31m   |\e[0m    \
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.size != operand.size) throw new IllegalArgumentException(\"\
    Operator and operand lists must have same length\")\n        if (op.size == 0)\
    \ throw new IllegalArgumentException(\"Operator list must have at least one operator\"\
    )\n        if (operand.size == 0) throw new IllegalArgumentException(\"Operand\
    \ list must have at least two operands\")\n        val result = 0L\n        val\
    \ operators = op.tail\n        val operator = operators.head\n        val operands\
    \ = operand.tail\n        val operand = operands.head\n        operands.foreach(operand\
    \ => {\n            if (operator.equals(\"+\")) result += operand\n          \
    \  else if (operator.equals(\"-\")) result -= operand\n            else if (operator.equals(\"\
    *\")) result *= operand\n            else if (operator.equals(\"//\")) result\
    \ /= operand\n            else if (operator.equals(\"**\")) result **= operand\n\
    \            else throw new IllegalArgumentException(\"Illegal operator: \" +\
    \ operator)\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp4viqmjp.scala:29:23 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36moperands\e[0m = operand.tail\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Recursive \e[33mvalue\e[0m \e[35moperand\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Initializing the variables\n        val stack : Stack[Int]\
    \ = Stack()\n        var ans = 0.0\n        // The basic operation stack\n   \
    \     stack push 0\n        // The operand stack\n        operand foreach { i\
    \ => stack push i }\n        // The operator stack\n        op foreach { op =>\
    \ {\n            op match {\n                case \"+\" => {\n               \
    \     ans += ((stack pop) * (stack pop))\n                }\n                case\
    \ \"-\" => {\n                    ans -= ((stack pop) * (stack pop))\n       \
    \         }\n                case \"*\" => {\n                    ans *= ((stack\
    \ pop) * (stack pop))\n                }\n                case \"//\" => {\n \
    \                   ans /= (math.pow(stack pop, math.ceil(stack pop)))\n     \
    \           }\n                case \"**\" => {\n                    ans *= (math.pow(stack\
    \ pop, stack pop))\n                }\n                default => {\n        \
    \            throw new IllegalArgumentException(\"Invalid operator.\")\n     \
    \           }\n            }\n            stack push (op match {\n           \
    \     case \"+\" => stack pop\n                case \"-\" => stack pop\n     \
    \           case \"*\" => stack pop\n                case \"//\" => math.pow(stack\
    \ pop, math.ceil(stack pop))\n                case \"**\" => stack pop\n     \
    \           default => throw new IllegalArgumentException(\"Invalid operator.\"\
    )\n            })\n        }}\n        ans.toDouble\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptvjv_ysj.scala:34:38 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    ans += ((stack pop) * (stack pop))\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      expression expected but \e[31m')'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptvjv_ysj.scala:34:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                    ans\
    \ += ((stack pop) * (stack pop))\n\e[31m\e[31m   |\e[0m                      \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmptvjv_ysj.scala:37:38 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    ans -= ((stack pop) * (stack pop))\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      expression expected but \e[31m')'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptvjv_ysj.scala:37:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                    ans\
    \ -= ((stack pop) * (stack pop))\n\e[31m\e[31m   |\e[0m                      \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmptvjv_ysj.scala:40:38 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    ans *= ((stack pop) * (stack pop))\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      expression expected but \e[31m')'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation avai"
  stdout: ''
  timestamp: 1660013122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // (1) Build the expression string.\n        var exp = operand(0).toString\
    \ + op(0).toString\n        // (2) Add all elements from operand list.\n     \
    \   for( i <- 1 to operand(1).size ) {\n            exp = exp + op(i).toString\
    \ + \"(\" + operand(0) +\")\"\n        }\n        // (3) Build the algebra expression\
    \ from string.\n        val expr = \"(\" + exp + \")\"\n        // (4) Evaluate\
    \ the expression.\n        expr.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi915sz6e.scala:26:34 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m to operand(\e\
    [31m1\e[0m).size ) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value size is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operands = operand.map(i => Array(i)).map(a => Array(a))\n\
    \        val operators = op.map(o => Array(o))\n        val result = operands.map\
    \ {\n            a =>\n            operators.map {\n                b =>\n   \
    \             a(b(0))*a(b(1)) + a(b(0))*a(b(1)) - a(b(0))*a(b(1))\n          \
    \  }.sum\n        }.sum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphha4659e.scala:29:19\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                a(b(\e[31m0\e\
    [0m))*a(b(\e[31m1\e[0m)) + a(b(\e[31m0\e[0m))*a(b(\e[31m1\e[0m)) - a(b(\e[31m0\e\
    [0m))*a(b(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e\
    [31m   |\e[0m                  Found:    String\n\e[31m   |\e[0m             \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphha4659e.scala:29:27\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                a(b(\e[31m0\e\
    [0m))*a(b(\e[31m1\e[0m)) + a(b(\e[31m0\e[0m))*a(b(\e[31m1\e[0m)) - a(b(\e[31m0\e\
    [0m))*a(b(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    String\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmphha4659e.scala:30:17 -----------------------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            }.sum\n\e[31m\e[31m   |\e[0m                 ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mDoubleIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmphha4659e.scala:31:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        }.sum\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mDoubleIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660013130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operandList = new mutable.ArrayBuffer[Long]()\n    \
    \    var opIndex = 0\n        var opIndex2 = -1\n        var res = 0L\n      \
    \  var i = 0\n        while(i < operand.length) {\n            if(opIndex == op.length)\
    \ {\n                opIndex = 0\n                opIndex2 = -1\n            \
    \    operandList.clear()\n                i = 0\n            }\n            \n\
    \            if(opIndex2 == op.length) {\n                opIndex2 = 0\n     \
    \           opIndex2 = -1\n                operandList.clear()\n             \
    \   i = 0\n            }\n            \n            operandList += operand(i)\n\
    \            val tmpIndex = operandList.length - 1\n            \n           \
    \ if(opIndex == 0 && tmpIndex >= 0) {\n                val tmp = operand(tmpIndex)\n\
    \                opIndex = tmpIndex\n                tmpIndex -= 1\n         \
    \       res = res + tmp\n                i += 1\n                continue\n  \
    \          }\n            \n            if(opIndex2 == 0 && tmpIndex >= 0) {\n\
    \                val tmp = operand(tmpIndex)\n                opIndex2 = tmpIndex\n\
    \                tmpIndex -= 1\n                res = res - tmp\n            \
    \    i += 1\n                continue\n            }\n            \n         \
    \   if(opIndex == op.length - 1) {\n                val tmp = operand(tmpIndex)\n\
    \                opIndex = tmpIndex\n                tmpIndex -= 1\n         \
    \       res = res + tmp\n                i += 1\n                continue\n  \
    \          }\n            \n            if(opIndex2 == op.length - 1) {\n    \
    \            val tmp = operand(tmpIndex)\n                opIndex2 = tmpIndex\n\
    \                tmpIndex -= 1\n                res = res - tmp\n            \
    \    i += 1\n                continue\n            }\n            \n         \
    \   val tmp = operandList.toList\n            var opIndex = op.length - 1 \n \
    \           var opIndex2 = op.length - 1 \n            \n            while(opIndex\
    \ >= 0 && opIndex2 >= 0) {\n                val tmpOp = op(opIndex)\n        \
    \        val tmpOp2 = op(opIndex2)\n                if(tmpOp == tmpOp2) {\n  \
    \                  opIndex -= 1 \n                    opIndex2 -= 1\n        \
    \            operandList.toList -= tmp\n                    i = i - 1\n      \
    \              continue\n                }\n                if(tmpOp == \"\")\
    \ {\n                    opIndex -= 1\n                    continue\n        \
    \        }\n                if(tmpOp2 == \"\") {\n                    opIndex2\
    \ -= 1\n                    continue\n                }\n                \n  \
    \              operandList += operand(i) \n                tmpIndex -= 1\n   \
    \             tmpIndex -= 1\n                val tmpIndex = operandList.length\
    \ - 1 \n                \n                val tmpOp = op(opIndex)\n          \
    \      val tmpOp2 = op(opIndex2)\n                if(tmpOp == tmpOp2) {\n    \
    \                opIndex -= 1 \n                    opIndex2 -= 1\n          \
    \          operandList.toList -= tmp\n                    i = i - 1\n        \
    \            continue\n                }\n                if(tmpOp == \"\") {\n\
    \                    opIndex -= 1\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxz_8ro52.scala:130:0 ---------------------------\e\
    [0m\e[0m\n\e[31m130 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxz_8ro52.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36moperandList\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxz_8ro52.scala:52:16 ------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxz_8ro52.scala:61:16\
    \ ------------------------\e[0m\e[0m\n\e[31m61 |\e[0m                continue\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxz_8ro52.scala:70:16 ------------------------\e[0m\e[0m\n\e[31m70 |\e\
    [0m                continue\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: continue\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxz_8ro52.scala:79:16 ------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxz_8ro52.scala:110:20\
    \ --------------------------\e[0m\e[0m\n\e[31m110 |\e[0m                \e[33mval\e\
    [0m \e[36mtmpOp\e[0m = op(opInd"
  stdout: ''
  timestamp: 1660013126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val list = op.toList\n        val operandWithNegative =\
    \ operand.toList.reverse\n\n        val result = operand match {\n           \
    \ case a :: b :: Nil => a\n            case a :: Nil      => b\n            case\
    \ _ => operandWithNegative.foldLeft(0L)( (a, c) =>\n                val temp =\
    \ a + c\n                list.zip(operandWithNegative).foldLeft(temp)( (a, (b,c))\
    \ => b + c)\n            )\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfsijs623.scala:31:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                list.zip(operandWithNegative).foldLeft(temp)(\
    \ (\e[36ma\e[0m, (b,c)) => b + c)\n\e[31m\e[31m   |\e[0m                     \
    \                                             ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                        not a legal formal parameter\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfsijs623.scala:28:34 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m a :: Nil      => b\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Not found: b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfsijs623.scala:31:76 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                list.zip(operandWithNegative).foldLeft(temp)(\
    \ (\e[36ma\e[0m, (b,c)) => b + c)\n\e[31m\e[31m   |\e[0m                     \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                            Not found: b\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val exprList = List(op(0), operand(0))\n        var i :\
    \ Int = 0\n        while(i < exprList.size) {\n            if(exprList(i) < 0)\
    \ {\n                throw new RuntimeException(\"Not a valid Algebra Expression!\"\
    )\n            }\n            i += 1\n        }\n        val exprList2 = List(op(i\
    \ - 1), operand(i - 1))\n        val operators = op.dropRight(1)\n        val\
    \ operands = operand.drop(1)\n        val length = exprList2.size - 1\n      \
    \  var oppositeIndex = 0\n        var oppositeOppositeIndex = 0\n        val result\
    \ = exprList2.head\n        while(i < length) {\n            val opposite = exprList2(oppositeIndex++).toString\n\
    \            val oppositeOpposite = exprList2(oppositeOppositeIndex++).toString\n\
    \            val op = operators(i).toString\n            val operand = operands(i).toString\n\
    \            val expr = (op + operand + opposite).toLong\n            result *=\
    \ expr\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1zc239hr.scala:39:52 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mopposite\e[0m = exprList2(oppositeIndex++).toString\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1zc239hr.scala:40:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e\
    [0m \e[36moppositeOpposite\e[0m = exprList2(oppositeOppositeIndex++).toString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1zc239hr.scala:26:27 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            \e[33mif\e[0m(exprList(i) < \e[31m0\e[0m) {\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of\
    \ Matchable, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1zc239hr.scala:44:19 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            result *= expr\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value *= is not a member of\
    \ Matchable - did you mean result.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1zc239hr.scala:46:8 ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m\
    \        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    (result : Matchable)\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660013133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if(op.length != operand.length) \n            throw new\
    \ IllegalArgumentException(\"operator list length does not match operand list\
    \ length\")\n        val opMap = Map(op.toList -> 1)\n        val opList = new\
    \ scala.collection.mutable.ListBuffer[String]()\n        var opVal: Long = 1\n\
    \        operand.foreach(x => {\n            opList += x\n            opVal +=\
    \ opMap.getOrElse(x, 0)\n        })\n        opVal\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7gg0c3vf.scala:29:22\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            opList += x\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (x : Long)\n\e[31m   |\e[0m                      Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gg0c3vf.scala:30:18\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            opVal += opMap.getOrElse(x,\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of Long - did you mean Long.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7gg0c3vf.scala:30:37 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            opVal += opMap.getOrElse(x, \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    (x : Long)\n\e[31m   |\e[0m\
    \                                     Required: List[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // TODO: Write your code here\n        val operators = op.size\n\
    \        val operands = operand.size\n        val stack = mutable.Stack[Long]()\n\
    \        var i = 0\n        while (i < operators) {\n            val operator\
    \ = operators(i).toChar\n            val operand = operands(i).toLong\n      \
    \      if (operator == '+') {\n                stack += operand\n            }\n\
    \            if (operator == '-') {\n                stack -= operand\n      \
    \      }\n            if (operator == '*') {\n                stack *= operand\n\
    \            }\n            if (operator == '/') {\n                stack /= operand\n\
    \            }\n            if (operator == '//') {\n                stack /=\
    \ operand\n            }\n            if (operator == '**') {\n              \
    \  stack **= operand\n            }\n            i += 1\n        }\n        return\
    \ stack.pop()\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk23ya0ga.scala:43:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mif\e[0m (operator == \e[31m'//\e[0m')\
    \ {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               unclosed character literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpk23ya0ga.scala:46:31 -----------------------------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m            \e[33mif\e[0m (operator == \e[31m'**\e[0m') {\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             unclosed character literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpk23ya0ga.scala:43:28 -----------------------------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m            \e[33mif\e[0m (operator == \e[31m'//\e[0m') {\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0msymbol\
    \ literal '// is no longer supported,\n\e[31m   |\e[0muse a string literal \"\
    //\" or an application Symbol(\"//\") instead,\n\e[31m   |\e[0mor enclose in braces\
    \ '{//} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also\
    \ `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom,\
    \ but this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk23ya0ga.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpk23ya0ga.scala:29:27 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36moperator\e[0m = operators(i).toChar\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           \e[33mvalue\e[0m \e[35moperators\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpk23ya0ga.scala:30:26\
    \ -----"
  stdout: ''
  timestamp: 1660013127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val ops = op.sortBy(op(_))\n        val result = 0\n   \
    \     var index = 0\n        while (index < ops.size) {\n            if (index\
    \ == ops.size) {\n                result += (operand(index) match {\n        \
    \            case _: Float => operand(index).toLong\n                    case\
    \ _ => operand(index).toInt\n                })\n                break\n     \
    \       }\n            result += (operand(index) match {\n                case\
    \ _: Float => operand(index).toLong\n                case _ => operand(index).toInt\n\
    \            }) * ops(index)(0)\n            index += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5pb9bwo2.scala:23:31\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mops\e\
    [0m = op.sortBy(op(_))\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (_$1 : String)\n\e\
    [31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp5pb9bwo2.scala:28:23 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                result += (operand(index) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \             value += is not a member of Int - did you mean result.!=?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5pb9bwo2.scala:32:16 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5pb9bwo2.scala:34:19 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            result += (operand(index) \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    value += is not a member of Int - did you mean result.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5pb9bwo2.scala:37:15 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            result += (operand(index) \e[33mmatch\e[0m\
    \ {\n\e[31m35 |\e[0m                \e[33mcase\e[0m _: \e[35mFloat\e[0m => operand(index).toLong\n\
    \e[31m36 |\e[0m                \e[33mcase\e[0m _ => operand(index).toInt\n\e[31m37\
    \ |\e[0m            }) * ops(index)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^\e[0m\n\e[31m   |\e[0mvalue * is not a member of Long | Int,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFracti"
  stdout: ''
  timestamp: 1660013133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var sum = 0L\n        var i = -1\n        while (i < op.length\
    \ && i < operand.length - 1) {\n            if (i < 0) {\n                val\
    \ operand2 = operand.drop(1)\n                val operator2 = op.drop(1).mkString\n\
    \                val operand2 = operand2.mkString\n                sum += (operand2(0)\
    \ to operand2(operand.length - 1) map {\n                    x => operator2(x)\
    \ }.reduceLeft((a, b) => a + b).toLong)\n            }\n            else {\n \
    \               val operand2 = operand.drop(i)\n                val operator2\
    \ = op.drop(i).mkString\n                val operand2 = operand2.mkString\n  \
    \              sum += (operand2(0) to operand2(operand.length - 1) map {\n   \
    \                 x => operator2(x) }.reduceLeft((a, b) => a + b).toLong)\n  \
    \          }\n            i += 1\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjkt4u7fo.scala:29:20 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mval\e[0m \e[36moperand2\e[0m =\
    \ operand2.mkString\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperand2 is already defined as \e[33mvalue\e[0m \e[35moperand2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpjkt4u7fo.scala:30:20 ------------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m                sum += (operand2(\e[31m0\e[0m) to operand2(operand.length\
    \ - \e[31m1\e[0m) map {\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e\
    [31m   |\e[0m      value += is not a member of Long.\n\e[31m   |\e[0m      An\
    \ extension method was tried, but could not be fully constructed:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m          Long.long2float(sum)\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpjkt4u7fo.scala:31:20 -----------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m                    \e[36mx\e[0m => operator2(x) }.reduceLeft((a,\
    \ b) => a + b).toLong)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m\
    \   |\e[0m                    Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                    I could not infer the type of the parameter x.\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjkt4u7fo.scala:36:20 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33mval\e[0m \e[36moperand2\e[0m =\
    \ operand2.mkString\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperand2 is already defined as \e[33mvalue\e[0m \e[35moperand2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpjkt4u7fo.scala:37:20 ------------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m                sum += (operand2(\e[31m0\e[0m) to operand2(operand.length\
    \ - \e[31m1\e[0m) map {\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e\
    [31m   |\e[0m      value += is not a member of Long.\n\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660013129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.asInstanceOf[List[String]]\n        val\
    \ result = operand.foldLeft(0L) {\n            case ((sum,index),i) => \n    \
    \          val leftOperand = operand(index-1)\n              val rightOperand\
    \ = operand(index)\n              val operatorName = operator(index)\n       \
    \       val result = leftOperand match {\n                case x if x.isInstanceOf[String]\
    \ => Right((x.asInstanceOf[String]).toLong)\n                case x if x.isInstanceOf[Int]\
    \ => Right((x.asInstanceOf[Int]).toLong)\n                case _ => Left(s\"Invalid\
    \ Operator (${operatorName}).\")\n              }\n              result._1 match\
    \ {\n                case Right(x) => sum + x\n                case Left(msg)\
    \ => sum\n              }\n            case _ => 0L\n          }\n        result._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplf619w88.scala:26:45 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m              \e[33mval\e[0m \e[36mleftOperand\e[0m =\
    \ operand(index-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Any, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmplf619w88.scala:27:41 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m              \e[33mval\e[0m \e[36mrightOperand\e[0m\
    \ = operand(index)\n\e[31m\e[31m   |\e[0m                                    \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                         Found:\
    \    (index : Any)\n\e[31m   |\e[0m                                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplf619w88.scala:28:42\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m              \e[33mval\e[0m\
    \ \e[36moperatorName\e[0m = operator(index)\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                        Found:    (index : Any)\n\e[31m   |\e[0m            \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplf619w88.scala:34:21 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m              result._1 \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value _1 is not\
    \ a member of Either[Nothing | String, Long | Nothing]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmplf619w88.scala:35:37 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        "
  stdout: ''
  timestamp: 1660013135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val op = op.filterNot(_.isEmpty)\n        val operand =\
    \ operand.filterNot(_.isEmpty)\n        if (op.size != operand.size) \n      \
    \      throw new ArithmeticException(\"Operator and Operand list length is not\
    \ equal.\")\n        val operator = op.map(f => f.toLowerCase)\n        val operandWithOp\
    \ = operand.zipWithIndex.map(f => f(1))\n        val res = operandWithOp.flatMap\
    \ { case (fst, i) => \n            val op = operator(i)\n            List(op match\
    \ {\n                case \"+\" => fst + fst\n                case \"-\" => fst\
    \ - fst\n                case \"*\" => fst * fst\n                case \"//\"\
    \ => fst / fst\n                case \"**\" => fst.pow(fst)\n            })\n\
    \        }\n        res.sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt9l376f8.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mop\e[0m = op.filterNot(_.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Recursive \e[33mvalue\e[0m \e[35mop\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpt9l376f8.scala:24:22 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperand\e[0m = operand.filterNot(_.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35moperand\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val alg = op.length\n        val operandLength = len(operand)\n\
    \        if (operandLength > 0) {\n            var left = 0\n            var right\
    \ = 0\n            for (i <- 0 until operandLength) {\n                if (operand\
    \ (i) > 0) {\n                    if (right != 0) {\n                        right\
    \ = left + (operand (i) - right) * right\n                    }\n            \
    \        left = operand (i) + left\n                }\n                else {\n\
    \                    right = left * (-1)\n                }\n            }\n \
    \           return right\n        }\n        return 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpya64fp1s.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperandLength\e[0m = len(operand)\n\
    \e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e[0m   \
    \                         Not found: len\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpya64fp1s.scala:31:32 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                        right = left + (operand (i) - right)\
    \ * right\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Long\n\e[31m   |\e\
    [0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpya64fp1s.scala:33:27 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    left = operand (i) + left\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var num = 1\n        val opStack = mutable.Stack[String]()\n\
    \        val operandStack = mutable.Stack[Long]()\n        for(x<-op){\n     \
    \       opStack += x\n        }\n        for(x<-operand){\n            operandStack\
    \ += x\n        }\n        while(!opStack.isEmpty || !operandStack.isEmpty){\n\
    \            val op = opStack.pop()\n            val operand = operandStack.pop()\n\
    \            val sum = operand match {\n                case 0 => 0\n        \
    \        case 1 => operand\n                case _ => operand + num * operand\n\
    \            }\n            val num2 = num match {\n                case 0 =>\
    \ 0\n                case 1 => num\n                case _ => num * num\n    \
    \        }\n            opStack += op\n            operandStack += sum\n     \
    \       num = num2\n        }\n        num\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qu1r8bb.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopStack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1qu1r8bb.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moperandStack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n      var i = 1\n      var mul = 1\n      var res = operand.head\n\
    \      var mul1 = 1\n      for(i <- 1 until operand.length){\n          mul =\
    \ mul * operand(i)\n          mul1 = mul1 * operand(i)\n          res = op(res,\
    \ operand(i))\n          i = i + 1\n      }\n      return res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"\
    *\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n\
    \    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn6jilwu3.scala:28:16\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m          mul = mul * operand(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \              Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn6jilwu3.scala:29:17\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m          mul1 = mul1 * operand(i)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Long\n\e[31m   |\e[0m                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn6jilwu3.scala:30:19\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m          res = op(res, operand(i))\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Found:    (Long, Long)\n\e[31m   |\e[0m                  \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpn6jilwu3.scala:31:12\
    \ -----------------------------\e[0m\e[0m\n\e[31m31 |\e[0m          i = i + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \       Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def eval(str : String, i : Int, num : Long) : Long = {\n\
    \            if (i == str.length) num\n            else eval(str.substring(i),\
    \ i + 1, num * str.charAt(i).toLong + operand(i))\n        }\n        eval(op.mkString(),\
    \ 0, 1) // start from index 0 and keep doing index 0 until you get to the end\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvul7dwtn.scala:27:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        eval(op.mkString(), \e[31m0\e[0m, \e[31m1\e[0m)\
    \ \e[34m// start from index 0 and keep doing index 0 until you get to the end\e\
    [0m\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e\
    [0m \e[35mStringOps\e[0m: (i: Int): Char\n1 error found\n"
  stdout: ''
  timestamp: 1660013130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // 1. Build the operation list \n        var ops: List[String]\
    \ = List()\n        var op: String = operator(op, operand)\n        while (op.nonEmpty)\
    \ {\n            ops = ops :+ op\n            op = operator(op, operand)\n   \
    \     }\n        // 2. Evaluate the operation list \n        var res: Long = 0L\n\
    \        for (op <- ops) {\n            if (op eq '+') {\n                res\
    \ = res + operand(operands.length-1)\n            } else if(op eq '-') {\n   \
    \             res = res - operand(operands.length-1)\n            } else if(op\
    \ eq '*') {\n                res = res * operand(operands.length-1)\n        \
    \    } else if(op eq '/') {\n                res = res / operand(operands.length-1)\n\
    \            } else if(op eq '**') {\n                res = res * operand(operands.length-1)\n\
    \            } else if(op eq '%') {\n                res = res / operand(operands.length-1)\n\
    \            } else if(op eq 'floor') {\n                res = math.floor(res\
    \ / operand(operands.length-1))\n            } else if(op eq 'ceil') {\n     \
    \           res = math.ceil(res / operand(operands.length-1))\n            }\n\
    \        }\n        return res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpucbneh9r.scala:41:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(op eq \e\
    [31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0msymbol literal '** is no longer supported,\n\e[31m   |\e[0muse a\
    \ string literal \"**\" or an application Symbol(\"**\") instead,\n\e[31m   |\e\
    [0mor enclose in braces '{**} if you want a quoted expression.\n\e[31m   |\e[0mFor\
    \ now, you can also `import language.deprecated.symbolLiterals` to accept\n\e\
    [31m   |\e[0mthe idiom, but this possibility might no longer be available in the\
    \ future.\n\e[31m\e[31m-- Error: /tmp/tmpucbneh9r.scala:41:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(op eq \e\
    [31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               unclosed character literal\n\e[31m\e\
    [31m-- Error: /tmp/tmpucbneh9r.scala:45:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(op eq \e\
    [31m'floor\e[0m') {\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  unclosed character literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpucbneh9r.scala:47:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(op eq \e\
    [31m'ceil\e[0m') {\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m                                 unclosed character literal\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpucbneh9r.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mop\e[0m: \e[35mString\e\
    [0m = operator(op, operand)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: operator\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpucbneh9r.scala:28:17 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            op = "
  stdout: ''
  timestamp: 1660013129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // base case: if operator list is empty or length is 1,\
    \ return first operand as result\n        if(op.isEmpty || op.size <= 1){\n  \
    \          return operand(0)\n        }\n        \n        // otherwise, divide\
    \ the first operand by the first operator, \n        // then divide the result\
    \ of the first divide by the second operator, \n        // then divide the result\
    \ of the first divide by the third operator, \n        // then repeat the process\
    \ for the remaining operands.\n        val firstOperand = operand(0)\n       \
    \ val firstOperation = op(0) // first operator in operator list\n        val firstOperandDividend\
    \ = firstOperand / firstOperation\n        val remainingOperands = operand - firstOperandDividend\n\
    \        val nextFirstOperation = op(1) // first operator in operator list\n \
    \       val nextFirstOperandDividend = nextFirstOperand / nextFirstOperation\n\
    \        val remainingRemainingOperands = remainingOperands - nextFirstOperandDividend\n\
    \        val nextSecondOperation = op(2) // first operator in operator list\n\
    \        val nextSecondOperandDividend = nextSecondOperand / nextSecondOperation\n\
    \        val remainingRemainingRemainingOperands = remainingRemainingOperands\
    \ - nextSecondOperandDividend\n        val nextThirdOperation = op(3) // first\
    \ operator in operator list\n        val nextThirdOperandDividend = nextThirdOperand\
    \ / nextThirdOperation\n        val remainingRemainingRemainingRemainingOperands\
    \ = remainingRemainingRemainingOperands - nextThirdOperandDividend\n        val\
    \ nextFourthOperation = op(4) // first operator in operator list\n        val\
    \ nextFourthOperandDividend = nextFourthOperand / nextFourthOperation\n      \
    \  val remainingRemainingRemainingRemainingRemainingOperands = remainingRemainingRemainingRemainingOperands\
    \ - nextFourthOperandDividend\n        // recursion case\n        return doAlgebra(op\
    \ ++ remainingRemainingOperands, remainingRemainingRemainingOperands ++ remainingRemainingRemainingRemainingOperands\
    \ ++ remainingRemainingRemainingRemainingRemainingOperands ++ remainingRemainingRemainingRemainingRemainingRemainingOperands\
    \ ++ remainingRemainingRemainingRemainingRemainingRemainingRemainingOperands)\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp74m73jn5.scala:34:48 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mfirstOperandDividend\e[0m\
    \ = firstOperand / firstOperation\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m/\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((firstOperation : String))\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp74m73jn5.scala:35:40 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mremainingOperands\e[0m = operand\
    \ - firstOperandDividend\n\e[31m\e[31m   |\e[0m                              \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp74m73jn5.scala:37:39 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mnextFirstOperandDividend\e\
    [0m = nextFirstOperand / nextFirstOperation\n\e[31m\e[31m   |\e[0m           \
    \                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                             Not found: nextFirstOperand\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp74m73jn5.scala:40:40 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnextSecondOperandDividend\e\
    [0m = nextSecondOperand / nextSecondOperation\n\e[31m\e[31m   |\e[0m         \
    \            "
  stdout: ''
  timestamp: 1660013134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        require(op.length == operand.length - 1, 'operator list\
    \ and operand list must have the same length')\n        var result = 0L\n    \
    \    var index = 0\n        val list1 = operand.drop(1)\n        val list2 = operand.dropRight(1)\n\
    \        while ((index < op.length) && (index < operand.length)) {\n         \
    \   val op = list1(0)\n            val operand1 = list1(index)\n            val\
    \ operand2 = list2(index)\n            result += (math.pow((op.charAt(0)).toInt,\
    \ operand1) * math.pow(operand2, (op.charAt(1)).toInt))\n            index +=\
    \ 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpaed8oaol.scala:23:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        require(op.length == operand.length - \e[31m1\e\
    [0m, \e[31m'operator\e[0m list and operand list must have the same length')\n\e\
    [31m\e[31m   |\e[0m                                                 ^\e[0m\n\e\
    [31m   |\e[0msymbol literal 'operator is no longer supported,\n\e[31m   |\e[0muse\
    \ a string literal \"operator\" or an application Symbol(\"operator\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{operator} if you want a quoted expression.\n\
    \e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmpaed8oaol.scala:23:106\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        require(op.length\
    \ == operand.length - \e[31m1\e[0m, \e[31m'operator\e[0m list and operand list\
    \ must have the same length')\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0m                                              unclosed\
    \ character literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaed8oaol.scala:23:64\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        require(op.length\
    \ == operand.length - \e[31m1\e[0m, \e[31m'operator\e[0m list and operand list\
    \ must have the same length')\n\e[31m\e[31m   |\e[0m                         \
    \                                       ^^^\e[0m\n\e[31m   |\e[0m            \
    \                                              Not found: and\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7_zdlta.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// Write your code here\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opMap = new mutable.LinkedHashMap[String, Long]()\n\
    \        val opLen = op.size\n        val opVals = op.map(x => x.toLong)\n   \
    \     val operandMap = new mutable.LinkedHashMap[String, Long]()\n        val\
    \ operandLen = operand.size\n        if(opLen > operandLen)\n            throw\
    \ new RuntimeException(\"Too many operands\")\n        if(opLen < 1)\n       \
    \     throw new RuntimeException(\"Too few operators\")\n        for(i <- 0 until\
    \ operandLen)\n            operandMap(op(i),i)\n        while(true)\n        {\n\
    \            val key = opMap.values.iterator.toList.last\n            if(key ==\
    \ null)\n                return opMap.lastOption.getOrElse(0)\n            val\
    \ value = operandMap.get(key).get\n            if(value == null)\n           \
    \     throw new RuntimeException(\"No value at key \" + key)\n            val\
    \ newValue = opMap(key) + value\n            opMap.put(key, newValue)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ypscb9g.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopMap\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0ypscb9g.scala:26:29 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36moperandMap\e[0m = \e[33mnew\e[0m mutable.LinkedHashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ypscb9g.scala:34:8\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mwhile\e[0m(\e\
    [31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m35 |\e[0m        {\n\e\
    [31m36 |\e[0m            \e[33mval\e[0m \e[36mkey\e[0m = opMap.values.iterator.toList.last\n\
    \e[31m37 |\e[0m            \e[33mif\e[0m(key == \e[31mnull\e[0m)\n\e[31m38 |\e\
    [0m                \e[33mreturn\e[0m opMap.lastOption.getOrElse(\e[31m0\e[0m)\n\
    \e[31m39 |\e[0m            \e[33mval\e[0m \e[36mvalue\e[0m = operandMap.get(key).get\n\
    \e[31m40 |\e[0m            \e[33mif\e[0m(value == \e[31mnull\e[0m)\n\e[31m41 |\e\
    [0m                \e[33mthrow\e[0m \e[33mnew\e[0m \e[35mRuntimeException\e[0m(\e\
    [31m\"No value at key \"\e[0m + key)\n\e[31m42 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnewValue\e[0m = opMap(key) + value\n\e[31m43 |\e[0m            opMap.put(key,\
    \ newValue)\n\e[31m44 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = mutable.Stack[String]()\n        var result\
    \ = 0L\n        for(i <- 0 until operand.size) {\n            val value = operand(i)\n\
    \            if(stack.size() == 0) {\n                stack.push(op(0))\n    \
    \            result += value\n            } else {\n                val op = stack.pop()\n\
    \                val newValue = value + op\n                if(newValue > 0) {\n\
    \                    stack.push(op(newValue))\n                } else if(newValue\
    \ < 0) {\n                    stack.push(op(-newValue))\n                }\n \
    \           }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2i53fpfv.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def isOperatorValid(operator: List[String]): Boolean = operator\
    \ match {\n            case List(\"+\", \"*\") => true\n            case List(\"\
    -\", \"//\") => true\n            case _ => false\n        }\n        val operators\
    \ = op.map { x => x.toString }\n        val operands = operand.map { x => x.toLong\
    \ }\n        val length = operands.size + 1\n        val operatorLength = operators.size\
    \ + 1\n        val finalResult = operands.head\n        operators.headOption match\
    \ {\n            case Some(operator) => \n                val currentOperator\
    \ = operators.drop(1).head\n                operators.drop(1).foreach { x =>\n\
    \                    val currentOperand = operands.drop(1).head\n            \
    \        val finalOperand = operands.drop(1).head\n                    val result\
    \ = finalOperand match {\n                        case x if currentOperator ==\
    \ \"+\" => x + currentOperand\n                        case x if currentOperator\
    \ == \"-\" => x - currentOperand\n                        case x if currentOperator\
    \ == \"*\" => x * currentOperand\n                        case x if currentOperator\
    \ == \"//\" => x // currentOperand\n                        case x if currentOperator\
    \ == \"**\" => x ** currentOperand\n                        case _ => \n     \
    \                       throw new IllegalArgumentException(\"Invalid operator:\
    \ \" + currentOperator)\n                    }\n                    finalResult\
    \ match {\n                        case x if currentOperator == \"+\" => finalResult\
    \ + result\n                        case x if currentOperator == \"-\" => finalResult\
    \ - result\n                        case x if currentOperator == \"*\" => finalResult\
    \ * result\n                        case x if currentOperator == \"//\" => finalResult\
    \ // result\n                        case x if currentOperator == \"**\" => finalResult\
    \ ** result\n                        case _ => \n                            throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + currentOperator)\n   \
    \                 }\n                }\n            case None => \n          \
    \      throw new IllegalArgumentException(\"Invalid operator: \" + operators.head)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4sdx8nl.scala:44:63 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                        \e[33mcase\e[0m x \e[33mif\e\
    [0m currentOperator == \e[31m\"**\"\e[0m => x ** currentOperand\n\e[31m\e[31m\
    \   |\e[0m                                                             ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value ** is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4sdx8nl.scala:53:73\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m                        \e\
    [33mcase\e[0m x \e[33mif\e[0m currentOperator == \e[31m\"**\"\e[0m => finalResult\
    \ ** result\n\e[31m\e[31m   |\e[0m                                           \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  value ** is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660013136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here!\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf5vcrpkj.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// Write your code here!\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val nums = operand\n        val ops = op\n        val length\
    \ = ops.size\n        val numLength = nums.size\n        if (length < 1 || numLength\
    \ < 2) 0\n        else nums.sum / length ** ops(ops.size - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"\
    *\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n\
    \    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwdg8tnhz.scala:28:31 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m nums.sum / length ** ops(ops.size\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m             value ** is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val sum = 0L\n        val size = operand.size - 1\n    \
    \    for (i<- 0 until size) {\n            // for (i<- 0 until size) {\n     \
    \       // for (i <- 0 until size) {\n            val currentNum = operand(i)\n\
    \            val opNum = if (op(i) == \"+\") {\n                val sum = currentNum\
    \ + opNum\n                sum\n            } else if (op(i) == \"-\") {\n   \
    \             val diff = currentNum - opNum\n                diff\n          \
    \  } else if (op(i) == \"*\") {\n                val product = currentNum * opNum\n\
    \                product\n            } else if (op(i) == \"//\") {\n        \
    \        val quotient = currentNum / opNum\n                quotient\n       \
    \     } else if (op(i) == \"**\") {\n                val power = currentNum **\
    \ opNum\n                power\n            }\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp29ooyywn.scala:30:39 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e[0m \e[36msum\e[0m = currentNum\
    \ + opNum\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       Recursive \e[33mvalue\e\
    [0m \e[35mopNum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp29ooyywn.scala:33:40 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m                \e[33mval\e[0m \e[36mdiff\e[0m = currentNum - opNum\n\e\
    [31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e\
    [0m                                        Recursive \e[33mvalue\e[0m \e[35mopNum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp29ooyywn.scala:36:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                \e[33mval\e\
    [0m \e[36mproduct\e[0m = currentNum * opNum\n\e[31m\e[31m   |\e[0m           \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                   Recursive \e[33mvalue\e[0m \e[35mopNum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp29ooyywn.scala:39:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                \e[33mval\e\
    [0m \e[36mquotient\e[0m = currentNum / opNum\n\e[31m\e[31m   |\e[0m          \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                     Recursive \e[33mvalue\e[0m \e[35mopNum\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29ooyywn.scala:42:39\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                \e[33mval\e\
    [0m \e[36mpower\e[0m = currentNum ** opNum\n\e[31m\e[31m   |\e[0m            \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \   value ** is not a member o"
  stdout: ''
  timestamp: 1660013139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Calculate the result\n        var result : Long = 0\n\
    \        for( x <- operand) {\n            // Get the operator and operand\n \
    \           var operator : String = op(0)\n            var operand : Long = op(1)\n\
    \            \n            // Find the operator and operand\n            if( operator\
    \ == \"+\" ) {\n                result += x\n            }else if( operator ==\
    \ \"-\" ) {\n                result -= x\n            }else if( operator == \"\
    *\" ) {\n                result *= x\n            }else if( operator == \"/\"\
    \ ) {\n                result /= x\n            }else if( operator == \"//\" )\
    \ {\n                result // = x\n            }else if( operator == \"**\" )\
    \ {\n                result **= x\n            }\n        }\n\n        // Return\
    \ the result\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3iewu8sp.scala:28:35\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mvar\e[0m \e\
    [36moperand\e[0m : \e[35mLong\e[0m = op(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                Found:    String\n\e[31m   |\e[0m                           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3iewu8sp.scala:42:23\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                result **=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             value **= is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660013140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val op = op.asInstanceOf[List[String]]\n        val operand\
    \ = operand.asInstanceOf[List[Long]]\n        val result = 0.0\n        val length\
    \ = op.size\n        for(i <- 0 until length){\n            val op = op(i)\n \
    \           val operand1 = operand(i-1)\n            val operand2 = operand(i)\n\
    \            val opMap: Map[String, String] = opMap()\n            val opName\
    \ = opMap.get(op)\n            val op2Name = opMap.get(opName)\n            val\
    \ op2Name = (op2Name != opName)\n            val op1Name = op2Name ? op2Name :\
    \ opName\n            val op2Name1 = op1Name\n            val op1Name1 = op2Name1\
    \ + \"1\"\n            val op1Name2 = op2Name1 + \"2\"\n            val op2Name2\
    \ = op1Name1 + \"2\"\n            val op1Name3 = op2Name2 + \"3\"\n          \
    \  val op2Name3 = op1Name2 + \"3\"\n            val op1Name4 = op2Name3 + \"4\"\
    \n            val op2Name4 = op1Name3 + \"4\"\n            val op1Name5 = op2Name4\
    \ + \"5\"\n            val op2Name5 = op1Name4 + \"5\"\n            if(op2Name1.equals(\"\
    +\")){\n                result += operand1 + operand2\n            }else if(op2Name1.equals(\"\
    -\")){\n                result -= operand1 - operand2\n            }else if(op2Name1.equals(\"\
    *\")){\n                result *= operand1 * operand2\n            }else if(op2Name1.equals(\"\
    //\")){\n                result /= operand1 // operand2\n            }else if(op2Name1.equals(\"\
    **\")){\n                result **= operand1 **= operand2\n            }\n   \
    \         if(op2Name2.equals(\"+\")){\n                result += operand1 + operand2\n\
    \            }else if(op2Name2.equals(\"-\")){\n                result -= operand1\
    \ - operand2\n            }else if(op2Name2.equals(\"*\")){\n                result\
    \ *= operand1 * operand2\n            }else if(op2Name2.equals(\"//\")){\n   \
    \             result /= operand1 // operand2\n            }else if(op2Name2.equals(\"\
    **\")){\n                result **= operand1 **= operand2\n            }\n   \
    \         if(op2Name3.equals(\"+\")){\n                result += operand1 + operand2\n\
    \            }else if(op2Name3.equals(\"-\")){\n                result -= operand1\
    \ - operand2\n            }else if(op2Name3.equals(\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_mhxia6c.scala:72:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(op2Name3.equals(\"\
    \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     unclosed string literal\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp_mhxia6c.scala:81:0 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_mhxia6c.scala:23:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mop\e[0m = op.asInstanceOf[\e[35mList\e[0m[\e[35mString\e[0m]]\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mop\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_mhxia6c.scala:24:22 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperand\e[0m = operand.asInstanceOf[\e\
    [35mList\e[0m[\e[35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35moperand\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_mhxia6c.scala:34:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e\
    [0m \e[36mop2Name\e[0m = (op2Name != opName)\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mop2Name is already defined\
    \ as \e[33mvalue\e[0m \e[35mop2Name\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- Error: /tmp/tmp_mhxia6c.scala:31:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mopMap\e[0m: \e[35mMap\e\
    [0m[\e[35mString\e[0m, \e[35mString\e[0m] = opMap()\n\e[31m\e[31m   |\e[0m   \
    \                                          ^^^^^^^\e[0m\n\e[31m   |\e[0mmiss"
  stdout: ''
  timestamp: 1660013143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length != operand.length - 1) {\n            throw\
    \ new IllegalArgumentException(\"Operator and Operand list should be of same length\"\
    )\n        }\n        val opMap : mutable.Map[String, String] = mutable.Map[String,\
    \ String]()\n        val eval : mutable.Array[Long] = mutable.Array[Long]()\n\n\
    \        for (i <- 0 to op.length - 1) {\n            opMap(op(i)) = op(i)\n \
    \           eval(i + (0)) = operand(i)\n        }\n        // print opMap\n  \
    \      println(opMap)\n        // print eval\n        println(eval)\n        var\
    \ i = 0\n        for (l <- 0 until op.length) eval(i) = eval(i + (op.length -\
    \ l))\n        return eval(eval.length - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecaht3eg.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopMap\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mString\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpecaht3eg.scala:26:50 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopMap\e[0m : mutable.Map[\e[35mString\e\
    [0m, \e[35mString\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecaht3eg.scala:27:19\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36meval\e[0m : mutable.Array[\e[35mLong\e[0m] = mutable.Array[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpecaht3eg.scala:27:41 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36meval\e[0m : mutable.Array[\e[35mLong\e[0m] = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n      require(op.length == operand.size -1)\n      var sum = 0\n\
    \      for( i <- 0 until operand.size ) {\n        val temp = operand(i)\n   \
    \     val op = op(i)\n        val result = temp\n        sum match {\n       \
    \   case 0 =>\n          case 1 =>\n          case _ =>\n            sum match\
    \ {\n              case 0 =>\n              case 1 =>\n              case _ =>\n\
    \                sum match {\n                  case 0 =>\n                  case\
    \ 1 =>\n                  case _ =>\n                    sum match {\n       \
    \               case 0 =>\n                      case 1 =>\n                 \
    \     case _ =>\n                        sum match {\n                       \
    \   case 0 =>\n                          case 1 =>\n                         \
    \ case _ =>\n                            sum match {\n                       \
    \       case 0 =>\n                              case 1 =>\n                 \
    \             case _ =>\n                                sum match {\n       \
    \                           case 0 =>\n                                  case\
    \ 1 =>\n                                  case _ =>\n                        \
    \            sum match {\n                                      case 0 =>\n  \
    \                                    case 1 =>\n                             \
    \         case _ =>\n                                        sum match {\n   \
    \                                       case 0 =>\n                          \
    \                case 1 =>\n                                          case _ =>\n\
    \                                            sum match {\n                   \
    \                           case 0 =>\n                                      \
    \        case 1 =>\n                                              case _ =>\n\
    \                                                sum match {\n               \
    \                                   case 0 =>\n                              \
    \                    case 1 =>\n                                             \
    \     case _ =>\n                                                    sum match\
    \ {\n                                                      case 0 =>\n       \
    \                                               case 1 =>\n                  \
    \                                    case _ =>\n                             \
    \                           sum match {\n                                    \
    \                      case 0 =>\n                                           \
    \               case 1 =>\n                                                  \
    \        case _ =>\n                                                         \
    \   sum match {\n                                                            \
    \  case 0 =>\n                                                              case\
    \ 1 =>\n                                                              case _ =>\n\
    \                                                                sum match {\n\
    \                                                                  case 0 =>\n\
    \                                                                  case 1 =>\n\
    \                                                                  case _ =>\n\
    \                                                                    sum match\
    \ {\n                                                                      case\
    \ 0 =>\n                                                                     \
    \ case 1 =>\n                                                                \
    \      case _ =>\n                                                           \
    \             sum match {\n                                                  \
    \                        case 0 =>\n                                         \
    \                                 case 1 =>\n                                \
    \                                          case _ =>\n                       \
    \                                                     sum match {\n          \
    \                                                                    case 0 =>\n\
    \                                                                            \
    \  case 1 =>\n                                                               \
    \               case _ =>\n                                                  \
    \                              sum match {\n                                 \
    \                                                 case 0 =>\n                \
    \                                                                  case 1 =>\n\
    \                                                                            \
    \      case _ =>\n                                                           \
    \                         sum match {\n                                      \
    \                                                case 0 =>\n                 \
    \                                                                     case 1 =>\n\
    \                                                                            \
    \          case _ =>\n                                                       \
    \                                 sum match {\n                              \
    \                                                            case 0 =>\n     \
    \                                                                            \
    \         case 1 =>\n                                                        \
    \                                  case _ =>\n                               \
    \                                                             sum match {\n  \
    \                                                                            \
    \                case 0 =>\n                                                 \
    \                                             case 1 =>\n                    \
    \                                                                          case\
    \ _ =>\n                                                                     \
    \                           sum match \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2qt7tx1d.scala:118:4 ---------------------------\e\
    [0m\e[0m\n\e[31m118 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '{' expected, but unindent found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2qt7tx1d.scala:126:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m126 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp2qt7tx1d.scala:119:4 ---------------------------------------\e[0m\e\
    [0m\n\e[33m119 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\e[33m    |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opList = op.toList\n        val operandList = operand.toList\n\
    \        val operandLength = operandList.length\n        val operatorLength =\
    \ opList.length\n\n        if(operatorLength == 0) {\n            if(operandLength\
    \ == 1) {\n                operandList(0)\n            } else {\n            \
    \    0\n            }\n        } else {\n            val op1 = operandList(0)\n\
    \            val op2 = operandList(1)\n\n            val op1Operand = opList(0)\n\
    \            val op2Operand = opList(1)\n\n            if(op1 == op2) {\n    \
    \            op1Operand\n            } else if(op1Operand == \"+\") {\n      \
    \          op1 + op2\n            } else if(op1Operand == \"-\") {\n         \
    \       op1 - op2\n            } else if(op1Operand == \"*\") {\n            \
    \    op1 * op2\n            } else if(op1Operand == \"/\") {\n               \
    \ op1 / op2\n            } else if(op1Operand == \"**\") {\n                Math.pow(op1,\
    \ op2)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5q_d8y4b.scala:42:16\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m                op1Operand\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Found:    (op1Operand : String)\n\e[31m   |\e[0m                Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5q_d8y4b.scala:51:19\
    \ --------------------\e[0m\e[0m\n\e[31m51 |\e[0m            } \e[33melse\e[0m\
    \ \e[33mif\e[0m(op1Operand == \e[31m\"**\"\e[0m) {\n\e[31m\e[31m   |\e[0m    \
    \               ^\e[0m\n\e[31m   |\e[0m                 Found:    Unit\n\e[31m\
    \   |\e[0m                 Required: Long\n\e[31m   |\e[0m                 Maybe\
    \ you are missing an else part for the conditional?\n\e[31m52 |\e[0m         \
    \       Math.pow(op1, op2)\n\e[31m53 |\e[0m            }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def doOperation(op : String, operand : List[Long], acc :\
    \ Long) : Long = {\n            val opIndex : Int = operator.indexOf(op)\n   \
    \         opIndex match {\n                case -1 => acc\n                case\
    \ index => {\n                    val nums : List[Long] = operand.take(index +\
    \ 1)\n                    val result : Long = nums.foldLeft(acc)(doOperation(_,\
    \ nums, acc))\n                    doOperation(op, nums, result)\n           \
    \     }\n            }\n        }\n        doOperation(op.head, operand.take(operand.length\
    \ - 1), operand.head) match {\n            case -1 => operand.head\n         \
    \   case nums => operand.head + doOperation(op.tail, nums, operand.head)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8l57jsmn.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mopIndex\e[0m : \e[35mInt\e\
    [0m = operator.indexOf(op)\n\e[31m\e[31m   |\e[0m                            \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ operator\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp8l57jsmn.scala:29:59\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    \e\
    [33mval\e[0m \e[36mresult\e[0m : \e[35mLong\e[0m = nums.foldLeft(acc)(doOperation(_,\
    \ nums, acc))\n\e[31m\e[31m   |\e[0m                                         \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 2\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8l57jsmn.scala:36:55 --------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mcase\e[0m nums => operand.head + doOperation(op.tail,\
    \ nums, operand.head)\n\e[31m\e[31m   |\e[0m                                 \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \   Found:    List[String @uncheckedVariance]\n\e[31m   |\e[0m               \
    \                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8l57jsmn.scala:36:61 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m            \e[33mcase\e[0m nums => operand.head + doOperation(op.tail,\
    \ nums, operand.head)\n\e[31m\e[31m   |\e[0m                                 \
    \                            ^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                           Found:    (nums : Long)\n\e[31m   |\e[0m         \
    \                                        Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660013141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = 0L\n        op.zip(operand).foreach { case\
    \ (operator, operand) =>\n            operator match {\n                case \"\
    +\" => result += operand\n                case \"-\" => result -= operand\n  \
    \              case \"*\" => result *= operand\n                case \"/\" =>\
    \ result /= operand\n                case \"**\" => result **= operand\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_rfu03he.scala:30:36 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mcase\e[0m \e[31m\"**\"\e[0m =>\
    \ result **= operand\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value **= is not a member of\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operands = operand.map(i => operand(i))\n        val\
    \ operators = op.map(i => op(i))\n        val length = op.size\n        val leftOperand\
    \ = operand.drop(1)\n        val leftOperator = op.drop(1)\n        val rightOperand\
    \ = operand.takeRight(1)\n        val rightOperator = op.takeRight(1)\n      \
    \  val left = List(leftOperator(0), operands(0), rightOperand(0), rightOperator(0))\n\
    \        val right = List(rightOperator(0), operands(0), leftOperand(0), leftOperator(0))\n\
    \        val leftOperators = List(leftOperator(0), leftOperators(1), leftOperators(2),\
    \ leftOperators(3))\n        val rightOperators = List(rightOperator(0), rightOperators(1),\
    \ rightOperators(2), rightOperators(3))\n        val expressions = List(left,\
    \ right)\n        val operatorLength = List(operators(0), operators(1))\n    \
    \    val length = List(length(0), length(1), length(2), length(3))\n        val\
    \ leftOperands = List(leftOperand(0), leftOperand(1), leftOperand(2), leftOperand(3))\
    \ \n        val rightOperands = List(rightOperand(0), rightOperand(1), rightOperand(2),\
    \ rightOperand(3)) \n        val expressionLength = List(expressions(0), expressions(1))\n\
    \        val leftOperandLength = List(leftOperands(0), leftOperands(1))\n    \
    \    val rightOperandLength = List(rightOperands(0), rightOperands(1))\n     \
    \   val operandLength = List(operands(0), operands(1))\n        val expression\
    \ = List(expressions(0), expressions(1))\n        val expressionLength = List(expressionLength(0),\
    \ expressionLength(1)) \n        val operator = List(operators(0), operators(1))\n\
    \        val operand = List(operands(0), operands(1))\n        val operatorLength\
    \ = List(operatorLength(0), operatorLength(1)) \n        val leftOperand = List(leftOperands(0),\
    \ leftOperands(1))\n        val rightOperand = List(rightOperands(0), rightOperands(1))\n\
    \        val operandLength = List(operandLength(0), operandLength(1)) \n     \
    \   val result = expression(0) + expression(1) * operator - operand(0)\n     \
    \   result \n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzyiwjapo.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mlength\e[0m = List(length(\e\
    [31m0\e[0m), length(\e[31m1\e[0m), length(\e[31m2\e[0m), length(\e[31m3\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlength is already defined as \e[33mvalue\e[0m \e[35mlength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzyiwjapo.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36mexpressionLength\e[0m = List(expressionLength(\e\
    [31m0\e[0m), expressionLength(\e[31m1\e[0m)) \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mexpressionLength is already defined as \e[33mvalue\e[0m \e\
    [35mexpressionLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzyiwjapo.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36moperatorLength\e[0m = List(operatorLength(\e\
    [31m0\e[0m), operatorLength(\e[31m1\e[0m)) \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperatorLength is already defined as \e[33mvalue\e[0m \e[35moperatorLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzyiwjapo.scala:48:12 ---------------------------\e[0m\e[0m\n\e\
    [31m48 |\e[0m        \e[33mval\e[0m \e[36mleftOperand\e[0m = List(leftOperands(\e\
    [31m0\e[0m), leftOperands(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftOperand is already defined as \e[33mvalue\e[0m \e[35mleftOperand\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sam"
  stdout: ''
  timestamp: 1660013145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = 0\n        val operators = List(\"+\", \"-\"\
    , \"*\", \"/\", \"//\", \"**\")\n        for (i <- 0 until operand.size) {\n \
    \           val temp = operand(i)\n            if (operators.contains(op(i)))\
    \ {\n                result += (temp * operators.indexOf(op(i)))\n           \
    \ } else if (op(i) == \">\") {\n                result += (temp > 0)\n       \
    \     } else if (op(i) == \"<\") {\n                result += (temp < 0)\n   \
    \         } else if (op(i) == \"=\") {\n                result = temp\n      \
    \      }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphmbv9ngw.scala:28:23 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                result += (temp * operators.indexOf(op(i)))\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphmbv9ngw.scala:30:23 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                result += (temp > \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmphmbv9ngw.scala:32:23 ------------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m                result += (temp < \e[31m0\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphmbv9ngw.scala:34:25 --------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m                result = temp\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                         Found:    (temp\
    \ : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660013144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if(op.size == 0) throw new Exception(\"invalid operator\"\
    )\n        val opArray = op.map(op => op.split(\"\")).toArray\n        if(opArray.size\
    \ < 2) throw new Exception(\"invalid operator\")\n        val operandArray = operand.toArray\n\
    \        if(operandArray.size < 2) throw new Exception(\"invalid operator\")\n\
    \        val operators = opArray.dropRight(1)\n        val operatorArray = operators.map(op\
    \ => op.split(\"\")).toArray\n        if(operatorArray.size < 2) throw new Exception(\"\
    invalid operator\")\n        val operand = operandArray\n        val result =\
    \ 0\n        for(operator <- operatorArray) {\n            if(operator == \"+\"\
    ) result += operand(0)\n            else if(operator == \"*\") result *= operand(0)\n\
    \            else if(operator == \"-\") result -= operand(0)\n            else\
    \ if(operator == \"/\") result /= operand(0)\n            else if(operator ==\
    \ \"**\") result **= operand(0)\n            else if(operator == \"^\") result\
    \ **= operand(0)\n            else throw new Exception(\"invalid operator\")\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp74kwd1fr.scala:31:22 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36moperand\e[0m = operandArray\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35moperandArray\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp74kwd1fr.scala:29:51\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36moperatorArray\e[0m = operators.map(\e[36mop\e[0m => op.split(\e[31m\"\"\e\
    [0m)).toArray\n\e[31m\e[31m   |\e[0m                                         \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m    value split is not a member of Array[String]\
    \ - did you mean op.wait?\n\e[31m\e[31m-- Error: /tmp/tmp74kwd1fr.scala:29:61\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36moperatorArray\e[0m = operators.map(\e[36mop\e[0m => op.split(\e\
    [31m\"\"\e[0m)).toArray\n\e[31m\e[31m   |\e[0m                               \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                          where:    B is a type variable\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // write your code here\n        val operator = op.dropRight(1)\n\
    \        val operand = operand.tail\n        val operands = operand :: operand.tail\n\
    \        val op = operator.head\n        val opVal = operand.head\n        val\
    \ opCount = operator.size + 1\n        val opCount = operands.size + 1\n     \
    \   val res = opCount match {\n            case 0 => opVal\n            case 1\
    \ => operands.last\n            case _ => {\n                val opVal1 = operands.last\n\
    \                val opVal2 = operands.dropRight(1)\n                val opCount\
    \ = opCount + 2\n                val opCount2 = opCount + 1\n                val\
    \ res1 = if (opCount > 1) {\n                    opVal1 op opVal2\n          \
    \      } else if (opCount > 0 && opCount < 4) {\n                    opVal1 op\
    \ opVal2\n                } else {\n                    opVal1 op opVal2\n   \
    \             }\n                val res2 = if (opCount > 2) {\n             \
    \       opVal1 op opVal2\n                } else {\n                    opVal1\
    \ op opVal2\n                }\n                val res3 = if (opCount > 3) {\n\
    \                    opVal1 op opVal2\n                } else {\n            \
    \        opVal1 op opVal2\n                }\n                val res4 = if (opCount\
    \ > 4) {\n                    opVal1 op opVal2\n                } else {\n   \
    \                 opVal1 op opVal2\n                }\n                val res5\
    \ = if (opCount > 5) {\n                    opVal1 op opVal2\n               \
    \ } else {\n                    opVal1 op opVal2\n                }\n        \
    \        val res6 = if (opCount > 6) {\n                    opVal1 op opVal2\n\
    \                } else {\n                    opVal1 op opVal2\n            \
    \    }\n                val res7 = if (opCount > 7) {\n                    opVal1\
    \ op opVal2\n                } else {\n                    opVal1 op opVal2\n\
    \                }\n                val res8 = if (opCount > 8) {\n          \
    \          opVal1 op opVal2\n                } else {\n                    opVal1\
    \ op opVal2\n                }\n                val res9 = if (opCount > 9) {\n\
    \                    opVal1 op opVal2\n                } else {\n            \
    \        opVal1 op opVal2\n                }\n                val res10 = if (opCount\
    \ > 10) {\n                    opVal1 op opVal2\n                } else {\n  \
    \                  opVal1 op opVal2\n                }\n                val res11\
    \ = if (opCount > 11) {\n                    opVal1 op opVal2\n              \
    \  } else {\n                    opVal1 op opVal2\n                }\n       \
    \         val res12 = \n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw881kvtf.scala:96:27 ---------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m                \e[33mval\e[0m \e[36mres12\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw881kvtf.scala:105:0 ---------------------------\e\
    [0m\e[0m\n\e[31m105 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw881kvtf.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopCount\e[0m = operands.size + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mopCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw881kvtf.scala:27:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mop\e[0m = operator.head\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\
    \e[31m   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35moperator\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw881kvtf.scala:25:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperand\e[0m = operand.tail\n\e[31m\e[31m   |\e[0m                   \
    \   ^\e[0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e\
    [35moperand\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpw881kvtf.scala:37:30 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m                \e[33mval\e[0m \e[36mopCount\e[0m = opCount + \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              Recursive \e[3"
  stdout: ''
  timestamp: 1660013145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val len = op.length\n        assert(len > 1 && len <= operand.length\
    \ - 1)\n        val operator = op match {\n            case x::xs => x\n     \
    \       case _ => throw new IllegalArgumentException(\"Operator list must have\
    \ at least one operator\")\n        }\n        val operands = operand.toList\n\
    \        val operandsLen = operands.length\n        assert(operandsLen >= 2)\n\
    \        val operand_left = operands(0)\n        val operand_right = operands(1)\n\
    \        val operators = op match {\n            case x::xs => xs\n          \
    \  case _ => throw new IllegalArgumentException(\"Operator list must have at least\
    \ one operator\")\n        }\n        assert(operators.size >= 2)\n        val\
    \ op1 = operators(0)\n        val op2 = operators(1)\n        var eval = 0L\n\
    \        eval match {\n            case 0 => eval = operand_left + op1 * operand_right\n\
    \            case 1 => eval = operand_left * op1 + operand_right\n           \
    \ case 2 => eval = operand_left * op2 * operand_right\n            case _ => throw\
    \ new IllegalArgumentException(\"The length of operator list and operand list\
    \ must be same\")\n        }\n        return eval\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzvj_i2aw.scala:43:50\
    \ --------------------\e[0m\e[0m\n\e[31m43 |\e[0m            \e[33mcase\e[0m \e\
    [31m0\e[0m => eval = operand_left + op1 * operand_right\n\e[31m\e[31m   |\e[0m\
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (operand_right : Long)\n\
    \e[31m   |\e[0m                                        Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpzvj_i2aw.scala:44:42 -----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => eval = operand_left\
    \ * op1 + operand_right\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((op1 : String))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpzvj_i2aw.scala:45:42\
    \ -----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m            \e[33mcase\e\
    [0m \e[31m2\e[0m => eval = operand_left * op2 * operand_right\n\e[31m\e[31m  \
    \ |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((op2 : String))\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.head\n        val operand1 = operand.head\n\
    \        val operand2 = operand.tail.head\n        val op1 = operator.charAt(0)\n\
    \        val op2 = operator.charAt(1)\n        if (operand1 == 0) {\n        \
    \    if (op1 == '+') {\n                operand1 + operand2\n            } else\
    \ if (op1 == '*') {\n                operand1 * operand2\n            } else if\
    \ (op1 == '-') {\n                operand1 - operand2\n            }\n       \
    \ } else if (operand1 == 1) {\n            if (op1 == '+') {\n               \
    \ operand1 + operand2\n            } else if (op1 == '*') {\n                operand1\
    \ * operand2\n            } else if (op1 == '-') {\n                operand1 -\
    \ operand2\n            } else if (op1 == '/') {\n                operand1 div\
    \ operand2\n            } else if (op1 == '%') {\n                operand1 mod\
    \ operand2\n            }\n        } else if (operand1 == 2) {\n            if\
    \ (op1 == '+') {\n                operand1 + operand2\n            } else if (op1\
    \ == '*') {\n                operand1 * operand2\n            } else if (op1 ==\
    \ '-') {\n                operand1 - operand2\n            } else if (op1 == '/')\
    \ {\n                operand1 div operand2\n            } else if (op1 == '%')\
    \ {\n                operand1 mod operand2\n            } else if (op1 == '^')\
    \ {\n                operand1 ^ operand2\n            }\n        } else if (operand1\
    \ == 3) {\n            if (op1 == '+') {\n                operand1 + operand2\n\
    \            } else if (op1 == '*') {\n                operand1 * operand2\n \
    \           } else if (op1 == '-') {\n                operand1 - operand2\n  \
    \          } else if (op1 == '/') {\n                operand1 div operand2\n \
    \           } else if (op1 == '%') {\n                operand1 mod operand2\n\
    \            } else if (op1 == '^') {\n                operand1 ^ operand2\n \
    \           } else if (op1 == '~') {\n                operand1 xor operand2\n\
    \            }\n        } else if (operand1 == 4) {\n            if (op1 == '+')\
    \ {\n                operand1 + operand2\n            } else if (op1 == '*') {\n\
    \                operand1 * operand2\n            } else if (op1 == '-') {\n \
    \               operand1 - operand2\n            } else if (op1 == '/') {\n  \
    \              operand1 div operand2\n            } else if (op1 == '%') {\n \
    \               operand1 mod operand2\n            } else if (op1 == '^') {\n\
    \                operand1 ^ operand2\n            } else if (op1 == '~') {\n \
    \               operand1 xor operand2\n            } else if (op1 == '|') {\n\
    \                operand1 xor operand2\n            }\n        } else if (operand1\
    \ == 5) {\n            if (op1 == '+') {\n                operand1 + operand2\n\
    \            } else if (op1 == '*') {\n                operand1 * operand2\n \
    \           } else if (op1 == '-') {\n                operand\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"\
    *\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n\
    \    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgp2_0zlu.scala:111:0 ---------------------------\e\
    [0m\e[0m\n\e[31m111 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgp2_0zlu.scala:33:19\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            } \e[33melse\e[0m\
    \ \e[33mif\e[0m (op1 == \e[31m'-'\e[0m) {\n\e[31m\e[31m   |\e[0m             \
    \      ^\e[0m\n\e[31m   |\e[0m                 Found:    Unit\n\e[31m   |\e[0m\
    \                 Required: Long\n\e[31m   |\e[0m                 Maybe you are\
    \ missing an else part for the conditional?\n\e[31m34 |\e[0m                operand1\
    \ - operand2\n\e[31m35 |\e[0m            }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgp2_0zlu.scala:44:25 ------------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m                operand1 div operand2\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value div\
    \ is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgp2_0zlu.scala:46:25\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m                operand1\
    \ mod operand2\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue mod is not a member of Long, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgp2_0zlu.scala:56:25\
    \ ------------------------\e[0m\e[0m\n\e[31m56 |\e[0m                operand1\
    \ div operand2\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value div is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgp2_0zlu.scala:58:25 ------------------------\e[0m\e\
    [0m\n\e[31m58 |\e[0m                operand1 mod operand2\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member\
    \ of Long, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe fo"
  stdout: ''
  timestamp: 1660013148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.map( x => x.toUpperCase() )\n        val\
    \ operands = operand.map( x => x.toLong )\n\n        if(operator.size != operands.size)\n\
    \            throw new ArithmeticException(\"The length of operator list is not\
    \ equal to the length of operand list.\");\n\n        val result = operands.reduce((x,\
    \ y) => x match {\n            case _ if operator.length == 1 => x\n         \
    \   case _ if operator.length == 2 => x + y\n            case _ => throw new ArithmeticException(\"\
    The length of operator list is not equal to 2.\");\n        })\n\n        // Evaluate\
    \ the expression by calling the evaluator function with operand and operator\n\
    \        def evaluate(x: Long, operator: String, y: Long): Long = {\n        \
    \    val operand = operands(y)\n            val operator = operators(operator)\n\
    \            operands.map(x => x match {\n                case 0 => 0\n      \
    \          case _ => x + operator match {\n                    case \"+\" => evaluate(x,\
    \ operator, y)\n                    case \"-\" => evaluate(x, operator, -y)\n\
    \                    case \"*\" => evaluate(x, operator, y * x)\n            \
    \        case \"//\" => evaluate(x, operator, y // x)\n                    case\
    \ \"**\" => evaluate(x, operator, y ** x)\n                }\n            })\n\
    \        }\n\n        evaluate(result, operator(0), operand(0))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"\
    *\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n\
    \    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsx7k73s8.scala:46:20 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                    \e[33mcase\e[0m \e[31m\"**\"\e[0m\
    \ => evaluate(x, operator, y ** x)\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    ')' expected, but 'case' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsx7k73s8.scala:37:35 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m \e[36moperand\e[0m = operands(y)\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (y : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsx7k73s8.scala:38:27 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36moperator\e[0m = operators(operator)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: operators\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpsx7k73s8.scala:38:37 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36moperator\e[0m = operators(operator)\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     Recursive \e[33mvalue\e[0m \e[35moperator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val op = operand.map(_ => op(1))\n        op\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\"\
    , \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) ==\
    \ (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp81_5zzhs.scala:23:34 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mop\e[0m = operand.map(_\
    \ => op(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                \
    \  ^\e[0m\n\e[31m   |\e[0m                                  Recursive \e[33mvalue\e\
    [0m \e[35mop\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp81_5zzhs.scala:24:8 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        op\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    (op : List[Nothing])\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val op = operator\n        val operand = operand\n     \
    \   val operandLength = operand.size\n        val opLength = op.size\n\n     \
    \   if(operandLength < opLength){\n            throw new ArithmeticException(\"\
    Operand list has less than operator list elements\")\n        }\n\n        if(opLength\
    \ == 0){\n            throw new ArithmeticException(\"Operator list is empty\"\
    )\n        }\n\n        val finalResult = operand(0)\n\n        for(i <- 1 until\
    \ operandLength){\n            if(op(i) == '+'){\n                finalResult\
    \ += operand(i)\n            }\n            if(op(i) == '-'){\n              \
    \  finalResult -= operand(i)\n            }\n            if(op(i) == '*'){\n \
    \               finalResult *= operand(i)\n            }\n            if(op(i)\
    \ == '//'){\n                finalResult /= operand(i)\n            }\n      \
    \      if(op(i) == '**'){\n                finalResult **= operand(i)\n      \
    \      }\n        }\n        return finalResult\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnat6yfro.scala:48:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mif\e[0m(op(i) == \e[31m'//\e[0m'){\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0msymbol literal\
    \ '// is no longer supported,\n\e[31m   |\e[0muse a string literal \"//\" or an\
    \ application Symbol(\"//\") instead,\n\e[31m   |\e[0mor enclose in braces '{//}\
    \ if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import\
    \ language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom, but\
    \ this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnat6yfro.scala:48:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mif\e[0m(op(i) == \e[31m'//\e[0m'){\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmpnat6yfro.scala:51:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m51 |\e[0m       \
    \     \e[33mif\e[0m(op(i) == \e[31m'**\e[0m'){\n\e[31m\e[31m   |\e[0m        \
    \                   ^\e[0m\n\e[31m   |\e[0m                           unclosed\
    \ character literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnat6yfro.scala:23:17\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mop\e[0m = operator\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 Not found: operator\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpnat6yfro.scala:24:22 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperand\e[0m = operand\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35moperand\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpnat6yfro.scala:64:0 -----------------\e\
    [0m\e[0m\n\e[33m64 |\e[0m}\n\e[33m\e[33m   |\e[0m ^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression d"
  stdout: ''
  timestamp: 1660013142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if(op.length !=operand.length -1) {\n            println(\"\
    Error wrong input!\")\n            exit\n        }\n        var result : Long\
    \ = 0\n        for(i<-0 until operand.length-1) {\n            result = result\
    \ + operand(i) * op(operand.length - 1 - i)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhosd2z0.scala:25:12 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            exit\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: exit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpxhosd2z0.scala:29:41 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            result = result + operand(i) * op(operand.length\
    \ - \e[31m1\e[0m - i)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch\
    \ arguments (String)\n2 errors found\n"
  stdout: ''
  timestamp: 1660013142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val newOperator = op.filterNot(c => c != \"-\");\n     \
    \   var newOperand = operand.filterNot(c => c<=0)\n        val operator = Array[String](newOperator.head,newOperator.tail);\n\
    \        val operand = Array[Long](newOperand.head,newOperand.tail);\n       \
    \ var result = operand(0)\n        val length = operator.length\n        var i\
    \ = 1\n        while (i <= operand(length)) {\n            result = result + operator(0)\
    \ * operand(i)\n            i = i + 1\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"\
    *\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n\
    \    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi6osvw6j.scala:26:34 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36moperand\e[0m = Array[\e\
    [35mLong\e[0m](newOperand.head,newOperand.tail);\n\e[31m\e[31m   |\e[0m      \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \       Recursive \e[33mvariable\e[0m \e[35mnewOperand\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi6osvw6j.scala:26:50 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36moperand\e[0m = Array[\e\
    [35mLong\e[0m](newOperand.head,newOperand.tail);\n\e[31m\e[31m   |\e[0m      \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                       Recursive \e[33mvariable\e[0m \e[35mnewOperand\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi6osvw6j.scala:25:66\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moperator\e\
    [0m = Array[\e[35mString\e[0m](newOperator.head,newOperator.tail);\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    List[String @uncheckedVariance]\n\
    \e[31m   |\e[0m                               Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi6osvw6j.scala:31:51 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            result = result + operator(\e[31m0\e[0m)\
    \ * operand(i)\n\e[31m\e[31m   |\e[0m                                        \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \    Found:    Long\n\e[31m   |\e[0m                                         \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // TODO: Write your code here\n        val operator = op.reverse\n\
    \        var result : Long = 0\n        \n        var operand : List[Long] = operand.sortBy(x\
    \ => x)\n        operand = operand.map(x => x - 1)\n        var operand1 : List[Long]\
    \ = operand.sortBy(x => x)\n        \n        for (l1 <- operand1; l2 <- operand)\
    \ {\n            val op = operator(l1) match {\n                case \"+\" =>\
    \ result += l1\n                case \"-\" => result -= l1\n                case\
    \ \"*\" => result *= l1\n                case \"/\" => result /= l1\n        \
    \        case \"//\" => result //= l1\n                case \"**\" => result **=\
    \ l1\n                case _ => 0\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsumxe0bn.scala:32:30\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e\
    [36mop\e[0m = operator(l1) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                     ^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (l1 : Long)\n\e[31m   |\e[0m                              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsumxe0bn.scala:38:36\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                \e[33mcase\e\
    [0m \e[31m\"**\"\e[0m => result **= l1\n\e[31m\e[31m   |\e[0m                \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             value\
    \ **= is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660013147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.zipWithIndex.filter(_._2 != 0) // Filter\
    \ out zero index elements\n        val operand1 = operand.zipWithIndex.filter(_._2\
    \ != 0) // Filter out zero index elements\n        val operand2 = operand1.zipWithIndex.filter(_._2\
    \ != 0) // Filter out zero index elements\n        operand2.map(x => {\n     \
    \       val op1 = operator(x._1)\n            val op2 = operator(x._2)\n     \
    \       op1.reduce(op2)\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5on4lw02.scala:27:33\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e\
    [36mop1\e[0m = operator(x._1)\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (Long,\
    \ Int)\n\e[31m   |\e[0m                               Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5on4lw02.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            op1.reduce(op2)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value reduce is not a member\
    \ of (String, Int)\n2 errors found\n"
  stdout: ''
  timestamp: 1660013147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // TODO: Complete this\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmczb5ce.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// TODO: Complete this\e\
    [0m\n\e[31m24 |\e[0m        \n\e[31m25 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here.\n        val l2 = operand - 1\n\
    \        val op1 = op.take(1).foreach(x => println(x))\n        val op2 = op.drop(l2).map(x\
    \ => println(x))\n        val op3 = op.take(l2).map(x => println(x))\n       \
    \ println(op1)\n        println(op2)\n        println(op3)\n        val result\
    \ = 0\n        for(i <- op1 until op2.length) {\n            result += operand(i)\
    \ * operand(l2)\n        }\n        println(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpik5ka3l_.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = operand - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ - is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpik5ka3l_.scala:32:21\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mfor\e[0m(i\
    \ <- op1 until op2.length) {\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value until is not a member of Unit\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpik5ka3l_.scala:35:15 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        println(result)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m\
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new mutable.Stack[Long]()\n        val stack2\
    \ = new mutable.Stack[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val stack3 = new mutable.Stack[Long]()\n        val opLength = len(op)\n\
    \        val operandLength = len(operand)\n        for (i <- 0 until operandLength)\
    \ {\n            val num1 = operand(i)\n            val num2 = stack2.last\n \
    \           val op1 = stack2.last\n            val op2 = op(0)\n            if\
    \ (num1 != 0) {\n                stack.push(num1)\n            } else {\n    \
    \            stack.push(num2)\n            }\n            val op1Int = op1.toInt\n\
    \            if (opLength > 1) {\n                val num3 = stack2.last\n   \
    \             val num4 = stack2.last\n                val op3 = stack2.last\n\
    \                val op4 = stack2.last\n                val num5 = stack2.last\n\
    \                val num6 = stack2.last\n                val op5 = stack2.last\n\
    \                val num7 = stack2.last\n                val op6 = stack2.last\n\
    \                val num8 = stack2.last\n                val op7 = stack2.last\n\
    \                if (num3 != 0) {\n                    stack2.push(num3)\n   \
    \             } else {\n                    stack2.push(num4)\n              \
    \  }\n                val num91 = stack2.last\n                val num10 = stack2.last\n\
    \                val num11 = stack2.last\n                val num12 = -stack2.last\n\
    \                val op9 = stack2.last\n                val num13 = stack2.last\n\
    \                val op10 = stack2.last\n                if (num5 != 0) {\n  \
    \                  stack2.push(num5)\n                } else {\n             \
    \       stack2.push(num6)\n                }\n                val num14 = stack2.last\n\
    \                val num15 = stack2.last\n                val op11 = stack2.last\n\
    \                val op12 = stack2.last\n                val num16 = stack2.last\n\
    \                val op13 = stack2.last\n                if (num7 != 0) {\n  \
    \                  stack2.push(num7)\n                } else {\n             \
    \       stack2.push(num8)\n                }\n                val num17 = stack2.last\n\
    \                val op14 = stack2.last\n                val num18 = stack2.last\n\
    \                val num19 = stack2.last\n                val num20 = stack2.last\n\
    \                val num21 = stack2.last\n                val op15 = stack2.last\n\
    \                val num22 = stack2.last\n                val op16 = stack2.last\n\
    \                if (num91 != 0) {\n                    stack2.push(num91)\n \
    \               } else {\n                    \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5tz8nxui.scala:101:0 ---------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5tz8nxui.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = \e[33mnew\e[0m mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5tz8nxui.scala:24:25 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mstack2\e[0m = \e[33mnew\e[0m mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5tz8nxui.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5tz8nxui.scala:26:25\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mstack3\e[0m = \e[33mnew\e[0m mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5tz8nxui.scala:27:23 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mopLength\e[0m = len(op)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ len\n\e[31m   |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660013151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val map = new mutable.LinkedHashMap[String, Long]()\n  \
    \      var exp = 0\n        map.put(\"+\", 0)\n        map.put(\"-\", 0)\n   \
    \     map.put(\"*\", 0)\n        map.put(\"/\", 0)\n        map.put(\"//\", 0)\n\
    \        map.put(\"**\", 0)\n        for (i <- 0 until operand.length) {\n   \
    \         exp += operand(i) * op(i+1) - 1\n            map.put(op(i), exp)\n \
    \       }\n        exp\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpevj1q51t.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedHashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpevj1q51t.scala:32:16\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            exp += operand(i)\
    \ * op(i+\e[31m1\e[0m) - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpevj1q51t.scala:32:30 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            exp += operand(i) * op(i+\e[31m1\e[0m) -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ (String)\n3 errors found\n"
  stdout: ''
  timestamp: 1660013151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Your code goes here\n        val operator = mutable.ArrayBuffer(op(0),\
    \ op(1), op(2));\n        val operand2 = mutable.ArrayBuffer(operand(0), operand(1),\
    \ operand(2));\n\n        var sum = 0;\n        for(i <- 0 until operand.size\
    \ by 2){\n            sum = 0\n            for(op <- operator){\n            \
    \    sum += operand(i) * operand2(i)\n            }\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun47uooi.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperator\e[0m = mutable.ArrayBuffer(op(\e\
    [31m0\e[0m), op(\e[31m1\e[0m), op(\e[31m2\e[0m));\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun47uooi.scala:25:23\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36moperand2\e[0m = mutable.ArrayBuffer(operand(\e[31m0\e[0m), operand(\e[31m1\e\
    [0m), operand(\e[31m2\e[0m));\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (operand.length < (op.length-1)) {\n            return\
    \ null\n        }\n        var acc = 0\n        var i = 0\n        for (x <- operand)\
    \ {\n            acc += x\n            i = i + 1\n        }\n        var op =\
    \ op(i-1)\n        var j = i\n        while(i < operand.length) {\n          \
    \  var op = op\n            acc = acc*operand(j) + doAlgebra(op,operand.dropRight(j))\n\
    \            i = i + 1\n            j = j - 1\n        }\n        acc\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpns6dy5th.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mop\e[0m = op(i-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m          \
    \       Recursive \e[33mvariable\e[0m \e[35mop\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpns6dy5th.scala:24:19 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mreturn\e[0m \e[31mnull\e[0m\n\e[31m\e\
    [31m   |\e[0m                   ^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    Null\n\e[31m   |\e[0m                   Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpns6dy5th.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            acc += x\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpns6dy5th.scala:35:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mvar\e\
    [0m \e[36mop\e[0m = op\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m\
    \   |\e[0m                     Recursive \e[33mvariable\e[0m \e[35mop\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpns6dy5th.scala:36:18\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            acc = acc*operand(j)\
    \ + doAlgebra(op,operand.dropRight(j))\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.map{\n            str => str.charAt(0)\n\
    \        }\n        val operands = operand.map{\n            num => math.abs(num)\n\
    \        }\n        var ret = 0\n        val len = operands.length\n        for\
    \ (i<- 0 until len){\n            val temp = 0\n            for(j <- 0 until len){\n\
    \                if(i != j){\n                    temp += operator(operands(j))\
    \ * (operands(i) - operands(j))\n                }\n            }\n          \
    \  ret = ret + temp\n        }\n        return ret\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9sldmum5.scala:35:25 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                    temp += operator(operands(j)) * (operands(i)\
    \ - operands(j))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                 value += is not a member of Int - did you mean temp.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9sldmum5.scala:35:45 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                    temp += operator(operands(j)) * (operands(i)\
    \ - operands(j))\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    Long\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val newList = operand.map(x => if(op.contains(\"**\")) Math.pow(operand,\
    \ x)  else x )\n        val result = newList.foldLeft(0L)((acc, x) => acc + x)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjq0t11p.scala:23:70\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = operand.map(\e[36mx\e[0m => \e[33mif\e[0m(op.contains(\e[31m\"**\"\e[0m))\
    \ Math.pow(operand, x)  \e[33melse\e[0m x )\n\e[31m\e[31m   |\e[0m           \
    \                                                           ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (operand : List[Long])\n\
    \e[31m   |\e[0m                                        Required: Double\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpnjq0t11p.scala:24:58 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = newList.foldLeft(\e\
    [31m0L\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + x)\n\e[31m\e[31m   |\e[0m\
    \                                                      ^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\
    \e[31m   |\e[0mmatch arguments ((x : AnyVal))\n2 errors found\n"
  stdout: ''
  timestamp: 1660013154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var leftOperand = 0\n        var rightOperand = 0\n    \
    \    var currentOp = 0\n        val result = 0\n        for (a <- 0 until operand.length)\
    \ {\n            if (a > operand.length - 1) {\n                currentOp = 0\n\
    \                leftOperand = operand(a - 1)\n                rightOperand =\
    \ operand(a + 1)\n            }\n            else {\n                currentOp\
    \ = operand(a)\n            }\n            result += operList[currentOp](leftOperand,\
    \ rightOperand)\n            currentOp = currentOp - 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplqzzaa82.scala:30:37\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                leftOperand =\
    \ operand(a - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Found: \
    \   Long\n\e[31m   |\e[0m                              Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplqzzaa82.scala:31:38 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                rightOperand = operand(a + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplqzzaa82.scala:34:35 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                currentOp = operand(a)\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplqzzaa82.scala:36:19\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            result += operList[\e\
    [35mcurrentOp\e[0m](leftOperand, rightOperand)\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean result.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqzzaa82.scala:36:31\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            result += operList[\e\
    [35mcurrentOp\e[0m](leftOperand, rightOperand)\n\e[31m\e[31m   |\e[0m        \
    \                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         Not found: type currentOp\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Err"
  stdout: ''
  timestamp: 1660013155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val list1 = op.zip(operand).map{case (opp, op) =>\n    \
    \        val op = opp._1\n            val op = opp._2\n            val op = opp._2\n\
    \            val operand = opp._2\n            val opp = opp._1\n        }\n \
    \       var opp = \"\"\n        var op = 0\n        var operand = 0\n        var\
    \ newOperand = 0\n        var oppNewOp = \"\"\n        var opNewOp = 0\n     \
    \   var newList = 0\n        var op1 = \"\"\n        var op2 = 0\n        var\
    \ newList1 = \"\"\n        var operand1 = \"\"\n        var operand2 = 0\n   \
    \     var newList2 = \"\"\n        var newList1 = 0\n        var newList2 = 0\n\
    \        var list1i = 0\n        var list2i = 0\n        var newList1i = 0\n \
    \       var newList2i = 0\n        var list1j = 0\n        var list2j = 0\n  \
    \      var newList1j = 0\n        var newList2j = 0\n        var newList1j = 0\n\
    \        var newList2j = 0\n        var list1k = 0\n        var list2k = 0\n \
    \       for(i<-list1.length){\n            list1i = list1.apply(i)\n         \
    \   list2i = list2.apply(i)\n            list1j = list1.apply(i+1)\n         \
    \   list2j = list2.apply(i+1)\n            list1k = list1.apply(i+2)\n       \
    \     list2k = list2.apply(i+2)\n            if(list1i == list2i){\n         \
    \       oppNewOp = list1j\n                opNewOp = list2j\n            }\n \
    \           else if(list1j == list2j){\n                oppNewOp = list1k\n  \
    \              opNewOp = list2k\n            }\n            else if(list1i ==\
    \ list2j){\n                oppNewOp = list1j\n                opNewOp = list2k\n\
    \            }\n            else if(list1j == list2k){\n                oppNewOp\
    \ = list1i\n                opNewOp = list2j\n            }\n            else\
    \ if(list1i == list2k){\n                oppNewOp = list1i\n                opNewOp\
    \ = list2i\n            }\n            else if(list1j == list2i){\n          \
    \      oppNewOp = list1j\n                opNewOp = list2j\n            }\n  \
    \          else if(list1k == list2j){\n                oppNewOp = list1k\n   \
    \             opNewOp = list2k\n            }\n            else if(list1k == list2k){\n\
    \                opp\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsnk9jml3.scala:102:0 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsnk9jml3.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mnewList1\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewList1 is already defined as \e[33mvariable\e[0m \e[35mnewList1\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsnk9jml3.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mvar\e[0m \e[36mnewList2\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewList2 is already\
    \ defined as \e[33mvariable\e[0m \e[35mnewList2\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsnk9jml3.scala:53:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m53 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mnewList1j\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewList1j is already defined as \e[33mvariable\e[0m \e[35mnewList1j\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsnk9jml3.scala:54:12 ---------------------------\e[0m\e[0m\n\e\
    [31m54 |\e[0m        \e[33mvar\e[0m \e[36mnewList2j\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewList2j is already\
    \ defined as \e[33mvariable\e[0m \e[35mnewList2j\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsnk9jml3.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlist1\e[0m = op.zip(operand).map{\e[33mcase\e[0m (opp, op) =>\n\e[31m\e[31m\
    \   |\e[0m        "
  stdout: ''
  timestamp: 1660013154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opArray = op.asInstanceOf[Array[String]]\n        val\
    \ operandArray = operand.asInstanceOf[Array[Long]]\n        var sum = 0\n    \
    \    var mul = 1\n        for(i <- 0 until operandArray.length) {\n          \
    \  sum ++= opArray(opArray.length-i-1) * operandArray(i)\n            mul *= operandArray(i)\n\
    \        }\n        mul * sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6of0ano7.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            sum ++= opArray(opArray.length-i-\e[31m1\e\
    [0m) * operandArray(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value ++= is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp6of0ano7.scala:28:62 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            sum ++= opArray(opArray.length-i-\e[31m1\e[0m)\
    \ * operandArray(i)\n\e[31m\e[31m   |\e[0m                                   \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                          Found:    Long\n\e[31m   |\e[0m                   \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6of0ano7.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            mul *= operandArray(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660013156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n        var result = 0.0\n    \
    \    for( i <- 0 until operand.size)\n        result += (operand(i) match {\n\
    \            case 1 => 1\n            case x if x > 0 => operator(op(i))(operand(i))\n\
    \            case x if x < 0 => -x * (-1 * operator(op(i))(operand(i))\n     \
    \       case _ => operator(op(i))(operand(i))\n        })\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcrke0fne.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mcase\e[0m _ => operator(op(i))(operand(i))\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            ')' expected,\
    \ but 'case' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcrke0fne.scala:26:15\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        result += (operand(i)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value += is not a member of Double - did you mean Double.!=?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcrke0fne.scala:28:31 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x > \e[31m0\e\
    [0m => operator(op(i))(operand(i))\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ operator\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcrke0fne.scala:29:42\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e\
    [0m x \e[33mif\e[0m x < \e[31m0\e[0m => -x * (-\e[31m1\e[0m * operator(op(i))(operand(i))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                          Not found: operator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcrke0fne.scala:32:8\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Double)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if(op.length != operand.length){\n            throw new\
    \ IllegalArgumentException(\"Operator list and operand list must have same length\"\
    )\n        }\n        val opList = op.asInstanceOf[List[String]]\n        val\
    \ operandList = operand.asInstanceOf[List[Long]]\n        val stack = mutable.Stack[Any]()\n\
    \        val result = operandList.head\n        val operand = operandList.tail\n\
    \        for( i <- 0 until operand.length){\n            stack.push(operand(i))\n\
    \        }\n        for( i <- 1 until operand.length){\n            while(stack.nonEmpty){\n\
    \                val elm = stack.pop()\n                val op = opList(i)\n \
    \               val operand1 = stack.pop()\n                val operand2 = stack.pop()\n\
    \                if( op == \"*\" ){\n                    result *= operand1\n\
    \                    stack.push(result)\n                }else if( op == \"+\"\
    \ ){\n                    result += operand1\n                    stack.push(result)\n\
    \                }else if( op == \"-\" ){\n                    result -= operand1\n\
    \                    stack.push(result)\n                }else if( op == \"/\"\
    \ ){\n                    result /= operand1\n                    stack.push(result)\n\
    \                }else if( op == \"//\" ){\n                    result %= operand1\n\
    \                    stack.push(result)\n                }else if( op == \"**\"\
    \ ){\n                    result %= operand1\n                    stack.push(result)\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwx4aj6os.scala:27:26 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36moperandList\e[0m = operand.asInstanceOf[\e\
    [35mList\e[0m[\e[35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35moperand\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwx4aj6os.scala:28:20 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mAny\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val a = operand.tail\n        val b = operand.init\n   \
    \     val operators = op.tail\n        val operands = op.init\n        val length\
    \ = operators.length\n        val res = 0.\n        \n        for(i <- 0 until\
    \ length){\n            val op = operators(i)\n            val operand1 = operands(i)\n\
    \            val operand2 = operands(i+1)\n            val result = operand1 op\
    \ operand2\n            \n            res = res + result\n        }\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_dv2jlro.scala:30:8 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until length){\n\
    \e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        an identifier expected,\
    \ but 'for' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Initialization\n        val operandMap = mutable.Map[String,\
    \ Long]()\n        operand.toList.reverse.zipWithIndex.foreach { case (operand,\
    \ i) =>\n            if (operandMap.contains(op(i))) {\n                val oldValue\
    \ = operandMap(op(i))\n                val newValue = oldValue + operand\n   \
    \             operandMap(op(i)) = newValue\n            } else {\n           \
    \     val newValue = operand\n                operandMap(op(i)) = newValue\n \
    \           }\n        }\n        \n        val result = 0\n        \n       \
    \ op.zipWithIndex.foreach { case (opr, i) => {\n            val operand = operandMap(opr(i))\n\
    \            val operator = opr(i)\n            if (operator == \"+\") {\n   \
    \             result += operand\n            }\n            if (operator == \"\
    -\") {\n                result -= operand\n            }\n            if (operator\
    \ == \"*\") {\n                result *= operand\n            }\n            if\
    \ (operator == \"/\") {\n                result /= operand\n            }\n  \
    \          if (operator == \"//\") {\n                result %= operand\n    \
    \        }\n            if (operator == \"**\") {\n                result **=\
    \ operand\n            }\n        }}\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55ez2dzo.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperandMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp55ez2dzo.scala:41:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            \e[33mif\e[0m (operator == \e[31m\"+\"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp55ez2dzo.scala:42:23 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                result += operand\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not\
    \ a member of Int - did you mean result.!=?\n\e[31m\e[31m-- Error: /tmp/tmp55ez2dzo.scala:44:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m44 |\e[0m       \
    \     \e[33mif\e[0m (operator == \e[31m\"-\"\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp55ez2dzo.scala:45:23 ------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m                result -= operand\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value -= is not a member of\
    \ Int - did you mean result.!=?\n\e[31m\e[31m-- Error: /tmp/tmp55ez2dzo.scala:47:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m47 |\e[0m       \
    \     \e[33mif\e[0m (operator == \e[31m\"*\"\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp55ez2dzo.scala:48:23 ------------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m                result *= operand\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1660013159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new mutable.Stack[Long]()\n        val expression\
    \ = new mutable.Stack[Long]()\n        val operatorStack = new mutable.Stack[String]()\n\
    \        val operator = op(0)\n        val operand1 = operand(1)\n        val\
    \ operand2 = operand(2)\n        operatorStack.push(operator)\n        expression.append(operand1)\n\
    \        stack += operand1\n        expression.append(operand2)\n        stack\
    \ += operand2\n        while(!operatorStack.isEmpty && !expression.isEmpty) {\n\
    \            val operator = operatorStack.top\n            val operand = expression.pop()\n\
    \            val nextOperand = expression.pop()\n            val nextOperator\
    \ = operatorStack.pop()\n            switch(operator) {\n                case\
    \ \"+\" :\n                    stack += operand\n                    expression.append(nextOperand)\n\
    \                case \" - \" :\n                    stack -= operand\n      \
    \              expression.append(nextOperand)\n                case \" / \" :\n\
    \                    if(operand == 0)\n                        throw new ArithmeticException(\"\
    Divide by Zero Error\")\n                    val result = operand / nextOperand\n\
    \                    stack += result\n                    expression.append(nextOperand)\n\
    \                case \" ^ \" :\n                    if(operand == 0)\n      \
    \                  throw new ArithmeticException(\"Divide by Zero Error\")\n \
    \                   val result = operand ^ nextOperand\n                    stack\
    \ += result\n                    expression.append(nextOperand)\n            \
    \    case \" * \" :\n                    stack *= operand\n                  \
    \  expression.append(nextOperand)\n                case \" ** \" :\n         \
    \           if(operand == 0)\n                        throw new ArithmeticException(\"\
    Divide by Zero Error\")\n                    val result = operand ** nextOperand\n\
    \                    stack += result\n                    expression.append(nextOperand)\n\
    \            }\n            operatorStack.push(nextOperator)\n        }\n    \
    \    stack.pop()\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp36_5jj5t.scala:41:26 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    stack += operand\n\e[31m\e[31m  \
    \ |\e[0m                          ^^\e[0m\n\e[31m   |\e[0m                   \
    \       '=>' expected, but identifier found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp36_5jj5t.scala:44:26 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m                    stack -= operand\n\e[31m\e[31m   |\e[0m          \
    \                ^^\e[0m\n\e[31m   |\e[0m                          '=>' expected,\
    \ but identifier found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp36_5jj5t.scala:47:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m                    \e\
    [33mif\e[0m(operand == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \  ^^\e[0m\n\e[31m   |\e[0m                    an identifier expected, but 'if'\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36_5jj5t.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = \e[33mnew\e[0m mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp36_5jj5t.scala:24:29 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mexpression\e[0m = \e[33mnew\e[0m mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36_5jj5t.scala:25:32 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moperatorStack\e[0m = \e\
    [33mnew\e[0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          Not found: mutab"
  stdout: ''
  timestamp: 1660013153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opSet = mutable.Set[String]()\n        val numSet =\
    \ mutable.Set[Long]()\n        // find all possible operations first\n       \
    \ for (x1 <- 0 until operand.size) {\n            for (x2 <- 0 until operand.size)\
    \ {\n                if (x1 < x2) {\n                    val op1 = operator(x1)\n\
    \                    val op2 = operator(x2)\n                    if (op1 <opSet.size)\
    \ {\n                        if (op2 < opSet.size) {\n                       \
    \     opSet += op2\n                            opSet += op1\n               \
    \         } else {\n                            opSet += op2\n               \
    \         }\n                    } else {\n                        opSet += op1\n\
    \                    }\n                } else {\n                    if (op2\
    \ < opSet.size) {\n                        opSet += op2\n                    }\n\
    \                }\n            }\n        }\n        // find all possible numbers\n\
    \        for (x1 <- 0 until operand.size)\n            for (x2 <- 0 until operand.size)\
    \ {\n                if (x1 < x2) {\n                    numSet += operand(x1)\
    \ *operand(x2)\n                } else {\n                    numSet += operand(x1)\n\
    \                }\n            }\n        // find all possible numbers\n    \
    \    var i = 1\n        while (i<operand.size) {\n            numSet += operand(i)\n\
    \            i += 1\n        }\n        // do calculations\n        var result\
    \ = 1\n        for (i<-0 until numSet.size) {\n            val a = numSet(i)\n\
    \            val b = opSet(i)\n            result = result * b * a\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqzxlgpbs.scala:31:28 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33mif\e[0m (op1 <opSet.size) {\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       ')' expected, but $XMLSTART$< found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqzxlgpbs.scala:23:20 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopSet\e[0m = mutable.Set[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqzxlgpbs.scala:24:21 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqzxlgpbs.scala:29:30 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mval\e[0m \e[36mop1\e[0m = operator(x1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: operator\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqzxlgpbs.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    \e[33mval\e[0m \e[36mop2\e[0m = operator(x2)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: operator\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqzxlgpbs.scala:42:24 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                    \e[33mif\e[0m (op2 < opSet.size)\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m  \
    \            "
  stdout: ''
  timestamp: 1660013154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def doAlgebric(op: String, operand: List[Long]): Long =\
    \ {\n            val opList = op.split(\"\")\n            val operandList = operand.split(\"\
    \")\n            val result = new mutable.HashMap[String, Long]\n            val\
    \ length = opList.length\n            for (i <- 0 until length) {\n          \
    \      val op = opList(i)\n                val operand = operandList(i)\n    \
    \            result += (op -> (op == \"+\" ? (operand + operand) : op == \"-\"\
    \ ? (operand - operand) : op == \"*\" ? (operand * operand) : op == \"//\" ? (operand\
    \ / operand) : op == \"**\" ? (operand ** operand) : \"\"))\n            }\n \
    \           val finalResult = result.get(\"+\")\n            return finalResult.getOrElse(\"\
    0\")\n        }\n        return doAlgebric(op(0), operand) + doAlgebric(op(1),\
    \ operand)\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuxvpusts.scala:31:100 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                result += (op -> (op == \e[31m\"+\"\e\
    [0m ? (operand + operand) : \e[35mop\e[0m \e[35m==\e[0m \e[31m\"-\"\e[0m \e[35m?\e\
    [0m (\e[35moperand\e[0m \e[35m-\e[0m \e[35moperand\e[0m) : op == \e[31m\"*\"\e\
    [0m ? (operand * operand) : op == \e[31m\"//\"\e[0m ? (operand / operand) : op\
    \ == \e[31m\"**\"\e[0m ? (operand ** operand) : \e[31m\"\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                         ')' expected, but ':' found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpuxvpusts.scala:25:38 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            \e[33mval\e[0m \e[36moperandList\e[0m = operand.split(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue split is not a member of List[Long] - did you mean operand.splitAt?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuxvpusts.scala:26:29 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opMap = new mutable.HashMap[String, Long]()\n      \
    \  var i = 0\n        while (i < op.length) {\n            opMap.put(op(i), operand(i))\n\
    \            i += 1\n        }\n\n        var j = 0\n        while (j < operand.length\
    \ - 1) {\n            var temp = 0\n            while (j < operand.length - 1)\
    \ {\n                temp += operand(j) * opMap(op[j])\n                j += 1\n\
    \            }\n            val temp2 = temp\n            i += 1\n           \
    \ val temp3 = temp2\n            i += 1\n            val temp4 = temp3\n     \
    \       i += 1\n            val temp5 = temp4\n            i += 1\n          \
    \  val result = temp5\n            return result\n        }\n\n        return\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu733p8eo.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Declare variables\n        var res = 0\n        var i\
    \ = 0\n        var j = 0\n        var operators = List(op(0))\n        var operands\
    \ = List(operand(0))\n        // Remove the first operator and operand from the\
    \ operator and operand lists\n        operators = operators.drop(1)\n        operands\
    \ = operands.drop(1)\n        // Add the new operators and operands to the result\
    \ variable\n        val newOperators = List(op(0)) :: operators\n        val newOperands\
    \ = List(operand(0)) :: operands\n        // Add parentheses if operator is positive\n\
    \        val operatorString = newOperators.reverse.foldLeft(\"\")(_ + _)\n   \
    \     if (operatorString.toString.toInt > 0) {\n            newOperators.reverse.zip(newOperands).foreach\
    \ { \n                case (operator, operand) => res += (operator.toString +\
    \ operand.toString)\n            }\n        }\n        else {\n            newOperators.reverse.zip(newOperands).foreach\
    \ {\n                case (operator, operand) => res += (operator.toString + operand.toString\
    \ + \"(\")\n            }\n        }\n        res += newOperators.reverse.zip(newOperands).map\
    \ {\n            case (operator, operand) => \"-\" + operand.toString\n      \
    \  }.mkString\n        res += \"(\" + newOperands.reverse.mkString(\",\") + \"\
    )\"\n        res += operatorString.toString + operands.reverse.mkString\n    \
    \    eval(res) // Evaluate the expression\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk19rpxtx.scala:39:48 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                \e[33mcase\e[0m (operator, operand) =>\
    \ res += (operator.toString + operand.toString)\n\e[31m\e[31m   |\e[0m       \
    \                                     ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpk19rpxtx.scala:44:48 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                \e[33mcase\e[0m (operator, operand) =>\
    \ res += (operator.toString + operand.toString + \e[31m\"(\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpk19rpxtx.scala:47:12 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        res += newOperators.reverse.zip(newOperands).map\
    \ {\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpk19rpxtx.scala:50:12 ------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m        res += \e[31m\"(\"\e[0m + newOperands.reverse.mkString(\e[31m\"\
    ,\"\e[0m) + \e[31m\")\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk19rpxtx.scala:51:12 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        res += operatorString.toString + operands.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk19rpxtx.scala:52:8 -------------------------\e[0m\e[0m\n\e[31m52 |\e\
    [0m        eval(res) \e[34m// Evaluate the expression\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^\e[0m\n\e[31m   |\e[0m        Not found: eval\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1660013159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7_zdlta.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// Write your code here\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // First get the list of operators from the operator string\n\
    \        // This will be a list of \"+\"\n        // [\"+\", \"+\", \"+\"]\n \
    \       val operator = op.map(x => x.toLowerCase)\n        // Here we use the\
    \ list of operators to map the operation to the corresponding function.\n    \
    \    // This will map the operation to the corresponding function \n        //\
    \ The function can be any function that returns the sum of the operand.\n    \
    \    // The function should have the signature: Map[String, Function1[List[Long],\
    \ Long]]\n        val operation = Map(\n            \"+\" -> (x: List[Long]) =>\
    \ x.sum,\n            \"-\" -> (x: List[Long]) => x.sum,\n            \"*\" ->\
    \ (x: List[Long]) => x.sum,\n            \"//\" -> (x: List[Long]) => x.sum,\n\
    \            \"**\" -> (x: List[Long]) => x.sum\n        )\n        // We now\
    \ use map to apply the function to each element in operand\n        // This will\
    \ be List[Long] -> List[Long]\n        val operandWithOperations = operand.map(operation\
    \ _)\n        // Now we get the final result\n        val result = operandWithOperations.map(operation(_))\n\
    \        // The result is sum of the elements in operand\n        // List[Long]\
    \ -> Long\n        result.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc205b3mm.scala:32:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[31m\"+\"\e[0m -> (x: \e[35mList\e[0m[\e\
    [35mLong\e[0m]) => x.sum,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            not a legal formal parameter\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpc205b3mm.scala:33:16 -----------------------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            \e[31m\"-\"\e[0m -> (x: \e[35mList\e[0m[\e[35mLong\e\
    [0m]) => x.sum,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            not a legal formal parameter\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpc205b3mm.scala:34:16 -----------------------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m            \e[31m\"*\"\e[0m -> (x: \e[35mList\e[0m[\e[35mLong\e\
    [0m]) => x.sum,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            not a legal formal parameter\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpc205b3mm.scala:35:17 -----------------------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m            \e[31m\"//\"\e[0m -> (x: \e[35mList\e[0m[\e[35mLong\e\
    [0m]) => x.sum,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            not a legal formal parameter\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpc205b3mm.scala:36:17 -----------------------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m            \e[31m\"**\"\e[0m -> (x: \e[35mList\e[0m[\e[35mLong\e\
    [0m]) => x.sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            not a legal formal parameter\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpc205b3mm.scala:32:38 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            \e[31m\"+\"\e[0m -> (x: \e[35mList\e[0m[\e[35mLong\e\
    [0m]) => x.sum,\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: x\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc205b3mm.scala:33:38 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[31m\"-\"\e[0m -> (x: \e[35mList\e[0m[\e\
    [35mLong\e[0m]"
  stdout: ''
  timestamp: 1660013156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.toList\n        val operands = operand.toList\n\
    \        val operandLength = operands.length\n        val operatorLength = operator.length\n\
    \        val result = operands(0)\n        for ( i <- 1 to operandLength-1) {\n\
    \            val leftOperand = operands(i-1)\n            val rightOperand = operands(i)\n\
    \            val operator1 = operator(0)\n            val operator2 = operator(i-1)\n\
    \            val operator3 = operator(operatorLength-1)\n            val result\
    \ = leftOperand match {\n                case i if i < rightOperand =>\n     \
    \               val temp = i\n                    val op1 = operator1\n      \
    \              val op2 = operator2\n                    val op3 = operator3\n\
    \                    if (op3 == \"+\") result = temp + rightOperand\n        \
    \            if (op3 == \"*\") result = temp * rightOperand\n                \
    \    if (op3 == \"-\") result = temp - rightOperand\n                    if (op3\
    \ == \"//\") result = temp div (rightOperand + 1)\n                    if (op3\
    \ == \"**\") result = temp pow (rightOperand + 1)\n                    if (op3\
    \ == \">=\") result = temp geq(rightOperand)\n                    if (op3 == \"\
    <=\") result = temp leq(rightOperand)\n                    if (op3 == \"!=\")\
    \ result = temp neq(rightOperand)\n                    if (op3 == \"==\") result\
    \ = temp eqq(rightOperand)\n                    if (op3 == \">\") result = temp\
    \ gt(rightOperand)\n                    if (op3 == \"<\") result = temp lt(rightOperand)\n\
    \                    if (op3 == \"%\") result = temp mod(rightOperand)\n     \
    \               if (op3 == \"==\") result = temp eqq(rightOperand)\n         \
    \           if (op3 == \"!=\") result = temp neq(rightOperand)\n             \
    \       if (op3 == \"<\") result = temp lt(rightOperand)\n                   \
    \ if (op3 == \"<=\") result = temp leq(rightOperand)\n                    if (op3\
    \ == \">=\") result = temp geq(rightOperand)\n                    if (op3 == \"\
    !=\") result = temp neq(rightOperand)\n                    if (op3 == \"==\")\
    \ result = temp eqq(rightOperand)\n                    if (op3 == \"<\") result\
    \ = temp lt(rightOperand)\n                    if (op3 == \"%\") result = temp\
    \ mod(rightOperand)\n                    if (op3 == \"==\") result = temp eqq(rightOperand)\n\
    \                    if (op3 == \"!=\") result = temp neq(rightOperand)\n    \
    \                if (op3 == \"==\") result = temp eqq(rightOperand)\n        \
    \            if (op3 == \"<\") result = temp lt(rightOperand)\n              \
    \      if (op3 == \"%\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn8sd3pb8.scala:65:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m                    \e[33mif\e[0m (op3 == \"%\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpn8sd3pb8.scala:67:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m67 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpn8sd3pb8.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn8sd3pb8.scala:40:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m                    \e\
    [33mif\e[0m (op3 == \e[31m\"+\"\e[0m) result = temp + rightOperand\n\e[31m\e[31m\
    \   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m        \
    \                            Recursive \e[33mvalue\e[0m \e[35mresult\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn8sd3pb8.scala:41:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                    \e\
    [33mif\e[0m (op3 == \e[31m\"*\"\e[0m) result = temp * rightOperand\n\e[31m\e[31m\
    \   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m        \
    \                            Recursive \e[33mvalue\e[0m \e[35mresult\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn8sd3pb8.scala:42:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                    \e\
    [33mif\e[0m (op3 == \e[31m\"-\"\e[0m) result = temp - rightOperand\n\e[31m\e[31m\
    \   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m        \
    \                            Recursive \e[33mvalue\e[0m \e[35mresult\e[0m needs\
    \ type\n\e[31m   |"
  stdout: ''
  timestamp: 1660013162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var list = new Array[String](operand.length)\n        var\
    \ i = 0\n        for(i <- 0 until operand.length) {\n            list(i) = operand(i).toString\n\
    \        }\n        val operation = op.mkString\n        val op = list\n     \
    \   val res = List(operation).reduce( (a,b) => b(a,op))\n        res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdpfbjokd.scala:30:53\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m = List(operation).reduce( (\e[36ma\e[0m,\e[36mb\e[0m) => b(a,op))\n\e[31m\e\
    [31m   |\e[0m                                                     ^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Found:    (String, Array[String])\n\
    \e[31m   |\e[0m                                       Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdpfbjokd.scala:31:8 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (res : String)\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        assert(op.nonEmpty)\n        assert(operand.nonEmpty)\n\
    \        // get the length of operator list\n        val opLength = op.length\n\
    \        // initialize result with 0\n        var result = operand(0)\n      \
    \  // find the max operator \n        val maxOperator = op.map(_.toInt).max\n\
    \        // get the first operator \n        val operator = op.map(_.toInt).min\n\
    \        // if the operator is +, then just add the operand to the result\n  \
    \      if(maxOperator == 1 ) {\n            result += operand(0)\n        } \n\
    \        // otherwise do the same logic except switch the operands and operators\n\
    \        else {\n            // get max operand \n            val maxOperand =\
    \ operand.map(_.toInt).max\n            // get the first operand \n          \
    \  val operand1 = operand(0)\n            val operand2 = operand(1)\n        \
    \    // if the operands are +, then just add the operands to the result\n    \
    \        if(maxOperand == 1 ) {\n                result += operand1\n        \
    \        result -= operand2\n            }\n            // otherwise do the same\
    \ logic except switch the operands and operators\n            else {\n       \
    \         // get max operator \n                val maxOperator = op.map(_.toInt).max\n\
    \                // if the operator is +, then just add the operand to the result\n\
    \                if(maxOperator == 1 ) {\n                    result += operand1\n\
    \                    result *= operand2\n                }\n                //\
    \ otherwise do the same logic except switch the operands and operators\n     \
    \           else {\n                    val op1 = op.map(_.toInt).min\n      \
    \              val op2 = op.map(_.toInt).max\n                    // if the operator\
    \ is +, then just add the operand to the result\n                    if(op1 ==\
    \ 1 ) {\n                        result += operand1\n                        result\
    \ /= operand2\n                    }\n                    // otherwise do the\
    \ same logic except switch the operands and operators\n                    else\
    \ {\n                        val op1 = op.map(_.toInt).min\n                 \
    \       val op2 = op.map(_.toInt).max\n                        // if the operator\
    \ is +, then just add the operand to the result\n                        if(op1\
    \ == 1 ) {\n                            result += operand1\n                 \
    \           result **= operand2\n                        }\n                 \
    \       // otherwise do the same logic except switch the operands and operators\n\
    \                        else {\n                            val op1 = op.map(_.toInt).min\n\
    \                            val op2 = op.map(_.toInt).max\n                 \
    \           // if the operator is +, then just add the operand to the result\n\
    \                            if(op1 == 1 ) {\n                               \
    \ result += operand1\n                                result <<= operand2\n  \
    \                          }\n                            // otherwise do the\
    \ same logic except switch the operands and operators\n                      \
    \      else {\n                                val op1 = op.map(_.toInt).min\n\
    \                                val op2 = op.map(_.toInt).max\n             \
    \                   // if the operator is +\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj7_ppxjk.scala:98:0 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7_ppxjk.scala:35:12\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m            result += operand(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7_ppxjk.scala:47:16\
    \ --------------------\e[0m\e[0m\n\e[31m47 |\e[0m                result -= operand2\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Found:    Unit\n\e[31m   |\e[0m                Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7_ppxjk.scala:56:20\
    \ --------------------\e[0m\e[0m\n\e[31m56 |\e[0m                    result *=\
    \ operand2\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Found:    Unit\n\e[31m   |\e[0m           \
    \         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj7_ppxjk.scala:65:24 --------------------\e[0m\e[0m\n\e[31m65\
    \ |\e[0m                        result /= operand2\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \        Found:    Unit\n\e[31m   |\e[0m                        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7_ppxjk.scala:74:35\
    \ ------------------------\e[0m\e[0m\n\e[31m74 |\e[0m                        \
    \    result **= operand2\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value **= is not a member of Long\n\
    \e[31m\e[31"
  stdout: ''
  timestamp: 1660013162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operators = op.toSet\n\n        // Check if operators\
    \ is empty \n        if (operators.isEmpty) {\n            return 0\n        }\n\
    \n        val operator = operators.head\n\n        // Check if the length of the\
    \ operator list \n        // is greater than 1.\n        if (operators.length\
    \ < 2) {\n            return 0\n        }\n\n        // Check if the length of\
    \ operand list \n        // is greater than or equal to 2.\n        if (operand.length\
    \ < 2) {\n            return 0\n        }\n\n        // Check if the operand is\
    \ of non-negative integers.\n        // operand is non-negative\n        if (operand.forall(_.isLessThan(0))\
    \ || operand.forall(_.isEqualTo(0)) || operand.forall(_.isGreaterThan(0))) {\n\
    \            return 0\n        }\n\n        // Get the first element of operand\
    \ list. \n        val operand1 = operand(0)\n\n        // Get the second element\
    \ of operand list.\n        val operand2 = operand(1)\n\n        // Create the\
    \ sum variable. \n        val sum = 0\n\n        // Create a temporary list to\
    \ hold the sum of operand \n        // and operator list. \n        val temp =\
    \ new mutable.ListBuffer[Long]()\n\n        // Loop through all the elements in\
    \ the list. \n        for (i <- operand.indices.reverse) {\n            // Add\
    \ operand to sum variable. \n            sum += operand(i)\n\n            // Add\
    \ operator to temp list. \n            temp += operand(i) * operator(i)\n\n  \
    \          // Subtract the value of the first element of operator list.\n    \
    \        sum -= operator(0) * (operand(i) - 1)\n        }\n\n        // Return\
    \ the sum.\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjhvh20cw.scala:34:22 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m (operators.length < \e[31m2\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value length is not a member of Set[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjhvh20cw.scala:46:29 ------------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m        \e[33mif\e[0m (operand.forall(_.isLessThan(\e[31m0\e\
    [0m)) || operand.forall(_.isEqualTo(\e[31m0\e[0m)) || operand.forall(_.isGreaterThan(\e\
    [31m0\e[0m))) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value isLessThan is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjhvh20cw.scala:46:64\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mif\e[0m (operand.forall(_.isLessThan(\e\
    [31m0\e[0m)) || operand.forall(_.isEqualTo(\e[31m0\e[0m)) || operand.forall(_.isGreaterThan(\e\
    [31m0\e[0m))) {\n\e[31m\e[31m   |\e[0m                                       \
    \                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \             value isEqualTo is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpjhvh20cw.scala:46:98 ------------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m        \e[33mif\e[0m (operand.forall(_.isLessThan(\e[31m0\e[0m))\
    \ || operand.forall(_.isEqualTo(\e[31m0\e[0m)) || operand.forall(_.isGreaterThan(\e\
    [31m0\e[0m))) {\n\e[31m\e[31m   |\e[0m                                       \
    \                                                         ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value isGreaterThan is not a member\
    \ of Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhvh20cw.scala:61:23\
    \ ------------------------\e[0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e\
    [36mtemp\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] No"
  stdout: ''
  timestamp: 1660013163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Create a list to store the result.\n        var res =\
    \ List[Long]()\n        // Check the length of operator list.\n        if(op.size()\
    \ > operand.size())\n            throw new IllegalArgumentException(\"Operator\
    \ list is longer than operand list.\");\n        // Check the length of operator\
    \ list.\n        if(operand.size < op.size)\n            throw new IllegalArgumentException(\"\
    Operand list is shorter than operator list.\");\n        for(i <- 0 to operand.size-1){\n\
    \            // If the current operator is '+', then add the operand to result\
    \ list.\n            if(op(i) == \"+\")\n                res += operand(i)\n \
    \           // If the current operator is '-', subtract operand from result list.\n\
    \            else if(op(i) == \"-\")\n                res -= operand(i)\n    \
    \        // If the current operator is '*', multiply operand by operand by operand\
    \ by result list.\n            else if(op(i) == \"*\")\n                res(i)\
    \ *= operand(i)\n            // If the current operator is '//', divide operand\
    \ by operand by result list.\n            else if(op(i) == \"//\")\n         \
    \       res(i) /= operand(i)\n            // If the current operator is '**',\
    \ raise operand to the power of operand by result list.\n            else if(op(i)\
    \ == \"**\")\n                res(i) **= operand(i)\n            else\n      \
    \          throw new IllegalArgumentException(\"Invalid operator in operator list.\"\
    )\n        }\n        // Return the result list.\n        res(0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"\
    *\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n\
    \    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpse420110.scala:26:14 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(op.size() > operand.size())\n\e\
    [31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mmethod\e\
    [0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpse420110.scala:34:20\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                res += operand(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m    value +=\
    \ is not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpse420110.scala:37:20 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                res -= operand(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m    value -= is not a member of\
    \ List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpse420110.scala:40:23 ------------------------\e[0m\e[0m\n\e[31m40 |\e\
    [0m                res(i) *= operand(i)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member of Long\
    \ - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpse420110.scala:43:23\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                res(i) /=\
    \ operand(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value /= is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpse420110.scala:46:23 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                res(i) **= operand(i)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ **= is not a member of Long\n6 errors found\n"
  stdout: ''
  timestamp: 1660013165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val expression = new StringBuilder()\n        // First we\
    \ build the expression by looping through each operator in operator list\n   \
    \     for (i <- 0 until op.size) {\n            val tempString = new StringBuilder()\n\
    \            // Then we loop through each operand in the operand list \n     \
    \       for (j <- 0 until operand.size) {\n                // And finally we use\
    \ the operator and operand to build up the expression\n                tempString.append(op(i)).append(operand(j))\n\
    \            }\n            // And finally we append the expression to the final\
    \ expression\n            expression.append(tempString)\n        }\n        //\
    \ And finally we evaluate this expression and return the result\n        val result\
    \ = scala.math.eval(expression.toString())\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq8p7ij7_.scala:36:32 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = scala.math.eval(expression.toString())\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     value eval is not a member of math\n1 error found\n"
  stdout: ''
  timestamp: 1660013164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opList = op.map(_.toInt)\n        val opCount = opList.size\n\
    \        val opLen = opList.size\n\n        val operandList = operand.map(_.toInt)\n\
    \        val operandLen = operandList.size\n        val operandCount = operandList.size\n\
    \n        //Validate inputs\n        if (opCount < 1 || opCount > 3 || operandCount\
    \ < 2 || operandCount > 4 || opLen != operandLen - 1) {\n            throw new\
    \ IllegalArgumentException(\"Invalid inputs: \" + opCount + \" \" + operandCount\
    \ + \" \" + opLen + \" \" + operandLen + \" \" + op)\n        }\n\n        //Create\
    \ stack\n        val stack = new Stack[Int]\n        val opStack = new Stack[Int]\n\
    \n        //Iterate through inputs and compute value\n        var result = 0\n\
    \        for (i <- 0 until operandLen) {\n            //Process operator\n   \
    \         if (opCount == 1) {\n                //Addition\n                if\
    \ (op(i) == '+') {\n                    stack.push(operand(i) + stack.last)\n\
    \                    opStack.clear()\n                }\n                //Subtraction\n\
    \                else if (op(i) == '-') {\n                    stack.push(operand(i)\
    \ - stack.last)\n                    opStack.clear()\n                }\n    \
    \            //Multiplication\n                else if (op(i) == '*') {\n    \
    \                stack.push(operand(i) * stack.last)\n                    opStack.clear()\n\
    \                }\n                //Floor Division\n                else if\
    \ (op(i) == '/') {\n                    stack.push(operand(i) / stack.last)\n\
    \                    opStack.clear()\n                }\n                //Exponentiation\n\
    \                else if (op(i) == '**') {\n                    stack.push(operand(i)\
    \ ^ stack.last)\n                    opStack.clear()\n                }\n    \
    \        }\n            else {\n                opStack.push(op(i))\n        \
    \    }\n\n            //Process operands\n            for (j <- 0 until opStack.size)\
    \ {\n                result += opList(j) * operandList(j) * stack.last\n     \
    \           stack.push(-result)\n            }\n\n            //Process operators\n\
    \            if (opStack.isEmpty) {\n                val currentValue = stack.last\n\
    \                stack.clear()\n                opStack.clear()\n            \
    \    if (currentValue < 0) {\n                    throw new IllegalArgumentException(\"\
    Invalid inputs: \" + opCount + \" \" + operandCount + \" \" + opLen + \" \" +\
    \ operandLen + \" \" + op)\n                }\n                result = currentValue\n\
    \            }\n        }\n        stack.clear()\n        opStack.clear()\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5y29w13f.scala:66:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (op(i)\
    \ == \e[31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m                               \
    \      ^\e[0m\n\e[31m   |\e[0m                                     unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmp5y29w13f.scala:66:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (op(i)\
    \ == \e[31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m                               \
    \   ^\e[0m\n\e[31m   |\e[0msymbol literal '** is no longer supported,\n\e[31m\
    \   |\e[0muse a string literal \"**\" or an application Symbol(\"**\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{**} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmp5y29w13f.scala:46:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m46 |\e[0m       \
    \         \e[33mif\e[0m (op(i) == \e[31m'+'\e[0m) {\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5y29w13f.scala:47:31 --------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m                    stack.push(operand(i) + stack.last)\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    Long\n\e[31m   |\e[0m     \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp5y29w13f.scala:51:25 -----------------------------------------\e[0m\e\
    [0m\n\e[31m51 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (op(i) == \e\
    [31m'-'\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] T"
  stdout: ''
  timestamp: 1660013166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Add up all the operands, and then apply the operators\
    \ to them.\n        operand.foldLeft(0) { \n            ((sum, val) => sum + val)\
    \ \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsolhbq04.scala:25:19 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            ((\e[36msum\e[0m, \e[33mval\e[0m) => sum\
    \ + \e[33mval\e[0m) \n\e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m\
    \   |\e[0m                   expression expected but \e[31mval\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsolhbq04.scala:25:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            ((\e[36msum\e\
    [0m, \e[33mval\e[0m) => sum + \e[33mval\e[0m) \n\e[31m\e[31m   |\e[0m        \
    \                         ^^^\e[0m\n\e[31m   |\e[0m                          \
    \       expression expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var finalresult : Long = 0\n        for {\n            i\
    \ <- operand.indices\n            add = operand(i).asInstanceOf[Long] + operand(i\
    \ - 1).asInstanceOf[Long]\n            subtract = operand(i).asInstanceOf[Long]\
    \ - operand(i - 1).asInstanceOf[Long]\n            multiply = operand(i).asInstanceOf[Long]\
    \ * operand(i - 1).asInstanceOf[Long]\n            divide = operand(i).asInstanceOf[Long]\
    \ % operand(i - 1).asInstanceOf[Long]\n            exponent = operand(i).asInstanceOf[Long]\
    \ ** operand(i - 1).asInstanceOf[Long]\n        } yield {\n            finalresult\
    \ = add.addOp(subtract).addOp(multiply).addOp(divide).addOp(exponent)\n      \
    \  }.foldLeft(finalresult)((a, b) => a.addOp(b))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuvbtapq0.scala:30:53 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            exponent = operand(i).asInstanceOf[\e[35mLong\e\
    [0m] ** operand(i - \e[31m1\e[0m).asInstanceOf[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value ** is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpuvbtapq0.scala:32:30 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            finalresult = add.addOp(subtract).addOp(multiply).addOp(divide).addOp(exponent)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value addOp is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660013166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        require(op.length == operand.length - 1)\n        val result\
    \ = operand.foldLeft(0)(_ + _ * _)\n        require(result > 0)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpza482h0m.scala:24:41 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = operand.foldLeft(\e\
    [31m0\e[0m)(_ + _ * _)\n\e[31m\e[31m   |\e[0m                                \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1660013161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n      var opList = new mutable.LinkedList[String]()\n      opList\
    \ = op\n      var op2 = new mutable.LinkedList[String]()\n      op2 = op2\n  \
    \    val result = 0\n      for (i<- 0 to operand.length-1){\n        var op1 =\
    \ new mutable.LinkedList[String]()\n        op1 = opList\n        var op3 = new\
    \ mutable.LinkedList[String]()\n        op3 = op2\n        var op4 = new mutable.LinkedList[String]()\n\
    \        op4 = op3\n        for (j<- 0 to op.length-1){\n          op4 = op4\n\
    \          if (op(i) == op1(j)){\n            val j2 = j+1\n            if (op2(j2)!=\
    \ 0){\n              op4(j) = op(i) + op2(j2)\n              op3 = op3\n     \
    \       }else{\n              op4(j) = op(i) + op2(j)\n            }\n       \
    \     op2 = op2\n          }\n        }\n        if (op3(0) != 0){\n         \
    \ result = op(i) + op3(0) * operand(i+1)\n        }else{\n          result = op(i)\
    \ + operand(i+1)\n        }\n      }\n      result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4aidis6.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m      \e[33mvar\e[0m \e[36mopList\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4aidis6.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m      \e[33mvar\e[0m \e[36mop2\e\
    [0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4aidis6.scala:29:22\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e\
    [36mop1\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph4aidis6.scala:31:22 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mvar\e[0m \e[36mop3\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmph4aidis6.scala:33:22 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mop4\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4aidis6.scala:49:19\
    \ ----------------"
  stdout: ''
  timestamp: 1660013166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val result = operand.foldLeft(0L){ case (acc, val) => acc\
    \ + (op(0).asInstanceOf[String] == \"+\" ? val : -val) }\n        result / 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpyq28bx__.scala:23:54 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = operand.foldLeft(\e\
    [31m0L\e[0m){ \e[33mcase\e[0m (acc, \e[33mval\e[0m) => acc + (op(\e[31m0\e[0m).asInstanceOf[\e\
    [35mString\e[0m] == \e[31m\"+\"\e[0m ? \e[33mval\e[0m : -\e[33mval\e[0m) }\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^\e\
    [0m\n\e[31m   |\e[0m                                                      pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyq28bx__.scala:23:105\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = operand.foldLeft(\e[31m0L\e[0m){ \e[33mcase\e[0m (acc, \e\
    [33mval\e[0m) => acc + (op(\e[31m0\e[0m).asInstanceOf[\e[35mString\e[0m] == \e\
    [31m\"+\"\e[0m ? \e[33mval\e[0m : -\e[33mval\e[0m) }\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                           ^^^\e[0m\n\e[31m   |\e[0m                        \
    \               expression expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyq28bx__.scala:23:103 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = operand.foldLeft(\e\
    [31m0L\e[0m){ \e[33mcase\e[0m (acc, \e[33mval\e[0m) => acc + (op(\e[31m0\e[0m).asInstanceOf[\e\
    [35mString\e[0m] == \e[31m\"+\"\e[0m ? \e[33mval\e[0m : -\e[33mval\e[0m) }\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                               value ? is not a member of String\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpyq28bx__.scala:23:66 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = operand.foldLeft(\e\
    [31m0L\e[0m){ \e[33mcase\e[0m (acc, \e[33mval\e[0m) => acc + (op(\e[31m0\e[0m).asInstanceOf[\e\
    [35mString\e[0m] == \e[31m\"+\"\e[0m ? \e[33mval\e[0m : -\e"
  stdout: ''
  timestamp: 1660013166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Your code goes here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph0m99pjn.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// Your code goes here\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length != operand.length + 1) {\n            throw\
    \ new IllegalArgumentException(\"Not enough operands and operators given\")\n\
    \        }\n        // Create new operand list with one extra element filled with\
    \ 0\n        var newOperand = mutable.ListBuffer.empty[Long]\n        newOperand.++(operand)\n\
    \        var newOperator = mutable.ListBuffer.empty[String]\n        newOperator.++(op)\n\
    \        var result = 0L\n\n        // Use for loop to iterate over both lists\
    \ at a time\n        for {\n            i <- 0 until newOperator.size\n      \
    \      op <- newOperator(i)\n            x <- newOperand(i)\n        } { // Loop\
    \ body\n            switch op {\n                case \"+\" => result += x\n \
    \               case \"-\" => result -= x\n                case \"*\" => result\
    \ *= x\n                case \"/\" => result /= x\n                case \"**\"\
    \ => result **= x\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vz9illf.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mnewOperand\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vz9illf.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mnewOperator\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // TODO: write your code here\n        val oplist = op.asInstanceOf[List[String]]\n\
    \        val olist = operand.asInstanceOf[List[Long]]\n        var sum = 0L\n\
    \        var cnt = 0\n        oplist.foreach(x => {\n            if (x == '+')\
    \ {\n                sum += olist.apply(cnt)\n                cnt += 1\n     \
    \       } else if (x == '*') {\n                sum *= olist.apply(cnt)\n    \
    \            cnt += 1\n            } else if (x == '-') {\n                sum\
    \ -= olist.apply(cnt)\n                cnt += 1\n            } else if (x == '/')\
    \ {\n                sum /= olist.apply(cnt)\n                cnt += 1\n     \
    \       } else if (x == '//') {\n                sum // olist.apply(cnt)\n   \
    \             cnt += 1\n            } else if (x == '**') {\n                sum\
    \ **= olist.apply(cnt)\n                cnt += 1\n            }\n        })\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqv4_53jm.scala:41:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (x == \e\
    [31m'//\e[0m') {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0msymbol literal '// is no longer supported,\n\e[31m   |\e[0muse a\
    \ string literal \"//\" or an application Symbol(\"//\") instead,\n\e[31m   |\e\
    [0mor enclose in braces '{//} if you want a quoted expression.\n\e[31m   |\e[0mFor\
    \ now, you can also `import language.deprecated.symbolLiterals` to accept\n\e\
    [31m   |\e[0mthe idiom, but this possibility might no longer be available in the\
    \ future.\n\e[31m\e[31m-- Error: /tmp/tmpqv4_53jm.scala:41:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (x == \e\
    [31m'//\e[0m') {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               unclosed character literal\n\e[31m\e\
    [31m-- Error: /tmp/tmpqv4_53jm.scala:44:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (x == \e\
    [31m'**\e[0m') {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               unclosed character literal\n\e[31m\e\
    [31m-- Error: /tmp/tmpqv4_53jm.scala:29:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (x == \e[31m'+'\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpqv4_53jm.scala:32:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (x == \e[31m'*'\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpqv4_53jm.scala:35:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (x == \e\
    [31m'-'\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1660013168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val algebr = if (operand.size == 0) 0 else operand.head\n\
    \        val ops = List(op:_*)\n\n        var i = 1\n        var j = 0\n     \
    \   var sum = 0\n        val length = operand.last\n        while ( i < length\
    \ ) {\n            val num0 = operand(i)\n            val op0 = ops(j)\n     \
    \       val num1 = operand(i + 1)\n            val op1 = ops(j + 1)\n        \
    \    if (op0 == op1) {\n                sum += num0\n                i += 2\n\
    \                j += 2\n            } else {\n                val op0 = ops(j)\n\
    \                val op1 = ops(j + 1)\n                val num0 = operand(i +\
    \ 1)\n                val num1 = operand(i)\n                if (op0 == \"+\"\
    ) {\n                    sum += num0\n                    i += 2\n           \
    \     } else if (op0 == \"-\") {\n                    sum -= num0\n          \
    \          i += 2\n                } else {\n                    val op0 = ops(j)\n\
    \                    val op1 = ops(j + 1)\n                    if (op0 == \"*\"\
    ) {\n                        sum += num0 * num1\n                        i +=\
    \ 2\n                    } else if (op0 == \"//\") {\n                       \
    \ sum += num0 / (num1 +1)\n                        i += 2\n                  \
    \  } else if (op0 == \"**\") {\n                        sum += num0 * Math.pow(num1,\
    \ 1)\n                        i += 2\n                    } else {\n         \
    \               throw new IllegalArgumentException(\"Incorrect input!\")\n   \
    \                 }\n                }\n                j += 2\n            }\n\
    \        }\n        sum * algebr\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkyr3868v.scala:36:20 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                sum += num0\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkyr3868v.scala:45:24\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m                    sum +=\
    \ num0\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkyr3868v.scala:48:24 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                    sum -= num0\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value -= is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkyr3868v.scala:54:28 ------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m                        sum += num0 * num1\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkyr3868v.scala:57:28 ------------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m                        sum += num0 / (num1 +\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \   value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkyr3868v.scala:60:28 ------------------------\e[0m\e\
    [0m\n\e[31m60 |\e[0m                        sum += num0 * Math.pow(num1, \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value += is not a member of Int - did you mean Int.!=?\n6 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def doOp(op : String, operand : List[Long]) : List[Long]\
    \ = {\n            if (operand.size == 0) List.empty\n            else {\n   \
    \             val opNames = op.toList\n                var accum = operand.head\n\
    \                for (i <- 1 to operand.size) {\n                    if (opNames.contains(op))\
    \ accum = op(accum, operand(i))\n                    else accum = opNames(0)(accum,\
    \ operand(i))\n                }\n                accum\n            }\n     \
    \   }\n        doOp(op.head, doOp(op.tail, operand))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8_e5c0n2.scala:29:57\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e\
    [0m (opNames.contains(op)) accum = op(accum, operand(i))\n\e[31m\e[31m   |\e[0m\
    \                                                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (Long, Long)\n\e[31m   |\e[0m                                            \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp8_e5c0n2.scala:30:40\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                   \
    \ \e[33melse\e[0m accum = opNames(\e[31m0\e[0m)(accum, operand(i))\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e\
    [0m does not take more parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8_e5c0n2.scala:32:16 --------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m                accum\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (accum : Long)\n\e[31m   |\e[0m     \
    \           Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8_e5c0n2.scala:35:30 --------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        doOp(op.head, doOp(op.tail, operand))\n\e[31m\e[31m   |\e[0m \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \      Found:    List[String @uncheckedVariance]\n\e[31m   |\e[0m            \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = 0L\n        val len = operand.size\n      \
    \  for(i <- 0 until len){\n            val val = operand(i)\n            val op\
    \ = op(i)\n            if (op == \"-\"){\n                result = result - val\n\
    \            }else if(op == \"+\"){\n                result = result + val\n \
    \           }else if(op == \"*\"){\n                result = result * val\n  \
    \          }else if(op == \"//\"){\n                result = result / val\n  \
    \          }else if(op == \"**\"){\n                result = result ** val\n \
    \           }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_8va4i9n.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[33mval\e[0m = operand(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m               \
    \ pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_8va4i9n.scala:29:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                result\
    \ = result - \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m                           \
    \       ^^^\e[0m\n\e[31m   |\e[0m                                  expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp_8va4i9n.scala:31:34 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m                result = result + \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                  ^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 expression expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmp_8va4i9n.scala:33:34 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                result = result * \e[33mval\e[0m\n\e\
    [31m\e[31m   |\e[0m                                  ^^^\e[0m\n\e[31m   |\e[0m\
    \                                  expression expected but \e[31mval\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_8va4i9n.scala:35:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                result\
    \ = result / \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m                           \
    \       ^^^\e[0m\n\e[31m   |\e[0m                                  expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp_8va4i9n.scala:37:35 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m         "
  stdout: ''
  timestamp: 1660013167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val numOperand = operand.size\n        val numOper = op.size\n\
    \        val operands = operand.toArray\n        val operators = op.toArray\n\
    \        var operandNum = 0\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        var resultNum = 0\n        var i = -1\n        var j = 0\n        while\
    \ (i < numOperand && j < numOper) {\n            operandNum = operandNum + 1\n\
    \            i = i + 1\n            if (operandNum > operands.size) {\n      \
    \          result += new Long(0)\n                resultNum += 1\n           \
    \ }\n            else if (j == numOper) {\n                result += operands(operandNum)\n\
    \                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j)) {\n                result += (operands(operandNum) * operands(operandNum))\n\
    \                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j + 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ + 1))\n                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j - 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ - 1))\n                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j + 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ + 1))\n                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j - 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ - 1))\n                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j)) {\n                result += (operands(operandNum) * operands(operandNum))\n\
    \                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j + 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ + 1))\n                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j - 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ - 1))\n                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j + 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ + 1))\n                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j - 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ - 1))\n                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j)) {\n                result += (operands(operandNum) * operands(operandNum))\n\
    \                resultNum += 1\n            }\n            else if (operators(i)\
    \ == operators(j + 1)) {\n                result += (operands(operandNum) * operands(operandNum\
    \ + 1))\n\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5g5xb4q4.scala:98:0 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5g5xb4q4.scala:28:21\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5g5xb4q4.scala:32:8\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mwhile\e[0m (i\
    \ < numOperand && j < numOper) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m33\
    \ |\e[0m            operandNum = operandNum + \e[31m1\e[0m\n\e[31m34 |\e[0m  \
    \          i = i + \e[31m1\e[0m\n\e[31m35 |\e[0m            \e[33mif\e[0m (operandNum\
    \ > operands.size) {\n\e[31m36 |\e[0m                result += \e[33mnew\e[0m\
    \ \e[35mLong\e[0m(\e[31m0\e[0m)\n\e[31m37 |\e[0m                resultNum += \e\
    [31m1\e[0m\n\e[31m38 |\e[0m            }\n\e[31m39 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (j == numOper) {\n\e[31m40 |\e[0m                result += operands(operandNum)\n\
    \e[31m41 |\e[0m                resultNum += \e[31m1\e[0m\n\e[31m42 |\e[0m    \
    \        }\n\e[31m43 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (operators(i)\
    \ == operators(j)) {\n\e[31m44 |\e[0m                result += (operands(operandNum)\
    \ * operands(operandNum))\n\e[31m45 |\e[0m                resultNum += \e[31m1\e\
    [0m\n\e[31m46 |\e[0m            }\n\e[31m47 |\e[0m            \e[33melse\e[0m\
    \ \e[33mif\e[0m (operators(i) == operators(j + \e[31m1\e[0m)) {\n\e[31m48 |\e\
    [0m                result += (operands(operandNum) * operands(operandNum + \e\
    [31m1\e[0m))\n\e[31m49 |\e[0m                resultNum += \e[31m1\e[0m\n\e[31m50\
    \ |\e[0m            }\n\e[31m51 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m\
    \ (operators(i) == operators(j - \e[31m1\e[0m)) {\n\e[31m52 |\e[0m           \
    \     result += (operands(ope"
  stdout: ''
  timestamp: 1660013169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Your code goes here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph0m99pjn.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// Your code goes here\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opTable = op.zip(operand).map(t => t._1 -> t._2)\n\n\
    \        val opList: List[Long] = List()\n        val opMap : Map[String, List[Long]]\
    \ = opTable.toMap\n\n        opList.foreach { t => \n            opMap match {\n\
    \                case Some(map) => map.put(t._1, t._2)\n                case None\
    \ => opList += t._1 * t._2\n            }\n        }\n        opList.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vjdcw6_.scala:26:46\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopMap\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]] = opTable.toMap\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Map[String, Long]\n\e[31m  \
    \ |\e[0m                    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, \e[1m\e[32mList\e[0m\e\
    [1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_vjdcw6_.scala:30:38 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                \e[33mcase\e[0m Some(map) => map.put(t._1,\
    \ t._2)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value put is not a member of\
    \ Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_vjdcw6_.scala:30:44 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mcase\e[0m Some(map) => map.put(t._1,\
    \ t._2)\n\e[31m\e[31m   |\e[0m                                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_vjdcw6_.scala:30:50\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mcase\e\
    [0m Some(map) => map.put(t._1, t._2)\n\e[31m\e[31m   |\e[0m                  \
    \                              ^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                    value _2 is not a member of Long\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp_vjdcw6_.scala:31:21 --------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m                \e[33mcase\e[0m None => opList += t._1 * t._2\n\
    \e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Found:    None.type\n\e[31m   |\e[0m                    Required:\
    \ collection.mutable.Map[String, List[Long]]\n\e[31m   |\e[0m                \
    \    pattern type is incompatible with exp"
  stdout: ''
  timestamp: 1660013171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opList = op.filter(_ != \"-\").map(op => op(Long.box(operand.head)))\n\
    \        val opListSize = opList.length\n        val operand1 = operand.filter(_\
    \ >= 0).map(_ => Long.box(operand.head))\n        val operand2 = operand.drop(1)\n\
    \        var res = 0\n        var i = 0\n        while (i < opListSize) {\n  \
    \          val op = opList(i)\n            val operand1Size = operand1.length\n\
    \            var j = 0\n            while (j < operand1Size) {\n             \
    \   val operand1 = operand1(j)\n                val operand2Size = operand2.length\n\
    \                var k = 0\n                while (k < operand2Size) {\n     \
    \               val operand2 = operand2(k)\n                    val op = opList(i)\n\
    \                    if (op == \"-\") {\n                        res += operand1\
    \ - operand2\n                    } else if (op == \"+\") {\n                \
    \        res += operand1 + operand2\n                    } else if (op == \"*\"\
    ) {\n                        res += operand1 * operand2\n                    }\
    \ else if (op == \"//\") {\n                        res /= operand2\n        \
    \            } else {\n                        res += (operand1 * operand2).toLong\
    \ ** op\n                    }\n                    k += 1\n                }\n\
    \                j += 1\n            }\n            i += 1\n        }\n      \
    \  if (res == 0) res = Double.PositiveInfinity\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu2eyrlgx.scala:23:62\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopList\e\
    [0m = op.filter(_ != \e[31m\"-\"\e[0m).map(\e[36mop\e[0m => op(Long.box(operand.head)))\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu2eyrlgx.scala:34:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                \e[33mval\e\
    [0m \e[36moperand1\e[0m = operand1(j)\n\e[31m\e[31m   |\e[0m                 \
    \              ^\e[0m\n\e[31m   |\e[0m                               Recursive\
    \ \e[33mvalue\e[0m \e[35moperand1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpu2eyrlgx.scala:38:35 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    \e[33mval\e[0m \e[36moperand2\e[0m\
    \ = operand2(k)\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Recursive \e[33mvalue\e[0m \e\
    [35moperand2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpu2eyrlgx.scala:40:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m40 |\e[0m       \
    \             \e[33mif\e[0m (op == \e[31m\"-\"\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpu2eyrlgx.scala:42:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m42 |\e[0m       \
    \             } \e[33melse\e[0m \e[33mif\e[0m (op == \e[31m\"+\"\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with"
  stdout: ''
  timestamp: 1660013171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val result = operand.foldLeft(0) { (result, value) => value\
    \ match {\n            case value if op.length == 1 => result + op(0)(value)\n\
    \            case value if op.length == 2 => result + op(0)(value) * op(1)(value)\n\
    \            case _ => result \n        }}\n        return result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\"\
    , \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) ==\
    \ (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqjz7jv_.scala:24:59\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m value\
    \ \e[33mif\e[0m op.length == \e[31m1\e[0m => result + op(\e[31m0\e[0m)(value)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \  Found:    (value : Long)\n\e[31m   |\e[0m                                 \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgqjz7jv_.scala:25:59 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mcase\e[0m value \e[33mif\e[0m op.length == \e[31m2\e\
    [0m => result + op(\e[31m0\e[0m)(value) * op(\e[31m1\e[0m)(value)\n\e[31m\e[31m\
    \   |\e[0m                                                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (value\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqjz7jv_.scala:25:74\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e[0m value\
    \ \e[33mif\e[0m op.length == \e[31m2\e[0m => result + op(\e[31m0\e[0m)(value)\
    \ * op(\e[31m1\e[0m)(value)\n\e[31m\e[31m   |\e[0m                           \
    \                                               ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                              Found:    (value : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opList = op\n        val operandList = operand\n   \
    \     val numOfOperands = operandList.size -1\n        val numOfOperators = opList.size\
    \ -1\n        val operators = Array(\"\") ++ (opList map (i => i.toString ) )\n\
    \        val operands = Array(0) ++ (operandList map ( i => i * i ))\n       \
    \ val expression = ( 0 until numOfOperators ) map { i =>\n            var opStr\
    \ = \"\"\n            var operandStr = \"\"\n            var index = i\n     \
    \       while (index <= numOfOperands) {\n                opStr += operators ((index\
    \ -1))\n                operandStr += operands ((index -1 ))\n               \
    \ index += 1\n            }\n            opStr\n        } mkString \"(\"\n   \
    \     val resultStr = expression + \" + \" + operands ((numOfOperands - 1) )\n\
    \        println (resultStr)\n        return ( 0 until numOfOperands ) map ( i\
    \ => operands ((i)) ) reduceLeft ( _ +  _ )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwtnygoty.scala:42:84 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mreturn\e[0m ( \e[31m0\e[0m until numOfOperands\
    \ ) map ( \e[36mi\e[0m => operands ((i)) ) reduceLeft ( _ +  _ )\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def doAlgebraUtil(op : List[String], operand : List[Long],\
    \ result : Long) : Long = {\n            val length = operand.size\n         \
    \   // TODO: error checking\n            val index = (length.toDouble - 1.0)\n\
    \            if (index < 0) {\n                doAlgebraUtil(op, operand.tail,\
    \ result)\n            }\n            else {\n                val lastIndex =\
    \ index\n                val first = operand(lastIndex).toDouble\n           \
    \     val second = operand(lastIndex - 1).toDouble\n                val sum =\
    \ first + op(0) + second + op(1).toDouble\n                doAlgebraUtil(op.tail,\
    \ operand.tail - 2, sum)\n            }\n        }\n\n        // TODO: error checking\n\
    \        val length = operand.size\n        val index = (length.toDouble - 1.0)\n\
    \        if (index < 0) {\n            doAlgebraUtil(op, operand.tail, 0)\n  \
    \      }\n        else {\n            val lastIndex = index\n            val first\
    \ = operand(lastIndex).toDouble\n            val second = operand(lastIndex -\
    \ 1).toDouble\n            val sum = first + op(0) + second + op(1).toDouble\n\
    \            doAlgebraUtil(op.tail, operand.tail - 2, sum)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5_u5jxvq.scala:32:36\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                \e[33mval\e[0m\
    \ \e[36mfirst\e[0m = operand(lastIndex).toDouble\n\e[31m\e[31m   |\e[0m      \
    \                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                     Found:    (lastIndex : Double)\n\e[31m   |\e[0m        \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5_u5jxvq.scala:33:37 --------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36msecond\e[0m = operand(lastIndex\
    \ - \e[31m1\e[0m).toDouble\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \     Found:    Double\n\e[31m   |\e[0m                                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5_u5jxvq.scala:35:52\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                doAlgebraUtil(op.tail,\
    \ operand.tail - \e[31m2\e[0m, sum)\n\e[31m\e[31m   |\e[0m                   \
    \                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of List[Long @uncheckedVariance], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5_u5jxvq.scala:35:57\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                doAlgebraUtil(op.tail,\
    \ operand.tail - \e[31m2\e[0m, sum)\n\e[31m\e[31m   |\e[0m                   \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                                   Found:    (sum : String)\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660013176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opLen = op.size\n        val operandLen = operand.size\n\
    \        val operatorSet = Set(\"*\", \"/\", \"+\", \"-\")\n        var result\
    \ : Long = 0\n        var temp = 0\n        for ( i <- 0 until operandLen ) {\n\
    \            val opIndex = op.indexOf(\"+\")\n            if ( opIndex >= 0 )\
    \ {\n                val opVal = operatorSet(op(i))\n                val operandVal\
    \ = operand(i)\n                if ( opIndex < operandLen - 1 ) {\n          \
    \          temp = ( opVal * operand(1 + opIndex) ) \n                    result\
    \ += temp\n                }\n                if ( opIndex == operandLen - 1 )\
    \ {\n                    if ( operatorSet(op(i)) != \"*\" ) {\n              \
    \          result += operandVal\n                    } else {\n              \
    \          result += operand(i) * operand(i)\n                    }\n        \
    \        }\n            } else {\n                temp = ( operatorSet(op(i))(operand(i))\
    \ )\n                result += temp\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv4_oif2y.scala:34:35 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    temp = ( opVal * operand(\e[31m1\e\
    [0m + opIndex) ) \n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue * is not a member of Boolean, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpv4_oif2y.scala:38:25 -----------------------------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m                    \e[33mif\e[0m ( operatorSet(op(i)) !=\
    \ \e[31m\"*\"\e[0m ) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types Boolean and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpv4_oif2y.scala:45:36\
    \ -----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m                temp\
    \ = ( operatorSet(op(i))(operand(i)) )\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \e[33mmethod\e\
    [0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mSetOps\e[0m does not take more\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val ops = op.toSet\n        val opSet = op.toList\n    \
    \    val operands = operand.toSet\n        val operandSet = operand.toList\n \
    \       var eval = 0L\n        for ( i <- 0 until operands.size ) {\n        \
    \    val o = operands(i)\n            if ( operandSet.isEmpty ) {\n          \
    \      eval = o\n            } else if ( opSet.isEmpty ) {\n                eval\
    \ = eval + o\n            } else {\n                val oLeft = operandSet(0)\n\
    \                val oRight = operandSet(1)\n                if ( ops.contains(oLeft)\
    \ && ops.contains(oRight) ) {\n                    val op = ops.find( _ == oLeft\
    \ || _ == oRight ).get\n                    eval =  eval + o * ( op(eval))\n \
    \               } else if ( ops.contains(oLeft) ) {\n                    eval\
    \ =  eval + o * ( op(eval))\n                } else if ( ops.contains(oRight)\
    \ ) {\n                    eval =  op( eval) + o\n                } else if (\
    \ ops.contains(oLeft) && ops.contains(oRight) ) {\n                    val op\
    \ = ops.find( _ == oLeft || _ == oRight ).get\n                    eval =  eval\
    \ + o * ( op(eval))\n                } else {\n                    eval = o\n\
    \                }\n            }\n        }\n        return eval\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\"\
    , \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) ==\
    \ (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8husbwll.scala:31:23\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                eval = o\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (o : Boolean)\n\e[31m   |\e[0m                       Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8husbwll.scala:33:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                eval\
    \ = eval + o\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m\
    \ in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String):\
    \ String\n\e[31m   |\e[0mmatch arguments ((o : Boolean))\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8husbwll.scala:37:34 --------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m                \e[33mif\e[0m ( ops.contains(oLeft) && ops.contains(oRight)\
    \ ) {\n\e[31m\e[31m   |\e[0m                                  ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (oLeft : Long)\n\e[31m \
    \  |\e[0m                                  Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8husbwll.scala:37:57 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mif\e[0m ( ops.contains(oLeft) &&\
    \ ops.contains(oRight) ) {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                            Found:    (oRight : Long)\n\e[31m   |\e[0m      \
    \                                         Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp8husbwl"
  stdout: ''
  timestamp: 1660013179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opArray = op.filterNot(_ == '-').toArray\n        val\
    \ operandArray = operand.filterNot(_ == 0).toArray\n        var sum = 0L\n   \
    \     var exp = 1L\n        var prevExp = 1L\n        val numArray = opArray.map(x\
    \ => prevExp * x).takeWhile(x => x < operandArray.length)\n        val denomArray\
    \ = opArray.takeWhile(_ < operandArray.length).map(x => prevExp * x)\n       \
    \ operandArray.zipWithIndex.foreach { case (num, index) => {\n            sum\
    \ = sum + num * exp\n            exp = denomArray(index) * prevExp\n         \
    \   prevExp = exp\n        }}\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfscg_l6h.scala:23:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopArray\e[0m = op.filterNot(_\
    \ == \e[31m'-'\e[0m).toArray\n\e[31m\e[31m   |\e[0m                          \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfscg_l6h.scala:28:48\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e\
    [0m \e[36mnumArray\e[0m = opArray.map(\e[36mx\e[0m => prevExp * x).takeWhile(\e\
    [36mx\e[0m => x < operandArray.length)\n\e[31m\e[31m   |\e[0m                \
    \                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((x : String))\n\e[31m\e[31m--\
    \ Error: /tmp/tmpfscg_l6h.scala:28:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumArray\e[0m = opArray.map(\e\
    [36mx\e[0m => prevExp * x).takeWhile(\e[36mx\e[0m => x < operandArray.length)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfscg_l6h.scala:29:60 --------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \        \e[33mval\e[0m \e[36mdenomArray\e[0m = opArray.takeWhile(_ < operandArray.length).map(\e\
    [36mx\e[0m => prevExp * x)\n\e[31m\e[31m   |\e[0m                            \
    \                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Found:    Int\n\e[31m   |\e[0m               \
    \                                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer expla"
  stdout: ''
  timestamp: 1660013178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def add(ops : List[String], operand : List[Long]) : Long\
    \ = {\n            val opArray = ops.toArray\n            val operandArray = operand.toArray\n\
    \            var result = 0L\n            for (opIndex = opArray.size ; opIndex\
    \ > 0 ; opIndex--) {\n                val op = opArray(opIndex)\n            \
    \    val operand = operandArray(opIndex - 1)\n                val value = operand\
    \ match {\n                    case _ if op.equals(\"+\") => operand\n       \
    \             case _ if op.equals(\"-\") => operand.toLong * -1\n            \
    \        case _ if op.equals(\"*\") => operand.toLong * operand\n            \
    \        case _ if op.equals(\"/\") => operand.toLong / operand\n            \
    \        case _ if op.equals(\"//\") => operand.toLong / (operand.toLong * operand)\n\
    \                    case _ if op.equals(\"**\") => operand.toLong * operand\n\
    \                    case _ if op.equals(\"%\") => operand.toLong % operand\n\
    \                    case _ => 0L\n                }\n                result =\
    \ result + value\n            }\n            return result\n        }\n      \
    \  def multiply(ops : List[String], operand : List[Long]) : Long = {\n       \
    \     val opArray = ops.toArray\n            val operandArray = operand.toArray\n\
    \            var result = 0L\n            for (opIndex = opArray.size ; opIndex\
    \ > 0 ; opIndex--) {\n                val op = opArray(opIndex)\n            \
    \    val operand = operandArray(opIndex - 1)\n                result = result\
    \ * operand match {\n                    case _ if op.equals(\"*\") => operand\n\
    \                    case _ if op.equals(\"/\") => operand / operand\n       \
    \             case _ if op.equals(\"//\") => operand / (operand * operand)\n \
    \                   case _ if op.equals(\"**\") => operand.toLong * operand\n\
    \                    case _ if op.equals(\"%\") => operand.toLong % operand\n\
    \                    case _ => 0L\n                }\n            }\n        \
    \    return result\n        }\n        def divide(ops : List[String], operand\
    \ : List[Long]) : Long = {\n            val opArray = ops.toArray\n          \
    \  val operandArray = operand.toArray\n            var result = 0L\n         \
    \   for (opIndex = opArray.size ; opIndex > 0 ; opIndex--) {\n               \
    \ val op = opArray(opIndex)\n                val operand = operandArray(opIndex\
    \ - 1)\n                result = result * operand match {\n                  \
    \  case _ if op.equals(\"/\") => operand\n                    case _ if op.equals(\"\
    //\") => operand / operand\n                    case _ if op.equals(\"**\") =>\
    \ operand.toLong * operand\n                    case _ if op.equals(\"%\") =>\
    \ operand.toLong % operand\n                    case _ => 0L\n               \
    \ }\n            }\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwsjwnxjd.scala:27:25 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mfor\e[0m (opIndex = opArray.size ;\
    \ opIndex > \e[31m0\e[0m ; opIndex--) {\n\e[31m\e[31m   |\e[0m               \
    \          ^\e[0m\n\e[31m   |\e[0m                         ')' expected, but '='\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwsjwnxjd.scala:27:54 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mfor\e[0m (opIndex = opArray.size ;\
    \ opIndex > \e[31m0\e[0m ; opIndex--) {\n\e[31m\e[31m   |\e[0m               \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                              '<-' expected, but ';' found\n\e[31m\e[31m-- [E032]\
    \ Syntax Error: /tmp/tmpwsjwnxjd.scala:27:65 ---------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            \e[33mfor\e[0m (opIndex = opArray.size ; opIndex\
    \ > \e[31m0\e[0m ; opIndex--) {\n\e[31m\e[31m   |\e[0m                       \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                             pattern expected\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpwsjwnxjd.scala:48:25 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mfor\e[0m (opIndex = opArray.size ;\
    \ opIndex > \e[31m0\e[0m ; opIndex--) {\n\e[31m\e[31m   |\e[0m               \
    \          ^\e[0m\n\e[31m   |\e[0m                         ')' expected, but '='\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwsjwnxjd.scala:48:54 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mfor\e[0m (opIndex = opArray.size ;\
    \ opIndex > \e[31m0\e[0m ; opIndex--) {\n\e[31m\e[31m   |\e[0m               \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                              '<-' expected, but ';' found\n\e[31m\e[31m-- [E032]\
    \ Syntax Error: /tmp/tmpwsjwnxjd.scala:48:65 ---------------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m            \e[33mfor\e[0m (opIndex = opArray.size ; opIndex\
    \ > \e[31m0\e[0m ; opIndex--) {\n\e[31m\e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1660013180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var ops = op.size\n        var operands = operand.size\n\
    \        if (operands > ops + 1) {\n            operands = ops + 1\n        }\n\
    \        val opList = op.reverse\n        val operandList = operand.reverse\n\
    \        val opIndex = opList.indexOf(\"*\")\n        val operandIndex = operandList.indexOf(0)\n\
    \        val opLeft = opIndex - operandIndex\n        val operandRight = operandIndex\
    \ + 1\n        val opRight = opIndex + 1\n        val res = opList(0)\n      \
    \  val result = 0\n        while (operandIndex < operandList.length - 1) {\n \
    \           res = res + opList(0) * operandList(operandIndex + 1)\n          \
    \  operandIndex += 1\n        }\n        while (operandIndex < operandList.length\
    \ - 1) {\n            result = result + res\n            res = opList(opLeft)\
    \ * operandList(operandIndex + 1)\n            operandIndex += 1\n        }\n\
    \        result = result + res\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplxe28zy1.scala:38:47\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m            res = res + opList(\e\
    [31m0\e[0m) * operandList(operandIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    Long\n\e[31m   |\e[0m\
    \                                    Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplxe28zy1.scala:39:25 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            operandIndex += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value += is\
    \ not a member of Int - did you mean operandIndex.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmplxe28zy1.scala:42:21 --------------------\e[0m\e[0m\n\
    \e[31m42 |\e[0m            result = result + res\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    String\n\e[31m   |\e[0m                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplxe28zy1.scala:43:46 --------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            res = opList(opLeft) * operandList(operandIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    Long\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmplxe28zy1.scala:44:25 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            operandIndex += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value += is\
    \ not a member of Int - did you mean operandIndex.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmplxe28zy1.scala:46:17 --------------------\e[0m\e[0m\n\
    \e"
  stdout: ''
  timestamp: 1660013178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opMap = scala.collection.mutable.Map[String, Long]()\n\
    \        var result = 0L\n        operand foreach { operand =>\n            opMap(op(0))\
    \ match {\n                case None => {\n                    val currentOperand\
    \ = operand\n                    val currentOp = op(0)\n                    opMap\
    \ += ((currentOp, currentOperand))\n                    result += currentOperand\n\
    \                }\n                case Some(value) => result += value\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp23h_ad1h.scala:27:21\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e\
    [0m None => {\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e\
    [0m                     Found:    None.type\n\e[31m   |\e[0m                 \
    \    Required: Long\n\e[31m   |\e[0m                     pattern type is incompatible\
    \ with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp23h_ad1h.scala:33:43\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mcase\e\
    [0m Some(value) => result += value\n\e[31m\e[31m   |\e[0m                    \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu11uvkx3.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// Write your code here.\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val n = new mutable.HashMap[String, Long]\n        val e\
    \ = new mutable.HashMap[String, Long]\n        val eop = new mutable.HashMap[String,\
    \ Long]\n        val eop2 = new mutable.HashMap[String, Long]\n        val temp\
    \ = new mutable.HashMap[String, Long]\n        var total = 0\n        val operator\
    \ = op.asInstanceOf[List[String]]\n        val operand = operand.asInstanceOf[List[Long]]\n\
    \        val length = operand.size\n        for( i <- 0 until length){\n     \
    \       total += (operand(i) match {\n                case 0 => 0\n          \
    \      case 1 => 0\n                case _ => operand(i)\n            })\n   \
    \     }\n        for( i <- 0 until length){\n            total += (operand match\
    \ {\n                case 0 => 0\n                case 1 => 0\n              \
    \  case _ => operand(i)\n            })\n        }\n        for( i <- 0 until\
    \ length){\n            total += (operand match {\n                case 0 => 0\n\
    \                case 1 => 0\n                case _ => operand(i)\n         \
    \   })\n        }\n        for( i <- 0 until length){\n            total += (operand\
    \ match {\n                case 0 => 0\n                case 1 => 0\n        \
    \        case _ => operand(i)\n            })\n        }\n        for( i <- 0\
    \ until length){\n            total += (operand match {\n                case\
    \ 0 => 0\n                case 1 => 0\n                case _ => operand(i)\n\
    \            })\n        }\n        for( i <- 0 until length){\n            total\
    \ += (operand match {\n                case 0 => 0\n                case 1 =>\
    \ 0\n                case _ => operand(i)\n            })\n        }\n       \
    \ for( i <- 0 until length){\n            total += (operand match {\n        \
    \        case 0 => 0\n                case 1 => 0\n                case _ => operand(i)\n\
    \            })\n        }\n        for( i <- 0 until length){\n            total\
    \ += (operand match {\n                case 0 => 0\n                case 1 =>\
    \ 0\n                case _ => operand(i)\n            })\n        }\n       \
    \ for( i <- 0 until length){\n            total += (operand match {\n        \
    \        case 0 => 0\n                case 1 => 0\n                case _ => operand(i)\n\
    \            })\n        }\n        for( i <- 0 until length){\n            total\
    \ += (operand match {\n                case 0 => 0\n                case 1 =>\
    \ 0\n                case _ => operand(i)\n            })\n        }\n       \
    \ for( i <- 0 until length){\n            total += (operand match {\n        \
    \        case 0 => 0\n                case 1 => 0\n                case _ => operand(i)\n\
    \            })\n        }\n        for( \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2n9v6ht5.scala:109:12 --------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m        \e[33mfor\e[0m( \n\e[31m\e[31m    |\e[0m   \
    \         ^\e[0m\n\e[31m    |\e[0m            pattern expected\n\e[31m    |\e\
    [0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n9v6ht5.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n9v6ht5.scala:24:20\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36me\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2n9v6ht5.scala:25:22 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36meop\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e\
    [0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2n9v6ht5.scala:26:23 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36meop2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n9v6ht5.scala:27:23\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mt"
  stdout: ''
  timestamp: 1660013176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val list = operand ::: List(1L)\n        if (list.length\
    \ <= 0) 0\n        else {\n            var sum = 0L\n            for (i <- 0 until\
    \ list.length - 1) {\n                val cur = list(i)\n                val next\
    \ = list(i + 1)\n                val oper = op(i)\n                val num = (oper\
    \ match {\n                    case \"+\" => next + cur\n                    case\
    \ \"-\" => next - cur\n                    case \"*\" => next * cur\n        \
    \            case \"//\" => next / cur\n                    case \"**\" => math.pow(next,\
    \ cur)\n                }) \n                if (num <= 0) \n                \
    \    sum \n                else {\n                    sum += num\n          \
    \      }\n            }\n            return sum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmc2b9e3.scala:38:24 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                \e[33mif\e[0m (num <= \e[31m0\e[0m) \n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0mvalue <=\
    \ is not a member of AnyVal, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmc2b9e3.scala:41:24 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    sum += num\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n        val list = operand.takeWhile(_\
    \ <= 0).reverse\n        val operator = op.takeWhile(_ == '+' || _ == '-' || _\
    \ == '*' || _ == '/' || _ == '**').reverse\n        val newList = list\n     \
    \   for (i <- 1 to operator.length) newList = list.reduceLeft(_ + operator(i))\n\
    \        newList\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp243ok9wm.scala:25:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moperator\e[0m = op.takeWhile(_\
    \ == \e[31m'+'\e[0m || _ == \e[31m'-'\e[0m || _ == \e[31m'*'\e[0m || _ == \e[31m'/'\e\
    [0m || _ == \e[31m'**\e[0m').reverse\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0msymbol literal '** is no longer supported,\n\e[31m   |\e[0muse\
    \ a string literal \"**\" or an application Symbol(\"**\") instead,\n\e[31m  \
    \ |\e[0mor enclose in braces '{**} if you want a quoted expression.\n\e[31m  \
    \ |\e[0mFor now, you can also `import language.deprecated.symbolLiterals` to accept\n\
    \e[31m   |\e[0mthe idiom, but this possibility might no longer be available in\
    \ the future.\n\e[31m\e[31m-- Error: /tmp/tmp243ok9wm.scala:25:92 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moperator\e[0m = op.takeWhile(_\
    \ == \e[31m'+'\e[0m || _ == \e[31m'-'\e[0m || _ == \e[31m'*'\e[0m || _ == \e[31m'/'\e\
    [0m || _ == \e[31m'**\e[0m').reverse\n\e[31m\e[31m   |\e[0m                  \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp243ok9wm.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // write your code here\n        val opArray = op.toArray\n\
    \        val operandArray = operand.toArray\n        val expression = opArray(0)\
    \ + opArray(1) * operandArray(0) -  operandArray(1) // + opArray(0) * operandArray(0)\
    \ \n        return expression\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsymlyptl.scala:26:63\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mexpression\e\
    [0m = opArray(\e[31m0\e[0m) + opArray(\e[31m1\e[0m) * operandArray(\e[31m0\e[0m)\
    \ -  operandArray(\e[31m1\e[0m) \e[34m// + opArray(0) * operandArray(0) \e[0m\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Long\n\e[31m   |\e[0m                                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val ops = op.map { s => s.toLowerCase }\n        val nums\
    \ = operand.zipWithIndex.map { case (n, i) => i + 1 }\n        // For each operator,\
    \ find the number of operands\n        var numOfOperands : List[Int] = Nil\n \
    \       for (op <- ops) {\n            val pos = ops.indexOf(op)\n           \
    \ numOfOperands = numOfOperands :+ nums(pos)\n        }\n        var result =\
    \ 0L\n        // For each operand, compute result\n        for (i <- 0 until numOfOperands(0))\
    \ {\n            val operand = numOfOperands(i).asInstanceOf[Int]\n          \
    \  val op = ops.indexOf(\"*\".toLowerCase + ops(i))\n            result += operand.toLong\
    \ * (ops.indexOf(\"//\".toLowerCase + ops(i)) * operand)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg8s7j6p3.scala:41)\n\tat Problem.main(tmpg8s7j6p3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val result = operand.foldLeft(0)((acc, x) => acc + op)\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvsabv9lx.scala:23:57 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = operand.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + op)\n\e[31m\e[31m   |\e[0m\
    \                                                     ^^^^^\e[0m\n\e[31m   |\e\
    [0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\
    \e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m \
    \  |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x:\
    \ Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String):\
    \ String\n\e[31m   |\e[0m match arguments ((op : List[String]))\n1 error found\n"
  stdout: ''
  timestamp: 1660013177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.map(_.toLowerCase)\n        var operatorIndex\
    \ = 0\n        val operands = operand.map(x => if (x < 0) -x else x).toList\n\
    \        // if there are operands, and there is a operator at index 0\n      \
    \  if (operands.size > 0 && !operator.isEmpty) {\n            val operIndex =\
    \ operator.indexOf(\"*\")\n            if (operIndex == -1) {\n              \
    \  if (operator.equals(\"+\") && operands.size > 0) {\n                    operands.head.toLong\
    \ + operands.last\n                }\n                else if (operator.equals(\"\
    -\") && operands.size > 0) {\n                    operands.head.toLong - operands.last\n\
    \                }\n                else if (operator.equals(\"/\") && operands.size\
    \ > 0) {\n                    operands.head.toLong / operands.last\n         \
    \       }\n                else if (operator.equals(\"//\") && operands.size >\
    \ 0) {\n                    operands.head.toLong \xF7 operands.last\n        \
    \        }\n                else if (operator.equals(\"**\") && operands.size\
    \ > 0) {\n                    operands.head.toLong \xD7 operands.last\n      \
    \          }\n            }\n            else\n                // if there is\
    \ a operator at index >= 1\n                if (operIndex >= 1) {\n          \
    \          val a = operands.head.toLong\n                    val b = operands.last.toLong\n\
    \                    val tmpA = a\n                    val tmpB = b\n        \
    \            while (operatorIndex < operator.size - 1) {\n                   \
    \     val tmp = tmpA\n                        val op = operator(operatorIndex)\n\
    \                        if (op.equals(\"+\")) tmpA = tmpA + tmpB\n          \
    \              else if (op.equals(\"-\")) tmpA = tmpA - tmpB\n               \
    \         else if (op.equals(\"*\")) tmpA = tmpA * tmpB\n                    \
    \    else if (op.equals(\"/\")) tmpA = tmpA / tmpB\n                        else\
    \ if (op.equals(\"//\")) tmpA = tmpA \xF7 tmpB\n                        else if\
    \ (op.equals(\"**\")) tmpA = tmpA \xD7 tmpB\n                        operatorIndex\
    \ += 1\n                    }\n                    tmpA\n                }\n \
    \               else\n                    // if there is no operator at index\
    \ >= 1\n                    if (operands.size > 0) {\n                       \
    \ val tmpA = operands.head.toLong\n                        val tmpB = operands.last.toLong\n\
    \                        while (operatorIndex < operator.size - 1) {\n       \
    \                     val tmp = tmpA\n                            val op = operator(operatorIndex)\n\
    \                            if (op.equals(\"+\")) tmpA = tmpA + tmpB\n      \
    \                      else if (op.equals(\"-\")) tmpA = tmpA - tmpB\n       \
    \                     else if (op.equals(\"*\")) tmpA = tmpA * tmpB\n        \
    \                    else if (op.equals(\"/\")) tmpA = tmpA / tmpB\n         \
    \                   else if (op.equal\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2s570pts.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2s570pts.scala:87:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m87 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp2s570pts.scala:40:41 ------------------------\e[0m\e[0m\n\
    \e[31m40 |\e[0m                    operands.head.toLong \xF7 operands.last\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value \xF7 is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2s570pts.scala:43:41 ------------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m                    operands.head.toLong \xD7 operands.last\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    value \xD7 is not a member of Long\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp2s570pts.scala:56:49 -----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m                        \e[33mif\e[0m (op.equals(\e[31m\"\
    +\"\e[0m)) tmpA = tmpA + tmpB\n\e[31m\e[31m   |\e[0m                         \
    \                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                           Reassignment to val tmpA\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp2s570pts.scala:57:54 -----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                        \e[33melse\e[0m \e[33mif\e[0m\
    \ (op.equals(\e[31m\"-\"\e[0m)) tmpA = tmpA - tmpB\n\e[31m\e[31m   |\e[0m    \
    \                                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                Reassignment to val\
    \ tmpA\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2s570pts.scala:58:54\
    \ -----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m                   \
    \     \e[33melse\e[0m \e[33mif\e[0m "
  stdout: ''
  timestamp: 1660013182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.mkString(\"+\")\n        val nums = operand.map(_.toInt)\n\
    \        val length = operand.length - 1 \n        val expr = \"\"\n        \n\
    \        for(i <- 0 until length) {\n            expr += operator\n          \
    \  expr += if (nums(i) > 0) \"(\" + nums(i) + \")\" else \"\"\n        }\n\n \
    \       val exprStr = expr.substring(1,expr.length-1)\n        val eval = exprStr.split(\"\
    \\\\W\").map(_.toLong).sum\n        eval\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpze8a8rp1.scala:30:20 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            expr += \e[33mif\e[0m (nums(i) > \e[31m0\e\
    [0m) \e[31m\"(\"\e[0m + nums(i) + \e[31m\")\"\e[0m \e[33melse\e[0m \e[31m\"\"\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^\e[0m\n\e[31m   |\e[0m       \
    \             expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpze8a8rp1.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            expr += operator\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of String - did you mean expr.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpze8a8rp1.scala:30:17\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            expr += \e[33mif\e\
    [0m (nums(i) > \e[31m0\e[0m) \e[31m\"(\"\e[0m + nums(i) + \e[31m\")\"\e[0m \e\
    [33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of String - did you mean expr.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operands = operand.map(_.toLong).sort\n        val op\
    \ = op.filterNot(_ == \"*\")\n        val op = op.filterNot(_ == \"/\")\n    \
    \    val op = op.filterNot(_ == \"**\")\n        val op2 = op.map(x => x.toChar)\n\
    \        val op3 = op.map(x => (x - '0').toChar)\n        val op4 = op.map(x =>\
    \ (x - '0').toChar)\n        val op5 = op.map(x => (x - '0').toChar)\n       \
    \ if (op2 contains '+') return operands.reduceLeft(_ + _)\n        else if (op2\
    \ contains '*') return operands.reduceLeft(_ * _)\n        else if (op2 contains\
    \ '-') return operands.reduceLeft(_ - _)\n        else if (op2 contains '//')\
    \ return operands.reduceLeft(_ // _)\n        else if (op2 contains '**') return\
    \ operands.reduceLeft(_ ** _)\n        if (op3 contains '+') return operands.reduceRight(_\
    \ + _)\n        else if (op3 contains '*') return operands.reduceRight(_ * _)\n\
    \        else if (op3 contains '-') return operands.reduceRight(_ - _)\n     \
    \   else if (op3 contains '//') return operands.reduceRight(_ // _)\n        else\
    \ if (op3 contains '**') return operands.reduceRight(_ ** _)\n        if (op4\
    \ contains '+') return operands.reduceRight(_ + _)\n        else if (op4 contains\
    \ '*') return operands.reduceRight(_ * _)\n        else if (op4 contains '-')\
    \ return operands.reduceRight(_ - _)\n        else if (op4 contains '//') return\
    \ operands.reduceRight(_ // _)\n        else if (op4 contains '**') return operands.reduceRight(_\
    \ ** _)\n        if (op5 contains '+') return operands.reduceRight(_ + _)\n  \
    \      else if (op5 contains '*') return operands.reduceRight(_ * _)\n       \
    \ else if (op5 contains '-') return operands.reduceRight(_ - _)\n        else\
    \ if (op5 contains '//') return operands.reduceRight(_ // _)\n        else if\
    \ (op5 contains '**') return operands.reduceRight(_ ** _)\n        else throw\
    \ new Exception(\"Unknown operator\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnwhtft34.scala:34:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (op2 contains \e\
    [31m'//\e[0m') return operands.reduceLeft(_ \e[34m// _)\e[0m\n\e[31m\e[31m   |\e\
    [0m                              ^\e[0m\n\e[31m   |\e[0msymbol literal '// is\
    \ no longer supported,\n\e[31m   |\e[0muse a string literal \"//\" or an application\
    \ Symbol(\"//\") instead,\n\e[31m   |\e[0mor enclose in braces '{//} if you want\
    \ a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmpnwhtft34.scala:34:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m       \
    \ \e[33melse\e[0m \e[33mif\e[0m (op2 contains \e[31m'//\e[0m') return operands.reduceLeft(_\
    \ \e[34m// _)\e[0m\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m                                 unclosed character literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpnwhtft34.scala:35:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (op2 contains \e\
    [31m'**\e[0m') return operands.reduceLeft(_ ** _)\n\e[31m\e[31m   |\e[0m     \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \        unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmpnwhtft34.scala:39:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m39 |\e[0m       \
    \ \e[33melse\e[0m \e[33mif\e[0m (op3 contains \e[31m'//\e[0m') return operands.reduceRight(_\
    \ \e[34m// _)\e[0m\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m                                 unclosed character literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpnwhtft34.scala:40:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (op3 contains \e\
    [31m'**\e[0m') return operands.reduceRight(_ ** _)\n\e[31m\e[31m   |\e[0m    \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \         unclosed character literal\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660013181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 to operand.size-1)\
    \ {\n            var opName = op(i)\n            var operandNum = operand(i)\n\
    \            result =\n                if (opName == \"+\") {\n              \
    \      result + operandNum\n                } else if (opName == \"-\") {\n  \
    \                  result - operandNum\n                } else if (opName == \"\
    *\") {\n                    result * operandNum\n                } else if (opName\
    \ == \"/\") {\n                    result / operandNum\n                } else\
    \ if (opName == \"**\") {\n                    result ** operandNum\n        \
    \        } else { \n                    result\n                }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmsgjxfm0.scala:37:27 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    result ** operandNum\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value ** is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var sum = 0\n        val op = op.asInstanceOf[List[String]]\n\
    \        val operand = operand.asInstanceOf[List[Long]]\n        val opLen = op.length\n\
    \        val opItr = op.iterator\n        val opItr1 = opItr.next()\n        for\
    \ (i <- 0 until operand.size) {\n            val operand1 = operand(i) \n    \
    \        var opItr2 = opItr1.next()\n            if (opItr1.hasNext) {\n     \
    \           var opItr3 = opItr2.next()\n                while (opItr1.hasNext)\
    \ {\n                    sum = opItr3.asInstanceOf[String]() + opItr2.asInstanceOf[String]()\n\
    \                    opItr2 = opItr1.next()\n                    opItr3 = opItr2.next()\n\
    \                }\n            }\n            sum = sum + operand1\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2eblnj0n.scala:24:17 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mop\e[0m = op.asInstanceOf[\e\
    [35mList\e[0m[\e[35mString\e[0m]]\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\
    \e[31m   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mop\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2eblnj0n.scala:25:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperand\e[0m = operand.asInstanceOf[\e[35mList\e[0m[\e[35mLong\e[0m]]\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35moperand\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        require(op.length == operand.length-1)\n        require(op.filter(_.equals(\"\
    +\") || _.equals(\"-\") || _.equals(\"*\")|| _.equals(\"/\")|| _.equals(\"//\"\
    )|| _.equals(\"**\")).isEmpty)\n        var result = 0\n        for ((i, e) <-\
    \ operand.zip(op.reverse)) {\n            result += e\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpofz_88hh.scala:24:26 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        require(op.filter(_.equals(\e[31m\"+\"\e[0m)\
    \ || _.equals(\e[31m\"-\"\e[0m) || _.equals(\e[31m\"*\"\e[0m)|| _.equals(\e[31m\"\
    /\"\e[0m)|| _.equals(\e[31m\"//\"\e[0m)|| _.equals(\e[31m\"**\"\e[0m)).isEmpty)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpofz_88hh.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            result += e\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.sorted\n        val operand = operand.sorted\n\
    \        val result = operand.foldLeft(operand(0)) { (acc, item) => item match\
    \ {\n            case x if x > acc => acc\n            case x if x < acc => acc\n\
    \            case _ => acc + operator(operand.indexOf(x) - 1).asInstanceOf[Long]\n\
    \        }}\n        \n        println(\"result: \" + result)\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph2ejdfgo.scala:24:22 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperand\e[0m = operand.sorted\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35moperand\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Complete this function\n        var result = operand.foldLeft((List[String](),\
    \ List[Long]()))((x, v) => ((x match {\n            case (\"\", y) => (y :: v).reverse\n\
    \            case (x, v1) => x + v1 :: v\n        }), v.reverse))\n\n        val\
    \ operator = op.foldLeft((List[String](), List[Long]()))((x, v) => (x match {\n\
    \            case (\"\", y) => (y :: v).reverse\n            case (x, v1) => x\
    \ + v1 :: v\n        }), v.reverse)\n\n        val result = result._2.reduce((x,\
    \ y) => (x.head + y.head) * x.tail)\n        val result = result._2\n\n      \
    \  val result: Long = (result._1 - operator._2.reduce((x, y) => (x.head + y.head)\
    \ * x.tail)) * (result._2 match {\n            case List(\"*\") => 1\n       \
    \     case List(\"/\") => 1\n            case List(\"//\") => 1\n            case\
    \ _ => 0\n        })\n\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpecdt47ja.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result._2.reduce((\e\
    [36mx\e[0m, \e[36my\e[0m) => (x.head + y.head) * x.tail)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvariable\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpecdt47ja.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result._2\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult is already\
    \ defined as \e[33mvariable\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpecdt47ja.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m: \e[35mLong\e[0m = (result._1 - operator._2.reduce((\e[36mx\e\
    [0m, \e[36my\e[0m) => (x.head + y.head) * x.tail)) * (result._2 \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mresult is already defined\
    \ as \e[33mvariable\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m38 |\e[0m            \e[33mcase\e[0m List(\e[31m\"*\"\e[0m) => \e[31m1\e\
    [0m\n\e[31m39 |\e[0m            \e[33mcase\e[0m List(\e[31m\"/\"\e[0m) => \e[31m1\e\
    [0m\n\e[31m40 |\e[0m            \e[33mcase\e[0m List(\e[31m\"//\"\e[0m) => \e\
    [31m1\e[0m\n\e[31m41 |\e[0m            \e[33mcase\e[0m _ => \e[31m0\e[0m\n\e[31m42\
    \ |\e[0m        })\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpecdt47ja.scala:25:18\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e[0m (\e\
    [31m\"\"\e[0m, y) => (y :: v).reverse\n\e[31m\e[31m   |\e[0m                 \
    \ ^^\e[0m\n\e[31m   |\e[0m                  Found:    (\e[32m\"\"\e[0m : String)\n\
    \e[31m   |\e[0m                  Requ"
  stdout: ''
  timestamp: 1660013186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n        val firstElement = operand.head\n\
    \        val secondElement = operand.tail.head\n        val operaElement = operand.tail.tail.head\n\
    \n        val result = (\n            if( op.contains(\"+\")){\n             \
    \   firstElement + secondElement\n            } else if( op.contains(\"-\")){\n\
    \                firstElement - secondElement\n            } else if( op.contains(\"\
    *\")){\n                firstElement * secondElement\n            } else if( op.contains(\"\
    /\")){\n                firstElement / secondElement\n            } else if( op.contains(\"\
    //\")){\n                firstElement / secondElement\n            } else if(\
    \ op.contains(\"**\")){\n                firstElement ** secondElement\n     \
    \       } else if( op.contains(\"%\")){\n                firstElement % secondElement\n\
    \            }\n\n        )\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopq4phf6.scala:40:29 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                firstElement ** secondElement\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value ** is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opMap : Map[String,Long] = new HashMap[String,Long]()\n\
    \        val opMap1 = new HashMap[String,Long]()\n        val opMap2 = new HashMap[String,Long]()\n\
    \        val opMap3 = new HashMap[String,Long]()\n        val opMap4 = new HashMap[String,Long]()\n\
    \        for (i <- 0 to operand.length - 1) {\n            opMap(op(i)) += operand(i)\n\
    \        }\n        for (i <- 0 to operand.length - 1) {\n            opMap1(op(i))\
    \ *= operand(i)\n        }\n        for (i <- 0 to operand.length - 1) {\n   \
    \         opMap2(op(i)) -= operand(i)\n        }\n        for (i <- 0 to operand.length\
    \ - 1) {\n            opMap3(op(i)) /= operand(i)\n        }\n        for (i <-\
    \ 0 to operand.length - 1) {\n            opMap4(op(i)) //= operand(i)\n     \
    \   }\n        val result = opMap.get(op(0)) * opMap1.get(op(0)) - opMap2.get(op(0))\
    \ * opMap3.get(op(0)) * opMap4.get(op(0))\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr2nhn17j.scala:43:38 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = opMap.get(op(\e\
    [31m0\e[0m)) * opMap1.get(op(\e[31m0\e[0m)) - opMap2.get(op(\e[31m0\e[0m)) * opMap3.get(op(\e\
    [31m0\e[0m)) * opMap4.get(op(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member of\
    \ Option[Long], but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operations = op.map(operation => operation to 1)\n \
    \       val operands = operand.map(operand => operand to 1)\n        val product\
    \ = operands.foldLeft(0L)((x,y) => x * y)\n        val pow = operands.foldLeft(1L)((x,y)\
    \ => x * y)\n        val operation = operations.head\n        operands.tail.foldLeft(0L)((x,y)\
    \ => operation(x) * y * pow)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdnu550us.scala:23:58\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moperations\e\
    [0m = op.map(\e[36moperation\e[0m => operation to \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                          ^\e[0m\n\e\
    [31m   |\e[0m                           Found:    (\e[31m1\e[0m : Int)\n\e[31m\
    \   |\e[0m                           Required: scala.collection.Factory[Char,\
    \ Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpdnu550us.scala:25:55\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mproduct\e[0m = operands.foldLeft(\e[31m0L\e[0m)((\e[36mx\e[0m,\e[36my\e\
    [0m) => x * y)\n\e[31m\e[31m   |\e[0m                                        \
    \             ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((y : scala.collection.immutable.NumericRange.Inclusive[Long]))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpdnu550us.scala:26:51 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mpow\e[0m = operands.foldLeft(\e\
    [31m1L\e[0m)((\e[36mx\e[0m,\e[36my\e[0m) => x * y)\n\e[31m\e[31m   |\e[0m    \
    \                                             ^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((y : scala.collection.immutable.NumericRange.Inclusive[Long]))\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpdnu550us.scala:28:44 -------"
  stdout: ''
  timestamp: 1660013189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.toSeq.map(_.toChar).filter(_ != '-').toList\n\
    \        if (operator == null || operand == null || operator.size == 0) {\n  \
    \          0\n        } else {\n            val operand1 = operand.filter(_.isDefined).map(_.get).toList\n\
    \            var total: Long = 0\n            val operators = List[String]()\n\
    \            while (operand1.nonEmpty) {\n                if (operators.size ==\
    \ operator.length) {\n                    val op1 = operators(0)\n           \
    \         if (op1 != '-') {\n                        total += (operand1(0) to\
    \ operand1(operand1.size - 1).toList).foldLeft(0){ case (sum, a) =>\n        \
    \                    val op2 = operators(1)\n                            if (op2\
    \ == '+') sum + a\n                            else if (op2 == '-') sum - a\n\
    \                            else if (op2 == '*') sum * a\n                  \
    \          else if (op2 == '/') sum div a\n                            else if\
    \ (op2 == '//') sum shr a\n                            else if (op2 == '**') sum\
    \ pow a\n                            else throw new IllegalArgumentException(\"\
    Invalid operation \" + op2 + \" at position \" + operand1.size.toString)\n   \
    \                     }\n                        val op2 = operators(1)\n    \
    \                    if (op2 == '+') {\n                            total += operand1.head\n\
    \                            operand1 = operand1.tail\n                      \
    \  } else if (op2 == '-') {\n                            total -= operand1.head\n\
    \                            operand1 = operand1.tail\n                      \
    \  } else if (op2 == '*') {\n                            total *= operand1.head\n\
    \                            operand1 = operand1.tail\n                      \
    \  } else if (op2 == '/') {\n                            total /= operand1.head\n\
    \                            operand1 = operand1.tail\n                      \
    \  } else if (op2 == '//') {\n                            total /= operand1.head\n\
    \                            operand1 = operand1.tail\n                      \
    \  } else if (op2 == '**') {\n                            total **= operand1.head\n\
    \                            operand1 = operand1.tail\n                      \
    \  }\n                    } else {\n                        total = operand1(0)\
    \ to operand1.head - 1.toList\n                        operand1 = operand1.tail\n\
    \                    }\n                    operators = operators.dropRight(1)\n\
    \                } else {\n                    val op1 = operators(0)\n      \
    \              if (op1 != '-') {\n                        total += (operand1(0)\
    \ to operand1.last).foldLeft(0){ case (sum, a) =>\n                          \
    \  val op2 = operators(1)\n                            if (op2 == '+') sum + a\n\
    \                            else if (op2 == '-') sum - a\n                  \
    \          else if (op2 == '*') sum * a\n                            else if (op2\
    \ == '/') sum div a\n                            else if (op2 == '//') sum shr\
    \ a\n                            else if (op2 == '**') sum \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiuoe34u6.scala:40:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                            \e[33melse\e[0m \e[33mif\e\
    [0m (op2 == \e[31m'//\e[0m') sum shr a\n\e[31m\e[31m   |\e[0m                \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                        unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmpiuoe34u6.scala:41:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m41 |\e[0m       \
    \                     \e[33melse\e[0m \e[33mif\e[0m (op2 == \e[31m'**\e[0m') sum\
    \ pow a\n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpiuoe34u6.scala:57:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                        } \e[33melse\e[0m \e[33mif\e\
    [0m (op2 == \e[31m'//\e[0m') {\n\e[31m\e[31m   |\e[0m                        \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \             unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmpiuoe34u6.scala:60:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m60 |\e[0m       \
    \                 } \e[33melse\e[0m \e[33mif\e[0m (op2 == \e[31m'**\e[0m') {\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                             unclosed character literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpiuoe34u6.scala:78:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m                            \e[33melse\e[0m \e[33mif\e\
    [0m (op2 == \e[31m'//\e[0m') sum shr a\n\e[31m\e[31m   |\e[0m                \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                        unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmpiuoe34u6.scala:79:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m79 |\e[0m       \
    \                     \e[33melse\e[0m \e[33mif\e[0m (op2 == \e[31m'**\e[0m') sum\
    \ \n\e[31m\e[31m   |\e[0m                                               ^\e[0m\n\
    \e[31m   |\e[0m                "
  stdout: ''
  timestamp: 1660013189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val rec = new ListBuffer[Long]\n        val mul = operand\
    \ match {\n            case head :: tail => operand.zip(tail).map { case (x, y)\
    \ => x * y}.reduce(_ + _)\n            case _ => 0\n        }\n        rec +=\
    \ mul\n        val rec = rec.toList\n        val exp = op match {\n          \
    \  case head :: tail => rec.zip(tail).map { case (x, y) => math.pow(x, y)}.reduce(_\
    \ * _)\n            case _ => 0\n        }\n        rec += exp\n        val rec\
    \ = rec.toList\n        val div = operand match {\n            case head :: tail\
    \ => operand.zip(tail).map { case (x, y) => x / y}.reduce(_ % _)\n           \
    \ case _ => 0\n        }\n        rec += div\n        val rec = rec.toList\n \
    \       val add = op match {\n            case head :: tail => rec.zip(tail).map\
    \ { case (x, y) => x + y}.reduce(_ + _)\n            case _ => 0\n        }\n\
    \        rec += add\n        val rec = rec.toList\n        val neg = op match\
    \ {\n            case head :: tail => rec.zip(tail).map { case (x, y) => -(-x\
    \ + y)}.reduce(_ - _)\n            case _ => 0\n        }\n        rec += neg\n\
    \        val rec = rec.toList\n        val add1 = op match {\n            case\
    \ head :: tail => rec.zip(tail).map { case (x, y) => x + y}.reduce(_ + _)\n  \
    \          case _ => 0\n        }\n        rec += add1\n        val rec = rec.toList\n\
    \        val mul1 = op match {\n            case head :: tail => rec.zip(tail).map\
    \ { case (x, y) => x * y}.reduce(_ * _)\n            case _ => 0\n        }\n\
    \        rec += mul1\n        val rec = rec.toList\n        val div1 = operand\
    \ match {\n            case head :: tail => operand.zip(tail).map { case (x, y)\
    \ => x / y}.reduce(_ % _)\n            case _ => 0\n        }\n        rec +=\
    \ div1\n        val rec = rec.toList\n        val mult1 = op match {\n       \
    \     case head :: tail => rec.zip(tail).map { case (x, y) => x * y}.reduce(_\
    \ * _)\n            case _ => 0\n        }\n        rec += mult1\n        val\
    \ rec = rec.toList\n        val exp1 = operand match \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9gpi227a.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '{' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9gpi227a.scala:87:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m87 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9gpi227a.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mrec\e[0m = rec.toList\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrec is already defined\
    \ as \e[33mvalue\e[0m \e[35mrec\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gpi227a.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mrec\e[0m = rec.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrec is already\
    \ defined as \e[33mvalue\e[0m \e[35mrec\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gpi227a.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mrec\e[0m = rec.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrec is already\
    \ defined as \e[33mvalue\e[0m \e[35mrec\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gpi227a.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mrec\e[0m = rec.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrec is already\
    \ defined as \e[33mvalue\e[0m \e[35mrec\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gpi227a.scala:53:12 ---------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // your code goes here\n        // use for loop to traverse\
    \ both list\n        // use if statement to compare the list\n        val listLength\
    \ : Long = operand.length\n        val operatorLength : Long = op.length\n   \
    \     for (i<- 0 to listLength - 1) {\n            for (j <- 0 to operatorLength\
    \ - 1) {\n                println(op(i) + \" * \" + operand(j))\n            }\n\
    \        }\n        // use for loop to traverse op list\n        // use if statement\
    \ to compare the list\n        // use if statement to compare the list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq9u5rr77.scala:28:22\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m0\e[0m to listLength - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:  \
    \  Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq9u5rr77.scala:29:27 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to operatorLength\
    \ - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val size = operand.size\n        val opSize = op.size\n\
    \        val operators = (1 until opSize).map { i => op(size - i) -> i }\n   \
    \     val stack = Stack.empty[Long]\n        val left = operand(size - 1)\n  \
    \      val right = operand(size - 2)\n        while (stack.size() < size) {\n\
    \            val op = operators.reverse.find { case (op,index) => op(stack.size()\
    \ - index) == op(stack.size()) }\n            op match {\n                case\
    \ Some(operator) => stack += operation(left, right, operator)\n              \
    \  case None => stack += operation(right, left, operator)\n            }\n   \
    \     }\n        stack.toArray.reverse.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpr_urcuqg.scala:29:21 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mwhile\e[0m (stack.size() < size) {\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpr_urcuqg.scala:30:74\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e\
    [0m \e[36mop\e[0m = operators.reverse.find { \e[33mcase\e[0m (op,index) => op(stack.size()\
    \ - index) == op(stack.size()) }\n\e[31m\e[31m   |\e[0m                      \
    \                                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e\
    [35mSeqOps\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmpr_urcuqg.scala:30:102 ----------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mop\e[0m = operators.reverse.find\
    \ { \e[33mcase\e[0m (op,index) => op(stack.size() - index) == op(stack.size())\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e\
    [35mSeqOps\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr_urcuqg.scala:32:48 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                \e[33mcase\e[0m Some(operator) => stack +=\
    \ operation(left, right, operator)\n\e[31m\e[31m   |\e[0m                    \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                               Not found: operation\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Er"
  stdout: ''
  timestamp: 1660013187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var operandCopy = operand.clone\n        // Iterate in reverse\
    \ order.\n        for(i <- operand.length to 1 by -1){\n            var product\
    \ = 0L\n            // Iterate in reverse order.\n            for(j <- operand.length\
    \ to 1 by -1){\n                product += (operand(i) * operand(j))\n       \
    \     }\n            operandCopy = operandCopy.updated(i, product)\n        }\n\
    \        var finalResult = 0L\n        for(i <- operandCopy.indexWhere { case\
    \ x => operandCopy(i) != 0L} to operand.length by -1){\n            finalResult\
    \ += operandCopy(i) * op(0)\n        }\n        finalResult\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph4jod4v2.scala:23:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36moperandCopy\e[0m = operand.clone\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m\e[33mmethod\e[0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot\
    \ be accessed as a member of (operand : List[Long]) from module class Problem$.\n\
    \e[31m   |\e[0m Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted\
    \ because prefix type List[Long]\n\e[31m   |\e[0m does not conform to \e[33mobject\e\
    [0m \e[35mProblem\e[0m where the access takes place\n1 error found\n"
  stdout: ''
  timestamp: 1660013186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val size = operand.size\n        val opList = op.toList\n\
    \        val operandList = operand.map( x => math.abs(x) )\n        val operators\
    \ = opList.dropRight(1)\n        val size = operandList.size\n        val expression\
    \ = new mutable.MutableList[Long]\n        expression.append(0)\n        var current\
    \ = 0\n        var power = 0\n        var lastPower = -1\n        var i = 1\n\
    \        while(i < size) {\n            if(power==0) {\n                expression.append(operandList(i))\n\
    \                current += 1\n                i += 1\n            } else if(power<0)\
    \ {\n                expression.append(current*operandList(i))\n             \
    \   i += 1\n                current += 1\n                lastPower += 1\n   \
    \         } else {\n                expression.append(current*(operandList(i)\
    \ - lastPower*operandList(i-1)))\n                i += 1\n                current\
    \ = expression(i-1)\n                power -= 1\n            }\n        }\n  \
    \      expression.get(1)\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jomzuc1.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msize\e[0m = operandList.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msize\
    \ is already defined as \e[33mvalue\e[0m \e[35msize\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jomzuc1.scala:28:29\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mexpression\e[0m = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m]\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def operate(operand : List[Long], operator : List[String])\
    \ : Long = {\n            def operateRecursive(operand : List[Long], operator\
    \ : List[String], \n                                  result : Long) : Long =\
    \ {\n                if (operator.isEmpty) {\n                    return result\n\
    \                }\n                val nextOperator = operator(0)\n         \
    \       val nextOperand = operand(0)\n                val nextOperand2 = operand(1)\n\
    \                if (nextOperand.isInfinite || nextOperand.isNaN) {\n        \
    \            if (nextOperand.isInfinite || nextOperand.isNaN) {\n            \
    \            val lastOperator = operator(operator.size - 1)\n                \
    \        val lastOperand = operand(operand.size - 2)\n                       \
    \ val lastOperand2 = operand(operand.size - 3)\n                        if (lastOperator.isInfinite\
    \ || lastOperator.isNaN || lastOperand.isInfinite || lastOperand.isNaN || lastOperand2.isInfinite\
    \ || lastOperand2.isNaN) {\n                            return 0\n           \
    \             }\n                        return operateRecursive(operand, \n \
    \                               operator :: nextOperator :: lastOperator :: nextOperand\
    \ :: lastOperand :: nextOperand2, \n                                operateRecursive(operand,\
    \ \n                                operator :: nextOperator :: lastOperator ::\
    \ nextOperand :: lastOperand :: nextOperand2, operateRecursive(operand, \n   \
    \                             operator :: nextOperator :: lastOperator :: nextOperand\
    \ :: lastOperand :: nextOperand2, operateRecursive(operand, \n               \
    \                 operator :: nextOperator :: lastOperator :: nextOperand :: lastOperand\
    \ :: nextOperand2, operateRecursive(operand, \n                              \
    \  operator :: nextOperator :: lastOperator :: nextOperand :: lastOperand :: nextOperand2,\
    \ operateRecursive(operand, \n                                operator :: nextOperator\
    \ :: lastOperator :: nextOperand :: lastOperand :: nextOperand2, operateRecursive(operand,\
    \ \n                                operator :: nextOperator :: lastOperator ::\
    \ nextOperand :: lastOperand :: nextOperand2, operateRecursive(operand, \n   \
    \                             operator :: nextOperator :: lastOperator :: nextOperand\
    \ :: lastOperand :: nextOperand2, operateRecursive(operand, \n               \
    \                 operator :: nextOperator :: lastOperator :: nextOperand :: lastOperand\
    \ :: nextOperand2, operateRecursive(operand, \n                              \
    \  operator :: nextOperator :: lastOperator :: nextOperand :: lastOperand :: nextOperand2,\
    \ operateRecursive(operand, \n                                operator :: next\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp07abzti.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp07abzti.scala:61:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpp07abzti.scala:32:32 ------------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m                \e[33mif\e[0m (nextOperand.isInfinite || nextOperand.isNaN)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m      value isInfinite is not a member of Long.\n\e[31m   |\e[0m\
    \      An extension method was tried, but could not be fully constructed:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m          float2Float(nextOperand)\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpp07abzti.scala:33:36 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mif\e[0m (nextOperand.isInfinite\
    \ || nextOperand.isNaN) {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value isInfinite is not a member of Long.\n\e[31m  \
    \ |\e[0m      An extension method was tried, but could not be fully constructed:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m          float2Float(nextOperand)\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpp07abzti.scala:37:41 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                        \e[33mif\e[0m (lastOperator.isInfinite\
    \ || lastOperator.isNaN || lastOperand.isInfinite || lastOperand.isNaN || lastOperand2.isInfinite\
    \ || lastOperand2.isNaN) {\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value isInfinite is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp07abzti.scala:41:103\
    \ -----------------------\e[0m\e[0m\n\e[31m41 |\e[0m                         \
    \       operator :: nextOperator :: lastOperator :: nextOperand :: lastOperand\
    \ :: nextOperand2, \n\e[31m\e[31m   |\e[0m                                   \
    \         "
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Your code here\n        def add(x: Long, ys: Long*):\
    \ Long = {\n           val xs: Seq[Long] = ys map x\n           xs reduce(_ +\
    \ _)\n        }\n        def sub(x: Long, ys: Long*): Long = {\n           val\
    \ xs: Seq[Long] = ys map x\n           xs reduce(_ - _)\n        }\n        def\
    \ mul(x: Long, ys: Long*): Long = {\n           val xs: Seq[Long] = ys map x\n\
    \           xs reduce(_ * _)\n        }\n        def div(x: Long, ys: Long*):\
    \ Long = {\n           val xs: Seq[Long] = ys map x\n           xs reduce(_ /\
    \ _)\n        }\n        def pow(x: Long, ys: Long*): Long = {\n           val\
    \ xs: Seq[Long] = ys map x\n           xs reduce(_ ** _)\n        }\n        def\
    \ exp(x: Long, ys: Long*): Long = {\n           val xs: Seq[Long] = ys map x\n\
    \           xs reduce(_ * _)\n        }\n        val operator = op.dropRight(1)\n\
    \        val operand = operand.drop(1)\n        val exps = operand.zip(operator).map\
    \ {\n           case (x, op) => op(x.toLong, ys)\n        }\n        val results\
    \ = exps.reduce((x, y) => add(x, y))\n        results\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2z2p_fss.scala:25:38\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m           \e[33mval\e[0m \e\
    [36mxs\e[0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = ys map x\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (x : Long)\n\e[31m   |\e[0m                \
    \                      Required: Long => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2z2p_fss.scala:29:38 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m           \e[33mval\e[0m \e[36mxs\e[0m: \e[35mSeq\e\
    [0m[\e[35mLong\e[0m] = ys map x\n\e[31m\e[31m   |\e[0m                       \
    \               ^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    (x : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Long => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2z2p_fss.scala:33:38\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m           \e[33mval\e[0m \e\
    [36mxs\e[0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = ys map x\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (x : Long)\n\e[31m   |\e[0m                \
    \                      Required: Long => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2z2p_fss.scala:37:38 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m           \e[33mval\e[0m \e[36mxs\e[0m: \e[35mSeq\e\
    [0m[\e[35mLong\e[0m] = ys map x\n\e[31m\e[31m   |\e[0m                       \
    \               ^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    (x : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Long => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2z2p_fss.scala:41:38\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m    "
  stdout: ''
  timestamp: 1660013191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opArr = op.map(_ => 1)\n        val opMap = (0..size)(i\
    \ => op zip opArr)(i)\n        val exps = opMap map {case(op, a) => op.hashCode\
    \ * a + operand.sum}\n        operand.foldLeft(0) {\n            case (acc, x)\
    \ => acc + exps(x)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ubvsb0m.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopMap\e[0m = (\e[31m0\e\
    [0m..size)(\e[36mi\e[0m => op zip opArr)(i)\n\e[31m\e[31m   |\e[0m           \
    \            ^\e[0m\n\e[31m   |\e[0m                       an identifier expected,\
    \ but '.' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ubvsb0m.scala:24:49\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mopMap\e[0m = (\e[31m0\e[0m..size)(\e[36mi\e[0m => op zip opArr)(i)\n\e[31m\e\
    [31m   |\e[0m                                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                                 Not found: i\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opExpr = op.length\n        val opList = List(\"+\"\
    \ -> \"add\", \"*\" -> \"mul\", \"-\" -> \"sub\", \"/\" -> \"div\", \"//\" ->\
    \ \"floorDiv\", \"**\" -> \"pow\")\n        val opMap = opList.zipWithIndex.toMap\n\
    \        val operandList = operand map (_ + 1)\n        val evalExpr = operandList.zipWithIndex.foldLeft(0)\
    \ {\n            case (acc, (i, j)) => acc + (opMap.get(op(i)).getOrElse(op(i))(j)\
    \ * operand(i))\n        }\n        evalExpr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa_4x91ut.scala:28:54\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m (acc,\
    \ (i, j)) => acc + (opMap.get(op(i)).getOrElse(op(i))(j) * operand(i))\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (i\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa_4x91ut.scala:28:71\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m (acc,\
    \ (i, j)) => acc + (opMap.get(op(i)).getOrElse(op(i))(j) * operand(i))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                              \
    \      Found:    (i : Long)\n\e[31m   |\e[0m                                 \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opList: List[String] = op\n        val operandList:\
    \ List[Long] = operand\n        val opListLength: Int = opList.length\n      \
    \  val operandListLength: Int = operandList.length - 1\n        var result = 0\n\
    \        var index = 0\n        while (index < operandListLength) {\n        \
    \    val op = opList(index).toLowerCase\n            val operand = operandList(index)\n\
    \            val operandPlusOne = operand + 1\n            val operandMinusOne\
    \ = operand - 1\n            val operandMulti = operand * operand\n          \
    \  val operandDivide = operand / operand\n            val operandExponent = operand\
    \ ** operand\n            var opResult = 0\n            switch (op) {\n      \
    \          case \"plus\" => opResult = operandPlusOne\n                case \"\
    minus\" => opResult = operandMinusOne\n                case \"times\" => opResult\
    \ = operandMulti\n                case \"floordivide\" => opResult = operandDivide\n\
    \                case \"xto\" => opResult = operandExponent\n                case\
    \ _ => opResult = 0\n            }\n            result += opResult\n         \
    \   index += 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4b0pxxhi.scala:36:42 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36moperandExponent\e[0m\
    \ = operand ** operand\n\e[31m\e[31m   |\e[0m                                \
    \  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value **\
    \ is not a member of Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4b0pxxhi.scala:38:12\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            switch (op) {\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ switch\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = List(\"+\", \"-\", \"*\", \"/\", \"//\",\
    \ \"**\")\n        assert(operator.size == operand.size - 1)\n        var i =\
    \ 0\n        var result = 0L\n        while (i < operator.size && i < operand.size)\
    \ {\n            val left = operand(i)\n            val right = operand(i +1)\n\
    \            val oper = operator(i)\n            val right = operand(i +1)\n \
    \           val oper2= operator(i +2)\n            val oper3 = operator(i +3)\n\
    \            val oper4 = operator(i +4)\n            val oper5 = operator(i +5)\n\
    \            if (oper == \"+\") {\n                result += (left + right)\n\
    \            }\n            else if (oper == \"-\") {\n                result\
    \ -= (left - right)\n            }\n            else if (oper == \"*\") {\n  \
    \              result += (left * right)\n            }\n            else if (oper\
    \ == \"/\") {\n                result += (left / right)\n            }\n     \
    \       else if (oper == \"//\") {\n                result += (left // right)\n\
    \            }\n            else if (oper == \"**\") {\n                result\
    \ += (left ** right)\n            }\n            i += 6\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxa3auda8.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpxa3auda8.scala:31:16 ---------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = operand(i +\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mright is already defined as \e[33mvalue\e[0m \e[35mright\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxa3auda8.scala:52:23 ------------------------\e[0m\e[0m\n\e[31m52 |\e\
    [0m                result += (left ** right)\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxa3auda8.scala:52:32\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m                result +=\
    \ (left ** right)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           value ** is not a member of Long\n4\
    \ errors found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val list1 = operand.tail // drop the last element\n    \
    \    val list2 = operand.init // drop the first element\n        val operator\
    \ = op.head\n\n        // The expression has only one variable, so return the\
    \ result of evaluating the expression.\n        if (list1.length == 1 && list2.length\
    \ == 1) return list1.head * list2.head\n\n        val firstElement = list1(0)\n\
    \        val secondElement = list2(0)\n        val operatorIndex = if (operator\
    \ == \"-\") -1 else 0\n        val op1 = list1.slice(0, operatorIndex).map(_.toInt)\n\
    \        val op2 = list2.slice(0, operatorIndex).map(_.toInt)\n        val result\
    \ = evalAlgebra(operator)(op1, op2)\n        val resultString = result.toString\n\
    \        val firstElementString = firstElement.toString\n        val secondElementString\
    \ = secondElement.toString\n        val sumString = list1.length + list2.length\n\
    \        if (sumString == 0) resultString else resultString + \" + \" + op2 +\
    \ \" \" + resultString + \" + \" + op1 + \" = \" + resultString + \" => \" + firstElementString\
    \ + \" * \" + secondElementString + \" = \" + resultString * firstElementString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3fkyar0.scala:35:21 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = evalAlgebra(operator)(op1,\
    \ op2)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: evalAlgebra\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n      var ret = 0\n      for (i <- operand.indices) {\n        for\
    \ (j <- op.indices) {\n          if (i != j) {\n            val f = j - i + 1\n\
    \            val x = operand(i)\n            val y = op(j)\n            ret +=\
    \ (if (f == 0) {\n                x + y\n              } else if (f < 0) {\n \
    \               x * y\n              } else {\n                x / y\n       \
    \       })\n          }\n        }\n      }\n      ret\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc7k6fxsj.scala:30:16 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            ret += (\e[33mif\e[0m (f == \e[31m0\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmpc7k6fxsj.scala:33:18 -----------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                x * y\n\e[31m\e[31m   |\e[0m             \
    \   ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e\
    [0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\
    \e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e\
    [0mmatch arguments ((y : String))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpc7k6fxsj.scala:35:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                x /\
    \ y\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m/\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e\
    [0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int):\
    \ Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e\
    [31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((y : String))\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val l1 = operand.size()\n        val l2 = op.size()\n  \
    \      if(l1 != l2){\n            throw new IllegalArgumentException(\"The length\
    \ of the operator and operand lists must be equal\")\n        }\n        var sum\
    \ = 0L\n        for(i <- l1 to l2){\n            sum += operand(i) * op(l1 - 1\
    \ - i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmprf1snp02.scala:23:25 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36ml1\e[0m = operand.size()\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \            \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmprf1snp02.scala:24:20 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = op.size()\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \e[33mmethod\e\
    [0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Initialize result to 0\n        var result = 0L\n   \
    \     \n        // Loop to iterate over each element of operand list using index\n\
    \        for (i <- 0 until operand.size) {\n            // Initialize a temporary\
    \ variable to hold the result of the operation\n            var tempResult = 0L\n\
    \            \n            // Loop to iterate over each element of operator list\
    \ using index\n            for (j <- 0 until op.size) {\n                // Use\
    \ switch/case to determine the type of operator and operand\n                \n\
    \                switch (op(j)) {\n                    // Addition operation\n\
    \                    case \"+\" => tempResult = tempResult + operand(i) \n   \
    \                     // Break out of inner loop\n                        break\n\
    \                    \n                    // Subtraction operation\n        \
    \            case \"-\" => tempResult = tempResult - operand(i)\n            \
    \            // Break out of inner loop\n                        break\n     \
    \               \n                    // Multiplication operation\n          \
    \          case \"*\" => tempResult = tempResult * operand(i)\n              \
    \          // Break out of inner loop\n                        break\n       \
    \             \n                    // Floor division operation\n            \
    \        case \"//\" => tempResult = tempResult // operand(i)\n              \
    \          // Break out of inner loop\n                        break\n       \
    \             \n                    // Exponentiation operation\n            \
    \        case \"**\" => tempResult = tempResult ** operand(i)\n              \
    \          // Break out of inner loop\n                        break\n       \
    \                 \n                    // Error handling\n                  \
    \  case _ => println(\"Invalid operator\")\n                        // Break out\
    \ of inner loop\n                        break\n                }\n          \
    \  }\n            // Use mutable variable to hold the final result\n         \
    \   result = result + tempResult\n        }\n        \n        // Return final\
    \ result\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsh8nafpm.scala:35:16 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                switch (op(j)) {\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: switch\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n        var sum = 0\n        var\
    \ opIndex = -1\n        for (i <- 0 to (operand.length - 1) ) {\n            sum\
    \ +=  operand(i) * Math.pow(Double.PositiveInfinity, opIndex * 2)\n          \
    \  opIndex -=  1\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdpduulrw.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            sum +=  operand(i) * Math.pow(Double.PositiveInfinity,\
    \ opIndex * \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // For each operator, get the corresponding function in\
    \ Math object\n        val operations = op.map(operation => (operation -> Math.getOperator(operation)))\n\
    \        // For each operand, get the corresponding function in Math object\n\
    \        val operands = operand.map(operand => (operand -> Math.getOperand(operand)))\n\
    \        // Build the final expression\n        (0 until operations.length).map(i\
    \ => operations(i)(operands(i)))\n            .foldLeft(0)((x, y) => x + y)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9hm32hg5.scala:24:64 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = op.map(\e\
    [36moperation\e[0m => (operation -> Math.getOperator(operation)))\n\e[31m\e[31m\
    \   |\e[0m                                                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value getOperator is not a member\
    \ of object Math\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9hm32hg5.scala:26:63\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36moperands\e[0m = operand.map(\e[36moperand\e[0m => (operand -> Math.getOperand(operand)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value getOperand\
    \ is not a member of object Math\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hm32hg5.scala:28:67\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        (\e[31m0\e[0m until operations.length).map(\e\
    [36mi\e[0m => operations(i)(operands(i)))\n\e[31m\e[31m   |\e[0m             \
    \                                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (Long, Nothing)\n\e\
    [31m   |\e[0m                                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operands = new mutable.LinkedList[Long]()\n        for\
    \ (i<- 0 until operand.length) {\n            if (operands(i) > 0 && operands(i)\
    \ < operand(i)) {\n                operands(i) = operand(i)\n            } else\
    \ {\n                operands(i) = operands(i) - 1\n            }\n        }\n\
    \        val operators = new mutable.LinkedList[String]()\n        for (i<- 0\
    \ until op.size) {\n            operators += op(i)\n        }\n        var expression:\
    \ Int = 1\n        for (i<- 0 to operands.size - 1) {\n            expression\
    \ = expression * operands(i)\n        }\n        for (i<- 0 to operators.size\
    \ - 1) {\n            expression = eval(expression, operators(i))\n        }\n\
    \        return expression\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11ppdwww.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moperands\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11ppdwww.scala:31:28\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36moperators\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mString\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp11ppdwww.scala:40:25 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            expression = eval(expression, operators(i))\n\
    \e[31m\e[31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    Not found: eval\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.head\n        val operand1 = operand.head\n\
    \        val operand2 = operand.tail\n        val operator1 = List('+', '*', '/',\
    \ '//', '**').find(_ == operator)\n        val operand1 = List(0, -1, -2, 0, -2,\
    \ -1, -1, 1, -1, 1).find(_ == operand1)\n        val operand2 = List(0, -1, -2,\
    \ 0, -2, -1, -1, 1, -1, 1).find(_ == operand2)\n        val operand1 = operand.map\
    \ { i => (i.toInt * i).toLong }\n        val operand2 = operand.map { i => (i.toInt\
    \ * i).toLong }\n        var result = 0L\n        operand match {\n        case\
    \ head :: tail =>\n            result ++= operand1 match {\n            case 0\
    \ => operand2\n            case 1 => operand1 + operand2\n            case 2 =>\
    \ operand1 - operand2\n            case 3 => operand1 * operand2\n           \
    \ case 4 => operand1 <- (operand1 / operand2)\n            case 5 => operand1\
    \ <- (operand1 <- (operand1 / operand2))\n            case 6 => operand1 <- (operand1\
    \ <- (operand1 <- (operand1 / operand2)))\n            case 7 => operand1 <- (operand1\
    \ <- (operand1 <- (operand1 <- (operand1 / operand2))))\n            case 8 =>\
    \ operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1 /\
    \ operand2)))))\n            case 9 => operand1 <- (operand1 <- (operand1 <- (operand1\
    \ <- (operand1 <- (operand1 / operand2))))))\n            case 10 => operand1\
    \ <- (operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1\
    \ / operand2)))))))\n            case 11 => operand1 <- (operand1 <- (operand1\
    \ <- (operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1 / operand2)))))))\n\
    \            case 12 => operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1\
    \ <- (operand1 <- (operand1 <- (operand1 / operand2)))))))\n            case 13\
    \ => operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1\
    \ <- (operand1 <- (operand1 / operand2)))))))\n            case 14 => operand1\
    \ <- (operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1 <- (operand1\
    \ <- (operand1 / operand2)))))))\n            case 15 => operand1 <- (operand1\
    \ <- (operand1 <- (\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5h6pkqqx.scala:26:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36moperator1\e[0m = List(\e\
    [31m'+'\e[0m, \e[31m'*'\e[0m, \e[31m'/'\e[0m, \e[31m'//\e[0m', \e[31m'**\e[0m').find(_\
    \ == operator)\n\e[31m\e[31m   |\e[0m                                        \
    \    ^\e[0m\n\e[31m   |\e[0msymbol literal '// is no longer supported,\n\e[31m\
    \   |\e[0muse a string literal \"//\" or an application Symbol(\"//\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{//} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmp5h6pkqqx.scala:26:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36moperator1\e[0m = List(\e[31m'+'\e[0m, \e[31m'*'\e[0m, \e\
    [31m'/'\e[0m, \e[31m'//\e[0m', \e[31m'**\e[0m').find(_ == operator)\n\e[31m\e\
    [31m   |\e[0m                                               ^\e[0m\n\e[31m   |\e\
    [0m                                              unclosed character literal\n\e\
    [31m\e[31m-- Error: /tmp/tmp5h6pkqqx.scala:26:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36moperator1\e[0m = List(\e\
    [31m'+'\e[0m, \e[31m'*'\e[0m, \e[31m'/'\e[0m, \e[31m'//\e[0m', \e[31m'**\e[0m').find(_\
    \ == operator)\n\e[31m\e[31m   |\e[0m                                        \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \      unclosed character literal\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5h6pkqqx.scala:58:1 ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m}\n\
    \e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m\
    \ Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        require(op.length == operand.length - 1)\n        val opMap\
    \ = {\n            val (key, value) = op.zip(operand.drop(1)).toMap\n        \
    \    require(value >= 0)\n            key\n        }\n        val ops = List(\"\
    +\", \"*\", \"/\", \"//\", \"**\")\n        val numOperators = {\n           \
    \ val numOperators = ops.map(o => opMap(o).length)\n            require(numOperators.sum\
    \ == ops.length, \"Not all operators have same number of operands\")\n       \
    \     numOperators\n        }\n        val opList = ops.map(o => o + \" \")\n\
    \        val operandList = operand.map(i.toString)\n        val operatorList =\
    \ numOperators.map { n => n + \" \" }\n        val numOperands = operand.length\n\
    \        val result = operandList.toList.foldLeft(0) { (result, o) =>\n      \
    \      if (opMap(o) match {\n                case \"+\" => result + operand(o)\n\
    \                case \"-\" => result - operand(o)\n                case \"*\"\
    \ => result * operand(o)\n                case \"//\" => result / operand(o)\n\
    \                case \"**\" => result ** operand(o)\n                case _ =>\
    \ throw new RuntimeException(\"Unexpected operator\")\n            }) else {\n\
    \                throw new RuntimeException(\"Unexpected operand\")\n        \
    \    }\n        }\n        val resultString = result.toString\n        val resultInt\
    \ = resultString.toInt\n        require(resultInt == result)\n        resultInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps6uncjky.scala:47:15 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            }) \e[33melse\e[0m {\n\e[31m\e[31m   |\e\
    [0m               ^^^^\e[0m\n\e[31m   |\e[0m               'then' expected, but\
    \ 'else' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps6uncjky.scala:26:26\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            require(value\
    \ >= \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue >= is not a member of Any, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmps6uncjky.scala:31:44\
    \ -----------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e\
    [0m \e[36mnumOperators\e[0m = ops.map(\e[36mo\e[0m => opMap(o).length)\n\e[31m\e\
    [31m   |\e[0m                                            ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                    \e[33mvalue\e[0m \e[35mopMap\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmps6uncjky.scala:32:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m32 |\e[0m       \
    \     require(numOperators.sum == ops.length, \e[31m\"Not all operators have same\
    \ number of operands\"\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \          ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mIntIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e\
    [0m \e[35mShortIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type\
    \ Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6uncjky.scala:36:38\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36moperandList\e[0m = operand.map(i.toString)\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660013203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = mutable.Stack[Long]()\n        stack.push(0)\n\
    \        var i = 0\n        while (i < operand.size - 1) {\n            val curr\
    \ = stack.pop()\n            val next = operand(i + 1)\n            stack.push((op(curr,\
    \ next) * curr) + (op(curr, next) * next))\n            i += 1\n        }\n  \
    \      stack.pop()\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuyk837v8.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operandList = mutable.ListBuffer[Long]()\n        val\
    \ operatorList = mutable.ListBuffer[String]()\n        for (i <- operand.indices)\n\
    \            operandList += operand(i)\n        for (i <- op.indices) \n     \
    \       operatorList += op(i)\n\n        // check parameters\n        if (operandList.size\
    \ < 1 || operatorList.size < 2)\n            throw new IllegalArgumentException(\"\
    Not enough operands or operators\")\n        val length = operatorList.size\n\
    \        for (i <- operandList.indices)\n            if (operandList(i) < 0)\n\
    \                throw new IllegalArgumentException(\"Operands must be positive\"\
    )\n\n        // check operators\n        if (length % 2 != 0)\n            throw\
    \ new IllegalArgumentException(\"Not an algebric expression\")\n\n        // build\
    \ the operator expression \n        var exp = List[String]()\n        var temp\
    \ = 0L\n        for (i <- 0 until length / 2)\n            temp += operand(operandList.size\
    \ - 1 - i)\n        for (i = length / 2; i < (length / 2) + length) \n       \
    \     exp += operatorList(i - length)\n        exp = exp :+ operatorList(length\
    \ - 1) \n            \n        // evaluate expression\n        var res = 0L\n\
    \        val l = operandList.size\n        for (i <- 0 until l)\n            res\
    \ = res + exp(i) * temp\n            \n        return res;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpijsplvb5.scala:47:15 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mfor\e[0m (i = length / \e[31m2\e[0m; i\
    \ < (length / \e[31m2\e[0m) + length) \n\e[31m\e[31m   |\e[0m               ^\e\
    [0m\n\e[31m   |\e[0m               ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpijsplvb5.scala:47:54 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mfor\e[0m (i = length / \e[31m2\e[0m; i\
    \ < (length / \e[31m2\e[0m) + length) \n\e[31m\e[31m   |\e[0m                \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                             '<-' expected, but ')' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpijsplvb5.scala:23:26 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moperandList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpijsplvb5.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperatorList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpijsplvb5.scala:47:27 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mfor\e[0m (i = length / \e[31m2\e[0m; i\
    \ < (length / \e[31m2\e[0m) + length) \n\e[31m\e[31m   |\e[0m                \
    \           ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIt"
  stdout: ''
  timestamp: 1660013202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val ops = op.map(c => c.toLong)\n        val operands =\
    \ operand.map(_.toLong)\n        var result = 0\n        // evaluate each operand/operator\n\
    \        val opersIterator = ops.iterator\n        val operandsIterator = operands.iterator\n\
    \        while (opersIterator.hasNext && operandsIterator.hasNext) {\n       \
    \     val op = opersIterator.next()\n            val operand = operandsIterator.next()\n\
    \            result += (op + operand) * operand\n        }\n        result * operands.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9o3v35l.scala:32:19 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            result += (op + operand) * operand\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660013199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n        val res=operand.foldLeft(0)((a,b)\
    \ => a * b)\n        val ops = op.zip(operand).map { case (op, a) => op.asInstanceOf[String]\
    \ + \"(\" + a + \")\" }.mkString(\"+\")\n        val eval = ops.substring(0, ops.length\
    \ - 1) + \"=\" + res\n        val eval2=eval.substring(eval.lastIndexOf('=')+1)\n\
    \        eval2.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppa7w93sb.scala:24:45\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m=operand.foldLeft(\e[31m0\e[0m)((\e[36ma\e[0m,\e[36mb\e[0m) => a * b)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                             Found:    Long\n\e[31m \
    \  |\e[0m                                             Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operandLength = operand.length\n        val operatorLength\
    \ = op.size\n        if (operandLength < operatorLength) {\n            val operandCopy\
    \ = operand.clone()\n            val operatorCopy = op.clone()\n            while\
    \ (operandCopy.length < operatorLength) {\n                operatorCopy.add(\"\
    0\")\n            }\n            val ans = doAlgebra(operatorCopy, operandCopy)\n\
    \            if (operandCopy.length < operatorLength) {\n                val operandCopy\
    \ = operand.clone()\n                val operatorCopy = op.clone()\n         \
    \       while (operandCopy.length < operatorLength) {\n                    operatorCopy.remove(0)\n\
    \                }\n                operandCopy.foreach(x => ans = ans - x)\n\
    \            }\n            ans\n        } else {\n            val ans = doAlgebra(op,\
    \ operand.take(operandLength - operatorLength).map(x => operand(0) - x))\n   \
    \         ans + doAlgebra(op, operand.take(operandLength - operatorLength).reverse.map(x\
    \ => operand(operandLength - 1) - x))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt683yh2i.scala:26:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36moperandCopy\e[0m = operand.clone()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m\e[33mmethod\e[0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e\
    [0m cannot be accessed as a member of (operand : List[Long]) from module class\
    \ Problem$.\n\e[31m   |\e[0m Access to protected \e[33mmethod\e[0m \e[35mclone\e\
    [0m not permitted because prefix type List[Long]\n\e[31m   |\e[0m does not conform\
    \ to \e[33mobject\e[0m \e[35mProblem\e[0m where the access takes place\n\e[31m\e\
    [31m-- Error: /tmp/tmpt683yh2i.scala:27:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moperatorCopy\e[0m =\
    \ op.clone()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m\e[33mmethod\e[0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e\
    [0m cannot be accessed as a member of (op : List[String]) from module class Problem$.\n\
    \e[31m   |\e[0m Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted\
    \ because prefix type List[String]\n\e[31m   |\e[0m does not conform to \e[33mobject\e\
    [0m \e[35mProblem\e[0m where the access takes place\n\e[31m\e[31m-- Error: /tmp/tmpt683yh2i.scala:33:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m       \
    \         \e[33mval\e[0m \e[36moperandCopy\e[0m = operand.clone()\n\e[31m\e[31m\
    \   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e\
    [33mmethod\e[0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot\
    \ be accessed as a member of (operand : List[Long]) from module class Problem$.\n\
    \e[31m   |\e[0m Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted\
    \ because prefix type List[Long]\n\e[31m   |\e[0m does not conform to \e[33mobject\e\
    [0m \e[35mProblem\e[0m where the access takes place\n\e[31m\e[31m-- Error: /tmp/tmpt683yh2i.scala:34:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m       \
    \         \e[33mval\e[0m \e[36moperatorCopy\e[0m = op.clone()\n\e[31m\e[31m  \
    \ |\e[0m                      "
  stdout: ''
  timestamp: 1660013199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opArray = operator.get(op(0))\n        var result :\
    \ Long = 0\n        for(i <- 1 to operand.length - 1) {\n            val firstOp\
    \ = opArray(0) \n            val secondOp = opArray(1) \n            val firstOperand\
    \ = operand(i) \n            val secondOperand = operand(i+1) \n            val\
    \ firstResult = firstOp(firstOperand) \n            val secondResult = secondOp(secondOperand)\n\
    \            result += (firstResult + secondResult)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp56fhp46s.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopArray\e[0m = operator.get(op(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: operator\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7_zdlta.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// Write your code here\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val op = operand.map(_ toLong)\n        val operators =\
    \ op.lastOption\n        val operator = operators.getOrElse(\"\")\n        val\
    \ operands = operand.drop(1).map(_.toLong)\n        val numList = List(operands.sum,\
    \ operands.lastOption)\n        val denList = List(operands.last, operands.lastOption)\n\
    \        val op = operands.sum.toLong\n        val den = denList.sum\n       \
    \ val result = op.pow(den)\n        val num = new BigDecimal(op)\n        val\
    \ den = new BigDecimal(den)\n        val result = new BigDecimal(result)\n   \
    \     num.setScale(den, BigDecimal.ROUND_HALF_UP)\n        result.setScale(den,\
    \ BigDecimal.ROUND_HALF_UP)\n        result.setScale(1, BigDecimal.ROUND_HALF_UP)\n\
    \        result * num\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxcuu728j.scala:23:37 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mop\e[0m = operand.map(_\
    \ toLong)\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e\
    [31m   |\e[0m                                     expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxcuu728j.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mop\e[0m = operands.sum.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mop is already defined as \e[33mvalue\e[0m \e[35mop\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxcuu728j.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mden\e[0m = \e[33mnew\e[0m \e[35mBigDecimal\e\
    [0m(den)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mden is already defined as \e[33mvalue\e[0m \e[35mden\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxcuu728j.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m \e[35mBigDecimal\e\
    [0m(result)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpxcuu728j.scala:30:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m       \
    \ \e[33mval\e[0m \e[36mden\e[0m = denList.sum\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0m             No implicit Ordering\
    \ defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m             where:    B is a\
    \ type variable wit"
  stdout: ''
  timestamp: 1660013203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (operand.length <= 1) {\n            return 0\n     \
    \   }\n        // add all operands\n        var total = operand(0)\n        //\
    \ loop through the operands, add each operand\n        for (i <- 1 to operand.length\
    \ - 1) {\n            total = add(total, operand(i))\n        }\n        // loop\
    \ through the operators, add the result of that\n        var op1 = 0L\n      \
    \  var op2 = 0L\n        var op3 = 0L\n        var op4 = 0L\n        var op5 =\
    \ 0L\n        var op6 = 0L\n        var op7 = 0L\n        var op8 = 0L\n     \
    \   var op9 = 0L\n        var op10 = 0L\n        var op11 = 0L\n        var op12\
    \ = 0L\n        var op13 = 0L\n        var op14 = 0L\n        var op15 = 0L\n\
    \        var op16 = 0L\n        var op17 = 0L\n        var op18 = 0L\n       \
    \ var op19 = 0L\n        var op20 = 0L\n        var op21 = 0L\n        var op22\
    \ = 0L\n        var op23 = 0L\n        var op24 = 0L\n        var op25 = 0L\n\
    \        var op26 = 0L\n        var op27 = 0L\n        var op28 = 0L\n       \
    \ var op29 = 0L\n        var op30 = 0L\n        var op31 = 0L\n        var op32\
    \ = 0L\n        var op33 = 0L\n        var op34 = 0L\n        var op35 = 0L\n\
    \        var op36 = 0L\n        var op37 = 0L\n        var op38 = 0L\n       \
    \ var op39 = 0L\n        var op40 = 0L\n        var op41 = 0L\n        var op42\
    \ = 0L\n        var op43 = 0L\n        var op44 = 0L\n        var op45 = 0L\n\
    \        var op46 = 0L\n        var op47 = 0L\n        var op48 = 0L\n       \
    \ var op49 = 0L\n        var op50 = 0L\n        var op51 = 0L\n        var op52\
    \ = 0L\n        var op53 = 0L\n        var op54 = 0L\n        var op55 = 0L\n\
    \        var op56 = 0L\n        var op57 = 0L\n        var op58 = 0L\n       \
    \ var op59 = 0L\n        var op60 = 0L\n        var op61 = 0L\n        var op62\
    \ = 0L\n        var op63 = 0L\n        var op64 = 0L\n        var op65 = 0L\n\
    \        var op66 = 0L\n        var op67 = 0L\n        var op68 = 0L\n       \
    \ var op69 = 0L\n        var op70 = 0L\n        var op71 = 0L\n        var op72\
    \ = 0L\n        var op73 = 0L\n        var op74 = 0L\n        var op75 = 0L\n\
    \        var op76 = 0L\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6bfe4q9h.scala:30:20 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            total = add(total, operand(i))\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: add\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6bfe4q9h.scala:109:5\
    \ --------------------\e[0m\e[0m\n\e[31m109 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ Long\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val sum = 0\n        val temp1 = \"\"\n        val temp2\
    \ = \"\"\n        var i = operand.head\n        var j = operand.last\n       \
    \ while (j > 0) {\n            sum = 0\n            while (i < j) {\n        \
    \        sum = sum + operand(i) * op(i - 1)\n                i += 1\n        \
    \    }\n            while (i < j) {\n                sum = sum + operand(i) *\
    \ op(i - 1)\n                i += 1\n            }\n            j = j - 1\n  \
    \          temp1 = \"(\" + operand(0) + \")\"\n            temp2 = \"(\" + sum\
    \ + \")\"\n            sum = temp1 + temp2\n        }\n        sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\"\
    , \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) ==\
    \ (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpovvz0sk_.scala:29:16 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            sum = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val sum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovvz0sk_.scala:31:36\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                sum = sum + operand(i)\
    \ * op(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                    Found:    (i\
    \ : Long)\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovvz0sk_.scala:31:44\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                sum = sum + operand(i)\
    \ * op(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \         Found:    Long\n\e[31m   |\e[0m                                    \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovvz0sk_.scala:35:36\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                sum = sum + operand(i)\
    \ * op(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                    Found:    (i\
    \ : Long)\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovvz0sk_.scala:35:44\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                sum = sum + operand(i)\
    \ * op(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \         Found:    Long\n\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1660013202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val evalList = (operand ::: op(0 until operand.length)).map{x\
    \ => math.pow(Double(x), Double(operand.last))}.toList.sum\n        evalList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvx1zz5eg.scala:23:39\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mevalList\e\
    [0m = (operand ::: op(\e[31m0\e[0m until operand.length)).map{\e[36mx\e[0m =>\
    \ math.pow(Double(x), Double(operand.last))}.toList.sum\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                       Found:    Range\n\e[31m   |\e[0m\
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operator = op.map { x => x.toLong }\n        val operand2\
    \ = operand.map { x => x.toLong }\n        val length = operand2.size + 1\n  \
    \      val opList = new scala.collection.mutable.ArrayBuffer[String](operator.length)\n\
    \        val opMap = new scala.collection.mutable.HashMap[String, Long]()\n  \
    \      operator.zipWithIndex.foreach { x => opList += x._1 + x._2 }\n        val\
    \ opMap2 = operand2.zipWithIndex.map{ x => (x._1, x._2 + 1) }\n        opMap.putAll(opMap2)\n\
    \        val value = opList.foldLeft((0L,0L)) { \n            (acc, x) => { \n\
    \                val key = opMap.get(x)\n                if (key != null)\n  \
    \                  acc + (key * x._1) + (key * x._2) \n                else\n\
    \                    acc + (x._1 * x._2) \n            }\n        }\n        value._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy8kgkeaz.scala:28:64\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        operator.zipWithIndex.foreach\
    \ { \e[36mx\e[0m => opList += x._1 + x._2 }\n\e[31m\e[31m   |\e[0m           \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                        Found:    Int\n\e[31m\
    \   |\e[0m                                                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8kgkeaz.scala:30:14\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        opMap.putAll(opMap2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue putAll is\
    \ not a member of scala.collection.mutable.HashMap[String, Long], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.mutableMap AsJavaMap\n\e[31m\
    \   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableMap AsJavaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsJavaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.map AsJavaMap\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8kgkeaz.scala:35:24\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                    acc +\
    \ (key * x._1) + (key * x._2) \n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (Long, Long), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpy8kgkeaz.scala:35:31 ------------------------\e\
    [0m\e[0m\n\e[31m35"
  stdout: ''
  timestamp: 1660013205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opList = op.map(_.toUpperCase()).filterNot(_.equals(\"\
    NOT\"))\n        var opItr = opList.iterator\n        var operandItr = operand.iterator\n\
    \n        while (opItr.hasNext) {\n            var opStr = opItr.next()\n    \
    \        var opVal = operandItr.next()\n\n            if (opStr == \"*\") {\n\
    \                val newVal = opVal * operandItr.next()\n                operandItr.next()\n\
    \                return newVal\n            } else if (opStr == \"/\") {\n   \
    \             val newVal = opVal / operandItr.next()\n                operandItr.next()\n\
    \                return newVal\n            } else if (opStr == \"//\") {\n  \
    \              val newVal = opVal / operandItr.next()\n                operandItr.next()\n\
    \                return newVal\n            } else if (opStr == \"**\") {\n  \
    \              val newVal = opVal ** operandItr.next()\n                operandItr.next()\n\
    \                return newVal\n            } else if (opStr == \"+\") {\n   \
    \             val newVal = opVal + operandItr.next()\n                operandItr.next()\n\
    \                return newVal\n            } else if (opStr == \"-\") {\n   \
    \             val newVal = opVal - operandItr.next()\n                operandItr.next()\n\
    \                return newVal\n            } else {\n                throw new\
    \ Exception(\"Invalid operator \" + opStr)\n            }\n        }\n       \
    \ return 0\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9uu9i_cp.scala:44:35 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                \e[33mval\e[0m \e[36mnewVal\e[0m = opVal\
    \ ** operandItr.next()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value ** is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var res = 0\n        val exprs = op.zip(operand)\n     \
    \   exprs.foreach(e => res = res + e._1 * e._2)\n        return res\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\"\
    , \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) ==\
    \ (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpov923nu2.scala:25:48\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        exprs.foreach(\e[36me\e\
    [0m => res = res + e._1 * e._2)\n\e[31m\e[31m   |\e[0m                       \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                   Found:    Long\n\e[31m   |\e[0m                          \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if(op.isEmpty || operand.isEmpty) {\n            println(\"\
    Invalid input\")\n            return 0\n        }\n\n        var res = 0\n   \
    \     val ops = op.toSet\n        val vals = operand.toSet\n        ops foreach\
    \ (opStr => {\n            vals foreach (v => {\n                if(opStr == \"\
    +\" || opStr == \"-\")\n                    res += v\n                if(opStr\
    \ == \"*\" || opStr == \"/\")\n                    res += v.toInt\n          \
    \      if(opStr == \"**\")\n                    res += v.toLong\n            })\n\
    \        })\n        return res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxxu0dt0f.scala:34:24 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    res += v\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxxu0dt0f.scala:38:24 ------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m                    res += v.toLong\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = 0\n        var i = 0\n        while(i < operand.size)\
    \ {\n            var operator = op(i) // The operator at position i of operand\
    \ list \n            var operand1 = operand(i) // The operand at position i of\
    \ operand list \n            var operand2 = operand(i + 1) // The operand at position\
    \ i + 1 of operand list \n            if (operator == \"+\") {\n             \
    \   result += operand1\n                i += 2\n            } else if (operator\
    \ == \"-\") {\n                result -= operand1\n                i += 2\n  \
    \          } else if (operator == \"*\") {\n                result *= operand1\n\
    \                i += 2\n            } else if (operator == \"/\") {\n       \
    \         if (operand2 == 0)\n                    throw new Exception(\"Division\
    \ by zero!\")\n                result /= operand1\n                i += 2\n  \
    \          } else if (operator == \"**\") {\n                result *= operand1\n\
    \                result *= operand2\n                result *= operand1\n    \
    \            i += 2\n            } else {\n                throw new Exception(\"\
    Invalid operator!\")\n            }\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnho6smf7.scala:30:23 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                result += operand1\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnho6smf7.scala:33:23 ------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m                result -= operand1\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnho6smf7.scala:36:23\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                result *=\
    \ operand1\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value *= is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnho6smf7.scala:41:23 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                result /= operand1\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value /= is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnho6smf7.scala:44:23 ------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m                result *= operand1\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnho6smf7.scala:45:23\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m                result *=\
    \ operand2\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value *= is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnho6smf7.scala:46:23 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                result *= operand1\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is\
    \ not a member of Int - did you mean Int.!=?\n7 errors found\n"
  stdout: ''
  timestamp: 1660013206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = 0\n        // This list will hold the expression\
    \ generated by basic algebra operation on the operand\n        var expressionList:\
    \ List[String] = Nil\n        val operator = op.head\n        // Iterate through\
    \ the operand list\n        for (i <- 1 to operand.size) {\n            val currentOperand\
    \ = operand(i-1).toLong\n            // Construct expression\n            val\
    \ expression = currentOperand match {\n                case 1 : expressionList\
    \ = List(\"1\")\n                case 0 : expressionList = List(\"2\")\n     \
    \           case 2 : expressionList = List(\"2\", \"+\", expressionList(0))\n\
    \                case 3 : expressionList = List(\"2\", \"+\", expressionList(0),\
    \ \"+\", expressionList(0))\n                case 4 : expressionList = List(\"\
    2\", \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0))\n\
    \                case 5 : expressionList = List(\"2\", \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0))\n\
    \                case 6 : expressionList = List(\"2\", \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0))\n                case 7 : expressionList = List(\"\
    2\", \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0))\n                case 8\
    \ : expressionList = List(\"2\", \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0))\n                case 9 : expressionList = List(\"\
    2\", \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0))\n                case 10 : expressionList = List(\"\
    2\", \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0))\n                case 11 : expressionList = List(\"\
    2\", \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0))\n                case 12\
    \ : expressionList = List(\"2\", \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0))\n                case 13 : expressionList = List(\"\
    2\", \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\", expressionList(0), \"+\", expressionList(0), \"+\", expressionList(0),\
    \ \"+\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphp62x4ci.scala:32:40 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m : expressionList\
    \ = List(\e[31m\"1\"\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \            ^\e[0m\n\e[31m   |\e[0m                                        '=>'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphp62x4ci.scala:33:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mcase\e\
    [0m \e[31m0\e[0m : expressionList = List(\e[31m\"2\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                        ^\e[0m\n\e[31m   |\e[0m           \
    \                             '=>' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmphp62x4ci.scala:34:40 ---------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                \e[33mcase\e[0m \e[31m2\e[0m : expressionList\
    \ = List(\e[31m\"2\"\e[0m, \e[31m\"+\"\e[0m, expressionList(\e[31m0\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e\
    [0m                                        '=>' expected, but '=' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmphp62x4ci.scala:35:40 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mcase\e[0m \e[31m3\e[0m : expressionList\
    \ = List(\e[31m\"2\"\e[0m, \e[31m\"+\"\e[0m, expressionList(\e[31m0\e[0m), \e\
    [31m\"+\"\e[0m, expressionList(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                  '=>' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmphp62x4ci.scala:36:40 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m                \e[33mcase\e[0m \e[31m4\e[0m : expressionList = List(\e\
    [31m\"2\"\e[0m, \e[31m\"+\"\e[0m, expressionList(\e[31m0\e[0m), \e[31m\"+\"\e\
    [0m, expressionList(\e[31m0\e[0m), \e[31m\"+\"\e[0m, expressionList(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                        '=>' expected, but '=' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphp62x4ci.scala:37:40 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0"
  stdout: ''
  timestamp: 1660013202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Your code goes here\n        val sum = 0\n        val\
    \ stack = mutable.Stack[Int]()\n        val result = operand.head \n\n       \
    \ for(i <- 0 until operand.size) {\n            val oper = op(i)\n           \
    \ val num = operand.tail(i)\n            val op = oper\n            if(oper ==\
    \ '+') {\n                sum += num\n            }\n            if(oper == '-')\
    \ {\n                sum -= num\n            }\n            if(oper == '*') {\n\
    \                sum *= num\n            }\n            if(oper == '/') {\n  \
    \              sum /= num\n            }\n            if(oper == '%') {\n    \
    \            sum %= num\n            }\n            if(oper == '**') {\n     \
    \           sum **= num\n            }\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\"\
    , \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) ==\
    \ (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph2xi7_zk.scala:47:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            \e[33mif\e[0m(oper == \e[31m'**\e[0m') {\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0msymbol literal\
    \ '** is no longer supported,\n\e[31m   |\e[0muse a string literal \"**\" or an\
    \ application Symbol(\"**\") instead,\n\e[31m   |\e[0mor enclose in braces '{**}\
    \ if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import\
    \ language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom, but\
    \ this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ Error: /tmp/tmph2xi7_zk.scala:47:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            \e[33mif\e[0m(oper == \e[31m'**\e[0m') {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   unclosed character literal\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmph2xi7_zk.scala:25:20 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmph2xi7_zk.scala:33:20 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m                sum += num\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value += is not a member of Int - did you mean\
    \ sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph2xi7_zk.scala:36:20\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                sum -= num\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value -= is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmph2xi7_zk.scala:39:20 ------------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m                sum *= num\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member\
    \ of Int - did you mean sum.!=?\n\e[3"
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opArray = op.map { elem =>\n            elem match {\n\
    \                case op1 =>\n                    val op2Index = operand .indexOf(elem)\
    \ + 1\n                    if(op2Index < operand.length)\n                   \
    \     operand(op2Index) else 0\n                case op2 =>\n                \
    \    val op1Index = operand .indexOf(elem) + 1\n                    if(op1Index\
    \ < operand.length)\n                        operand(op1Index) else 0\n      \
    \      }\n        }\n        // opArray contains [op1, op2] where op1 = opArray(0)\n\
    \        // op2 can be 0\n        val op1 = opArray(0);\n        val op2 = opArray(1);\n\
    \        if(op1 == 0)\n            val op1Value = opArray(2)\n            if(op2\
    \ == 0)\n                val op2Value = opArray(3)\n                return op1Value\
    \ + op2Value\n            else\n                val op2Index = operand .indexOf(op2)\n\
    \                if(op2Index < operand.length)\n                    operand(op2Index)\
    \ else 0\n            else\n                val op2Value = opArray(3)\n      \
    \          val op2Index = operand .indexOf(op2)\n                if(op2Index <\
    \ operand.length)\n                    operand(op2Index) else 0\n            val\
    \ op1Index = operand .indexOf(op1)\n                if(op1Index < operand.length)\n\
    \                    operand(op1Index) else 0\n            val op1Value = opArray(2)\n\
    \                if(op1Index < operand.length)\n                    operand(op1Index)\
    \ else 0\n            return op1Value + op2Value\n        else\n            val\
    \ op1Value = opArray(2)\n            val op1Index = operand .indexOf(op1)\n  \
    \          val op2Value = opArray(3)\n            val op2Index = operand .indexOf(op2)\n\
    \            if(op1Index < operand.length && op2Index < operand.length)\n    \
    \            operand(op1Index + op2Index) else 0\n            else\n         \
    \       0\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1tbdz87c.scala:60:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^\e[0m\n\e[31m   |\e[0m        end of statement expected but 'else' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1tbdz87c.scala:67:12 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m            \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^\e[0m\n\e[31m   |\e[0m            '}' expected, but unindent found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1tbdz87c.scala:62:16 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m            \e[33mval\e[0m \e[36mop1Index\e[0m = operand\
    \ .indexOf(op1)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mop1Index is already defined as \e[33mvalue\e[0m \e[35mop1Index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660013202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Write your code here\n        val operatorStack = mutable.Stack[String]()\n\
    \        val operandStack = mutable.Stack[Long]()\n        operandStack.clear()\n\
    \        operatorStack.clear()\n        var result = 0L\n        while(!operatorStack.isEmpty\
    \ && !operandStack.isEmpty) {\n            val operator = operatorStack.pop()\n\
    \            val operand = operandStack.pop()\n            val operation = operators(operator)\n\
    \            val operandResult = operation(operand)\n            result += operandResult\n\
    \            operandStack.push(operandResult)\n        }\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2ybzpa5.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperatorStack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2ybzpa5.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moperandStack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2ybzpa5.scala:32:28 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36moperation\e[0m = operators(operator)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Not found: operators\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val a = operand(0)\n        val b = operand(1)\n       \
    \ val c = operand(2)\n\n        val opList = op match {\n            case op1\
    \ :: op2 :: _ => op1 :: op2\n            case _ => List()\n        }\n       \
    \ val opLength = opList.length\n\n        // For each operator and operand, compute\
    \ its value\n        // If the result is 0, return 0, else return the result from\
    \ previous recursive call.\n        def loop(i: Int, acc: Long) : Long = {\n \
    \           val op = opList(i)\n            val n = operand length\n         \
    \   val left = operand(i + 1)\n            val right = operand(i + 2)\n      \
    \      val operation = op match {\n                case \"+\" => a + b\n     \
    \           case \"-\" => a - b\n                case \"*\" => a * b\n       \
    \         case \"/\" => a / b\n                case \"%\" => a % b\n         \
    \       case \"**\" => a * b\n                case _ => throw new Exception(\"\
    Invalid operator: \" + op)\n            }\n            if(operation == 0) {\n\
    \                return acc\n            }\n            loop(i - 1, operation\
    \ % a + operation * loop(i + 1, operation + left))\n        }\n        loop(opLength,\
    \ 0) \n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk6yqocw2.scala:37:34 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = operand length\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                          expression expected but \e[31mend of statement\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk6yqocw2.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e\
    [0m op1 :: op2 :: _ => op1 :: op2\n\e[31m\e[31m   |\e[0m                     \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \         value :: is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        require(operand.length >= 1)\n        require(operator.length\
    \ >= 1)\n        require(operator.map( e => e + 1).sum == 1)\n        val result\
    \ = 0\n        operand.foreach( e => {\n            val operatorPos = operator.indexOf(e)\n\
    \            if (operatorPos >= 0)\n                result += operator(operatorPos)\
    \ * operand(e).toInt\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo87trxt1.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        require(operator.length >= \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    Not found: operator\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo87trxt1.scala:25:16 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        require(operator.map( \e[36me\e[0m => e + \e[31m1\e[0m).sum == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            Not found: operator\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo87trxt1.scala:28:30 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m            \e[33mval\e[0m \e[36moperatorPos\e[0m = operator.indexOf(e)\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: operator\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpo87trxt1.scala:30:23 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                result += operator(operatorPos) * operand(e).toInt\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      value += is not a member of Int - did you mean result.!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo87trxt1.scala:30:26 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                result += operator(operatorPos) * operand(e).toInt\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Not found: operator\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n      var op1 = op(0)\n      var op2 = op(1)\n      var val1 = operand(0)\n\
    \      var val2 = operand(1)\n      var op3 = op2\n      var op4 = op3\n     \
    \ var op5 = op4\n      var op6 = op5\n      var op7 = op6\n      var op8 = op7\n\
    \      var op9 = op8\n      var op10 = op9\n      var op11 = op10\n      var op12\
    \ = op11\n      var op13 = op12\n      var op14 = op13\n      var op15 = op14\n\
    \      var op16 = op15\n      var op17 = op16\n      var op18 = op17\n      var\
    \ op19 = op18\n      var op20 = op19\n      var op21 = op20\n      var op22 =\
    \ op21\n      var op23 = op22\n      var op24 = op23\n      var op25 = op24\n\
    \      var op26 = op25\n      var op27 = op26\n      var op28 = op27\n      var\
    \ op29 = op28\n      var op30 = op29\n      var op31 = op30\n      var op32 =\
    \ op31\n      var op33 = op32\n      var op34 = op33\n      var op35 = op34\n\
    \      var op36 = op35\n      var op37 = op36\n      var op38 = op37\n      var\
    \ op39 = op38\n      var op40 = op39\n      var op41 = op40\n      var op42 =\
    \ op41\n      var op43 = op42\n      var op44 = op43\n      var op45 = op44\n\
    \      var op46 = op45\n      var op47 = op46\n      var op48 = op47\n      var\
    \ op49 = op48\n      var op50 = op49\n      var op51 = op50\n      var op52 =\
    \ op51\n      var op53 = op52\n      var op54 = op53\n      var op55 = op54\n\
    \      var op56 = op55\n      var op57 = op56\n      var op58 = op57\n      var\
    \ op59 = op58\n      var op60 = op59\n      var op61 = op60\n      var op62 =\
    \ op61\n      var op63 = op62\n      var op64 = op63\n      var op65 = op64\n\
    \      var op66 = op65\n      var op67 = op66\n      var op68 = op67\n      var\
    \ op69 = op68\n      var op70 = op69\n      var op71 = op70\n      var op72 =\
    \ op71\n      var op73 = op72\n      var \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpbk_gpqs9.scala:98:9 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m      \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m        \
    \ ^\e[0m\n\e[31m   |\e[0m         pattern expected\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbk_gpqs9.scala:99:5 ---------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Base Case\n        if (op.size != operand.size || operand.size\
    \ <= 1) {\n            return 0\n        }\n        // Operator list\n       \
    \ var i = 0\n        var opLength = op.size\n        var opArray = Array[String](opLength)\n\
    \        \n        while (i < opLength) {\n            opArray(opLength - i -\
    \ 1) = op(opLength - i - 1)\n            i = i + 1\n        }\n        // operand\
    \ list\n        var j = 0\n        var operandLength = operand.size\n        var\
    \ operandArray = Array[Long](operandLength)\n        \n        while (j < operandLength)\
    \ {\n            operandArray(operandLength - j - 1) = operand(operandLength -\
    \ j - 1)\n            j = j + 1\n        }\n        var result = 0\n        val\
    \ length = opArray.lenth\n        for (i <- 0 until length) {\n            if\
    \ (opArray(i) == \"+\") {\n                result = result + operandArray(i)\n\
    \            } else if (opArray(i) == \"-\") {\n                result = result\
    \ - operandArray(i)\n            } else if (opArray(i) == \"*\") {\n         \
    \       result = result * operandArray(i)\n            } else if (opArray(i) ==\
    \ \"//\") {\n                result = result // operandArray(i)\n            }\
    \ else if (opArray(i) == \"**\") {\n                result = result ** operandArray(i)\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm7c7fau9.scala:30:36\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mopArray\e\
    [0m = Array[\e[35mString\e[0m](opLength)\n\e[31m\e[31m   |\e[0m              \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \            Found:    (opLength : Int)\n\e[31m   |\e[0m                     \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpm7c7fau9.scala:46:29 ------------------------\e[0m\e[0m\n\e[31m46 |\e\
    [0m        \e[33mval\e[0m \e[36mlength\e[0m = opArray.lenth\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue lenth is not\
    \ a member of Array[String] - did you mean Array[String].length?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm7c7fau9.scala:49:25 --------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                result = result + operandArray(i)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m        \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpm7c7fau9.scala:51:25 --------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m                result = result - operandArray(i)\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm7c7fau9.scala:53:25\
    \ --------------------\e[0m\e[0m\n\e[31m53 |\e[0m                result = result\
    \ * operandArray(i)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available"
  stdout: ''
  timestamp: 1660013210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (operand.length < 2) {\n            throw new RuntimeException(\"\
    Not enough operands\")\n        }\n        if (op.length < 1) {\n            throw\
    \ new RuntimeException(\"Not enough operators\")\n        }\n        val newExpr\
    \ = op flatMap { op =>\n            op.toCharArray match {\n                case\
    \ op1 :: op2 :: tail =>\n                    operand match {\n               \
    \         case List() =>\n                            val newExpr1 = op match\
    \ {\n                                case '+' => operand zip operand.tail map\
    \ { \n                                    case (_,r) => r + _\n              \
    \                  }\n                                case '-' => operand zip\
    \ operand.tail map { \n                                    case (_,r) => r - _\n\
    \                                }\n                                case '*' =>\
    \ operand zip operand.tail map { \n                                    case (_,r)\
    \ => r * _\n                                }\n                              \
    \  case '/' => operand zip operand.tail map { \n                             \
    \       case (_,r) => r / _\n                                }\n             \
    \                   case '%' => operand zip operand.tail map { \n            \
    \                        case (_,r) => r % _\n                               \
    \ }\n                                case '**' => operand zip operand.tail map\
    \ { \n                                    case (_,r) => r ** _\n             \
    \                   }\n                            }\n                       \
    \     operand match {\n                                case List() =>\n      \
    \                              val newExpr2 = newExpr1 match {\n             \
    \                           case List() => List()\n                          \
    \              case lst => lst.flatten flatMap { \n                          \
    \                  case (x, y) => newExpr1 match {\n                         \
    \                       case List() => List(x * y)\n                         \
    \                       case lst => lst.flatten flatMap { \n                 \
    \                                   case (x, y) => newExpr1 match {\n        \
    \                                                case List() => List(x * y)\n\
    \                                                        case lst => lst.flatten\
    \ flatMap { \n                                                            case\
    \ (x, y) => newExpr1 match {\n                                               \
    \                 case List() => List(x * y)\n                               \
    \                                 case lst => lst.flatten flatMap { \n       \
    \                                                             case (x, y) => newExpr1\
    \ match {\n                                                                  \
    \      case List() => List(x * y)\n                                          \
    \                              case lst => lst.flatten flatMap { \n          \
    \                                                                  case(x, y)\
    \ => x * y + y\n                                                             \
    \           }\n                                                              \
    \      }\n                                                                }\n\
    \                                                            }\n             \
    \                                           }\n                              \
    \                      }\n                                                }\n\
    \                                            }\n                             \
    \           }\n                                    }\n                       \
    \             newExpr2 match {\n                                        case List()\
    \ => List()\n                                        case lst => lst.flatten flatMap\
    \ { \n                                            case (x, y) => newExpr2 match\
    \ {\n                                                case List() => \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1gfk5hpn.scala:50:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                \e[33mcase\e[0m \e[31m'**\e\
    [0m' => operand zip operand.tail map { \n\e[31m\e[31m   |\e[0m               \
    \                      ^\e[0m\n\e[31m   |\e[0msymbol literal '** is no longer\
    \ supported,\n\e[31m   |\e[0muse a string literal \"**\" or an application Symbol(\"\
    **\") instead,\n\e[31m   |\e[0mor enclose in braces '{**} if you want a quoted\
    \ expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1gfk5hpn.scala:50:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m50 |\e[0m                     \
    \           \e[33mcase\e[0m \e[31m'**\e[0m' => operand zip operand.tail map {\
    \ \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                        '=>' expected, but ' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1gfk5hpn.scala:95:0 ----------------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp1gfk5hpn.scala:35:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                                \e[33mcase\e[0m \e[31m'+'\e\
    [0m => operand zip operand.tail map { \n\e[31m\e[31m   |\e[0m                \
    \                     ^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1gfk5hpn.scala:36:54\
    \ -----------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                   \
    \                 \e[33mcase\e[0m (_,r) => r + _\n\e[31m\e[31m   |\e[0m      \
    \                                                ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => r + _$1.\n\
    \e[31m\e[31m-- Error: /tmp/tmp1gfk5hpn.scala:38:37 -----------------------------------"
  stdout: ''
  timestamp: 1660013212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val length = op.length\n        val operandCopy = mutable.ListBuffer(operand)\n\
    \        if (operand.size == 0) {\n            return 0L\n        }\n        var\
    \ temp = 0L\n        for (i <- 0 to length-1) {\n            val first = operandCopy(0)\n\
    \            val second = operandCopy(1)\n            operandCopy -= 1\n     \
    \       temp := op(first, second)\n        }\n        if (operand.size == 1) {\n\
    \            val first = operandCopy(0)\n            temp := op(first)\n     \
    \   }\n        return temp\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvk0pdh0.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moperandCopy\e[0m = mutable.ListBuffer(operand)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmvk0pdh0.scala:33:17 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            temp := op(first, second)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value := is not\
    \ a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmvk0pdh0.scala:33:23 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m            temp := op(first, second)\n\e[31m\e[31m   |\e[0m         \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (Nothing, Nothing)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmvk0pdh0.scala:37:17\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            temp := op(first)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ := is not a member of Long - did you mean Long.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660013211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opArray = op.toArray\n        var i = 0\n        val\
    \ res = operand.foldLeft(0) {\n        case (acc,a) => (\n            if (a ==\
    \ 0) acc\n            else if (opArray.contains(s\"$a\"))\n                acc\
    \ + a\n            else if (opArray.contains(s\"$(a+1)\"))\n                acc\
    \ + (a+1)\n            else\n                acc\n        )\n        }\n     \
    \   res\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzkr6zcky.scala:30:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (opArray.contains(\e\
    [31ms\"$(a+1)\"\e[0m))\n\e[31m\e[31m   |\e[0m                                \
    \        ^\e[0m\n\e[31m   |\e[0minvalid string interpolation: `$$`, `$\"`, `$`ident\
    \ or `$`BlockExpr expected\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkr6zcky.scala:29:16\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                acc + a\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Long\n\e[31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzkr6zcky.scala:31:16 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                acc + (a+\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Long\n\e[31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Your code here\n        val num = 0L\n        var sum\
    \ = 0L\n        for(i <- 0 until operand.size) {\n            sum += operand(i)\
    \ * op(i)\n            num = sum\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl3ga87wb.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            sum += operand(i) * op(i)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpl3ga87wb.scala:27:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            sum += operand(i)\
    \ * op(i)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e[0m\
    \ in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ (String)\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpl3ga87wb.scala:28:16 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            num = sum\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val num\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var sum = 0\n        for (i<- 0..operand.size - 1) {\n \
    \           sum += operand(i) * operator(op.size - 1, i)\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx89cp5ei.scala:24:19 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m..operand.size\
    \ - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m  \
    \ |\e[0m                   an identifier expected, but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1660013209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n      require(op.size == operand.size -1)\n      val operand2 =\
    \ operand.tail\n      val opList2 = op.dropRight(1)\n      val opList1 = op.takeRight(1)\n\
    \      val opList3 = op.takeRight(1)\n      val opList4 = op.takeRight(1)\n  \
    \    val opList5 = op.takeRight(1)\n      val result = operand2(0)\n      opList2.zipWithIndex.foreach\
    \ { case (op2, idx) =>\n        result += op2(1) * operand2(idx + 1)\n      }\n\
    \      opList3.zipWithIndex.foreach { case (op3, idx) =>\n        result += op3(2)\
    \ * operand2(idx + 1)\n      }\n      opList4.zipWithIndex.foreach { case (op4,\
    \ idx) =>\n        result += op4(3) * operand2(idx + 1)\n      }\n      opList5.zipWithIndex.foreach\
    \ { case (op5, idx) =>\n        result += op5(1) * operand2(idx + 1)\n      }\n\
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp62w9319e.scala:32:15 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        result += op2(\e[31m1\e[0m) * operand2(idx +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value += is not a member of Long - did you mean result.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp62w9319e.scala:35:15 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        result += op3(\e[31m2\e[0m) * operand2(idx +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value += is not a member of Long - did you mean result.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp62w9319e.scala:38:15 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        result += op4(\e[31m3\e[0m) * operand2(idx +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value += is not a member of Long - did you mean result.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp62w9319e.scala:41:15 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        result += op5(\e[31m1\e[0m) * operand2(idx +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value += is not a member of Long - did you mean result.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if(operand.length == 0 || operator.length == 0) {\n    \
    \        return 0;\n        }\n        if(operator.length != operand.length-1)\
    \ {\n            return 0\n        }\n        val operatorMap : Map[String, String]\
    \ = Map(\"+\" -> \"+\",\"-\" -> \"-\",\"*\" -> \"*\",\"/\" -> \"/\",// -> \"//\"\
    ,\n            \"^\" -> \"^\",\"**\" -> \"**\").withDefault(a => throw new NoSuchElementException(a\
    \ + \" is not a valid operator.\"));\n        val numberMap : Map[String, String]\
    \ = Map(\"1\" -> \"+\",\"2\" -> \"*\",\"3\" -> \"-\",\"4\" -> \"/\",// -> \"//\"\
    ,\n            \"5\" -> \"^\",\"6\" -> \"**\").withDefault(a => throw new NoSuchElementException(a\
    \ + \" is not a valid number.\"));\n        val resultMap : Map[String, String]\
    \ = Map(\"+\" -> \"+\",\"-\" -> \"-\",\"*\" -> \"*\",\"/\" -> \"/\",// -> \"//\"\
    ,\n            \"^\" -> \"^\",\"**\" -> \"**\").withDefault(a => throw new NoSuchElementException(a\
    \ + \" is not a valid operator.\"));\n        val operatorName = List(\"Addition\"\
    , \"Subtraction\", \"Multiplication\", \"Floor division\", \"Exponentiation\"\
    );\n        var operands = operand\n        val opList  = op.map(a => operatorMap(a))\n\
    \        val numList  = operand.map(a => numberMap(a))\n        var result = operand(0)\n\
    \        var operator = op.head\n        for(a <- 1 until operand.length) {\n\
    \            if(op(a) == \"+\") {\n                operands = operands.drop(1)\n\
    \                result =  result + operands(a) \n            }\n            else\
    \ if(op(a) == \"-\") {\n                operands = operands.drop(1)\n        \
    \        result =  result - operands(a) \n            }\n            else if(op(a)\
    \ == \"*\") {\n                operands = operands.drop(1)\n                result\
    \ = result * operands(a)\n            }\n            else if(op(a) == \"/\") {\n\
    \                operands = operands.drop(1)\n                result = result\
    \ / operands(a) \n            }\n            else if(op(a) == \"//\") {\n    \
    \            operands = operands.drop(1)\n                result = result % operands(a)\
    \ \n            }\n            else if(op(a) == \"^\") {\n                operands\
    \ = operands.drop(1)\n                result = math.pow(operands(a), operands(a+1))\
    \ \n            }\n            else {\n                operands = operands.drop(1)\n\
    \                result = math.pow(operands(a), operands(a+1)) \n            }\n\
    \        }\n        result(resultMap(operator))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6lm57r7w.scala:38:50\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnumList\e\
    [0m  = operand.map(\e[36ma\e[0m => numberMap(a))\n\e[31m\e[31m   |\e[0m      \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                         Found:    (a : Long)\n\e[31m   |\e[0m\
    \                                                  Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6lm57r7w.scala:64:33 --------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m                result = math.pow(operands(a), operands(a+\e\
    [31m1\e[0m)) \n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Double\n\e[31m   |\e[0m\
    \                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp6lm57r7w.scala:68:33 --------------------\e[0m\e\
    [0m\n\e[31m68 |\e[0m                result = math.pow(operands(a), operands(a+\e\
    [31m1\e[0m)) \n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Double\n\e[31m   |\e[0m\
    \                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmp6lm57r7w.scala:71:8 ------------------------------\e[0m\e\
    [0m\n\e[31m71 |\e[0m        result(resultMap(operator))\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mvariable\e[0m \e[35mresult\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // First we check if the lists have the same length and\
    \ that each element exists in the same list\n        if (op.size != operand.size)\
    \ throw new RuntimeException(\"Operator and Operand lists do not have the same\
    \ length\")\n        \n        // For each element of operand list we find the\
    \ index in operand list where the corresponding \n        // element of operator\
    \ list exists and add this index to the sum obtained so far\n        var index\
    \ = 0\n        var sum = 0L\n        while (index < operand.size && operator(index).contains(op.head))\
    \ {\n            sum += 1L * operand(index)\n            index += 1\n        }\n\
    \        \n        // At this point we know what to return\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiszqol25.scala:30:39 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mwhile\e[0m (index < operand.size && operator(index).contains(op.head))\
    \ {\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Not found: operator\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // your solution code goes here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpthh8inr_.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// your solution code goes\
    \ here\e[0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val operations = op.mkString.toList.groupBy( x => x )\n\
    \        val resultOperator = operations.map( x => x(0) ).toList\n        val\
    \ resultOperand = operations.map( x => x(1) ).toList\n        var result = 0\n\
    \        operand.zipWithIndex.foreach { case (x,i) => result = result + x * resultOperand(i)\
    \ }\n        resultOperator.reverse.foreach { x => result = result + (x + \"!\"\
    ).toLong }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpnp9bmkjh.scala:27:73 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        operand.zipWithIndex.foreach { \e[33mcase\e[0m\
    \ (x,i) => result = result + x * resultOperand(i) }\n\e[31m\e[31m   |\e[0m   \
    \                                                                    ^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ (List[Char])\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnp9bmkjh.scala:28:55\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        resultOperator.reverse.foreach\
    \ { \e[36mx\e[0m => result = result + (x + \e[31m\"!\"\e[0m).toLong }\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // TODO: Complete this\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqd_13gj4.scala:22:68\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mdoAlgebra\e\
    [0m(\e[36mop\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36moperand\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m23 |\e[0m        \e[34m// TODO: Complete this\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opList = op.filterNot(_.isEmpty)\n        val numOperands\
    \ = operand.length - 1\n        val operandList = operand.filterNot(_.isEmpty)\n\
    \        val operandMap : Map[String, Long] = \n            List(opList.head)\
    \ ++ List(\"*\", \"/\", \"//\", \"**\").zip(operandList.tail).map(x => x._1 ->\
    \ x._2)\n\n        operandList.tail.map(x => operandMap(x.toString))\n       \
    \         .foldLeft(0)((a, b) => a + *(b))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn6dzp9m9.scala:25:46 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moperandList\e[0m = operand.filterNot(_.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   value isEmpty is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn6dzp9m9.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            List(opList.head)\
    \ ++ List(\e[31m\"*\"\e[0m, \e[31m\"/\"\e[0m, \e[31m\"//\"\e[0m, \e[31m\"**\"\e\
    [0m).zip(operandList.tail).map(\e[36mx\e[0m => x._1 -> x._2)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    List[Object]\n\e[31m   |\e[0m      \
    \      Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn6dzp9m9.scala:30:43 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                .foldLeft(\e[31m0\e[0m)((a, b) => a +\
    \ *(b))\n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\
    \e[31m   |\e[0m                                           Not found: *\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val ops = op.map(x => x.toString).toSet\n\n        val operands\
    \ = new mutable.ArrayBuffer[Long]()\n        for (i <- 0 until operand.length\
    \ - 1){\n            operands += operand(i)\n        }\n        val result = operands(0)\
    \ * 1\n        for (i <- 1 until operands.length - 1) {\n            var leftOperand\
    \ = operands(0)\n            val rightOperand = operands(i)\n            if (ops.contains(op(i)))\
    \ {\n                result += leftOperand + rightOperand\n            }\n   \
    \         if (ops.contains(op(i-1))) {\n                result -= leftOperand\
    \ - rightOperand\n            }\n            if (ops.contains(op(i+1))) {\n  \
    \              result *= leftOperand * rightOperand\n            }\n         \
    \   if (ops.contains(op(i-1))) {\n                result /= leftOperand / rightOperand\n\
    \            }\n            if (ops.contains(op(i+1))) {\n                result\
    \ // = result * rightOperand\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppwmt2o1k.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moperands\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        require(op.length == operand.length - 1, s\"Length of op\
    \ and op's length must be the same.\")\n        val opList = op.mkString\n   \
    \     val operandList = operand.mkString\n        val result = evalAlgebra(opList,\
    \ operandList)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig_0yd2s.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = evalAlgebra(opList,\
    \ operandList)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: evalAlgebra\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Use your predefined function\n        val res = opArith(op,\
    \ 0, operand, operand + 1, \"\")\n        //res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_rcl7s6f.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = opArith(op, \e\
    [31m0\e[0m, operand, operand + \e[31m1\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ opArith\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_rcl7s6f.scala:24:50\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mres\e[0m = opArith(op, \e[31m0\e[0m, operand, operand + \e[31m1\e[0m, \e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_rcl7s6f.scala:26:5 ---------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def iterate(operand : List[Long], result : List[Long], acc\
    \ : mutable.ArrayBuffer[Long], acc : mutable.ArrayBuffer[Long]) : mutable.ArrayBuffer[Long]\
    \ = {\n            val newOperand = operand ::: acc\n            val newResult\
    \ = result ::: acc\n            val newAcc = newOperand ::: newResult\n      \
    \      if( acc.isEmpty){\n                newAcc\n            }\n            else\
    \ if( op.size == operand.size + 1 ) {\n                newAcc\n            }\n\
    \            else {\n                iterate(newOperand, newResult, newAcc, newAcc)\n\
    \            }\n        }\n        iterate(operand, mutable.ArrayBuffer[Long](),\
    \ mutable.ArrayBuffer[Long](), mutable.ArrayBuffer[Long]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsergx6hm.scala:23:96 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mdef\e[0m \e[36miterate\e[0m(\e[36moperand\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mresult\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m], \e[36macc\e[0m : mutable.ArrayBuffer[\e[35mLong\e[0m], \e[36macc\e\
    [0m : mutable.ArrayBuffer[\e[35mLong\e[0m]) : mutable.ArrayBuffer[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0macc is already defined as \e[33mparameter\e[0m \e[35macc\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpsergx6hm.scala:23:69 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mdef\e[0m \e[36miterate\e[0m(\e[36moperand\e[0m :\
    \ \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mresult\e[0m : \e[35mList\e[0m[\e[35mLong\e\
    [0m], \e[36macc\e[0m : mutable.ArrayBuffer[\e[35mLong\e[0m], \e[36macc\e[0m :\
    \ mutable.ArrayBuffer[\e[35mLong\e[0m]) : mutable.ArrayBuffer[\e[35mLong\e[0m]\
    \ = {\n\e[31m\e[31m   |\e[0m                                                 \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsergx6hm.scala:23:131 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mdef\e[0m \e[36miterate\e[0m(\e[36moperand\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mresult\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m], \e[36macc\e[0m : mutable.ArrayBuffer[\e[35mLong\e[0m], \e[36macc\e\
    [0m : mutable.ArrayBuffer[\e[35mLong\e[0m]) : mutable.ArrayBuffer[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \                                                                            \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660013211
