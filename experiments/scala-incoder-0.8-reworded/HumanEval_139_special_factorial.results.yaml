language: scala
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1\n        for (x<-n;x>=0;x--)\n        {\n            result = result * x\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpugf5j9su.scala:14:22 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (x<-n;x>=\e[31m0\e[0m;x--)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpugf5j9su.scala:14:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m\
    \ (x<-n;x>=\e[31m0\e[0m;x--)\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          pattern expected\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpugf5j9su.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (x<-n;x>=\e[31m0\e[0m;x--)\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value\
    \ foreach is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659979591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = new Array[Long](n)\n        factorial(0) = 1\n        factorial.update(1,\
    \ (n: Long) => n * factorial(0))\n        factorial.update(0, (n: Long) => n +\
    \ 1)\n        return factorial(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy76upqfp.scala:13:40\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                        ^\e[0m\n\e[31m   |\e[0m           \
    \                             Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy76upqfp.scala:15:28 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorial.update(\e[31m1\e[0m, (\e[36mn\e[0m:\
    \ \e[35mLong\e[0m) => n * factorial(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    Long => Long\n\e[31m   |\e[0m          \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy76upqfp.scala:16:28 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        factorial.update(\e[31m0\e[0m, (\e[36mn\e[0m: \e[35mLong\e[0m)\
    \ => n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long => Long\n\e[31m\
    \   |\e[0m                            Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpy76upqfp.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mreturn\e[0m factorial(n)\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // If n is\
    \ 0 return 1!\n        if (n == 0) 1\n        // Otherwise we compute brazilian_factorial\
    \ recursively\n        else {\n            // We use a variable auxiliary to store\
    \ the last factorial\n            var aux = 1\n            // We iterate from\
    \ n down to 1 decreasing the value of aux\n            for (var i = n downTo 1\
    \ by -1) aux *= i\n            // We return the value of the auxiliary variable\
    \ (because n! = aux!)\n            aux\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp00278gxd.scala:20:17 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m (\e[33mvar\e[0m i = n downTo\
    \ \e[31m1\e[0m by -\e[31m1\e[0m) aux *= i\n\e[31m\e[31m   |\e[0m             \
    \    ^^^\e[0m\n\e[31m   |\e[0m                 pattern expected\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp00278gxd.scala:20:43 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m (\e[33mvar\e[0m i = n downTo\
    \ \e[31m1\e[0m by -\e[31m1\e[0m) aux *= i\n\e[31m\e[31m   |\e[0m             \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \                '<-' expected, but identifier found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp00278gxd.scala:23:8 ----------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m \
    \       '<-' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00278gxd.scala:20:51\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m\
    \ (\e[33mvar\e[0m i = n downTo \e[31m1\e[0m by -\e[31m1\e[0m) aux *= i\n\e[31m\e\
    [31m   |\e[0m                                                   ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcur"
  stdout: ''
  timestamp: 1659979593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ {\n            1\n        }\n        else {\n            val factorial = factorialHelper(n)\n\
    \            factorial * (n - factorial)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplex2lvfg.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mfactorial\e[0m = factorialHelper(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: factorialHelper\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (_ <- 2 until n) result *= n\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpck7axj53.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (_ <-\
    \ \e[31m2\e[0m until n) result *= n\n\e[31m\e[31m   |\e[0m                   \
    \       ^\e[0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for (i<-1 to n) {\n            factorial = factorial * (i+1)\n\
    \        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmparu4u8td.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m \
    \  |\e[0m                     Found:    (n : Long)\n\e[31m   |\e[0m          \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = BigInt(1)\n        for (i <- 1 to n) {\n            factorial = factorial\
    \ * (BigInt(i.toInt))\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm98vrsxo.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpm98vrsxo.scala:15:22 -----------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            factorial = factorial * (BigInt(i.toInt))\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm98vrsxo.scala:17:8 ---------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (factorial : BigInt)\n\e[31m   |\e[0m  \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var product\
    \ = 1\n        var i = n\n\n        while (i > 1) {\n            product = product\
    \ * i\n            i = i - 1\n        }\n        return product\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeydthojc.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            product = product\
    \ * i\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    Long\n\e[31m   |\e[0m                     \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 0\n        val factorial = BigInt(n)\n        var counter = 1\n        var\
    \ counter2 = 1\n        while(counter <= factorial) {\n            result = (result\
    \ + counter2).toLong * factorial\n            counter2 = counter2 + 1\n      \
    \      counter = counter + 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4lu4opr5.scala:18:21\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            result = (result\
    \ + counter2).toLong * factorial\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    BigInt\n\e[31m   |\e[0m   \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def fac(n:\
    \ Int, acc: Long) : Long = {\n            if (n == 1) acc\n            else fac(n\
    \ - 1, n*acc)\n        }\n        fac(n,1L)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpehg1ky9p.scala:17:12\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        fac(n,\e[31m1L\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:   \
    \ (n : Long)\n\e[31m   |\e[0m            Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = Seq.fill( (n+1)/2).foldLeft(1L) { (z, i) =>\n            z * i\n        }\n\
    \        factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tfogyv3.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e\
    [0m = Seq.fill( (n+\e[31m1\e[0m)/\e[31m2\e[0m).foldLeft(\e[31m1L\e[0m) { (\e[36mz\e\
    [0m, \e[36mi\e[0m) =>\n\e[31m\e[31m   |\e[0m                                 \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  Found:    Long\n\
    \e[31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        require(n >\
    \ 0 && n <= Int.MaxValue, \"n must be > 0 and <= Int.MaxValue\")\n        if (n\
    \ == 1) 1l\n        else if (n % 2 == 0) (n * specialFactorial((n/2l)))\n    \
    \    else (n * specialFactorial((n/2l)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu460tyap.scala:19)\n\tat Problem.main(tmpu460tyap.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = (1l to n).foldLeft(1l) { (factorial, element) => factorial * element}\n  \
    \      factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps8cifxxr.scala:17)\n\tat Problem.main(tmps8cifxxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 1)\
    \ 1\n        else factorial(n) * (factorial(n-1)) * (factorial(n-2))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj003kbq.scala:14:13 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m factorial(n) * (factorial(n-\e\
    [31m1\e[0m)) * (factorial(n-\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m            \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found: factorial\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 1L)\
    \ 1L\n        else n * specialFactorial(n-1L)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqq3y7p74.scala:17)\n\tat Problem.main(tmpqq3y7p74.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Solution:\
    \ Avoid overflows\n        if (n < Long.MinValue || n > Long.MaxValue) {\n   \
    \         throw new IllegalArgumentException(\"The input must be positive and\
    \ non-negative\")\n        }\n        val result = 0L\n        // Iterate over\
    \ all even values until we reach a factor of n\n        for (i <- n until 1 by\
    \ 2 step 1) {\n            // Factorial of n equals n*(n+1)/2\n            result\
    \ += i * (i + 1) / 2\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp3mf1n8m1.scala:19:33 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- n until \e[31m1\e[0m by\
    \ \e[31m2\e[0m step \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              \e[33mgetter\e[0m \e[35mstep\e[0m in \e[33mclass\e\
    [0m \e[35mNumericRange\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 1l)\
    \ 1l else n * specialFactorial((n - 1l))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo3x4fj_c.scala:16)\n\tat Problem.main(tmpo3x4fj_c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 1l)\n\
    \            n\n        else\n            specialFactorial(n-1l) * n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyagristu.scala:19)\n\tat Problem.main(tmpyagristu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1)\n\
    \            return 1\n        else\n            return n*(n-1)*(n-2)*(3-n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu7l61gr.scala:19)\n\tat Problem.main(tmpsu7l61gr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n == 1)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4eebi2s6.scala:17)\n\tat Problem.main(tmp4eebi2s6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Declare\
    \ and initialize variables\n        var result: Long = 1\n        var temp: Long\
    \ = 1\n        var count: Long = 1\n        // While condition\n        while\
    \ (n > 0) {\n            // Perform the recursive step\n            // Get the\
    \ factorial\n            temp = n\n            // Get the count\n            count\
    \ = n\n            // Increment the counter\n            count = count + 1\n \
    \           // Increment the factorial\n            result = result * temp\n \
    \           // Decrement the counter\n            count = count - 1\n        \
    \    // Decrement the factorial\n            result = result / temp\n        \
    \    // Increment the counter\n            count = count + 1\n            // Decrement\
    \ the factorial\n            result = result * temp\n            // Decrement\
    \ the counter\n            count = count - 1\n            // Decrement the factorial\n\
    \            result = result / temp\n            // Increment the counter\n  \
    \          count = count + 1\n            // Decrement the factorial\n       \
    \     result = result * temp\n            // Decrement the counter\n         \
    \   count = count - 1\n            // Decrement the factorial\n            result\
    \ = result / temp\n            // Increment the counter\n            count = count\
    \ + 1\n            // Decrement the factorial\n            result = result * temp\n\
    \            // Decrement the counter\n            count = count - 1\n       \
    \     // Decrement the factorial\n            result = result / temp\n       \
    \     // Increment the counter\n            count = count + 1\n            //\
    \ Decrement the factorial\n            result = result * temp\n            //\
    \ Decrement the counter\n            count = count - 1\n            // Decrement\
    \ the factorial\n            result = result / temp\n            // Increment\
    \ the counter\n            count = count + 1\n            // Decrement the factorial\n\
    \            result = result * temp\n            // Decrement the counter\n  \
    \          count = count - 1\n            // Decrement the factorial\n       \
    \     result = result / temp\n            // Increment the counter\n         \
    \   count = count + 1\n            // Decrement the factorial\n            result\
    \ = result * temp\n            // Decrement the counter\n            count = count\
    \ - 1\n            // Decrement the factorial\n            result = result / temp\n\
    \            // Increment the counter\n            count = count + 1\n       \
    \     // Decrement the factorial\n            result = result * temp\n       \
    \     // Decrement the counter\n            count = count - 1\n            //\
    \ Decrement the factorial\n            result = result / temp\n            //\
    \ Increment the counter\n            count = count + 1\n            // Decrement\
    \ the factorial\n            result = result * temp\n            // Decrement\
    \ the counter\n            count = count - 1\n            // Decrement the factorial\n\
    \            result = result / temp\n            // Increment the counter\n  \
    \          count = count + 1\n            // Decrement the factori\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnv0s_121.scala:108:0 ---------------------------\e\
    [0m\e[0m\n\e[31m108 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnv0s_121.scala:107:1\
    \ --------------------\e[0m\e[0m\n\e[31m107 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Long\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpnv0s_121.scala:100:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m100 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ : Long = 1\n        var iter : Long = 1\n        while (iter <= n) {\n     \
    \       factorial = factorial * (iter * iter - 1)\n            iter = iter + 1\n\
    \        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg8gd0f30.scala:22)\n\tat Problem.main(tmpg8gd0f30.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = new Array[Long](n)\n        var factorial_counter : Long = 1\n        var\
    \ factorial_number : Long = 1\n        var factorial_sum : Long = 1\n        while\
    \ (factorial_counter <= n) {\n            factorial(factorial_counter) = factorial_number\n\
    \            factorial_counter = factorial_counter + 1\n            factorial_number\
    \ = factorial_number * factorial_counter\n            factorial_sum = factorial_sum\
    \ + factorial_number\n        }\n        factorial_sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfc6ltcxo.scala:13:40\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                        ^\e[0m\n\e[31m   |\e[0m           \
    \                             Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfc6ltcxo.scala:18:22 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial(factorial_counter) = factorial_number\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (factorial_counter : Long)\n\e[31m   |\e[0m\
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = Vector.fill(n / 2)(BigInt(1))\n        for( i <- n to 1 by -1){\n        \
    \    factorials(i / 2) = (factorials(i / 2) * i).toLong\n        }\n        factorials(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppf_f3rqc.scala:13:37\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e\
    [0m = Vector.fill(n / \e[31m2\e[0m)(BigInt(\e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppf_f3rqc.scala:15:12 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            factorials(i / \e[31m2\e[0m) = (factorials(i / \e[31m2\e[0m) *\
    \ i).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of Vector[BigInt] - did you mean factorials.updated?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppf_f3rqc.scala:15:44 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorials(i / \e[31m2\e[0m) = (factorials(i\
    \ / \e[31m2\e[0m) * i).toLong\n\e[31m\e[31m   |\e[0m                         \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppf_f3rqc.scala:17:18 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        factorials(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    BigInt\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = scala.math.BigInt(n).pow(factorial.factorial)\n        factorial\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt7kpccmg.scala:13:49 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = scala.math.BigInt(n).pow(factorial.factorial)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                    Recursive \e[33mvalue\e[0m\
    \ \e[35mfactorial\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpt7kpccmg.scala:14:8 ---------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (factorial : BigInt)\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = Seq.fill(n - 1)(BigInt(1))\n        .scanLeft(BigInt(1))((n: BigInt, acc:\
    \ BigInt) => acc.multiply(n))\n        .drop(1).sum\n        factorial.multiply(BigInt(n)).intValue()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dy3b_fs.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e\
    [0m = Seq.fill(n - \e[31m1\e[0m)(BigInt(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Found:    Long\n\e[31m   |\e[0m                            \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_dy3b_fs.scala:14:61\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        .scanLeft(BigInt(\e\
    [31m1\e[0m))((n: BigInt, acc: BigInt) => acc.multiply(n))\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value multiply is not a member\
    \ of BigInt\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_dy3b_fs.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        factorial.multiply(BigInt(n)).intValue()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ multiply is not a member of BigInt\n3 errors found\n"
  stdout: ''
  timestamp: 1659979601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0l)\
    \ return 1l\n        val ret: Long = specialFactorial(n >> 1) * (n & 1l) * (factorial(n\
    \ - 1l))\n        ret\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmtmfoiv.scala:14:63 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mret\e[0m: \e[35mLong\e[0m\
    \ = specialFactorial(n >> \e[31m1\e[0m) * (n & \e[31m1l\e[0m) * (factorial(n -\
    \ \e[31m1l\e[0m))\n\e[31m\e[31m   |\e[0m                                     \
    \                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                 Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val fact =\
    \ n.toLong\n        val result = 1L\n        while (fact > 0) {\n            result\
    \ *= fact\n            fact -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp66a9apdi.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= fact\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp66a9apdi.scala:17:17\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            fact -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Long - did you mean fact.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // The factorial\
    \ is computed recursively\n        val factorial = (1l)(1l)\n        for(i <-\
    \ 2 to n) factorial = factorial * (n-l+1)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpc6ai3skd.scala:14:25 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = (\e[31m1l\e\
    [0m)(\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         expression does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc6ai3skd.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n) factorial = factorial * (n-l+\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Found: \
    \   (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpc6ai3skd.scala:15:35 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n) factorial\
    \ = factorial * (n-l+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \       Reassignment to val factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val bigFactorial\
    \ = BigInt(math.factorial(n))\n        if (bigFactorial < 1) bigFactorial else\
    \ bigFactorial.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0f8oj6rk.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbigFactorial\e[0m = BigInt(math.factorial(n))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value factorial is not a member\
    \ of math\n1 error found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.Set[Long]()\n        for (i <- 1 to n)\n            factorials +=\
    \ i\n        factorials.toList.foldLeft(1l)((nFactorial, n) =>\n            nFactorial\
    \ * (factorials.contains(n) ? factorials.remove(n) : 1l))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3dje4bz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn3dje4bz.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n)\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = 1\n        while (factorial <= n) {\n          factorial *= factorial\n  \
    \      }\n        return factorial\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkof9rtvm.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m          factorial *= factorial\n\e[31m\e[31m   |\e\
    [0m          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value *= is not a member\
    \ of Int - did you mean factorial.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ListBuffer[Long]()\n        var factorialNumber = 1\n        factorial.push(factorialNumber)\n\
    \        var factorialN = 1\n        factorial.push(factorialN)\n        var factorialN1\
    \ = 1\n        factorial.push(factorialN1)\n        var factorialN2 = 1\n    \
    \    factorial.push(factorialN2)\n        var factorialN3 = 1\n        factorial.push(factorialN3)\n\
    \        var factorialN4 = 1\n        factorial.push(factorialN4)\n        for\
    \ (i<-0 until n) {\n            factorialNumber *= factorial(i)\n        }\n \
    \       for (i<-0 until n) {\n            factorialN *= factorial(i)\n       \
    \     factorialN1 *= factorial(i)\n            factorialN2 *= factorial(i)\n \
    \           factorialN3 *= factorial(i)\n            factorialN4 *= factorial(i)\n\
    \        }\n        factorialNumber\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg_c0_so.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsg_c0_so.scala:26:24 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsg_c0_so.scala:29:24\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        // Recursively calculate factorials\n        factorials(0) = 1\n    \
    \    for (i <- 0 until n) {\n            factorials(i) *= i\n        }\n     \
    \   for (i <- 0 until n) {\n            ans ++= factorials(i)\n        }\n   \
    \     ans.sum\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmf7z_df0.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmf7z_df0.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpmf7z_df0.scala:15:25 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1l\n        else\n            specialFactorial(n-1) * n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3aalqt1.scala:18)\n\tat Problem.main(tmpg3aalqt1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val result\
    \ = 1L\n        val factorial = List.fill(n.toInt)((1L * n).toLong)\n        for\
    \ (i<- factorial.indices) result *= factorial(i)\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbqgny2bh.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<- factorial.indices) result\
    \ *= factorial(i)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value *= is not a member of Long - did you mean\
    \ result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var nfact =\
    \ 1l\n        var remainder = 0l\n        var dividend = n\n        while (remainder\
    \ != 0l) {\n            dividend *= 1l\n            remainder = n / dividend\n\
    \            nfact *= (dividend - remainder)\n        }\n        nfact\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpawvrem5e.scala:24)\n\tat Problem.main(tmpawvrem5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        require(n >\
    \ 0)\n        val res = 1\n        for(i <- n until 1 by -1){\n            res\
    \ = res * i\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0wswtj03.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            res = res * i\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for( i <- 1..n ) factorial *= i\n        factorial\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2bu9vvti.scala:14:20 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m..n ) factorial\
    \ *= i\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m     \
    \               an identifier expected, but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Return the\
    \ factorial of the given n\n        if (n < 1l) {\n            // Special factorial\
    \ of 0\n            return 1l\n        }\n        else {\n            // Find\
    \ the nth factorial of the nth power\n            val x = n\n            var fact\
    \ = 1l\n            // Go through all powers from 1 to n and multiply x by each\
    \ one of them\n            for (i <- 1l until n) fact *= x\n            return\
    \ fact\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec166bfq.scala:28)\n\tat Problem.main(tmpec166bfq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0L)\n\
    \            return 1L\n        val res = 1L\n        for (i <- 2L until n)\n\
    \            res = res * i\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyymi7xsw.scala:17:16 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            res = res * i\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val res\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n <= 0)\
    \ 1l\n        else specialFactorial(n-1) * (factorial(n-1) * factorial(n))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsi7fnkdj.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m specialFactorial(n-\e[31m1\e\
    [0m) * (factorial(n-\e[31m1\e[0m) * factorial(n))\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1 else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb8_c9e9e.scala:16)\n\tat Problem.main(tmpb8_c9e9e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // If the input\
    \ is 0, then the result will also be 0\n        if (n == 0) 1l\n        // The\
    \ factorial function is defined as:\n        // factorial(n) = n * (n-1) * (n-2)\
    \ * ... * 1\n        // For example, if we want to apply the factorial function\
    \ to 4, then the\n        // factorial function will be called with the argument\
    \ of 4\n        else if (n == 1l) 1l\n        // Otherwise, the nth value of the\
    \ factorial function is defined as:\n        // factorial(n) = n!\n        //\
    \ For example:\n        // >>> factorial(4l)\n        // 24\n        else if (n\
    \ < 1l) 0l\n        else {\n            // The factorial function is defined as:\n\
    \            // factorial(n) = n * (n-1) * (n-2) * ... * 1\n            // For\
    \ example, if we want to apply the factorial function to 4, then the\n       \
    \     // factorial function will be called with the argument of 4\n          \
    \  def factorial(n: Long) : Long = if(n == 1l) 1l else factorial(n-1l) * n\n \
    \           // The factorial function is defined as:\n            // factorial(n)\
    \ = n * (n-1) * (n-2) * ... * 1\n            // For example, if we want to apply\
    \ the factorial function to 4, then the\n            // factorial function will\
    \ be called with the argument of 4\n            def brazilianFactorial(n: Long)\
    \ : Long = factorial(n) - 1l\n            brazilianFactorial(n) // The Brazilian\
    \ factorial is defined as:\n                                // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n                                // where\
    \ n > 0\n                                // For example:\n                   \
    \             // >>> specialFactorial((4l))\n                                //\
    \ (288l)\n            // The function will receive an integer as input and should\
    \ return the special\n            // factorial of this integer.\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1xgso2iy.scala:48)\n\tat Problem.main(tmp1xgso2iy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Write your\
    \ code here\n        if(n >= 0) return n * (specialFactorial(n-1))\n        else\
    \ return 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_gljkclz.scala:18)\n\tat Problem.main(tmp_gljkclz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 2)\
    \ 1 else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdl42s_07.scala:16)\n\tat Problem.main(tmpdl42s_07.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * (specialFactorial(n-1) * specialFactorial(n-2))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\
    \tat Problem$.specialFactorial(tmpj_aghfpt.scala:14)\n\tat Problem$.spe"
  stdout: ''
  timestamp: 1659979608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        for (i <- 1 to n) fact = fact * i\n        fact\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6fm2k6jo.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) fact = fact * i\n\e[31m\e[31m   |\e[0m                  \
    \     ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        var i : Long = 0\n        while (n > i) {\n            result\
    \ = result * n\n            i += 1\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdrxw4ybw.scala:22)\n\tat Problem.main(tmpdrxw4ybw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0)\
    \ 0\n        else specialFactorial(n - 1) * n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp050e2rii.scala:17)\n\tat Problem.main(tmp050e2rii.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n      val factorial\
    \ = factorial(n) //Factorial of n\n      factorial * (factorial-1) * (factorial-2)\
    \ * (factorial-3) * (factorial-4)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5dm4rq6y.scala:13:22 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36mfactorial\e[0m = factorial(n)\
    \ \e[34m//Factorial of n\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mfactorial\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979605
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var i = 0\n\
    \        var factorial = 1\n        while (i < n) {\n            factorial *=\
    \ i\n            i += 1\n        }\n        return factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7wr5dgq.scala:22)\n\tat Problem.main(tmpc7wr5dgq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 0\n        var factorialMax = n\n        for (i <- 1 to factorialMax)\n  \
    \          factorial *= i\n        return factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3vysnghh.scala:15:23\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to factorialMax)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (factorialMax : Long)\n\e\
    [31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = BigInt(n)\n        factorial *= factorial\n        factorial *= factorial\n\
    \        factorial *= factorial\n        factorial *= factorial\n        factorial\
    \ *= BigInt(1)\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeafz4mxb.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        factorial *= factorial\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value *= is not a member of\
    \ BigInt - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpeafz4mxb.scala:15:18 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        factorial *= factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value *= is not a member of BigInt - did you mean\
    \ factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeafz4mxb.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        factorial *= factorial\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value *=\
    \ is not a member of BigInt - did you mean factorial.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpeafz4mxb.scala:17:18 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        factorial *= factorial\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value *= is not a member of BigInt\
    \ - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeafz4mxb.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        factorial *= BigInt(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       value *= is not a member of BigInt - did you mean factorial.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpeafz4mxb.scala:19:15 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mreturn\e[0m factorial\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (factorial\
    \ : BigInt)\n\e[31m   |\e[0m               Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n6 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0\
    \ || n == 1l) 1\n        else n * (specialFactorial(n-1l) * specialFactorial(n-2l))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdlvdicxm.scala:17)\n\tat Problem.main(tmpdlvdicxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        var i = 0\n        while(n != 0) {\n            i = i + 1\n     \
    \       fact = fact * i\n            n = n - 1\n        }\n        return fact\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpvqrh4s81.scala:18:14 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n <= 0)\
    \ throw new IllegalArgumentException(\"n must be positive\")\n        var factorial\
    \ = factorial\n        while(n>1){\n            factorial = factorial * n\n  \
    \          n = n - 1\n        }\n        return factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmoy7h924.scala:14:24 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactorial\e[0m = factorial\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvariable\e[0m \e[35mfactorial\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmoy7h924.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = scala.math.factorial(n)\n        // We return the result as long as n is not\
    \ greater than the factorial of n\n        if (n > factorial) factorial\n    \
    \    else specialFactorial(n-1) * n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1zuifo7e.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = scala.math.factorial(n)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value factorial is not a member of math\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Initialize\
    \ factorial\n        var factorial = 1\n        for(i <- 1 to n) {\n         \
    \   factorial *= i\n        }\n        // Return factorial\n        return factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdy7i1z9o.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979611
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var i : Long\
    \ = 1\n        while (i * i <= n) {\n            i = i * i\n        }\n      \
    \  return i\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val f = mutable.MutableSeq[Long](1L)\n\
    \        val counter = mutable.MutableSeq[Long]()\n        if (n == 0L) f(0)\n\
    \        else {\n            while (n > 0) {\n                f(n -= 1L) *= n\n\
    \                counter(n) += 1\n            }\n            val result = f.take(counter.sum).toList.sum\n\
    \            result\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxumiqc7a.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mf\e[0m = mutable.MutableSeq[\e\
    [35mLong\e[0m](\e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxumiqc7a.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.MutableSeq[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val ans = 1\n\
    \        for (i <- 2 to n) {\n            ans *= i\n        }\n        ans\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf5kj0h65.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpf5kj0h65.scala:15:16 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            ans *= i\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value *= is not a member of Int - did you mean ans.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n       var result =\
    \ 1L\n       var i = 2L\n       while(i <= n)\n       {\n          result *= i\n\
    \          i *= 2L\n       }\n       result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl2m8gzpg.scala:23)\n\tat Problem.main(tmpl2m8gzpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val n = if (n == 0L) 1L else n\n     \
    \   for (i <- 1 to n) {\n            factorials += ((n to 1l).factorial(i) * i)\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6z0ybmt3.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6z0ybmt3.scala:14:20 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mif\e[0m (n\
    \ == \e[31m0L\e[0m) \e[31m1L\e[0m \e[33melse\e[0m n\n\e[31m\e[31m   |\e[0m   \
    \                 ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6z0ybmt3.scala:14:37 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mif\e[0m (n == \e[31m0L\e[0m)\
    \ \e[31m1L\e[0m \e[33melse\e[0m n\n\e[31m\e[31m   |\e[0m                     \
    \                ^\e[0m\n\e[31m   |\e[0m                                     Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp6z0ybmt3.scala:15:23 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val fact =\
    \ mutable.ListBuffer[Long](1L)\n        for (i <- 0 to n)\n            fact +=\
    \ (i * specialFactorial(i))\n        fact.remove(0)\n        fact.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpheoom0rb.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfact\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m](\e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpheoom0rb.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to n)\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n < 1l)\
    \ 1l else n * specialFactorial(n - 1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5xv3kigu.scala:16)\n\tat Problem.main(tmp5xv3kigu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(i\
    \ : Long): Long = if (i == 0) 1 else factorial(i-1) * i\n        factorial(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplwc0kkyu.scala:17)\n\tat Problem.main(tmplwc0kkyu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 0\n        var factorial = 0\n        factorial = factorial * (n-1)\n\
    \        for ( i <- 1 to factorial )\n            result = result + (i * (i-1))\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl9t1zudg.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        factorial = factorial\
    \ * (n-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Long\n\e[31m   |\e[0m      \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        require(n >\
    \ 0, \"n must be > 0\")\n        if (n == 1L) {\n            return 1L\n     \
    \   }\n        // The factorial of n is (n-1)!\n        val factorial = specialFactorial(n-1L)\n\
    \        // The factorial of n is (n-2)!\n        val factorial2 = specialFactorial(n-2L)\n\
    \        // The factorial of n is (n-3)!\n        val factorial3 = specialFactorial(n-3L)\n\
    \        // The factorial of n is (n-4)!\n        val factorial4 = specialFactorial(n-4L)\n\
    \        // The factorial of n is (n-5)!\n        val factorial5 = specialFactorial(n-5L)\n\
    \        // The factorial of n is (n-6)!\n        val factorial6 = specialFactorial(n-6L)\n\
    \        // The factorial of n is (n-7)!\n        val factorial7 = specialFactorial(n-7L)\n\
    \        // The factorial of n is (n-8)!\n        val factorial8 = specialFactorial(n-8L)\n\
    \        // The factorial of n is (n-9)!\n        val factorial9 = specialFactorial(n-9L)\n\
    \        // The factorial of n is (n-10)!\n        val factorial10 = specialFactorial(n-10L)\n\
    \        // The factorial of n is (n-11)!\n        val factorial11 = specialFactorial(n-11L)\n\
    \        // The factorial of n is (n-12)!\n        val factorial12 = specialFactorial(n-12L)\n\
    \        // The factorial of n is (n-13)!\n        val factorial13 = specialFactorial(n-13L)\n\
    \        // The factorial of n is (n-14)!\n        val factorial14 = specialFactorial(n-14L)\n\
    \        // The factorial of n is (n-15)!\n        val factorial15 = specialFactorial(n-15L)\n\
    \        // The factorial of n is (n-16)!\n        val factorial16 = specialFactorial(n-16L)\n\
    \        // The factorial of n is (n-17)!\n        val factorial17 = specialFactorial(n-17L)\n\
    \        // The factorial of n is (n-18)!\n        val factorial18 = specialFactorial(n-18L)\n\
    \        // The factorial of n is (n-19)!\n        val factorial19 = specialFactorial(n-19L)\n\
    \        // The factorial of n is (n-20)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp74sfic7m.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n==0) 1l\n\
    \        else specialFactorial(n-1)*(n - 1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6i6qvh19.scala:17)\n\tat Problem.main(tmp6i6qvh19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        require(n >\
    \ 0, \"n must be positive (greater than 0)\")\n        val factorial = n.toString.toLong.factorial()\n\
    \        factorial.multiply(factorial).multiply(factorial.minus(1))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzsnuz2xk.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = n.toString.toLong.factorial()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value factorial is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = (n, i, sum) => {\n\
    \            if ((i * i) < n)\n                factorials += sum\n           \
    \ else\n                factorials(i) = factorial((n - i), (i / 2), (factorial(i)\
    \ + factorial(i - 1)))\n        }\n        factorial(0) = 1\n        factorial(1)\
    \ = 1\n        factorials(0) = 1\n        factorials(1) = 1\n        factorials(2)\
    \ = 2\n        factorials(3) = 6\n        factorials(4) = 24\n        factorials(5)\
    \ = 120\n        factorials(6) = 720\n        factorials(7) = 1440\n        factorials(8)\
    \ = 384\n        factorials(9) = 1152\n        factorials(10) = 5040\n       \
    \ factorials(11) = 40320\n        factorials(12) = 362880\n        factorials(13)\
    \ = 2675648\n        factorials(14) = 19558768\n        factorials(15) = 93323248\n\
    \        factorials(16) = 69956960\n        factorials(17) = 58209784\n      \
    \  factorials(18) = 43583808\n        factorials(19) = 40417320\n        factorials(20)\
    \ = 40016800\n        factorials(21) = 39321600\n        factorials(22) = 39321600\n\
    \        factorials(23) = 39321600\n        factorials(24) = 4355200\n       \
    \ factorials(25) = 45108800\n        factorials(26) = 46857600\n        factorials(27)\
    \ = 49403280\n        factorials(28) = 517401600\n        factorials(29) = 587208000\n\
    \        factorials(30) = 59024000\n        factorials(31) = 59024000\n      \
    \  factorials(32) = 6278800\n        factorials(33) = 6658064\n        factorials(34)\
    \ = 72004832\n        factorials(35) = 752560128\n        factorials(36) = 767900112\n\
    \        factorials(37) = 767099744\n        factorials(38) = 7688996832\n   \
    \     factorials(39) = 768980458720\n        factorials(40) = 774969990780\n \
    \       factorials(41) = 7924329028512\n        factorials(42) = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl1hz0mrd.scala:64:24 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        factorials(\e[31m42\e[0m) = \n\e[31m\e[31m  \
    \ |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                      \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl1hz0mrd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpl1hz0mrd.scala:14:25 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = (\e[36mn\e\
    [0m, \e[36mi\e[0m, \e[36msum\e[0m) => {\n\e[31m\e[31m   |\e[0m               \
    \          ^\e[0m\n\e[31m   |\e[0m                         Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                         I could not infer the\
    \ type of the parameter n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpl1hz0mrd.scala:14:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e\
    [0m \e[36mfactorial\e[0m = (\e[36mn\e[0m, \e[36mi\e[0m, \e[36msum\e[0m) => {\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                     Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                          I could not infer the type of the parameter i.\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpl1hz0mrd.scala:14:31 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = (\e[36mn\e\
    [0m, \e[36mi\e[0m, \e[36msum\e[0m) => {\n\e[31m\e[31m   |\e[0m               \
    \                ^^^\e[0m\n\e[31m   |\e[0m                        Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                        I could not infer\
    \ the type of the parameter sum.\n5 errors found\n"
  stdout: ''
  timestamp: 1659979614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // We use a\
    \ mutable variable to hold the value of the factorial\n        var factorial =\
    \ mutable.Long(1) // factorial starts out at 1\n        // We use while to loop\
    \ through the range of n\n        while (n > 0) {\n            // We use the *\
    \ operator to multiply the factorial by the number\n            factorial = factorial\
    \ * (n -\n                1) // We subtract 1 from the n to loop through the range\
    \ 1 through n\n            n = n - 1\n        }\n        // We return the value\
    \ of the factorial\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsyo8aqz6.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactorial\e[0m = mutable.Long(\e\
    [31m1\e[0m) \e[34m// factorial starts out at 1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsyo8aqz6.scala:20:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n = n -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.LinkedHashMap.empty[Long, Long]\n        (1l to n).foreach{i => factorials\
    \ += (n-1l) -> (n-1l)*(n-2l)*(n-3l)*(n-4l)*(i-l)}\n        factorials.get(n-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf24mws4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.LinkedHashMap.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0)\
    \ 0\n        else { \n            val factors = Array[Long](n).init // 1\n   \
    \         for (i <- 1 to n - 1) {\n                factors(i) * factorial(i -\
    \ 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfoi1r9py.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to n - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:   \
    \ Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfoi1r9py.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                factors(i) * factorial(i - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: factorial\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 1l)\
    \ {\n            1L\n        } else {\n            val result = specialFactorial(n\
    \ - 1l) * specialFactorial(n - 2l) * specialFactorial(n - 3l)\n            result\
    \ * result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9s4pwbbs.scala:21)\n\tat Problem.main(tmp9s4pwbbs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var i = 0l\n        var factor =\
    \ 1\n        factorials += 0l\n        factorials += factor\n        while(i <=\
    \ n){\n            i = i + 1l\n            factor = factorials(i-1) * factorials(i)\n\
    \            factorials += factor\n        }\n        factorials(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9vdl_ge.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Your code\
    \ here\n        // Solution 1\n        // val factorial = scala.math.BigInt(1)\n\
    \        // var i = 0\n        // for (i <- 1 to n ) {\n        //     factorial\
    \ = factorial * i\n        // }\n        // return factorial\n        // Solution\
    \ 2\n        val factorial = 2\n        var i = 0\n        for (i <- 1 to n )\
    \ {\n            factorial *= i\n        }\n        return factorial\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejp0d5i3.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpejp0d5i3.scala:25:22 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            factorial *= i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ factorial.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\n\
    \            return 1\n        else if (n == 1)\n            return n\n      \
    \  else\n            return n * specialFactorial(n - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjp8_lfxx.scala:21)\n\tat Problem.main(tmpjp8_lfxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = (1l to n).map(n => n*(n - 1) * (n - 2))\n        var result = factorials.head\n\
    \        factorials.tail.foreach(\n            n => result *= n\n        )\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptk7yvag_.scala:21)\n\tat Problem.main(tmptk7yvag_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val f = n!\n\
    \        f * (n-1)!\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdggesc4q.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        f * (n-\e[31m1\e[0m)!\n\e[31m\e[31m   |\e[0m\
    \                  ^\e[0m\n\e[31m   |\e[0m                  expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdggesc4q.scala:13:17 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mf\e[0m = n!\n\e[31m\e[31m   |\e[0m           \
    \     ^^\e[0m\n\e[31m   |\e[0m                value ! is not a member of Long\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdggesc4q.scala:14:8 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        f * (n-\e[31m1\e[0m)!\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Recursive \e[33mvalue\e[0m \e[35mf\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdggesc4q.scala:15:5\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 1l)\
    \ throw new RuntimeException(\"Cannot calculate factorial of negative number:\
    \ \" + n)\n        if (n == 1l) 1l\n        else n * specialFactorial(n-1l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyyi_uck5.scala:18)\n\tat Problem.main(tmpyyi_uck5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val numFactorial\
    \ = BigInt(1)\n        for (i <- 1 until n)\n            numFactorial = numFactorial\
    \ * BigInt(i).toInt\n        numFactorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyuijiv1k.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m until n)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpyuijiv1k.scala:15:25 -----------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            numFactorial = numFactorial * BigInt(i).toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val numFactorial\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyuijiv1k.scala:16:8 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        numFactorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (numFactorial : BigInt)\n\e[31m   |\e[0m\
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val result\
    \ = 1\n        while (n>0) {\n            result = (n * result) //* n\n      \
    \      n-=1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzzqeolke.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result = (n * result)\
    \ \e[34m//* n\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpzzqeolke.scala:16:13 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            n-=\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e\
    [31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = new mutable.HashMap[Long, Long]()\n        var i = 0\n        while (i < n)\
    \ {\n            factorial(i) = factorial(i) * i + 1\n            i = i + 1\n\
    \        }\n        factorial(i)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdohqp0t9.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        require(n >\
    \ 0, s\"The number $n is lower than 0.\")\n        val factorials = mutable.ArrayBuffer(1l)\n\
    \        val temp = n\n        while (temp > 0) {\n            factorials += temp\n\
    \            temp -= 1\n        }\n        factorials.reduceLeft(_ * _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpez9eq_p1.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer(\e\
    [31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpez9eq_p1.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            temp -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean temp.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // If n is\
    \ 1, we return n\n        if (n == 1) return n\n        \n        // If n is even\
    \ then we need to take n-1\n        // If n is odd, then we need to take n-2\n\
    \        val result = if (n % 2 == 0) { specialFactorial(n - 1L) } else { specialFactorial(n\
    \ - 2L) }\n        \n        // We multiply by n to make the factorial value equal\
    \ to n!\n        // We need to multiply by n+1 (n+1) because we need to multiply\
    \ by n!\n        // The factorial of n+1 equals to n!+1!\n        return n * result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucne7x03.scala:26)\n\tat Problem.main(tmpucne7x03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        // The factorials table is an empty\
    \ ArrayBuffer.\n        // The factorials table is initially filled with 1.\n\
    \        // The factorials table is refilled by multiplying each value by n and\
    \ \n        // adding it to factorials.\n        factorials += 1\n        while\
    \ (n > 0) {\n            factorials += n * factorials(n - 1)\n            n -=\
    \ 1\n        }\n        factorials.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjw_1th_o.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjw_1th_o.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n        if (n ==\
    \ 0) {\n            return 1L\n        }\n        while(n > 1) {\n           \
    \ factorials = factorials :+ (n * factorials.last)\n            n -= 1\n     \
    \   }\n        factorials.last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9e2vgw9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl9e2vgw9.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpl9e2vgw9.scala:19:23 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            factorials = factorials :+ (n * factorials.last)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val factorials\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv4718kl2.scala:17)\n\tat Problem.main(tmpv4718kl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n:\
    \ Long) : Long = n match {\n            case 0 => 1\n            case _ => n *\
    \ factorial(n-1)\n        }\n        // To calculate the factorial of n, we start\
    \ by calculating n!, then we add (n-1)!, \n        // then we add (n-2)!, then\
    \ we add ... * 1!.\n        val result = factorial(n)\n        result + (n - 1)\
    \ * factorial((n - 1) * -1)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\
    \tat Problem$.factorial$1(tmpt5bmv59x.scala:15)\n\tat Problem$.facto"
  stdout: ''
  timestamp: 1659979624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ : Long = 1\n        for (i<- 1 to n) {\n            factorial *= i\n       \
    \ }\n        return factorial\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpccfl00lh.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer(1L)\n        for (i <- 0 until n) factorials += factorial(i)\
    \ * i\n        factorials.last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8gl7qd4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer(\e\
    [31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpn8gl7qd4.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) factorials\
    \ += factorial(i) * i\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        var tmp = 1\n        for (i  <- 1 to n) {\n            fact *= tmp\n\
    \            tmp = fact - 1\n        }\n        return fact\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2zcjh5ze.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i  <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = (1l).until(n.toInt)\n        (factorial.foldLeft(1l) {\n            case (acc,\
    \ i) =>\n                acc.times(factorial(i))\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe7jomdjs.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                acc.times(factorial(i))\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ times is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7jomdjs.scala:16:36\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                acc.times(factorial(i))\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Found:    (i : Long)\n\e[31m   |\e[0m \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n < 1) 1 else n * factorial(n-1)\n     \
    \   }\n        return factorial(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwoe2mg25.scala:19)\n\tat Problem.main(tmpwoe2mg25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorialList\
    \ = List(1)\n        for (i<-n until 1) {\n            factorialList(i*factorialList(i\
    \ - 1))\n        }\n        factorialList(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpivaceus5.scala:15:42\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorialList(i*factorialList(i\
    \ - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                                          Found:\
    \    Long\n\e[31m   |\e[0m                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n until 1 by -1) result*=i\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9qcle191.scala:18)\n\tat Problem.main(tmp9qcle191.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n < 1) {\n\
    \            return 1L\n        }\n        val factorials = (1L to n).toList\n\
    \        val factorials = factorials.reverse\n\n        factorials.foldLeft(1L)((x,\
    \ y) => (x * y))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ypk5irw.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = factorials.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659979626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        var i = 1 // counter\n        var j = 1\n        // while loop\n\
    \        while (i <= n) {\n            fact *= j\n            j += 1\n       \
    \     i += 1\n        }\n        fact\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0j0c1jg.scala:25)\n\tat Problem.main(tmpo0j0c1jg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 1L)\
    \ 1L\n        else specialFactorial(n-1L) * n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqmjwf_le.scala:17)\n\tat Problem.main(tmpqmjwf_le.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n == 0){\n\
    \            return 1\n        }\n        else{\n            return n * specialFactorial(n-1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1b4_kr_h.scala:21)\n\tat Problem.main(tmp1b4_kr_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n == 0)\
    \ 1 else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv9y_19ln.scala:16)\n\tat Problem.main(tmpv9y_19ln.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        for (i <- 1 to n) {\n            fact *= i\n        }\n        return\
    \ fact\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9bh401w.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 0\n        for(i <- 0 to n) {\n            result *= i\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3bejbihi.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val fac = (1L\
    \ to n).foldLeft(1L)((x, y) =>\n            (x * (y.toLong * factorial(x)))\n\
    \        )\n        fac\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuhc4uqqi.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (x * (y.toLong * factorial(x)))\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                         Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        var i : Long = 1\n        for(i <- 1 to n){\n          \
    \  result = (result * i)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ns_dqly.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Your code\
    \ here\n        if (n == 1l) 1l\n        else if (n == 2l) 2l\n        else if\
    \ (n == 3l) 6l\n        else if (n == 4l) 24l\n        else if (n == 5l) 120l\n\
    \        else if (n == 6l) 720l\n        else n! * (specialFactorial(n-1l) * specialFactorial(n-2l)\
    \ * specialFactorial(n-3l) * specialFactorial(n-4l))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzl4il4l2.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m n! * (specialFactorial(n-\e[31m1l\e\
    [0m) * specialFactorial(n-\e[31m2l\e[0m) * specialFactorial(n-\e[31m3l\e[0m) *\
    \ specialFactorial(n-\e[31m4l\e[0m))\n\e[31m\e[31m   |\e[0m             ^^\e[0m\n\
    \e[31m   |\e[0m             value ! is not a member of Long\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzl4il4l2.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33melse\e[0m n! * (specialFactorial(n-\e[31m1l\e\
    [0m) * specialFactorial(n-\e[31m2l\e[0m) * specialFactorial(n-\e[31m3l\e[0m) *\
    \ specialFactorial(n-\e[31m4l\e[0m))\n\e[31m\e[31m   |\e[0m                ^\e\
    [0m\n\e[31m   |\e[0m                Not found: *\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = for (i <- 0 until n; j = i * 2) yield (i * j);\n        factorials.reduceLeft((x:\
    \ Long, y) => x * y)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjafq2uo.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e\
    [0m = \e[33mfor\e[0m (i <- \e[31m0\e[0m until n; j = i * \e[31m2\e[0m) \e[33myield\e\
    [0m (i * j);\n\e[31m\e[31m   |\e[0m                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                           Found:   \
    \ (n : Long)\n\e[31m   |\e[0m                                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjafq2uo.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        factorials.reduceLeft((\e\
    [36mx\e[0m: \e[35mLong\e[0m, \e[36my\e[0m) => x * y)\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                         Found:    (\e[1m\e[31mLong\e[0m, Int) => AnyVal\n\e\
    [31m   |\e[0m                              Required: (\e[1m\e[32mAnyVal\e[0m,\
    \ Int) => AnyVal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979634
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n:\
    \ Long): Long = {\n            if(n == 1) 1l\n            else n*factorial(n-1)\n\
    \        }\n        factorial(n).asInstanceOf[Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeb1gbcvw.scala:20)\n\tat Problem.main(tmpeb1gbcvw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = collection.mutable.ArrayBuffer.empty[Long]\n        for (x <- 1 to n) {\n\
    \            factorial.add(x*factorial(x - 1))\n        }\n        factorial(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplg4twnmy.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmplg4twnmy.scala:15:22 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            factorial.add(x*factorial(x - \e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not a member of\
    \ scala.collection.mutable.ArrayBuffer[Long], but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.mutableSeq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0l)\
    \ throw new ArithmeticException(\"Factorial of a negative number is not defined\"\
    )\n        val factorial = factorialFunction(n: Long)\n        while (n > 0l)\
    \ {\n            factorial = factorial * n\n            n -= 1l\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1tmol6p6.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = factorialFunction(n:\
    \ \e[35mLong\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: factorialFunction\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp1tmol6p6.scala:16:22 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial = factorial * n\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Reassignment to val factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1tmol6p6.scala:17:14 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            n -= \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1L\n        for (i = 0L; i < n; i += 1L)\n            result *= i + 1L\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdmrit5ok.scala:14:15 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i = \e[31m0L\e[0m; i < n; i +=\
    \ \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m\
    \               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpdmrit5ok.scala:14:26 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mfor\e[0m (i = \e[31m0L\e[0m; i < n; i += \e[31m1L\e[0m)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpdmrit5ok.scala:14:35 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mfor\e[0m (i = \e[31m0L\e[0m; i < n; i += \e[31m1L\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m \
    \  |\e[0m                                   '<-' expected, but ')' found\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdmrit5ok.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i = \e[31m0L\e[0m; i < n; i +=\
    \ \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e\
    [0mvalue foreach is not a member of Null, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not "
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var res = 1\n\
    \        for (i <- n until 1 by -1)\n            res = res * i\n        return\
    \ res\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxo9siy0t.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            res = res * i\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979634
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n      if (n == 0) 1\n\
    \      else {\n        val result = n * specialFactorial(n-1)\n        result\
    \ * result\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsfhv5013.scala:20)\n\tat Problem.main(tmpsfhv5013.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // You can\
    \ use the factorial function (n!) to compute the factorial of a number\n     \
    \   // Using recursion is simple: you compute the factorial of the current number\n\
    \        // multiplied by the number that follows the factorial of the current\
    \ number.\n        // In this way, the number that follows the factorial of the\
    \ current number is\n        // the number that follows the factorial of n - 1\n\
    \        // For example:\n        // >>> specialFactorial(4L)\n        // (24L)\
    \ * 3L\n        if (n==1)\n            return n\n        else\n            return\
    \ n * specialFactorial(n - 1L)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmfdzztl5.scala:27)\n\tat Problem.main(tmpmfdzztl5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        //  n! * (n-1)!\
    \ * (n-2)! * ... * 1!\n        var factorial : Long = BigInt(1)\n        var i\
    \ : Long = 0\n        var j : Long = 0\n        var k : Long = BigInt(0)\n   \
    \     var i : Long = 0\n        for(i < n){\n            k = BigInt(0)\n     \
    \       for(j < i; j++){\n                k = k * BigInt(j+1)\n            }\n\
    \            factorial = factorial * i\n            factorial = factorial * k\n\
    \            i = i + 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd8sysy31.scala:19:18 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i < n){\n\e[31m\e[31m   |\e[0m\
    \                  ^\e[0m\n\e[31m   |\e[0m                  '<-' expected, but\
    \ '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd8sysy31.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd8sysy31.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mi\e[0m : \e[35mLong\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined as \e[33mvariable\e\
    [0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd8sysy31.scala:14:37 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactorial\e[0m : \e[35mLong\e\
    [0m = BigInt(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    BigInt\n\
    \e[31m   |\e[0m                               Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd8sysy31.scala:17:29 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m : \e[35mLong\e[0m\
    \ = BigInt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    BigInt\n\e[31m   |\e[0m \
    \                      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpd8sysy31.scala:27:9 -------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m  \
    \ |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports mig"
  stdout: ''
  timestamp: 1659979637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n == 0)\
    \ 1l\n        else if(n % 2 == 0) specialFactorial(n / 2) * specialFactorial(n\
    \ / 2)\n        else if(n % 2 == 1) specialFactorial(n / 2) * specialFactorial(n\
    \ / 2) * specialFactorial(n / 2)\n        else specialFactorial(n / 2) * specialFactorial(n\
    \ / 2) * specialFactorial(n / 2) * specialFactorial(n / 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_kognbes.scala:19)\n\tat Problem.main(tmp_kognbes.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n:\
    \ Int, acc: Long): Long = {\n            if (n == 0) acc\n            else factorial(n\
    \ - 1, acc * n)\n        }\n        factorial(n, 1L)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiyhz3l5z.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        factorial(n, \e[31m1L\e\
    [0m)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m         \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        while( n > 0 ) {\n            result *= n\n            n\
    \ -= 1\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8gquv5ba.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1.0;\n        while (n-- > 1) {\n            fact = fact * (n + 1l) / (n * (n\
    \ + 1l))\n        }\n        fact\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps67t1omd.scala:14:21 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (n-- > \e[31m1\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ ')' expected, but integer literal found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps67t1omd.scala:14:16 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mwhile\e[0m (n-- > \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m    \
    \           ^^^\e[0m\n\e[31m   |\e[0m               value -- is not a member of\
    \ Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps67t1omd.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (n-- > \e[31m1\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: >\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps67t1omd.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        fact\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    (fact : Double)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n       val result =\
    \ BigInteger.valueOf(n)\n       val temp = BigInteger.valueOf(BigInteger.ONE)\n\
    \       var i = BigInteger.valueOf(BigInteger.ONE)\n       var result = BigInteger.valueOf(BigInteger.ONE)\n\
    \       while (i <= temp) {\n          result = result.multiply(BigInteger.valueOf(i))\n\
    \          i = i.add(BigInteger.ONE)\n       }\n       result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4hrr8het.scala:16:11 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m       \e[33mvar\e[0m \e[36mresult\e[0m = BigInteger.valueOf(BigInteger.ONE)\n\
    \e[31m\e[31m   |\e[0m       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp4hrr8het.scala:13:20 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m       \e[33mval\e[0m \e[36mresult\e[0m = BigInteger.valueOf(n)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                Not found: BigInteger\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4hrr8het.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m       \e[33mval\e[0m \e[36mtemp\e[0m = BigInteger.valueOf(BigInteger.ONE)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            Not found: BigInteger\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4hrr8het.scala:15:15 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m       \e[33mvar\e[0m \e[36mi\e[0m = BigInteger.valueOf(BigInteger.ONE)\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Not found: BigInteger\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp4hrr8het.scala:18:17 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m          result = result.multiply(BigInteger.valueOf(i))\n\e[31m\e[31m\
    \   |\e[0m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ {\n            return 1L\n        }\n        else {\n            var factorial\
    \ = 1L\n            var remainder = n\n            while (true){\n           \
    \     factorial *= remainder\n                remainder--\n                if\
    \ (remainder == 0) {\n                    break\n                }\n         \
    \   }\n            return factorial\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvv94yh69.scala:21:27 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                remainder--\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1)\
    \ 1\n        else if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptovds893.scala:18)\n\tat Problem.main(tmptovds893.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var i : Long\
    \ = 1\n        var factorial : Long = 1\n        while (i <= n) {\n          \
    \  factorial = factorial * i\n            i = i + 1\n        }\n        factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp25qd47ch.scala:22)\n\tat Problem.main(tmp25qd47ch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val result\
    \ = 1\n        while (n > 1) {\n            result *= n\n            n -= 1\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc45a24ef.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= n\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of\
    \ Int - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc45a24ef.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n == 0)\
    \ 1l\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc68fm0x6.scala:17)\n\tat Problem.main(tmpc68fm0x6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = Vector.fill(Math.max(n, 1l))(factorial(n))\n        factorial.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpurpkyzmy.scala:13:45\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e\
    [0m = Vector.fill(Math.max(n, \e[31m1l\e[0m))(factorial(n))\n\e[31m\e[31m   |\e\
    [0m                                             ^\e[0m\n\e[31m   |\e[0m      \
    \                                       Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpurpkyzmy.scala:13:48 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = Vector.fill(Math.max(n,\
    \ \e[31m1l\e[0m))(factorial(n))\n\e[31m\e[31m   |\e[0m                       \
    \                         ^^\e[0m\n\e[31m   |\e[0m                           \
    \                     Found:    (\e[31m1L\e[0m : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpurpkyzmy.scala:13:53 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = Vector.fill(Math.max(n,\
    \ \e[31m1l\e[0m))(factorial(n))\n\e[31m\e[31m   |\e[0m                       \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \             Recursive \e[33mvalue\e[0m \e[35mfactorial\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0\
    \ || n == 1) {\n            return 1l\n        }\n        return n * specialFactorial(n\
    \ - 1l) * specialFactorial(n - 2l) * specialFactorial(n - 3l) * specialFactorial(n\
    \ - 4l)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\
    \tat Problem$.specialFactorial(tmpfsltuv7i.scala:16)\n\tat Problem$.spe"
  stdout: ''
  timestamp: 1659979642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.Set[Long]()\n        for (i <- 1 to n) {\n            factorials +=\
    \ (i * factorials.last).asInstanceOf[Long]\n        }\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vvrcylq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0vvrcylq.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = 0L\n        for(i <- 1 until n){\n            factorial = factorial * (i.toLong)\n\
    \        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44mce7_b.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp44mce7_b.scala:15:22 -----------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            factorial = factorial * (i.toLong)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Reassignment to val factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n      n match {\n \
    \       case 0 => 1l\n        case 1 => n\n        case _ => (n * (specialFactorial(n-1)))\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3yboavou.scala:20)\n\tat Problem.main(tmp3yboavou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ scala.math.BigInt(1)\n        for( a <- 1 to n ) {\n            fact = fact\
    \ * scala.math.BigInt(a)\n        }\n        return fact\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwoxj54vm.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m( a <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwoxj54vm.scala:17:15 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mreturn\e[0m fact\n\e[31m\e[31m   |\e[0m               ^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    (fact : BigInt)\n\e[31m   |\e[0m\
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = factorial(n, n)\n        factorial * factorial(n - 1, factorial)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1uha6743.scala:13:24 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = factorial(n,\
    \ n)\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m   \
    \                     Recursive \e[33mvalue\e[0m \e[35mfactorial\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var sum : Long\
    \ = 1\n        var i = n\n        while (i <= 1l){\n            sum = sum * i\n\
    \            i = i + 1l\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dgm6u6b.scala:22)\n\tat Problem.main(tmp_dgm6u6b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n == 1)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4eebi2s6.scala:17)\n\tat Problem.main(tmp4eebi2s6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = 1\n        for (i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc3s66p__.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc3s66p__.scala:15:22 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            factorial *= i\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of\
    \ Int - did you mean factorial.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ : Long = 1\n        for (i <- 1 to n) {\n            factorial *= i\n      \
    \  }\n        return factorial\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkfa8h2fw.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        for ( i <- 2 to n )\n            fact *= i\n        fact\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7iyi3q1.scala:14:24\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m ( i <-\
    \ \e[31m2\e[0m to n )\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = factorial(n-1) * factorial(n-2) * factorial(n-3) * factorial(n-4)\n      \
    \  if (n < 0)\n            throw RuntimeException(\"Error: negative number\")\n\
    \        else\n            return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_asoymn9.scala:13:24 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = factorial(n-\e\
    [31m1\e[0m) * factorial(n-\e[31m2\e[0m) * factorial(n-\e[31m3\e[0m) * factorial(n-\e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e\
    [0m                        Recursive \e[33mvalue\e[0m \e[35mfactorial\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n      val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n      for (i <- 0 until n) {\n        factorials\
    \ += n * factorial(n-i)\n      }\n      factorials.toArray[Long]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzmdaznzv.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzmdaznzv.scala:14:24 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // If n is\
    \ 0, then the factorial is 1\n        if(n <= 0) return 1\n\n        // This list\
    \ will hold the final results\n        var factorials = Vector.fill(n - 1)(BigInt(1))\n\
    \n        // Continue multiplying the factorials of the numbers until we get\n\
    \        // to n\n        while(factorials.last.compareTo(0) == 1) {\n       \
    \     factorials = factorials.tail.map(x => x.multiply(BigInt(n)))\n        }\n\
    \n        // Return the last element of the factorials\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvnl3d3sl.scala:17:37\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfactorials\e\
    [0m = Vector.fill(n - \e[31m1\e[0m)(BigInt(\e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpvnl3d3sl.scala:22:52 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            factorials = factorials.tail.map(\e[36mx\e[0m => x.multiply(BigInt(n)))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value multiply is not a member\
    \ of BigInt\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvnl3d3sl.scala:26:19\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        factorials.last\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    BigInt\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        while (n > 0) {\n            result = result * n\n     \
    \       n -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9gke091u.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1l\n        for (i = 1l to n){\n            result *= i\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptk179yyd.scala:14:15 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i = \e[31m1l\e[0m to n){\n\e\
    [31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptk179yyd.scala:14:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1l\e[0m to n){\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         '<-' expected, but '{' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptk179yyd.scala:16:9 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n <= 0L)\
    \ 0L\n        else (factorial(n)) * (n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfq09uzo7.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m (factorial(n)) * (n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \         Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var res = 1\n\
    \        while (n > 1) {\n            res *= n\n            n -= 1\n        }\n\
    \        return res\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbybe8_ox.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            res *= n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbybe8_ox.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1l\n        for (i <- 1 until n)\n            factorial = factorial * i\n\
    \        factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ojx1n8e.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m until n)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = (1l*n).toLong\n        factorial.product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfd7rts1t.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        factorial.product\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value product is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        var remaining\
    \ = n\n        while(n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            remaining -= 1\n        }\n        factorials += n\n\
    \        factorial.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd6pkm94h.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpd6pkm94h.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = BigInt(n)\n        val temp = BigInt(1)\n        val temp2 = BigInt(1)\n \
    \       val result = BigInt(0)\n        while (temp < factorial) {\n         \
    \   temp = temp * temp2\n            temp2 = temp2 * temp\n        }\n       \
    \ result + (factorial - BigInt(temp))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmputimxetu.scala:18:17 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            temp = temp * temp2\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val temp\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmputimxetu.scala:19:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            temp2 =\
    \ temp2 * temp\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Reassignment to val temp2\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmputimxetu.scala:21:30 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        result + (factorial - BigInt(temp))\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e\
    [0m \e[35mBigInt\e[0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\
    \e[31m   |\e[0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String):\
    \ BigInt\n\e[31m   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m\
    \   |\e[0m (bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e\
    [31m   |\e[0m (signum: Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m (x:\
    \ Array[Byte]): BigInt\n\e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m (i:\
    \ Int): BigInt\n\e[31m   |\e[0mmatch arguments ((temp : BigInt))\n3 errors found\n"
  stdout: ''
  timestamp: 1659979649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = n.toLong.factorial\n        (factorial * (factorial - 1)).*(factorial-2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp47u68047.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = n.toLong.factorial\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value factorial is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n == 1 ||\
    \ n == 0){\n            return 1\n        }\n        else{\n            val factorial\
    \ = specialFactorial(n-1) * specialFactorial(n-2)\n            factorial * n\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvv90l25c.scala:22)\n\tat Problem.main(tmpvv90l25c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n<=0) 0l\n\
    \        else n * (specialFactorial(n-1l) * specialFactorial(n-2l))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89uj_ea1.scala:17)\n\tat Problem.main(tmp89uj_ea1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpetow7oyz.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n==0) 1\
    \ // A special factorial of 0! is 1!\n        else n * specialFactorial(n-1) //Recursive\
    \ call\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp39k0emv.scala:17)\n\tat Problem.main(tmpp39k0emv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n:\
    \ Int, acc: Long) : Long = {\n            if (n == 0) {\n                acc\n\
    \            } else {\n                factorial(n - 1, acc * n)\n           \
    \ }\n        }\n        factorial(n, 1L)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppdoe9wqo.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        factorial(n, \e[31m1L\e\
    [0m)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m         \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        //Complete\
    \ the code here\n        val factorialTable = mutable.ArrayBuffer.fill(10)(1)\n\
    \        factorialTable += 0\n        factorialTable += 2l\n        factorialTable\
    \ *= factorialTable(0)\n        factorialTable *= factorialTable(n - 2)\n\n  \
    \      factorialTable *= factorialTable(n-1)\n        factorialTable *= factorialTable(n-2)\n\
    \n        return factorialTable(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjy7p42x.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorialTable\e[0m = mutable.ArrayBuffer.fill(\e\
    [31m10\e[0m)(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n      var sum = 1\n\
    \      for(i <- 1l until n) {\n        sum = sum * i\n      }\n      return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp91k_efza.scala:15:14\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        sum = sum * i\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^\e[0m\n\e[31m   |\e[0m              Found: \
    \   Long\n\e[31m   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        var factorial : Long = 1\n        while (n > 1) {\n    \
    \        factorial *= n\n            result *= factorial\n            n -= 1\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0kn9oyxu.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Return the\
    \ factorial of n\n        def factorial(n : Int) : Int = if (n == 1) 1 else n\
    \ * factorial(n - 1)\n\n        // Return n!\n        factorial(n)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9_sxvew.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        factorial(n)\n\e[31m\e\
    [31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var counter = 1\n        while (n >= counter) {\n            factorial\
    \ *= n\n            n -= 1\n            counter += 1\n        }\n        return\
    \ factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4pzilp_q.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4pzilp_q.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        val list = List.range(0, n).map(x => x*fact).toList.sorted\n    \
    \    list.last\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2frtoha3.scala:14:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = List.range(\e\
    [31m0\e[0m, n).map(\e[36mx\e[0m => x*fact).toList.sorted\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \              No implicit Ordering defined for AnyVal.\n1 error found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var product\
    \ = 1\n        for (i <- 1 to n) product = product * (i)\n        return product\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk58x1bi1.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) product = product * (i)\n\e[31m\e[31m   |\e[0m          \
    \             ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorialList\
    \ = mutable.MutableList.newBuilder[Long]\n        for (i <- 1 to n)\n        \
    \    factorialList += factorial(i) * i\n        return factorialList.last\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmp008k97.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorialList\e[0m = mutable.MutableList.newBuilder[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmp008k97.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n)\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ : Long = factorial(n, 0l)\n        return factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpoa65itxn.scala:13:31 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mfactorial\e[0m : \e[35mLong\e\
    [0m = factorial(n, \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \e[33mvariable\e\
    [0m \e[35mfactorial\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n:\
    \ Long) : Long = {\n            if (n == 0) 1\n            else {\n          \
    \      var factorial = n * factorial(n - 1)\n            }\n        }\n      \
    \  factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw_wbcxmz.scala:16:36 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mvar\e[0m \e[36mfactorial\e[0m =\
    \ n * factorial(n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Recursive\
    \ \e[33mvariable\e[0m \e[35mfactorial\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpw_wbcxmz.scala:17:13 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            }\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Initialize\
    \ a variable that will be the factorial value\n        var result : Long = n.toLong\
    \ * (1l - 1)\n\n        // For each \"layer\" of factorials, multiply it by the\
    \ next factorial\n        result *= specialFactorial((n - 1l).toLong)\n\n    \
    \    // Return the result\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\
    \tat Problem$.specialFactorial(tmph8oex7mi.scala:17)\n\tat Problem$.spe"
  stdout: ''
  timestamp: 1659979659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = BigInt(1)\n        val temp = BigInt(1)\n        var factor = 1\n        for(i\
    \ <- 0 until n){\n            temp = temp * factorial\n            temp = temp\
    \ / factor\n            factor = factor + 1\n            factorial = factorial\
    \ * factor\n        }\n        temp\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4m57onew.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp4m57onew.scala:17:17 -----------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            temp = temp * factorial\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val temp\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4m57onew.scala:18:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            temp = temp\
    \ / factor\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val temp\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp4m57onew.scala:20:22 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            factorial = factorial * factor\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Reassignment to val factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4m57onew.scala:22:8 ---------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        temp\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (temp : BigInt)\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8t0_hwkx.scala:17)\n\tat Problem.main(tmp8t0_hwkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if(n <= 1)\n\
    \            return 1\n        val result = 1l\n        for(x <- 2 until n){\n\
    \            result *= x\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuymgl6bh.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(x <- \e\
    [31m2\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuymgl6bh.scala:17:19 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            result *= x\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Long\
    \ - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // The factorial\
    \ function will receive an integer as input and should return the factorial\n\
    \        // of this integer.\n        def factorial(n : Long) : Long = {\n   \
    \         if (n <= 1)\n                return 1\n            else\n          \
    \      return n * factorial(n-1)\n        }\n        factorial(n)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcl8ts57v.scala:24)\n\tat Problem.main(tmpcl8ts57v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val product\
    \ = 1\n        while (n > 0) {\n            product *= n\n            n -= 1\n\
    \        }\n        product\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1dkai3al.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of\
    \ Int - did you mean product.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1dkai3al.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0)\n\
    \            throw new IllegalArgumentException\n        (1l*(n-1).*(specialFactorial(n-1))).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException\n\tat Problem$.specialFactorial(tmpew1jwtnm.scala:14)\n\
    \tat Problem$.specialFactorial(tmpew1jwtnm.scala:15)\n\tat Problem$.specialFactorial(tmpew1jwtnm.scala:15)\n\
    \tat Problem$.specialFactorial(tmpew1jwtnm.scala:15)\n\tat Problem$.specialFactorial(tmpew1jwtnm.scala:15)\n\
    \tat Problem$.main(tmpew1jwtnm.scala:18)\n\tat Problem.main(tmpew1jwtnm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = (1l) :: (n * specialFactorial((n - 1l)))\n        factorial.toList.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29mgmnh2.scala:13:29 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = (\e[31m1l\e\
    [0m) :: (n * specialFactorial((n - \e[31m1l\e[0m)))\n\e[31m\e[31m   |\e[0m   \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             value :: is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        var i = 2l\n        while(i < n){\n            result = result\
    \ * i\n            i = i + 1l\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8hidmse.scala:22)\n\tat Problem.main(tmpk8hidmse.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for(i <- 1 until n)\n            result = result * i\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qhbjekj.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m until n)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = new mutable.HashMap[Int, Long]()\n        factorial(0) = 1\n        factorial(1)\
    \ = 1\n        for (i<-2 until n) {\n            factorial(2*i) = factorial(i)\
    \ * factorial(i-1)\n        }\n        factorial(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecad5dh8.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpecad5dh8.scala:16:24 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mfor\e[0m (i<-\e[31m2\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (n : Long)\n\e[31m   |\e[0m                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // 1. Calculate\
    \ the factorial of n\n        val factorial_of_n = math.factorial(n)\n       \
    \ // 2. Find the number from 1 to n that produces the biggest factorial\n    \
    \    var highest_factorial = 0l\n        var factorial_to_be_used = factorial_of_n\n\
    \        while (factorial_to_be_used > 1) {\n            if (factorial_to_be_used\
    \ % 2l == 0l) {\n                factorial_to_be_used /= 2l\n            } else\
    \ {\n                factorial_to_be_used /= 2l\n                highest_factorial\
    \ = math.max(highest_factorial, factorial_of_n)\n            }\n        }\n  \
    \      // 3. Return the factorial of highest_factorial\n        highest_factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx1nz_k0b.scala:14:34 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial_of_n\e[0m = math.factorial(n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value factorial is not a member of math\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val result\
    \ = 1L\n        var factorial = 1L\n        for(i<-n to 0 by -1){\n          \
    \  factorial *= i\n            result *= i\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphutkfttu.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result *= i\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of\
    \ Long - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1\n        n -= 1\n        for(i <- 1 to n)\n            result *= i\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpofau85oj.scala:14:10 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^\e[0m\n\e[31m   |\e[0m        value -= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofau85oj.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m  \
    \ |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m          \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var ret : Long\
    \ = 1\n        // Recursive factorial function\n        def factorial(n: Long,\
    \ n: Long): Long = {\n            if (n == 1) return ret\n            else {\n\
    \                ret = n * factorial(n - 1, 1)\n            }\n        }\n   \
    \     factorial(n, ret)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplnvpyna0.scala:15:31 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mfactorial\e[0m(\e[36mn\e\
    [0m: \e[35mLong\e[0m, \e[36mn\e[0m: \e[35mLong\e[0m): \e[35mLong\e[0m = {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mparameter\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplnvpyna0.scala:18:20\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                ret = n * factorial(n\
    \ - \e[31m1\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m   |\e[0m          \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(i:\
    \ Long) : Long = {\n            if(i == 0) 1\n            else i * factorial(i\
    \ - 1)\n        }\n        factorial(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5czkiqne.scala:20)\n\tat Problem.main(tmp5czkiqne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1)\
    \ 1\n        else if (n == 0) 1\n        else {\n            val factorial = 1L\n\
    \            val tmp = specialFactorial(n-1)\n            factorial *= tmp\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz880hii_.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= tmp\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value *= is not a member\
    \ of Long - did you mean factorial.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 0L\n        for (i<- 1 to n) {\n            result = result * i\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxckic3p0.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // If n is\
    \ less than 2, return 1\n        if (n < 2) 1L\n        // If n is 2, return 2\n\
    \        else if (n == 2) 2L\n        // If n is less than or equal to 10, then\
    \ return n*(n-1)\n        else if (n <= 10) {\n            var result = 1L;\n\
    \            for (i = 1 until n) {\n                result = result * i\n    \
    \        }\n            result\n        }\n        // Otherwise, return the factorial\
    \ of the nth term.\n        else {\n            val fact = factorial(n)\n    \
    \        for (i <- 1L to n) {\n                fact = fact * i\n            }\n\
    \            fact\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsab88_iy.scala:20:19 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m (i = \e[31m1\e[0m until n)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m         \
    \          ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsab88_iy.scala:20:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e\
    [0m (i = \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                      \
    \          ^\e[0m\n\e[31m   |\e[0m                                '<-' expected,\
    \ but '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsab88_iy.scala:24:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '<-' expected, but '}' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsab88_iy.scala:22:13 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsab88_iy.scala:27:23\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36mfact\e[0m = factorial(n)\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n : Int) {\n     \
    \       factorials += i\n        }\n        factorials.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpir_mdowb.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpir_mdowb.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n : \e[35mInt\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m  \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Initialize\
    \ factorial array to 1\n        var factorial = Array[Long](1l)\n        // Initialize\
    \ factorial array to 1\n        var n2 = n\n        // Use while to calculate\
    \ the factorial until n2 is 1\n        while (n2 > 0) {\n            // Multiply\
    \ n2 by n2\n            factorial :*= n2\n            // Substract one from n2\
    \ and update factorial array\n            n2 -= 1\n        }\n        // Return\
    \ factorial array\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkk9rwne.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            factorial :*= n2\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value :*= is not a\
    \ member of Array[Long]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfkk9rwne.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        factorial\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (factorial\
    \ : Array[Long])\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n      var fact = 1\n\
    \      while (n > 1) {\n        fact *= n\n        n -= 1\n      }\n      fact\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy6emhr3s.scala:15:13 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        fact *= n\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value *= is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy6emhr3s.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^\e[0m\n\e[31m   |\e[0m        value -= is not a member of Long - did\
    \ you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        var i : Int = 0\n        while(i <= n){\n            result\
    \ = result * (n-i)\n            i += 1\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmruw8xcb.scala:22)\n\tat Problem.main(tmpmruw8xcb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        var i = 0\n        while (n > 1l) fact = fact * n\n        i += 1\n\
    \        while (i < n) fact = fact * (n - 1l)\n        fact\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmposvn_8i9.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m (n >\
    \ \e[31m1l\e[0m) fact = fact * n\n\e[31m\e[31m   |\e[0m                      \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Found:  \
    \  Long\n\e[31m   |\e[0m                              Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmposvn_8i9.scala:17:29 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m (i < n) fact = fact * (n - \e\
    [31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    Long\n\e[31m   |\e\
    [0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        // Only call\
    \ factorial if the integer is positive\n        if (n > 0L) {\n            //\
    \ Initialize a list to store the factorials\n            var facts = mutable.ListBuffer.empty[Long]\n\
    \n            // Compute factorials\n            for (fact <- 1L until n)\n  \
    \              facts += fact * (fact - 1L) * (fact - 2L)\n\n            // Compute\
    \ the final factorial\n            facts.last\n        } else\n            0L\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga15t_by.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mvar\e[0m \e[36mfacts\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val fac = 1L\n\
    \        val nminus1 = n - 1L\n        for (i <- 1L until nminus1) fac *= i\n\
    \        fac\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_gkniv4.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1L\e[0m until nminus1)\
    \ fac *= i\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value *= is not a member of Long - did you\
    \ mean fac.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var res = n\n\
    \        while (res % 2 == 0) {\n            res = res * 3\n        }\n      \
    \  res = res * 4\n        while (res % 2 == 0) {\n            res = res * 3\n\
    \        }\n        return res * ((res / 2) * ((res / 2) / 2))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0L)\
    \ {\n            return 1L\n        }\n        val result = 1L\n        for (i\
    \ <- 2L until n)\n            result *= i\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpucs2kg6x.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result *= i\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of\
    \ Long - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = new collection.mutable.Array[Long](n+1)\n        factorial(0) = 1\n      \
    \  for (i<-0 to (n-1)) {\n            factorial(i+1) = factorial(i) * i\n    \
    \    }\n        return factorial(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjv5iohyw.scala:13:47 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[33mnew\e\
    [0m collection.mutable.Array[\e[35mLong\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtype Array is not a member of scala.collection.mutable - did you mean mutable.ArraySeq?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjv5iohyw.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m to (n-\e[31m1\e\
    [0m)) {\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        for(x <- 1 to n) {\n            fact *= x\n        }\n        return\
    \ fact\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadt_nrld.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(x <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorialFactorial\
    \ = for {\n            i <- 1 to n\n        } yield {\n            val mult =\
    \ factorial(i * factorial(i))\n            mult * factorial(i)\n        }\n  \
    \      factorialFactorial.head\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt7tcdo00.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            i <- \e[31m1\e[0m\
    \ to n\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m   \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7tcdo00.scala:16:23\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmult\e[0m = factorial(i * factorial(i))\n\e[31m\e[31m   |\e[0m       \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7tcdo00.scala:16:37\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmult\e[0m = factorial(i * factorial(i))\n\e[31m\e[31m   |\e[0m       \
    \                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                      Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = Seq.fill(n + 1){i => i to n}.reverse.foldLeft(1L){(acc, n) => acc*n}\n   \
    \     factorial - n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpag3mmovl.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e\
    [0m = Seq.fill(n + \e[31m1\e[0m){\e[36mi\e[0m => i to n}.reverse.foldLeft(\e[31m1L\e\
    [0m){(\e[36macc\e[0m, \e[36mn\e[0m) => acc*n}\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        Found:    Long\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpag3mmovl.scala:13:40\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mfactorial\e[0m = Seq.fill(n + \e[31m1\e[0m){\e[36mi\e[0m => i to n}.reverse.foldLeft(\e\
    [31m1L\e[0m){(\e[36macc\e[0m, \e[36mn\e[0m) => acc*n}\n\e[31m\e[31m   |\e[0m \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \            Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m        \
    \                  I could not infer the type of the parameter i.\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpag3mmovl.scala:13:89 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = Seq.fill(n\
    \ + \e[31m1\e[0m){\e[36mi\e[0m => i to n}.reverse.foldLeft(\e[31m1L\e[0m){(\e\
    [36macc\e[0m, \e[36mn\e[0m) => acc*n}\n\e[31m\e[31m   |\e[0m                 \
    \                                                                     ^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ ((n : Any))\n3 errors found\n"
  stdout: ''
  timestamp: 1659979670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n:\
    \ Int) : Long = if (n <= 1) 1 else n * factorial(n - 1)\n\n        if (n < 0)\
    \ throw new IllegalArgumentException(\"The special factorial does not exist for\
    \ negative values.\")\n        factorial(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6unhhfwo.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        factorial(n)\n\e[31m\e\
    [31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979670
