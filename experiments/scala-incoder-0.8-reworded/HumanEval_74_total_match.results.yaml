language: scala
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst3 = (lst1.size >= lst2.size)?\
    \ lst1 : lst2\n        lst3.foldLeft(List[String]())((lst4, str) => {\n      \
    \      if (lst4.size >= lst2.size) {\n                lst4 :: lst2\n         \
    \   } else if (lst4.size >= lst1.size) {\n                lst4 :: lst1\n     \
    \       } else if (lst4.size >= lst1.size && lst4.size >= lst2.size) {\n     \
    \           lst4 :: lst1\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp75sjn3h.scala:19:52 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mlst3\e[0m = (lst1.size >=\
    \ lst2.size)? lst1 : \e[35mlst2\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                    Not found: type lst2\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpp75sjn3h.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mlst3\e[0m = (lst1.size >=\
    \ lst2.size)? lst1 : \e[35mlst2\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value ? is\
    \ not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 : List[String] = lst1\
    \ ++ lst2\n        if(lst3.length == lst1.length) lst1 else lst2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg2zs87q8.scala:25)\n\tat Problem.main(tmpg2zs87q8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case x :: xs => {\n                val result = lst2\
    \ filter (_ > x) filter (_ < xs.last)\n                if (result.isEmpty) {\n\
    \                    lst2\n                }\n                else {\n       \
    \             result.head\n                }\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvab90x7.scala:27:27\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    result.head\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Found:    String\n\e[31m   |\e[0m                    Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalLength(a: List[String],\
    \ b: List[String]) : Int = {\n            var c : Int = 0\n            for(a1\
    \ <- a; a2 <- b){\n                c = c + a1.length + a2.length\n           \
    \ }\n            c\n        }\n        \n        if(lst1.length == lst2.length){\n\
    \            return lst1\n        }\n        var temp : List[String] = lst1.toList\n\
    \        while(temp.length != lst2.length){\n            lst1 ++ temp\n      \
    \  }\n        lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw39tlyq6.scala:38)\n\tat Problem.main(tmpw39tlyq6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\
    \ {\n            lst : List[String] = lst1 ::: lst2\n            return lst //return\
    \ if both lists have same size\n        }\n        else {\n            val lst3\
    \ = lst2 diff lst1 //diff returns all elements of lst2 that are not in lst1\n\
    \            lst : List[String] = lst1 ::: lst3\n            return lst //return\
    \ if either list has same size\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9or8tovb.scala:20:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            lst : \e[35mList\e[0m[\e[35mString\e[0m]\
    \ = lst1 ::: lst2\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               end of statement expected but '='\
    \ found\n\e[31m\e[31m-- Error: /tmp/tmp9or8tovb.scala:25:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            lst : \e[35mList\e[0m[\e[35mString\e[0m]\
    \ = lst1 ::: lst3\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               end of statement expected but '='\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9or8tovb.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            lst : \e[35mList\e[0m[\e[35mString\e[0m]\
    \ = lst1 ::: lst2\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: lst\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9or8tovb.scala:21:19 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33mreturn\e[0m lst \e[34m//return if both lists have same size\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \            Not found: lst\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9or8tovb.scala:25:12 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            lst : \e[35mList\e[0m[\e[35mString\e[0m] = lst1 ::: lst3\n\e[31m\e\
    [31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            Not found: lst\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9or8tovb.scala:26:19\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mreturn\e\
    [0m lst \e[34m//return if either list has same size\e[0m\n\e[31m\e[31m   |\e[0m\
    \                   ^^^\e[0m\n\e[31m   |\e[0m                   Not found: lst\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1660009832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.filter( x => lst2.forall\
    \ { y => y <= x } )\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzcwjypp.scala:23)\n\tat Problem.main(tmpmzcwjypp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length != lst2.length)\
    \ return lst1\n        val chars = lst1.map(_ => 1)\n        val resultSet = lst2.flatMap\
    \ { x =>\n            lst1.foreach(c => {\n                if (c == x) chars(c)\
    \ = chars(c) + 1;\n            })\n            if (lst1.size == lst2.size) List(chars)\n\
    \            else totalMatch(lst1, lst2)\n        }\n        resultSet\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpebq744l9.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (c == x) chars(c) = chars(c)\
    \ + \e[31m1\e[0m;\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\
    \e[31m   |\e[0m value update is not a member of List[Int] - did you mean chars.updated?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebq744l9.scala:23:45 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (c == x) chars(c) = chars(c)\
    \ + \e[31m1\e[0m;\n\e[31m\e[31m   |\e[0m                                     \
    \        ^\e[0m\n\e[31m   |\e[0m                                             Found:\
    \    (c : String)\n\e[31m   |\e[0m                                           \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebq744l9.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        resultSet\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (resultSet\
    \ : List[Object])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lstMatch = lst1 diff lst2\n\
    \        lstMatch.size match {\n            case 0 => lstMatch\n            case\
    \ _ => lstMatch.head\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvyvqmjmg.scala:22:31\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m _\
    \ => lstMatch.head\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m  \
    \                    Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e\
    [32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val commonListSize = lst1.filter(x\
    \ => lst2.exists(y => y == x)).size\n        if(commonListSize == lst1.size) return\
    \ lst1\n        else if(commonListSize == lst2.size) return lst2\n        else\
    \ if(lst1.size > lst2.size) lst1.take(lst2.size)\n        else lst2.take(lst1.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpstes5e__.scala:31)\n\tat Problem.main(tmpstes5e__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\
    \ {\n            var result : List[String] = null\n            lst1.foreach {\n\
    \                item => lst2.foreach {\n                    item2 => if (item2.length\
    \ < item.length) result = lst1 else result = lst2\n                }\n       \
    \     }\n            result\n        }\n        else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.totalMatch(scala.collection.immutable.List,\
    \ scala.collection.immutable.List)\" is null\n\tat Problem$.main(tmpkavvx3yb.scala:31)\n\
    \tat Problem.main(tmpkavvx3yb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val retList = lst1.filter(\
    \ x => lst2.count(x) > lst2.count(x => x == x))\n        if (retList.size == lst1.size)\n\
    \            lst1\n        else\n            retList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmrcft7u9.scala:19:51\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mretList\e\
    [0m = lst1.filter( \e[36mx\e[0m => lst2.count(x) > lst2.count(\e[36mx\e[0m =>\
    \ x == x))\n\e[31m\e[31m   |\e[0m                                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                             Found:\
    \    (x : String)\n\e[31m   |\e[0m                                           \
    \  Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case h :: Nil => lst2\n            case h :: t => if(lst2.length\
    \ == lst1.length) h :: totalMatch(t, lst2.drop(lst1.length)) else lst1\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwcjmmab7.scala:27)\n\tat Problem.main(tmpwcjmmab7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst3 = lst1\n        var\
    \ lst4 = lst2\n        var i = 0\n        var j = 0\n        var k = 0\n     \
    \   var total = 0\n        while(i < lst3.length && j < lst4.length){\n      \
    \      total += lst3(j).length\n            total += lst4(j).length\n        \
    \    i+=1\n            j+=1\n        }\n        if(lst3.length == lst4.length){\n\
    \            lst3\n        }else{\n            if(lst3.length < lst4.length){\n\
    \                while(j < lst4.length){\n                    lst3 += lst4(j)\n\
    \                    j+=1\n                }\n            }\n            else{\n\
    \                while(i < lst3.length){\n                    lst4 += lst3(i)\n\
    \                    i+=1\n                }\n            }\n        }\n     \
    \   return lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuh1wbvxf.scala:36:25 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    lst3 += lst4(j)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of\
    \ List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpuh1wbvxf.scala:42:25 ------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m                    lst4 += lst3(i)\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst3 = (lst1, lst2)\n \
    \       val l1 = lst1.toList\n        val l2 = lst2.toList\n        if (l1.length\
    \ == l2.length) {\n            for ((i1, i2) <- l1 zip l2) { \n              \
    \  if (i1 > i2) lst3 = lst3 ::: List(i1)\n            }\n        }\n        lst3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpok3mflwf.scala:24:36\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m\
    \ (i1 > i2) lst3 = lst3 ::: List(i1)\n\e[31m\e[31m   |\e[0m                  \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                         Found: \
    \   (lst3 : (List[String], List[String]))\n\e[31m   |\e[0m                   \
    \      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpok3mflwf.scala:27:8 ---------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        lst3\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    (lst3 : (List[String], List[String]))\n\e[31m   |\e[0m    \
    \    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst2.isEmpty) {\n     \
    \       lst1\n        } else if (lst1.length == lst2.length) {\n            lst1\
    \ match {\n                case Nil => lst2\n                case _ => lst1 ++\
    \ totalMatch(lst2.dropRight(lst1.length), lst1)\n            }\n        } else\
    \ {\n            lst1 match {\n                case Nil => lst2\n            \
    \    case _ => totalMatch(lst1, lst2.dropRight(lst1.length))\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhgk9fx8.scala:35)\n\tat Problem.main(tmpuhgk9fx8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val (common, small) = lst1\
    \ diff lst2\n        if (common.size == lst1.size) return common\n        if (small.size\
    \ == lst2.size) return small\n        totalMatch((lst1 ++ lst2).sortWith((s, t)\
    \ => s < t), (small ++ common).sortWith((s, t) => s < t))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc07ym74h.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (common.size == lst1.size) \e[33mreturn\e\
    [0m common\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value size is not a member of Any\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc07ym74h.scala:20:45 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mif\e[0m (common.size == lst1.size) \e[33mreturn\e[0m common\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Found:    (common\
    \ : Any)\n\e[31m   |\e[0m                                             Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc07ym74h.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (small.size\
    \ == lst2.size) \e[33mreturn\e[0m small\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value size is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpc07ym74h.scala:21:44 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (small.size == lst2.size) \e[33mreturn\e\
    [0m small\n\e[31m\e[31m   |\e[0m                                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    (small\
    \ : Any)\n\e[31m   |\e[0m                                            Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc07ym74h.scala:22:68\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        totalMatch((lst1\
    \ ++ lst2).sortWith((\e[36ms\e[0m, \e[36mt\e[0m) => s < t), (small ++ common).sortWith((\e\
    [36ms\e[0m, \e[36mt\e[0m) => s < t))\n\e[31m\e[31m   |\e[0m                  \
    \                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                       value ++ is not a member of Any\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def match(xs: Iterable[String],\
    \ ys: Iterable[String], i : Int) : Boolean = {\n            if(i <= xs.size &&\
    \ i <= ys.size)\n                xs.headOption.map(x => ys.headOption.map(y =>\
    \ if(x.toCharArray.sameElements(y.toCharArray)) true else false)).getOrElse(false)\n\
    \            else false\n        }\n        val lst3 = lst1.map(x => lst2.filter(y\
    \ => match(x, y, 0)))\n        val lst4 = lst2.map(x => lst1.filter(y => match(y,\
    \ x, 0)))\n        if(lst3.isEmpty && lst4.isEmpty)\n            (lst1 ++ lst2)\n\
    \        else if(lst3.isEmpty && !lst4.isEmpty)\n            lst4\n        else\
    \ if(!lst3.isEmpty && lst4.isEmpty)\n            lst3\n        else lst3 ++ lst4\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppke0vsgg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[33mmatch\e[0m(xs: Iterable[String],\
    \ ys: Iterable[String], i : Int) : Boolean = {\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m            an identifier expected, but 'match'\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppke0vsgg.scala:24:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlst3\e[0m = lst1.map(\e[36mx\e[0m => lst2.filter(\e[36my\e[0m => \e[33mmatch\e\
    [0m(x, y, \e[31m0\e[0m)))\n\e[31m\e[31m   |\e[0m                             \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \         expression expected but \e[31mmatch\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmppke0vsgg.scala:25:50 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlst4\e[0m = lst2.map(\e\
    [36mx\e[0m => lst1.filter(\e[36my\e[0m => \e[33mmatch\e[0m(y, x, \e[31m0\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     expression expected but\
    \ \e[31mmatch\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppke0vsgg.scala:29:12 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            lst4\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m \
    \  |\e[0m            Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mlst4\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m            Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppke0vsgg.scala:31:12\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            lst3\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst2.filter(x => lst1.count(_ == x) < lst2.count(_\
    \ == x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0uorp0ft.scala:27)\n\tat Problem.main(tmp0uorp0ft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val l1 = lst1.toSet\n     \
    \   val l2 = lst2.toSet\n        val common = l1.intersect(l2).size\n        val\
    \ rest = l1.filterNot(l2)\n        if (common > 0)\n            return common\n\
    \        else\n            return rest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoy2mnid3.scala:24:19\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mreturn\e[0m\
    \ common\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Found:    (common : Int)\n\e[31m   |\e[0m                \
    \   Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoy2mnid3.scala:26:19 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            \e[33mreturn\e[0m rest\n\e[31m\e[31m   |\e[0m            \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                   Found:    (rest : Set[String])\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code goes here\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxyu45cb9.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Your code goes here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val map1 = lst1.toMap\n   \
    \     val map2 = lst2.toMap\n        map1.map { case (k, v) => (k, v._2.length)\
    \ }\n            .filter { case (k, v) => v < map2(k) }\n            .map(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcgfjgala.scala:19:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap1\e[0m = lst1.toMap\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Cannot prove that String <:< (K, V)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                             where:    K is a type variable\n\e\
    [31m   |\e[0m                                       V is a type variable\n\e[31m\
    \   |\e[0m                             .\n\e[31m\e[31m-- Error: /tmp/tmpcgfjgala.scala:20:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmap2\e[0m = lst2.toMap\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0m                             Cannot\
    \ prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m             \
    \                where:    K is a type variable\n\e[31m   |\e[0m             \
    \                          V is a type variable\n\e[31m   |\e[0m             \
    \                .\n2 errors found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val map1 = lst1.toMap\n   \
    \     val map2 = lst2.toMap\n        val m1 = map1.filter{ case (k,v) => v.size\
    \ < map2(k).size }\n        val m2 = map2.filter{ case (k,v) => v.size < map1(k).size\
    \ }\n        if (m1.keySet == m2.keySet) m1\n        else m1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpd4vyiznp.scala:19:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap1\e[0m = lst1.toMap\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Cannot prove that String <:< (K, V)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                             where:    K is a type variable\n\e\
    [31m   |\e[0m                                       V is a type variable\n\e[31m\
    \   |\e[0m                             .\n\e[31m\e[31m-- Error: /tmp/tmpd4vyiznp.scala:20:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmap2\e[0m = lst2.toMap\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0m                             Cannot\
    \ prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m             \
    \                where:    K is a type variable\n\e[31m   |\e[0m             \
    \                          V is a type variable\n\e[31m   |\e[0m             \
    \                .\n2 errors found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def isAllCharsLess(a : List[String],\
    \ b: List[String], i : Int) : Boolean = {\n            if (i < 0)\n          \
    \      false\n            else {\n                if (a.length < b.length)\n \
    \                   isAllCharsLess(a, b.init, i-1)\n                else\n   \
    \                 isAllCharsLess(b.init, a, i-1)\n            }\n        }\n \
    \       if (lst1 == lst2)\n            lst1\n        else\n            lst1.foldLeft((List[String](),\
    \ List[String]()))((acc, value) => (acc match {\n                case (left1,\
    \ left2) => (acc match {\n                    case (left1Left, left2Left) => (left1Left\
    \ ::: left2Left, isAllCharsLess(value, left2Left, 0))\n                    case\
    \ (left1Left, left2Left) => (left1Left ::: left2Left, value :: left2Left)\n  \
    \              case (left1, left2) => (value :: left1, left2)\n              \
    \  case (left1, left2) => (left1 ::: value, left2)\n            })\n        ))._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplofnl7e7.scala:39:8 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        ))._1\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmplofnl7e7.scala:40:4 ----------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    unindent\
    \ expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmplofnl7e7.scala:41:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    end of statement expected but 'def' found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplofnl7e7.scala:34:92 --------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                    \e[33mcase\e[0m (left1Left, left2Left)\
    \ => (left1Left ::: left2Left, isAllCharsLess(value, left2Left, \e[31m0\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                 Found:    (value : String)\n\e[31m   |\e[0m\
    \                                              Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplofnl7e7.scala:37:46 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mcase\e[0m (left1, left2) => (left1\
    \ ::: value, left2)\n\e[31m\e[31m   |\e[0m                                   \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \   value ::: is not a member of String\n\e[33m\e[33m-- Warning: /tmp/tmplofnl7e7.scala:54:0\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m54 |\e[0m\n\e[33m\e\
    [33m   |\e[0m^\e[0m\n\e[33m   |\e[0mLine is indented too far to the left, or a\
    \ `}` is missing\n1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst3 : List[String] = lst1\n\
    \        if (lst1 sameElements lst2) {\n            lst3 = lst2\n        }\n \
    \       else {\n            var i : Int = 0\n            while (i < lst1.size)\
    \ {\n                if (lst1(lst.size-1) < lst2(i)) {\n                    lst3\
    \ = lst1\n                }\n                i += 1\n            }\n        }\n\
    \        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3dn7s9z.scala:26:25 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m (lst1(lst.size-\e[31m1\e\
    [0m) < lst2(i)) {\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: lst\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var tempList = lst1\n     \
    \   var numOfCharsOfList1 = ListBuffer.empty[String]\n        var numOfCharsOfList2\
    \ = ListBuffer.empty[String]\n        while (tempList.nonEmpty) {\n          \
    \  if (numOfCharsOfList1.length < tempList.size) {\n                numOfCharsOfList1\
    \ += tempList(0)\n                tempList = tempList.drop(1)\n            }\n\
    \            if (numOfCharsOfList2.length < tempList.size) {\n               \
    \ numOfCharsOfList2 += tempList(0)\n                tempList = tempList.drop(1)\n\
    \            }\n        }\n        if (lst1 == lst2) {\n            lst1\n   \
    \     } else {\n            lst2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdm5yl7wn.scala:41)\n\tat Problem.main(tmpdm5yl7wn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val maxCount1 = lst1.map(s\
    \ => s.length).max\n        val maxCount2 = lst2.map(s => s.length).max\n    \
    \    if (lst1.size == lst2.size) {\n            (lst1 diff lst2) map { s => s\
    \ }\n        } else {\n            (lst1.size + lst2.size * (maxCount2 - maxCount1))\
    \ / maxCount2\n        } flatMap (s => lst1 diff lst2) map { s => s }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqknmn9c6.scala:25:10 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        } \e[33melse\e[0m {\n\e[31m24 |\e[0m        \
    \    (lst1.size + lst2.size * (maxCount2 - maxCount1)) / maxCount2\n\e[31m25 |\e\
    [0m        } flatMap (s => lst1 diff lst2) map { s => s }\n\e[31m\e[31m   |\e\
    [0m               ^\e[0m\n\e[31m   |\e[0m               value flatMap is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size < lst2.size)\
    \ lst2\n        else if (lst1.size == lst2.size) lst1\n        else lst2\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_5t72o_.scala:25)\n\tat Problem.main(tmp8_5t72o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == lst2.size)\
    \ {\n            lst1\n        }\n        else {\n            if(lst1.size < lst2.size)\
    \ {\n                totalMatch(lst2.head,lst2.tail)\n            }\n        \
    \    else if(lst2.size < lst1.size) {\n                totalMatch(lst1.head,lst1.tail)\n\
    \            }\n            else {\n                totalMatch(lst1.head,lst2.head)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwh6jlzk6.scala:24:32\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                totalMatch(lst2.head,lst2.tail)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    String\n\e[31m   |\e[0m                \
    \           Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwh6jlzk6.scala:27:32\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                totalMatch(lst1.head,lst1.tail)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    String\n\e[31m   |\e[0m                \
    \           Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwh6jlzk6.scala:30:32\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                totalMatch(lst1.head,lst2.head)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    String\n\e[31m   |\e[0m                \
    \           Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwh6jlzk6.scala:30:42\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                totalMatch(lst1.head,lst2.head)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     Found:    String\n\e[31m   |\e\
    [0m                                     Required: \e[1m\e[32mList\e[0m\e[1m\e\
    [32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        \n        if(lst1.length ==\
    \ lst2.length){\n            lst1 \n        } else if (lst1.length < lst2.length){\n\
    \            lst1 :: totalMatch(lst2.take(lst1.length), lst1)\n        } else\
    \ {\n            lst1 :: totalMatch(lst1, lst2.take(lst1.length))\n        }\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2pslnim.scala:23:12\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            lst1 :: totalMatch(lst2.take(lst1.length),\
    \ lst1)\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Found:    (lst1 : List[String])\n\e[31m   |\e[0m            Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2pslnim.scala:25:12\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            lst1 :: totalMatch(lst1,\
    \ lst2.take(lst1.length))\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (lst1 : List[String])\n\e[31m   |\e[0m       \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst2.size < lst1.size){\n\
    \            return(lst1)\n        }\n        var result : List[String] = List()\n\
    \        var list1 = lst1.toList\n        var list2 = lst2.toList\n        for(i\
    \ <- list2.length to 0 by -1){\n            val index = list1.indexWhere( x=>\
    \ x.contains(i.toString))\n            if(index != -1){\n                result\
    \ ::= list1(index)\n                list1.remove(index)\n                list2.remove(index)\n\
    \            }\n        }\n        if(list1.size == 0){\n            return(result)\n\
    \        }\n        else{\n            return(totalMatch(list1, list2))\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi8cypym6.scala:29:22 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                list1.remove(index)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member\
    \ of List[String] - did you mean List[String].reduce?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpi8cypym6.scala:30:22 ------------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m                list2.remove(index)\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of\
    \ List[String], but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty) lst2\n  \
    \      else lst1.head :: totalMatch(lst1.tail, lst2.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpra5x4i1f.scala:24)\n\tat Problem.main(tmpra5x4i1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        //your solution here\n    \
    \    val result = lst1 diff lst2\n        result.map(x => (lst1.map(_ => 0).toList.sorted.zipWithIndex.map(p\
    \ => if (p._2 > x._1) p._2 else (p._1 + 1, p._2)))\n                     .groupBy(p\
    \ => p._1).mapValues(_.map(_._2).toList).mapValues(_.map(_._1).toList).mapValues(_.sortWith(_.compareTo(_))\
    \ == false).mapValues(_.head).toList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_fiu_h3.scala:21:91 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        result.map(\e[36mx\e[0m => (lst1.map(_ => \e\
    [31m0\e[0m).toList.sorted.zipWithIndex.map(\e[36mp\e[0m => \e[33mif\e[0m (p._2\
    \ > x._1) p._2 \e[33melse\e[0m (p._1 + \e[31m1\e[0m, p._2)))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \   value _1 is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9_fiu_h3.scala:22:37 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                     .groupBy(p => p._1).mapValues(_.map(_._2).toList).mapValues(_.map(_._1).toList).mapValues(_.sortWith(_.compareTo(_))\
    \ == \e[31mfalse\e[0m).mapValues(_.head).toList)\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^^\e[0m\n\e[31m   |\e[0m                     \
    \              value _1 is not a member of Matchable\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9_fiu_h3.scala:22:59 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m                     .groupBy(p => p._1).mapValues(_.map(_._2).toList).mapValues(_.map(_._1).toList).mapValues(_.sortWith(_.compareTo(_))\
    \ == \e[31mfalse\e[0m).mapValues(_.head).toList)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   value _2 is not a member of Matchable\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_fiu_h3.scala:22:89 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                     .groupBy(p => p._1).mapValues(_.map(_._2).toList).mapValues(_.map(_._1).toList).mapValues(_.sortWith(_.compareTo(_))\
    \ == \e[31mfalse\e[0m).mapValues(_.head).toList)\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \     ^^^^\e[0m\n\e[31m   |\e[0m                                         value\
    \ _1 is not a member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_fiu_h3.scala:22:124\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m                     .groupBy(p\
    \ => p._1)."
  stdout: ''
  timestamp: 1660009849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\
    \ lst1\n        else lst1 ++ lst2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpco5y8b01.scala:24)\n\tat Problem.main(tmpco5y8b01.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var numOfCharsInAll = lst1.size\n\
    \        var numOfCharsInBoth = lst2.size\n        for (str <- lst1 ++ lst2) {\n\
    \            numOfCharsInAll += str.length\n        }\n        if (numOfCharsInAll\
    \ < numOfCharsInBoth) {\n            return lst1\n        }\n        return lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt88_4o0a.scala:32)\n\tat Problem.main(tmpt88_4o0a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\
    \ lst1\n        else if (lst1.size > lst2.size) lst2\n        else if (lst1.size\
    \ < lst2.size) lst1\n        else lst1.head :: totalMatch(lst1.tail, lst2.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp696b2jmr.scala:26)\n\tat Problem.main(tmp696b2jmr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n       var matched = lst1 ++ lst2\n\
    \       matched = matched\n       if (lst2.size == lst1.size) {\n          matched.head\n\
    \       } else {\n          matched\n       }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe0kqd2b7.scala:22:18\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m          matched.head\n\e[31m\e\
    [31m   |\e[0m          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Found:    String\n\
    \e[31m   |\e[0m          Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst2.toSet.intersect(lst1.toSet).toList\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else if (lst3.size\
    \ > lst2.size) {\n            lst1\n        } else {\n            lst2\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaod08dqb.scala:31)\n\tat Problem.main(tmpaod08dqb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Write code here\n      \
    \  lst1.zip(lst2).flatMap { case (e1,e2) => e1.zip(e2).flatMap { case (s,t) =>\
    \ t } }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9qwyohp5.scala:20:84\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst1.zip(lst2).flatMap\
    \ { \e[33mcase\e[0m (e1,e2) => e1.zip(e2).flatMap { \e[33mcase\e[0m (s,t) => t\
    \ } }\n\e[31m\e[31m   |\e[0m                                                 \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                        Found:    (t : Char)\n\e[31m   |\e[0m               \
    \                           Required: IterableOnce[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == lst2.size)\
    \ lst1 else if (lst2.size == lst1.size) lst2 else lst1 :: lst2 :: totalMatch(lst2.tail,\
    \ lst1.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpti8utii_.scala:19:83\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(lst1.size\
    \ == lst2.size) lst1 \e[33melse\e[0m \e[33mif\e[0m (lst2.size == lst1.size) lst2\
    \ \e[33melse\e[0m lst1 :: lst2 :: totalMatch(lst2.tail, lst1.tail)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    List[Object]\n\
    \e[31m   |\e[0m                                                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val count = lst2.map(_.length).sum\n\
    \        lst1.filter(_ < count).take(lst1.size - lst2.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp25jahgak.scala:20:24\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst1.filter(_ < count).take(lst1.size\
    \ - lst2.size)\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    (count : Int)\n\e[31m   |\e[0m   \
    \                     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val resultSet = mutable.HashSet[String]()\n\
    \        lst1.foreach {\n            elem => resultSet += elem\n        }\n  \
    \      lst2.foreach {\n            elem => resultSet += elem\n        }\n    \
    \    resultSet.foldLeft(lst1) {\n            case (acc, elem) => acc + elem\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ia7lx8m.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // return the first list if\
    \ the lists have the same length\n        if(lst1.size == lst2.size) lst1\n  \
    \      // otherwise we need to calculate all of the sums and then pick the list\
    \ with the largest sum\n        else{\n            // we will store the sum of\
    \ the chars in each list as we calculate the sum\n            var sum1 = lst1.map(_.length).sum\n\
    \            var sum2 = lst2.map(_.length).sum\n            val max1 = lst1.map(_.toUpperCase()).max\n\
    \            val max2 = lst2.map(_.toUpperCase()).max\n            // if they\
    \ have the same chars then return the one with the most matching chars\n     \
    \       if(sum1 > sum2) lst1.map(_.toUpperCase())\n            // if they are\
    \ the same length but the chars are different then return the one with the most\
    \ matching chars\n            else if(max1.length == sum1 && max2.length == sum2)\
    \ lst1.map(_.toUpperCase())\n            // if they are the same length and the\
    \ chars are the same but the case is different then return the one with the most\
    \ matching chars\n            else lst2.map(_.toUpperCase())\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_f5ojri_.scala:38)\n\tat Problem.main(tmp_f5ojri_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      lst1 match {\n        case x\
    \ :: xs =>\n          lst2 match {\n            case y :: ys =>\n            \
    \  if (y.length == x.length) {\n                lst1\n              } else {\n\
    \                totalMatch(xs, ys)\n              }\n            case _ =>\n\
    \              totalMatch(xs, lst2)\n          }\n        case _ =>\n        \
    \  lst2\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuv7o4z45.scala:37)\n\tat Problem.main(tmpuv7o4z45.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalChar(s: String) :\
    \ Int = s.toString.length\n        // use scala.collection.mutable.Buffer to calculate\
    \ total character count in both lists\n        val buf1 = new mutable.Buffer[String]\n\
    \        val buf2 = new mutable.Buffer[String]\n        buf1 += lst1\n       \
    \ buf2 += lst2\n        \n        // calculate count for all strings in buf2\n\
    \        val counts = buf2.toList.foldLeft(Map[String, Int]())((map: Map[String,\
    \ Int], item) => {\n          val count = map.getOrElse(item, 0)\n          map.put(item,\
    \ count + 1)\n          map\n        })\n\n        // calculate the total character\
    \ count of buf2\n        val total2 = buf2.foldLeft(0)((i, s) => i + totalChar(s))\n\
    \n        // check the characters in buf1 and buf2\n        val buf1Set = buf1.toSet\n\
    \        val buf2Set = buf2.toSet\n        val commonChars = buf1Set.intersect(buf2Set).toList\n\
    \n        // return the list that has total character count less or equal to the\
    \ total character count in lst1\n        commonChars.toList match {\n        \
    \  case x if x < total2 => buf1\n          case x if total2 < x => buf2\n    \
    \      case x =>\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_ih3_51.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbuf1\e[0m = \e[33mnew\e\
    [0m mutable.Buffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_ih3_51.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbuf2\e[0m = \e[33mnew\e[0m mutable.Buffer[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq_ih3_51.scala:45:17 --------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m          \e[33mcase\e[0m x =>\n\e[31m\e[31m   |\e[0m                \
    \ ^^\e[0m\n\e[31m   |\e[0m                 Found:    Unit\n\e[31m   |\e[0m   \
    \              Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var result : List[String] =\
    \ Nil\n        var count : Int = lst1.size\n        var chars1: Int = 0\n    \
    \    var chars2: Int = 0\n        var temp : List[String] = Nil\n        if (lst2.size\
    \ == 0) {\n            return lst1\n        }\n        if (lst1.size == 0) {\n\
    \            return lst2\n        }\n        for (i <- 0 until count) {\n    \
    \        chars1 += lst1(i).length\n            chars2 += lst2(i).length\n    \
    \    }\n        for (i<- 0 until chars1) {\n            for (j<- 0 until chars2)\
    \ {\n                temp = lst1(i) :: lst2(j)\n                if (temp.size\
    \ == count) {\n                    result = lst1(i) :: lst2(j)\n             \
    \   }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp10maq06p.scala:36:31 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                temp = lst1(i) :: lst2(j)\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           value :: is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp10maq06p.scala:38:37 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    result = lst1(i) :: lst2(j)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     value :: is not a member of String\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val match = new mutable.ListBuffer[String]()\n\
    \        lst1 foreach {\n            item =>\n                if(lst2.contains(item))\
    \ {\n                    match += item\n                }\n        }\n       \
    \ lst1 size < lst2.size match {\n            case true => lst1 +: lst2\n     \
    \       case false => lst1 ++ lst2 +: match\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp91hg7gwf.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[33mmatch\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[String]()\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\
    \e[31m   |\e[0m            pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E103] Syntax Error: /tmp/tmp91hg7gwf.scala:23:20 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mmatch\e[0m += item\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \   Illegal start of statement\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp91hg7gwf.scala:26:24 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        lst1 size < lst2.size \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m\
    \                        ^\e[0m\n\e[31m   |\e[0m                        expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp91hg7gwf.scala:26:18 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        lst1 size < lst2.size \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m   \
    \               ^\e[0m\n\e[31m   |\e[0m                  Not found: <\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp91hg7gwf.scala:26:13 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        lst1 size < lst2.size \e[33mmatch\e[0m {\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e\
    [0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      lst2.zipWithIndex.filter { case\
    \ (s, i) => lst1 contains s && i <= lst2.length }.map(_._1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp006vd77i.scala:19:64 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      lst2.zipWithIndex.filter { \e[33mcase\e[0m (s,\
    \ i) => lst1 contains s && i <= lst2.length }.map(_._1)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value && is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst3 = lst1 // to copy\
    \ lst1 before modifying it\n        var lst4 = lst2\n        var count = 0\n \
    \       for(i <- 0 until lst3.length) {\n            if(lst4(0) <= lst3(i)) count\
    \ += 1\n        }\n        if(lst4.length != count) {\n            lst4 = lst4.filterNot(x\
    \ => lst1.contains(x)).asInstanceOf[List[String]]\n        }\n        return lst4\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfuv5avri.scala:32)\n\tat Problem.main(tmpfuv5avri.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Write your solution here\n\
    \        if (lst1.size == lst2.size) {\n          if (lst1.size == 0)\n      \
    \      (lst2.head) :: (lst2.tail)\n          else\n            (lst1.head) ::\
    \ (lst1.tail) :: totalMatch(lst1.tail, lst2.tail)\n        }\n        else if\
    \ (lst1.size < lst2.size) {\n          (lst2.head) :: (lst2.tail) :: totalMatch(lst1.tail,\
    \ lst2.tail)\n        }\n        else if (lst1.size > lst2.size) {\n         \
    \ (lst1.head) :: (lst1.tail) :: totalMatch(lst1.tail, lst2.tail)\n        }\n\
    \        else \n          lst1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpct9elycm.scala:24:13\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            (lst1.head) :: (lst1.tail)\
    \ :: totalMatch(lst1.tail, lst2.tail)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    List[Object]\n\e[31m   |\e[0m     \
    \        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpct9elycm.scala:27:11 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m          (lst2.head) :: (lst2.tail) :: totalMatch(lst1.tail, lst2.tail)\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Found:    List[Object]\n\e[31m   |\e[0m       \
    \    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpct9elycm.scala:30:11 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m          (lst1.head) :: (lst1.tail) :: totalMatch(lst1.tail, lst2.tail)\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Found:    List[Object]\n\e[31m   |\e[0m       \
    \    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // write code here\n      \
    \  val l1 = lst1.size\n        val l2 = lst2.size\n        if(l1 == l2) (lst1\
    \ :+ lst2.head) else if (l1 < l2) (lst1 :+ lst2.head) else (lst1 :+ lst2.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.totalMatch(tmpj_5ezk0o.scala:22)\n\
    \tat Problem$.main(tmpj_5ezk0o.scala:25)\n\tat Problem.main(tmpj_5ezk0o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.map{x => \n          \
    \  lst2.map{y => \n                if (x.length < y.length) x\n              \
    \  else y \n            }.toSet.toList.mkString(\"\")\n        }.filter(x => x.length\
    \ == lst2.size)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqhjgo__.scala:29)\n\tat Problem.main(tmpgqhjgo__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case x :: Nil => lst2\n            case x :: xs =>\n\
    \                val total1 = x.toList.size\n                val total2 = xs.toList.size\n\
    \                if (total1 < total2) x :: totalMatch(lst2, xs)\n            \
    \    else if (total1 > total2) x :: totalMatch(lst1, xs)\n                else\
    \ x :: totalMatch(lst1, lst2)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.collection.immutable.List.prependedAll(List.scala:148)\n\
    \tat scala.collection.IterableOnceOps.toList(IterableOnce.scala:1251)\n\tat scala.collection.IterableOnceOps.toList$(IterableOnce.scala:1251)\n\
    \tat scala.collection.AbstractIterable.toList(Iterable.scala:926)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:23)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\tat Problem$.totalMatch(tmp_mk9r9kz.scala:26)\n\
    \tat Problem$.totalMat"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case x::xs => if(lst2.size <= lst1.size) x else totalMatch(xs,\
    \ lst2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgn02jnlx.scala:21:53\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m x::xs\
    \ => \e[33mif\e[0m(lst2.size <= lst1.size) x \e[33melse\e[0m totalMatch(xs, lst2)\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (x : String)\n\e[31m   |\e[0m                                            \
    \      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter( x =>\
    \ !lst2.contains(x))\n        val lst4 = lst2.filter( x => !lst1.contains(x))\n\
    \        if(lst3.size == lst4.size) lst3.head :: lst4\n        else lst3.head\
    \ :: lst4.head\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbe5in9yo.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m lst3.head :: lst4.head\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                value :: is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case x::xs => totalMatch(lst2, xs)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvha198e.scala:26)\n\tat Problem.main(tmpqvha198e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size != lst2.size)\
    \ return lst1\n        var lst3 = lst1\n        lst3.foreach( x => lst3 = lst3.filter(\
    \ y => !lst2.contains(y) ))\n        if (lst3.size == lst2.size) return lst3\n\
    \        return lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa3aic575.scala:27)\n\tat Problem.main(tmpa3aic575.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      val l1 = lst1.toList\n      val\
    \ l2 = lst2.toList\n      var cnt = 0\n      var j = 0\n      \n      while (j\
    \ < l1.length && cnt < l2.length) {\n        val ch1 = l1(j).toChar\n        val\
    \ ch2 = l2(j).toChar\n        cnt += (ch1 == ch2)\n        j+=1\n      }\n   \
    \   \n      if (cnt >= l2.length)\n        l1\n      else \n        l2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptle718me.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mch1\e[0m = l1(j).toChar\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value toChar is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptle718me.scala:26:24 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mch2\e[0m = l2(j).toChar\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      value toChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == lst2.length)\
    \ {\n            if (lst1.forall(_.toString.toInt) <= lst2.forall(_.toString.toInt))\
    \ {\n                return lst1\n            } else {\n                return\
    \ lst2\n            }\n        }\n        else {\n            return lst1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2wib4dv0.scala:20:39\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (lst1.forall(_.toString.toInt)\
    \ <= lst2.forall(_.toString.toInt)) {\n\e[31m\e[31m   |\e[0m                 \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \ Found:    Int\n\e[31m   |\e[0m                            Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2wib4dv0.scala:20:72\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (lst1.forall(_.toString.toInt)\
    \ <= lst2.forall(_.toString.toInt)) {\n\e[31m\e[31m   |\e[0m                 \
    \                                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                       Found:    Int\n\e[31m\
    \   |\e[0m                                                       Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst3 = (lst1, lst2)\n \
    \       lst3 = lst3 match {\n            case ((list1Str, list2Str)) :: (list1Str2\
    \ :: list2Str2) => if (list1Str.length == list2Str.length) list1Str :: list1Str2\
    \ :: list2Str2 else (list1Str :: list1Str2, list2Str)\n            case _ => lst3\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppq69a_hp.scala:21:84 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m ((list1Str, list2Str)) ::\
    \ (list1Str2 :: list2Str2) => \e[33mif\e[0m (list1Str.length == list2Str.length)\
    \ list1Str :: list1Str2 :: list2Str2 \e[33melse\e[0m (list1Str :: list1Str2, list2Str)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                 value length is not a member of Any\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmppq69a_hp.scala:21:111 -------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mcase\e[0m ((list1Str, list2Str)) :: (list1Str2\
    \ :: list2Str2) => \e[33mif\e[0m (list1Str.length == list2Str.length) list1Str\
    \ :: list1Str2 :: list2Str2 \e[33melse\e[0m (list1Str :: list1Str2, list2Str)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    List[Any]\n\e\
    [31m   |\e[0m                                  Required: (List[String], List[String])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppq69a_hp.scala:21:161\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m\
    \ ((list1Str, list2Str)) :: (list1Str2 :: list2Str2) => \e[33mif\e[0m (list1Str.length\
    \ == list2Str.length) list1Str :: list1Str2 :: list2Str2 \e[33melse\e[0m (list1Str\
    \ :: list1Str2, list2Str)\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                        ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         value :: is not a member\
    \ of Any\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppq69a_hp.scala:21:175\
    \ -------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m ((list1Str,\
    \ list2Str)) :: (list1Str2 :: list2Str"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        //get the size of the two list\n\
    \        var lst1Size = lst1.size\n        var lst2Size = lst2.size\n        //get\
    \ the number of elements that are common between the two lists\n        var lst1Common\
    \ = lst1Size - lst2Size\n        //get the elements less than the list2 from lst1\n\
    \        var lst2LessThan = lst2.subList(0,lst1Size)\n        //get the elements\
    \ less than the list1 from lst2\n        var lst1LessThan = lst1.subList(0,lst2Size)\n\
    \        //return the list that has total chars in both list1\n        if(lst1Size\
    \ == lst2Size) {\n            return (lst1)\n        }\n        //if the number\
    \ of common elements is greater than the size of lst1 then return lst2\n     \
    \   if(lst1Common > lst1Size) {\n            return (lst2)\n        }\n      \
    \  //if the number of common elements is less than the size of lst2 then return\
    \ lst1\n        if(lst1Common < lst2Size) {\n            return (lst1)\n     \
    \   }\n        //otherwise return lst1 with elements less than lst2 from lst1\n\
    \        return (lst1LessThan.union(lst2LessThan))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp44tbqxs4.scala:25:32 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mlst2LessThan\e[0m = lst2.subList(\e\
    [31m0\e[0m,lst1Size)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue subList is not a member of List[String] - did you mean\
    \ lst2.toList?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp44tbqxs4.scala:27:32\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e\
    [36mlst1LessThan\e[0m = lst1.subList(\e[31m0\e[0m,lst2Size)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue subList\
    \ is not a member of List[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 zip lst2 map { case (s1,\
    \ s2) => s1.zipWithIndex.map(s => if (s._2 < s2._2) s._1 else s._2+1).count(_\
    \ < s2.length) match {\n            case 0 => lst2\n            case _ => s1\n\
    \        }}\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge38byjf.scala:19:84 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1 zip lst2 map { \e[33mcase\e[0m (s1, s2)\
    \ => s1.zipWithIndex.map(\e[36ms\e[0m => \e[33mif\e[0m (s._2 < s2._2) s._1 \e\
    [33melse\e[0m s._2+\e[31m1\e[0m).count(_ < s2.length) \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \      value _2 is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpge38byjf.scala:19:114 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        lst1 zip lst2 map { \e[33mcase\e[0m (s1, s2) => s1.zipWithIndex.map(\e\
    [36ms\e[0m => \e[33mif\e[0m (s._2 < s2._2) s._1 \e[33melse\e[0m s._2+\e[31m1\e\
    [0m).count(_ < s2.length) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                          ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of\
    \ AnyVal, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpge38byjf.scala:20:22 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m \e[31m0\e[0m => lst2\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Found:    (lst2 : List[String])\n\e[31m   |\e[0m                \
    \      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.toList.count(x => lst2.count(y\
    \ => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8q0bjzz_.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst1.toList.count(\e\
    [36mx\e[0m => lst2.count(\e[36my\e[0m => x < y))\n\e[31m\e[31m   |\e[0m      \
    \                         ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        Found:    Int\n\e[31m   |\e[0m                      \
    \         Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size != lst2.size)\
    \ {\n            throw new Exception(\"Lists do not have same size\")\n      \
    \  }\n        var max = 0\n        var newLst1 = lst1.toList\n        var newLst2\
    \ = lst2.toList\n        for(i<-0 to lst1.size-1) {\n            for(j<-0 to lst2.size-1)\
    \ {\n                if(i>=lst1.size && j>=lst2.size) {\n                    newLst1\
    \ = newLst1.tail\n                    newLst2 = newLst2.tail\n               \
    \ }\n                val charsCheck = newLst1(j).length\n                val charsCheck2\
    \ = newLst2(j).length\n                val chars = newLst1(i).length\n       \
    \         val chars2 = newLst2(i).length\n                if(charsCheck > charsCheck2)\
    \ {\n                    max = charsCheck\n                } else if (charsCheck\
    \ < charsCheck2) {\n                    max = charsCheck2\n                }\n\
    \            }\n        }\n        if(max > lst2.size) {\n            newLst2\
    \ = lst2.toList\n        }\n        if(max > lst1.size) {\n            newLst1\
    \ = lst1.toList\n        }\n        if(max > lst1.size || max > lst2.size) {\n\
    \            newLst1 = lst1.toList\n            newLst2 = lst2.toList\n      \
    \  }\n        for(i<-0 to lst1.size-1) {\n            for(j<-0 to lst2.size-1)\
    \ {\n                if(i>=lst1.size && j>=lst2.size) {\n                    newLst1\
    \ = newLst1.tail\n                    newLst2 = newLst2.tail\n               \
    \ }\n                val charsCheck = newLst1(j).length\n                val charsCheck2\
    \ = newLst2(j).length\n                val chars = newLst1(i).length\n       \
    \         val chars2 = newLst2(i).length\n                if(charsCheck > charsCheck2)\
    \ {\n                    max = charsCheck\n                } else if (charsCheck\
    \ < charsCheck2) {\n                    max = charsCheck2\n                }\n\
    \            }\n        }\n        if(max > lst2.size) {\n            newLst2\
    \ = lst2.toList\n        }\n        if(max > lst1.size) {\n            newLst1\
    \ = lst1.toList\n        }\n        if(max > lst1.size || max > lst2.size) {\n\
    \            newLst1 = lst1.toList\n            newLst2 = lst2.toList\n      \
    \  }\n        if(max > lst1.size || max > lst2.size) {\n            newLst1 =\
    \ lst1.toList\n            newLst2 = lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7d1eizjw.scala:96:0 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d1eizjw.scala:81:22\
    \ ------------------------\e[0m\e[0m\n\e[31m81 |\e[0m            newLst2 = lst\n\
    \e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m         \
    \             Not found: lst\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7d1eizjw.scala:95:1 ---------------------\e[0m\e[0m\n\e[31m95\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp7d1eizjw.scala:83:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m83 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == lst2.size)\n\
    \            return lst1\n        else if(lst1.size < lst2.size)\n           \
    \ totalMatch(lst1, lst2.tail)\n        else if(lst1.size > lst2.size)\n      \
    \      totalMatch(lst2.tail, lst1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_3mrxpc.scala:23:13\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m(lst1.size > lst2.size)\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m \
    \  |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required: List[String]\n\
    \e[31m   |\e[0m             Maybe you are missing an else part for the conditional?\n\
    \e[31m24 |\e[0m            totalMatch(lst2.tail, lst1)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val result = lst1.filter(a\
    \ => !lst2.exists(b => a.length < b.length))\n        lst1.filterNot(a => !lst2.exists(b\
    \ => a.length < b.length))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4q_hrjib.scala:24)\n\tat Problem.main(tmp4q_hrjib.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val m1 =  lst1.foldLeft(0)(_\
    \ + lst2.length)\n        val m2 =  lst2.foldLeft(0)(_ + lst1.length)\n      \
    \  if(m1 == m2) return lst1\n        else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpabiwsivz.scala:19:35 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm1\e[0m =  lst1.foldLeft(\e\
    [31m0\e[0m)(_ + lst2.length)\n\e[31m\e[31m   |\e[0m                          \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   Wrong number of parameters, expected: 2\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpabiwsivz.scala:20:35 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm2\e[0m =  lst2.foldLeft(\e[31m0\e[0m)(_\
    \ + lst1.length)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1660009858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val l1 = lst1.toList\n    \
    \    val l2 = lst2.toList\n        if (l1.size == l2.size) {\n          l1 ++\
    \ l2\n        }\n        else {\n          l1 ++ l2.takeWhile(x => !l1.contains(x))\
    \ ++ l2.dropWhile(x => !l2.contains(x))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b96gnz6.scala:30)\n\tat Problem.main(tmp4b96gnz6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val l1 = lst1.toList\n    \
    \    val l2 = lst2.toList\n        if(l1.length == l2.length && l1.length>0){\n\
    \            l1\n        }else if (l1.length != l2.length && l2.length>0){\n \
    \           l2\n        }else if (l1.length == l2.length && l1.length==0){\n \
    \           l2\n        }else if (l1.length != l2.length && l2.length==0){\n \
    \           l1\n        }else {\n            \"\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbrs0j4y7.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[31m\"\"\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[32m\"\"\e[0m : String)\n\e[31m   |\e[0m            Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      var result = lst1\n      var\
    \ lstCount = 0\n      lst2.foreach(elem => {\n          lstCount += elem.length\n\
    \          result = result.filterNot(elem => elem == elem.take(lstCount))\n  \
    \    })\n      result\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpycysbnl2.scala:29)\n\tat Problem.main(tmpycysbnl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst = lst1\n        val\
    \ lst2 = lst2\n        if (lst1 == lst2) lst\n        else (for (elem <- lst2)\
    \ if ((lst.forall(x => x.equals(elem))) == false) lst = lst.::(elem)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpukqrn50u.scala:20:19 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst2\e[0m = lst2\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Recursive\
    \ \e[33mvalue\e[0m \e[35mlst2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == 0 && lst2.size\
    \ == 0) List(Nil)\n        else if(lst1.size == 0) List(lst2.head) \n        else\
    \ if(lst2.size == 0) List(lst1.head)\n        else lst1.zip(lst2).filter(_._1\
    \ < _._1).flatMap(x=>totalMatch(x._1, x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn24enn6n.scala:19:50\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(lst1.size\
    \ == \e[31m0\e[0m && lst2.size == \e[31m0\e[0m) List(Nil)\n\e[31m\e[31m   |\e\
    [0m                                                  ^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    collection.immutable.Nil.type\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpn24enn6n.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m lst1.zip(lst2).filter(_._1 <\
    \ _._1).flatMap(x=>totalMatch(x._1, x._2))\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \        value _1 is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn24enn6n.scala:22:72 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33melse\e[0m lst1.zip(lst2).filter(_._1 < _._1).flatMap(x=>totalMatch(x._1,\
    \ x._2))\n\e[31m\e[31m   |\e[0m                                              \
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                        Found:    String\n\e[31m   |\e[0m                   \
    \                               Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn24enn6n.scala:22:78\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m lst1.zip(lst2).filter(_._1\
    \ < _._1).flatMap(x=>totalMatch(x._1, x._2))\n\e[31m\e[31m   |\e[0m          \
    \                                                                  ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    String\n\
    \e[31m   |\e[0m                                                  Required: \e\
    [1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain"
  stdout: ''
  timestamp: 1660009870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.filter(x => lst2.map(y\
    \ => x.length).max() < lst2.map(y => x.length).max()).sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppgmjy8o4.scala:19:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.filter(\e[36mx\e[0m => lst2.map(\e[36my\e\
    [0m => x.length).max() < lst2.map(\e[36my\e[0m => x.length).max()).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter ord of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e\
    [0mord: Ordering[B]): Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.map(_.length).reduceLeft((a,\
    \ b) => if (a > b) a else b)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuzvcx6a.scala:19:37\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst1.map(_.length).reduceLeft((\e\
    [36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e[0m (a > b) a \e[33melse\e[0m b)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\
    \ {\n            lst1.toList\n        } else {\n            lst1.toList ++ lst2.toList\
    \ -- lst1.toList -- lst2.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzpg22m3w.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            lst1.toList ++ lst2.toList -- lst1.toList\
    \ -- lst2.toList\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -- is not a member of List[String]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val l1 = lst1.toList\n    \
    \    val l2 = lst2.toList\n        var lst3 = List[String]()\n        if (l1.size\
    \ == l2.size) {\n            lst3 = l1\n        }\n        else {\n          \
    \  for (x <- l1) {\n                if (l2.contains(x)) {\n                  \
    \  lst3 :+= x\n                }\n            }\n        }\n        lst3\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0_5fuu5a.scala:36)\n\tat Problem.main(tmp0_5fuu5a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      lst1 match {\n        case Nil\
    \ => lst2\n        case x :: xs => totalMatch(xs, lst2 filter { y => x < y } map\
    \ (x :: _))\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8tdnk03u.scala:21:73 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mcase\e[0m x :: xs => totalMatch(xs, lst2\
    \ filter { y => x < y } map (x :: _))\n\e[31m\e[31m   |\e[0m                 \
    \                                                        ^^^^\e[0m\n\e[31m   |\e\
    [0m                                      value :: is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def getCharCount(s1 : String,\
    \ s2 : String) : Int = {\n            val result = s1.length + s2.length\n   \
    \         result\n        }\n        val charCount1 = lst1.map(x => getCharCount(x,\
    \ _)).sum\n        val charCount2 = lst2.map(x => getCharCount(_, x)).sum\n  \
    \      if (charCount1 == charCount2) {\n            return lst1\n        } else\
    \ {\n            return lst2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5osz5jem.scala:23:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcharCount1\e[0m = lst1.map(\e\
    [36mx\e[0m => getCharCount(x, _)).sum\n\e[31m\e[31m   |\e[0m                 \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \ No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \  where:    B is a type variable with constraint >: String => Int\n\e[31m   |\e\
    [0m         .\n\e[31m\e[31m-- Error: /tmp/tmp5osz5jem.scala:24:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcharCount2\e[0m = lst2.map(\e\
    [36mx\e[0m => getCharCount(_, x)).sum\n\e[31m\e[31m   |\e[0m                 \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \ No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \  where:    B is a type variable with constraint >: String => Int\n\e[31m   |\e\
    [0m         .\n2 errors found\n"
  stdout: ''
  timestamp: 1660009871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val (list1, list2) = lst1 ++\
    \ lst2\n        val maxCount = list1.maxBy(_.length)\n        list2.filterNot(_.startsWith(maxCount))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmxo4o19i.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = list1.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value maxBy is not a member of Any\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmxo4o19i.scala:21:14 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        list2.filterNot(_.startsWith(maxCount))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value filterNot\
    \ is not a member of Any\n2 errors found\n"
  stdout: ''
  timestamp: 1660009871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val listSize = lst1.size\n\
    \        val listSize = lst2.size\n        val lst3= (0 until listSize).map(i\
    \ => {\n            lst1(lst1(i)) match {\n                case Some(\"null\"\
    ) => lst1(i)\n                case None => lst2(lst2(i))\n            }\n    \
    \    }).toList\n        lst3.foreach(x => { \n            val nm = x.mkString.size\n\
    \            if(lst3.contains(x)){\n                lst3 -= x\n            }\n\
    \        })\n        if (lst3.isEmpty){\n            lst3\n        }else{\n  \
    \          lst3\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzvrbasi.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlistSize\e[0m = lst2.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlistSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mlistSize\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprzvrbasi.scala:22:21\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            lst1(lst1(i)) \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 Found:    String\n\e[31m   |\e[0m                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprzvrbasi.scala:24:21\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e\
    [0m None => lst2(lst2(i))\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    None.type\n\e[31m   |\e[0m     \
    \                Required: String\n\e[31m   |\e[0m                     pattern\
    \ type is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmprzvrbasi.scala:24:38 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m None => lst2(lst2(i))\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    String\n\e[31m   |\e[0m       \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmprzvrbasi.scala:30:21 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                lst3 -= x\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m        value -= is not a member of List[String]\
    \ - did you mean lst3.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660009872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Write your implementation\
    \ here\n        val sum1 = lst1.toSeq.map(x => x.length).sum\n        val sum2\
    \ = lst2.toSeq.map(x => x.length).sum\n        if(sum1 == sum2) lst1\n       \
    \ else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjyoiu7o.scala:28)\n\tat Problem.main(tmpbjyoiu7o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n         val map1 = lst1.zipWithIndex.toMap\n\
    \         val map2 = lst2.zipWithIndex.toMap\n         val map3 = map1 ++ map2\n\
    \         val sumMap = map3.map {\n             case (key: Int, value: (String,\
    \ Int)) => (value, key) \n         }\n         val list = sumMap.map(kv => kv._2._1)\n\
    \         if(list.size == lst2.length) list else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwa0lt_pr.scala:25:43 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m         \e[33mval\e[0m \e[36mlist\e[0m = sumMap.map(\e\
    [36mkv\e[0m => kv._2._1)\n\e[31m\e[31m   |\e[0m                              \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value _1\
    \ is not a member of String & Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _  => lst2 match {\n                case Nil =>\
    \ lst1\n                case _ => if (lst1.size == lst2.size) lst1 else lst1.take(lst2.size).filter(_\
    \ < lst2).mkString(\"\")\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprp00edre.scala:23:96\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e\
    [0m _ => \e[33mif\e[0m (lst1.size == lst2.size) lst1 \e[33melse\e[0m lst1.take(lst2.size).filter(_\
    \ < lst2).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                                         Found:  \
    \  (lst2 : List[String])\n\e[31m   |\e[0m                                    \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == lst2.length)\
    \ {\n            lst1.sortWith(_.compare(lst2) < 0)\n            return lst1\n\
    \        }\n        val result = lst1.filterNot(x => lst2.contains(x))\n     \
    \   result.sortWith(_.compare(lst2) < 0)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmph7i911os.scala:20:26 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            lst1.sortWith(_.compare(lst2) < \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmph7i911os.scala:24:24 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        result.sortWith(_.compare(lst2) < \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Wrong number of parameters, expected: 2\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter((_._1).length\
    \ <= (_._2).length).map((_._1))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp5l7qhmy2.scala:19:31 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter((_._1).length <= (_._2).length).map((_._1))\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \ Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 =>\
    \ _$1._1.\n1 error found\n"
  stdout: ''
  timestamp: 1660009867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val matcher = lst2.map(s =>\
    \ (lst1 map { \n            s => s.toLower.filter(f => f.isLetter) map { l =>\
    \ l }\n         }).flatten : _*)\n        lst1 match {\n            case Nil =>\
    \ Nil\n            case _ => matcher.reduceLeft(_ + _)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E031] Syntax Error: /tmp/tmpek6r6ulo.scala:21:22 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m         }).flatten : _*)\n\e[31m\e[31m   |\e[0m    \
    \                  ^\e[0m\n\e[31m   |\e[0m                      * can be used\
    \ only for last argument\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpek6r6ulo.scala:20:19 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[36ms\e[0m => s.toLower.filter(\e[36mf\e[0m => f.isLetter) map\
    \ { \e[36ml\e[0m => l }\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 value toLower is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpek6r6ulo.scala:24:43 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m _ => matcher.reduceLeft(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                         ^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of Seq[Nothing], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val map = lst1.zipWithIndex.map(\
    \ a => (a._1, a._2) )\n        val map1 = lst2.zipWithIndex.map( a => (a._1, a._2)\
    \ )\n        val map2 = lst1.zipWithIndex.map( a => (a._1, a._2) )\n        \n\
    \        var lst = new List[String]()\n        for( i <- map1.keySet ) \n    \
    \        if( !map.contains( i ) )\n                lst = lst :+ lst1( map1( i\
    \ ) ) \n            else\n                lst = lst :+ lst2( map2( i ) ) \n  \
    \      lst\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61drp73f.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m( i <- map1.keySet ) \n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue keySet is\
    \ not a member of List[(String, Int)] - did you mean map1.toSet?\n1 error found\n"
  stdout: ''
  timestamp: 1660009872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val n = lst1.size\n       \
    \ val m = lst2.size\n        if (m == 0) lst1\n        else if (n == 0) lst2\n\
    \        else if (lst1.toSet.size == lst2.toSet.size) lst1\n        else totalMatch(lst1.tail,\
    \ lst2.takeWhile((v) => lst1.toSet.contains(v))) ++ totalMatch(lst1, lst2.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmb4ht0yd.scala:28)\n\tat Problem.main(tmpmb4ht0yd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <=\
    \ lst2)\n        if (lst3.size == lst2.size) {\n            lst2\n        }\n\
    \        else if (lst3.size == lst1.size) {\n            lst1\n        }\n   \
    \     else totalMatch(lst2, lst3)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd0g4saxq.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ <= lst2)\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    (lst2 : List[String])\n\e[31m   |\e[0m                                  \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val set1 = new mutable.Set[String](lst1)\n\
    \        val set2 = new mutable.Set[String](lst2)\n\n        if (set1.size ==\
    \ set2.size) {\n            return lst1\n        }\n        val intersection =\
    \ set1.intersect(set2)\n        set1.retain { element => set2.retain { element2\
    \ => intersection.retain { element3 => element3 == element && element2 == element2\
    \ } } }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpow3q6zbu.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset1\e[0m = \e[33mnew\e\
    [0m mutable.Set[\e[35mString\e[0m](lst1)\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpow3q6zbu.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.Set[\e[35mString\e[0m](lst2)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == lst2.length)\
    \ {\n            if (lst1.forall(x => lst2.exists(y => x == y))) {\n         \
    \       return lst1\n            } else { \n                return lst2\n    \
    \        }\n        } else { \n            return lst2\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl54teadj.scala:32)\n\tat Problem.main(tmpl54teadj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 zip lst2 map {\n     \
    \       case (a: String, b: String) => a.length <= b.length ? a : b\n        }.flatten\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpsgatmjux.scala:20:12 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m (a: String, b: String) =>\
    \ a.length <= b.length ? a : b\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter x$1 of expanded function:\n\e[31m   |\e\
    [0m   x$1 => \n\e[31m   |\e[0m     x$1\e[33m match \e[0m\n\e[31m   |\e[0m    \
    \   {\n\e[31m   |\e[0m         \e[33mcase \e[0m(a:\e[35mString\e[0m, b:\e[35mString\e\
    [0m) => \n\e[31m   |\e[0m           a.length <= b.length ? a:\e[35mb\e[0m\n\e\
    [31m   |\e[0m       }.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsgatmjux.scala:20:70\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m (a: String, b: String) => a.length <= b.length ? a : b\n\e[31m\e[31m   |\e\
    [0m                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                                       Not found:\
    \ type b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsgatmjux.scala:20:43\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m (a: String, b: String) => a.length <= b.length ? a : b\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                                   Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val n1 = lst1.size\n      \
    \  val n2 = lst2.size\n        if(n1 == n2) lst1\n        else if(n1 < n2) lst1.take(n1)\n\
    \        else lst1.take(n1).zip(lst2).takeWhile(_._1 < _._2).map{case (x, y) =>\
    \ y}.map { x => x.toString }.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps4etcnby.scala:23:49 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m lst1.take(n1).zip(lst2).takeWhile(_._1\
    \ < _._2).map{\e[33mcase\e[0m (x, y) => y}.map { x => x.toString }.toList\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^\e[0m\n\e\
    [31m   |\e[0m                                      value _1 is not a member of\
    \ String\n1 error found\n"
  stdout: ''
  timestamp: 1660009874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(x =>\
    \ x._1.length >= x._2.length).map(_._1).sortWith(_ > _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcgl7sy5h.scala:23)\n\tat Problem.main(tmpcgl7sy5h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst2.foldLeft(lst1)((a, b)\
    \ => a.map(_.toInt).zip(b.map(_.toInt)).map({\n            case (a1, b1) if (a1\
    \ > b1) => a1\n            case (b1, a1) if (a1 > b1) => b1\n            case\
    \ _ => 0\n        }).filter(_._1 < _._1).map(_._2)).distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp7fxc34fz.scala:23:18 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }).filter(_._1 < _._1).map(_._2)).distinct\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \           Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7fxc34fz.scala:23:37 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        }).filter(_._1 < _._1).map(_._2)).distinct\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                             value _2 is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst_char1 =  lst1.map(x\
    \ => x.toList).flatten\n        val lst_char2 =  lst2.map(x => x.toList).flatten\n\
    \        var lst_char3 : ListBuffer[String] = new ListBuffer[String]()\n     \
    \   val lst_char4 = lst_char1.filter(x => !lst_char2.contains(x)).++(lst_char2.filter(x\
    \ => !lst_char1.contains(x))).++(lst_char2.filter(x => !lst_char1.contains(x)))\n\
    \        for(i <- lst_char4){\n            lst_char3 += List(i)\n        }\n \
    \       return lst_char3.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu39kup_e.scala:24:29\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            lst_char3 += List(i)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Found:    List[Char]\n\e[31m   |\e[0m                \
    \         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst match {\n            case\
    \ Nil => lst2\n            case x :: Nil => lst1\n            case _ => lst1 ++\
    \ lst2.filter { x => lst1.count(_ < x) }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbe943xv7.scala:19:8 -------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m\
    \        ^^^\e[0m\n\e[31m   |\e[0m        Not found: lst\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe943xv7.scala:22:59 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m _ => lst1 ++ lst2.filter\
    \ { x => lst1.count(_ < x) }\n\e[31m\e[31m   |\e[0m                          \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                   Found:    Int\n\e[31m   |\e[0m           \
    \                                      Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == lst2.size)\
    \ lst1\n        else {\n            val sortedList1 = lst1.sorted\n          \
    \  val sortedList2 = lst2.sorted\n            var charCount = 0\n            for(i\
    \ <- 0 until sortedList1.length) {\n                if(sortedList1(i).toChar ==\
    \ sortedList2(i).toChar)\n                    charCount += 1\n            }\n\
    \            if(charCount == sortedList1.length)\n                lst1\n     \
    \       else {\n                val ret = new ArrayBuffer[String]()\n        \
    \        for(i <- 0 until sortedList1.length)\n                    if(sortedList1(i).toChar\
    \ > sortedList2(i).toChar) ret += sortedList1(i)\n                ret.toList\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt2yk_rrm.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m(sortedList1(i).toChar ==\
    \ sortedList2(i).toChar)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toChar is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt2yk_rrm.scala:33:38 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mif\e[0m(sortedList1(i).toChar\
    \ > sortedList2(i).toChar) ret += sortedList1(i)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \       value toChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 +: lst2 match {\n    \
    \        case List() => lst1\n            case List() => lst2\n            case\
    \ Nil if Nil() => lst1\n            case Nil => lst2\n            case x :: xs\
    \ => totalMatch(x, xs)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbfa4ba0n.scala:22:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m Nil \e[33mif\e[0m Nil() =>\
    \ lst1\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter n of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mtrait\e[0m \e[35mLinearSeqOps\e[0m: (n: Int): Nothing\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbfa4ba0n.scala:24:39 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => totalMatch(x, xs)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (x : Object)\n\e[31m   |\e\
    [0m                                       Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbfa4ba0n.scala:24:42 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => totalMatch(x,\
    \ xs)\n\e[31m\e[31m   |\e[0m                                          ^^\e[0m\n\
    \e[31m   |\e[0m                                          Found:    (xs : List[Object])\n\
    \e[31m   |\e[0m                                          Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 diff lst2 \n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2xqmddv.scala:26)\n\tat Problem.main(tmpr2xqmddv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.foreach { string =>\n\
    \            lst2.foreach { string2 =>\n                if(string == string2)\
    \ lst1 += string\n            }\n        }\n        lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqi0ssen.scala:21:43 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m(string == string2) lst1\
    \ += string\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of List[String] - did you\
    \ mean lst1.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == lst2.size)\
    \ {\n            return lst1\n        }\n        if(lst1.size < lst2.size) {\n\
    \            lst1 +: lst2.filter(e => !lst1.contains(e))\n        } else {\n \
    \           lst2 +: lst1.filter(e => !lst2.contains(e))\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprsb3oucu.scala:23:12\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            lst1 +: lst2.filter(\e\
    [36me\e[0m => !lst1.contains(e))\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            Found:    (lst1 : List[String])\n\e[31m   |\e[0m  \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprsb3oucu.scala:25:12 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            lst2 +: lst1.filter(\e[36me\e[0m => !lst2.contains(e))\n\e\
    [31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (lst2 : List[String])\n\e[31m   |\e[0m            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1 == lst2) {\n     \
    \       lst1\n        } else if (lst1.size == lst2.size) {\n            lst1\n\
    \        } else {\n            lst2.head\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0wz9i960.scala:24:17\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            lst2.head\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:   \
    \ String\n\e[31m   |\e[0m            Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == lst2.size){\n\
    \            var res1 = lst1\n            var res2 = lst2\n            val list3\
    \ = lst1 ++ lst2\n            val list4 = lst2 ++ lst1\n            list3.foreach{\
    \ x =>\n                list4.foreach{ y =>\n                    val charCount\
    \ = x.size + y.size\n                    if(charCount > res1.size){\n        \
    \                res1 = x\n                        res2 = y\n                \
    \    }\n                }\n            }\n            (res1, res2)\n        }\n\
    \        else{\n            (lst1, lst2)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnk7s21jc.scala:28:31\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                        res1\
    \ = x\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (x : String)\n\e[31m   |\e[0m    \
    \                           Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnk7s21jc.scala:29:31 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        res2 = y\n\e[31m\e[31m   |\e\
    [0m                               ^\e[0m\n\e[31m   |\e[0m                    \
    \           Found:    (y : String)\n\e[31m   |\e[0m                          \
    \     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnk7s21jc.scala:33:12 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m            (res1, res2)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31m(\e[0mList[String\e[1m\e\
    [31m]\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0m\e[1m\e[31mString\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m            Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnk7s21jc.scala:36:12\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            (lst1, lst2)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    \e[1m\e[31m(\e[0mList[String\e[1m\e[31m]\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m\e[1m\e[31mString\e[0m]\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m            Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.map(x=>{\n           \
    \ if (lst2.count(y=> x.toList.map(y=> y.toInt).contains(_)) < lst2.count(y=> y.toList.map(y=>\
    \ y.toInt).contains(_))) x else \"\"\n        }).filter(x=>!x.isEmpty).sortBy(x=>x).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppcf_ebvj.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (lst2.count(\e\
    [36my\e[0m=> x.toList.map(\e[36my\e[0m=> y.toInt).contains(_)) < lst2.count(\e\
    [36my\e[0m=> y.toList.map(\e[36my\e[0m=> y.toInt).contains(_))) x \e[33melse\e\
    [0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    \e[1m\e[31mInt\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\
    \e[31m   |\e[0m                               Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppcf_ebvj.scala:20:87 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (lst2.count(\e[36my\e[0m=>\
    \ x.toList.map(\e[36my\e[0m=> y.toInt).contains(_)) < lst2.count(\e[36my\e[0m=>\
    \ y.toList.map(\e[36my\e[0m=> y.toInt).contains(_))) x \e[33melse\e[0m \e[31m\"\
    \"\e[0m\n\e[31m\e[31m   |\e[0m                                               \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ \e[1m\e[31mInt\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e\
    [31m \e[0mBoolean\n\e[31m   |\e[0m                                           \
    \     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcf_ebvj.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        }).filter(x=>!x.isEmpty).sortBy(x=>x).head\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code goes here.\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_jflx4b.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Your code goes here.\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var res = lst1.clone()\n  \
    \      for (i <- 0 until lst1.size){\n            for (j <- 0 until lst2.size){\n\
    \                if (lst1(i).length == lst2(j).length){\n                    val\
    \ temp = lst1(i)\n                    lst1(i) = lst1(j)\n                    lst1(j)\
    \ = temp\n                }\n            }\n        }\n        res\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpycsn15b_.scala:19:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = lst1.clone()\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e\
    [0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot be accessed\
    \ as a member of (lst1 : List[String]) from module class Problem$.\n\e[31m   |\e\
    [0m Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted because\
    \ prefix type List[String]\n\e[31m   |\e[0m does not conform to \e[33mobject\e\
    [0m \e[35mProblem\e[0m where the access takes place\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpycsn15b_.scala:24:20 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m                    lst1(i) = lst1(j)\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[String]\
    \ - did you mean lst1.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpycsn15b_.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    lst1(j)\
    \ = temp\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[String] - did you mean lst1.updated?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == 0) (lst2 :+\
    \ lst1.head)\n        else if (lst2.size == 0) (lst1 :+ lst2.head)\n        else\
    \ {\n            val result1 = lst1 filter (x => lst2.exists(y => y >= x))\n \
    \           val result2 = lst2 filter (x => lst1.exists(y => y >= x))\n      \
    \      if (result1.size < result2.size) (lst2 :+ lst1.head)\n            else\
    \ (lst1 :+ lst2.head)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.totalMatch(tmpq46vyms6.scala:19)\n\
    \tat Problem$.main(tmpq46vyms6.scala:29)\n\tat Problem.main(tmpq46vyms6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprvxz4gbc.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \n\e[31m20\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val list1 = lst1.sortWith(_.length\
    \ < _.length)\n        val list2 = lst2.sortWith(_.length < _.length)\n      \
    \  val commonString = (list1 ++ list2).filterNot(_.equals(\"\"))\n        commonString.length\
    \ match {\n            case 1 => commonString.head\n            case _ => commonString.take(commonString.length-1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc11cp_7j.scala:23:35\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m \e\
    [31m1\e[0m => commonString.head\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m  \
    \                    Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e\
    [32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ \"hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _  ::\
    \ _ => lst1\n            case \"hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ ::\
    \ _ :: _ :: _ :: _ :: _ :: _  :: _ => lst1\n            case \"hi\" :: _ :: _\
    \ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _  :: _ :: _ => lst1\n\
    \            case \"hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ ::\
    \ _ :: _ :: _  :: _ :: _ :: _ => lst1\n            case \"hi\" :: _ :: _ :: _\
    \ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ => lst1\n           \
    \ case \"hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _\
    \ :: _ => lst1\n            case \"hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ ::\
    \ _ :: _ :: _ :: _ :: _ :: _ => lst1\n            case \"hi\" :: _ :: _ :: _ ::\
    \ _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ => lst1\n            case \"\
    hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ => lst1\n\
    \            case \"hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ ::\
    \ _ :: _ :: _ :: _ => lst1\n            case \"hi\" :: _ :: _ :: _ :: _ :: _ ::\
    \ _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ => lst1\n            case \"hi\" :: _ ::\
    \ _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ => lst1\n         \
    \   case \"hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ ::\
    \ _ :: _ => lst1\n            case \"hi\" :: _ :: _ :: _ :: _ :: _ :: _ :: _ ::\
    \ _ :: _ :: _ :: _ :: _ :: _ :: _ => lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_owgrvm2.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_owgrvm2.scala:33:95\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mcase\e\
    [0m \e[31m\"hi\"\e[0m :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ ::\
    \ _ :: _ :: _ => lst\n\e[31m\e[31m   |\e[0m                                  \
    \                                                             ^^^\e[0m\n\e[31m\
    \   |\e[0m                                                          Not found:\
    \ lst\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_owgrvm2.scala:47:1\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp_owgrvm2.scala:35:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Solution here ...\n    \
    \    lst1.foldLeft(lst2)((acc, cur) => (cur).count < acc.count ? acc + cur : acc)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5mn1t9zo.scala:20:80 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        lst1.foldLeft(lst2)((\e[36macc\e[0m, \e[36mcur\e\
    [0m) => (cur).count < acc.count ? acc + cur : \e[35macc\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \           ^^^\e[0m\n\e[31m   |\e[0m                                        \
    \             Not found: type acc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5mn1t9zo.scala:20:54 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        lst1.foldLeft(lst2)((\e[36macc\e[0m, \e[36mcur\e[0m) => (cur).count\
    \ < acc.count ? acc + cur : \e[35macc\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is\
    \ not a member of (Char => Boolean) => Int, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5mn1t9zo.scala:20:66\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst1.foldLeft(lst2)((\e\
    [36macc\e[0m, \e[36mcur\e[0m) => (cur).count < acc.count ? acc + cur : \e[35macc\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value ? is not a member\
    \ of (String => Boolean) => Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660009886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      val result = lst1.size match\
    \ {\n        case x if lst2.size < x => lst1\n        case x if lst2.size == x\
    \ => lst2\n        case _ => lst1.union(lst2.filter(_ < x))\n      }\n      result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ikek6j0.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mcase\e[0m _ => lst1.union(lst2.filter(_\
    \ < x))\n\e[31m\e[31m   |\e[0m                                             ^\e\
    [0m\n\e[31m   |\e[0m                                             Not found: x\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val m = lst1.count\n      \
    \  val n = lst2.count\n        if(m==n) lst1\n        else if(m < n) lst2\n  \
    \      else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpohf9aev_.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(m < n) lst2\n\e\
    [31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of (String => Boolean) => Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n       val diff = (lst1.map(s => s(0))\
    \ diff lst2.map(s => s(0))).sorted\n       val same = (lst1.map(s => s(0)) sameElements\
    \ lst2.map(s => s(0))).sorted\n       if(diff.length == 0 || same.length == 0)\
    \ {\n           lst1\n       } else {\n           lst1 find (s => s.mkString.length\
    \ <= diff.mkString.length)\n       }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_504bnd.scala:20:73 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m       \e[33mval\e[0m \e[36msame\e[0m = (lst1.map(\e\
    [36ms\e[0m => s(\e[31m0\e[0m)) sameElements lst2.map(\e[36ms\e[0m => s(\e[31m0\e\
    [0m))).sorted\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value sorted is not a member of Boolean\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_504bnd.scala:24:11 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m           lst1 find (\e[36ms\e[0m => s.mkString.length\
    \ <= diff.mkString.length)\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Found:    \e[1m\e[31mOption\e[0m[String]\n\e[31m\
    \   |\e[0m           Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val totals = lst1 zip lst2\n\
    \        val res = totals.reduce{ (x, y) => x ++ y }\n        if(res.size == lst1.size)\
    \ return lst1\n        if(res.size == lst2.size) return lst2\n        res.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogxebdrj.scala:20:43\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m = totals.reduce{ (\e[36mx\e[0m, \e[36my\e[0m) => x ++ y }\n\e[31m\e[31m  \
    \ |\e[0m                                           ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Found:    \e[1m\e[31mString\e[0m\e[1m\e[31m \e[0m\e[1m\e\
    [31m*:\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mString\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m*:\e\
    [0m\e[1m\e[31m \e[0m(\e[1m\e[31my\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e\
    [31m \e[0m\e[1m\e[31m(\e[0mString, String\e[1m\e[31m)\e[0m)\n\e[31m   |\e[0m \
    \                   Required: (String, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpogxebdrj.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        res.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Tuple.Last[(String, String)]\n\e[31m   |\e\
    [0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 || lst2.length\
    \ == 0) {\n            lst1\n        } else if (lst1.length == lst2.length) {\n\
    \            for (i <- 0 until lst1.length) {\n                if (lst1(i) < lst2(i))\
    \ {\n                    lst1\n                }\n            }\n        } else\
    \ {\n            lst1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptnjv4z1p.scala:22:12\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until lst1.length) {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ List[String]\n\e[31m23 |\e[0m                \e[33mif\e[0m (lst1(i) < lst2(i))\
    \ {\n\e[31m24 |\e[0m                    lst1\n\e[31m25 |\e[0m                }\n\
    \e[31m26 |\e[0m            }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size < lst2.size) lst1\
    \ \n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvly8d29.scala:28)\n\tat Problem.main(tmpvvly8d29.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zipWithIndex.map(a =>\
    \ (a._2, a._1.toString.size)).sortWith(_._1 < _._1).map(a => lst2(a._1))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7b2tkzj.scala:24)\n\tat Problem.main(tmpb7b2tkzj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val counts = lst1.map((_, 1L)).zip(lst2.map((_,\
    \ 1L)))\n        counts match {\n            case (Some((c1, n1)), Some((c2, n2))\
    \ if (c1 == c2) => lst1\n            case (Some((c1, n1)), Some((c2, n2)) => lst1\n\
    \            case _ => lst1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5njsoi82.scala:21:49 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m (Some((c1, n1)), Some((c2,\
    \ n2)) \e[33mif\e[0m (c1 == c2) => lst1\n\e[31m\e[31m   |\e[0m               \
    \                                  ^^\e[0m\n\e[31m   |\e[0m                  \
    \                          ')' expected, but 'if' found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5njsoi82.scala:38:1 ---------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length < lst2.length)\
    \ lst1\n        else if (lst1.length > lst2.length) lst2\n        else if (lst1\
    \ == lst2) lst1\n        else totalMatch(lst1.dropRight(lst2.length), lst2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiop2f5c7.scala:26)\n\tat Problem.main(tmpiop2f5c7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case x :: xs => totalMatch(xs, lst2)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwayo3_w3.scala:27)\n\tat Problem.main(tmpwayo3_w3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val count1 = lst1.size\n  \
    \      val count2 = lst2.size\n        val lst3 = mutable.ListBuffer[String]()\n\
    \        var total = 0\n        for (i<- 0 to count1) {\n            total +=\
    \ lst1(i).size\n        }\n        for (i<- 0 to count2) {\n            total\
    \ += lst2(i).size\n        }\n        if (lst2.size < lst1.size) {\n         \
    \   for (i<- 0 to count1) {\n                if (lst1(i).size == total) {\n  \
    \                  lst3 += lst1(i)\n                }\n            }\n       \
    \     return lst3.toList\n        }\n        else {\n            for (i<- 0 to\
    \ count2) {\n                if (lst2(i).size == total) {\n                  \
    \  lst3 += lst2(i)\n                }\n            }\n            return lst3.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8uax3t6t.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlst3\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 ++ lst2\n        lst1.count(x\
    \ => lst2.count(y => x == y))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppn8pjfga.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst1.count(\e[36mx\e\
    [0m => lst2.count(\e[36my\e[0m => x == y))\n\e[31m\e[31m   |\e[0m            \
    \            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \     Found:    Int\n\e[31m   |\e[0m                        Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 zip lst2 map { case (a,\
    \ b) => (a.size + b.size) < (a.size + b.size) ? a : b }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeghxfutc.scala:19:87 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1 zip lst2 map { \e[33mcase\e[0m (a, b) =>\
    \ (a.size + b.size) < (a.size + b.size) ? a : \e[35mb\e[0m }\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \               Not found: type b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpeghxfutc.scala:19:81 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        lst1 zip lst2 map { \e[33mcase\e[0m (a, b) => (a.size + b.size) < (a.size\
    \ + b.size) ? a : \e[35mb\e[0m }\n\e[31m\e[31m   |\e[0m                      \
    \                                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                          value ? is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.map(x => lst2.count(y\
    \ => x < y)).takeWhile(x => x < lst2.size).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdtq_vj9l.scala:19:76\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst1.map(\e[36mx\e[0m\
    \ => lst2.count(\e[36my\e[0m => x < y)).takeWhile(\e[36mx\e[0m => x < lst2.size).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.toList ++ lst2.toList.filter{x\
    \ => lst2.count(y => y < x) < lst1.count(y => y < x)}\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplwt6i2f6.scala:23)\n\tat Problem.main(tmplwt6i2f6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 foreach { item =>\n  \
    \          lst2 foreach { item2 =>\n                if (item == item2) {\n   \
    \                 return(item)\n                }\n            }\n        }\n\
    \        return(lst1)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw_ezb55u.scala:22:27\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    \e[33mreturn\e\
    [0m(item)\n\e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Found:    (item : String)\n\e[31m   |\e[0m\
    \                           Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Initialize result list\n\
    \        var result : List[String] = lst1\n        // Iterate through the two\
    \ list\n        for (lst <- lst1; lst2 <- lst2) {\n            // Get the length\
    \ of the list and compare with the other list to check if the length is equal\n\
    \            if (lst.length == lst2.length) {\n                // Get the list\
    \ that contains the less element\n                val lst2 = lst.filter(_ < lst2).sorted\n\
    \                // Check if the list has same element\n                if (lst2.size\
    \ == lst.length) {\n                    // Check if there are duplicate elements\
    \ in list\n                    if (lst2.distinct.nonEmpty) {\n               \
    \         // If there are duplicated element\n                        result =\
    \ lst\n                    }\n                }\n            }\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb_n0d90g.scala:26:42 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mlst2\e[0m = lst.filter(_\
    \ < lst2).sorted\n\e[31m\e[31m   |\e[0m                                      \
    \    ^\e[0m\n\e[31m   |\e[0m                                         Recursive\
    \ \e[33mvalue\e[0m \e[35mlst2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb_n0d90g.scala:32:33 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                        result = lst\n\e[31m\e[31m  \
    \ |\e[0m                                 ^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Found:    (lst : String)\n\e[31m   |\e[0m             \
    \                    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst3: List[String] = lst1\n\
    \        var lst4: List[String] = lst2\n        val noOfLists: Int = lst3.size\
    \ + lst4.size\n        if(noOfLists == 1) lst3 = lst3\n        if(noOfLists ==\
    \ 1) lst4 = lst4\n        if(lst3.size == lst4.size) lst3\n        if(lst3.size\
    \ > lst4.size) lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1m34mqq.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(lst3.size\
    \ > lst4.size) lst4\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[String]\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // TODO: write your code here\n\
    \        val result = lst1.filter(s => lst2.contains(s))\n        if(result.size\
    \ == lst2.size) result else lst1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpruryvily.scala:25)\n\tat Problem.main(tmpruryvily.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val count1 = lst1.size\n  \
    \      val count2 = lst2.size\n        val countAll = count1 + count2\n      \
    \  if(count1 == count2){\n           return lst1\n        }else if(count1 < count2){\n\
    \           return lst1\n        }else if(count1 > count2){\n           return\
    \ lst2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tw3svj1.scala:26:14\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        }\e[33melse\e[0m \e[33mif\e\
    [0m(count1 > count2){\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e\
    [0m              Found:    Unit\n\e[31m   |\e[0m              Required: List[String]\n\
    \e[31m   |\e[0m              Maybe you are missing an else part for the conditional?\n\
    \e[31m27 |\e[0m           \e[33mreturn\e[0m lst2\n\e[31m28 |\e[0m        }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val result: List[String] =\
    \ new ListBuffer[String]()\n        for (i <- lst1.indices) {\n            val\
    \ tempString = lst1(i)\n            if (lst2.contains(tempString)) {\n       \
    \         lst2.remove(tempString)\n                lst1 += lst1(i)\n         \
    \   }\n        }\n        lst1.foreach(x => result += x)\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcyv_6mdx.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcyv_6mdx.scala:23:21 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                lst2.remove(tempString)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not\
    \ a member of List[String], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcyv_6mdx.scala:24:21\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                lst1 += lst1(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ += is not a member of List[String] - did you mean lst1.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcyv_6mdx.scala:27:33 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        lst1.foreach(\e[36mx\e[0m => result += x)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ += is not a member of List[String] - did you mean result.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == lst2.length)\
    \ {\n            for (i <- 0 until lst1.length) {\n                if (lst1(i)\
    \ != lst2(i)) {\n                    return lst1\n                }\n        \
    \    }\n            return lst1\n        }\n        else {\n            for (i\
    \ <- 0 until lst1.length) {\n                if (lst1(i).length < lst2(i).length)\
    \ {\n                    return lst1\n                }\n            }\n     \
    \       return lst2\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeh6fpwpb.scala:38)\n\tat Problem.main(tmpeh6fpwpb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        //Write your code here\n  \
    \      lst1.zip(lst2).filter{ x => x._1.length < x._2.length }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7irmq58.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst1.zip(lst2).filter{\
    \ \e[36mx\e[0m => x._1.length < x._2.length }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mString\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mString\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m\
    \        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val str1 = lst1.toArray\n \
    \       val str2 = lst2.toArray\n        val len = lst1.size\n        val numOfString1\
    \ = lst1.toSet.size\n        val numOfString2 = lst2.toSet.size\n        var finalResult\
    \ = lst1\n        var counter = lst1.length\n        while (counter < len) {\n\
    \            if (str1(0).equals(str2(0))) {\n                finalResult ::= \
    \ lst1\n                counter += lst1.length\n            }\n            else\
    \ if (str1(0) < str2(0) || str1(0) == str2(0) && str1(0) != 0) {\n           \
    \     finalResult = lst2\n                counter += lst2.length\n           \
    \ }\n            else {\n                finalResult = lst1\n                counter\
    \ += lst1.length\n            }\n        }\n        return finalResult\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpax_k9vvu.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                finalResult ::=  lst1\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not\
    \ a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpax_k9vvu.scala:31:64 -----------------------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (str1(\e[31m0\e\
    [0m) < str2(\e[31m0\e[0m) || str1(\e[31m0\e[0m) == str2(\e[31m0\e[0m) && str1(\e\
    [31m0\e[0m) != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                        \
    \                                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \       Values of types String and Int cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      lst1 zip lst2 match {\n     \
    \   case (tuple1: Tuple2[String, String], tuple2: Tuple2[String, String]) if tuple1._2.length\
    \ < tuple2._2.length => lst1\n        case (tuple1: Tuple2[String, String], tuple2:\
    \ Tuple2[String, String]) => lst2\n        case (tuple1: Tuple2[String, String],\
    \ tuple2: Tuple2[String, String]) if tuple1._2.length == tuple2._2.length => lst1\n\
    \        case _ => lst2\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[33m\e[33m-- [E030] Match case Unreachable Warning: /tmp/tmpov_9jgis.scala:20:13\
    \ ---------\e[0m\e[0m\n\e[33m20 |\e[0m        \e[33mcase\e[0m (tuple1: Tuple2[String,\
    \ String], tuple2: Tuple2[String, String]) \e[33mif\e[0m tuple1._2.length < tuple2._2.length\
    \ => lst1\n\e[33m\e[33m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[33m   |\e[0m             Unreachable case\n\e[33m\e[33m-- [E030] Match\
    \ case Unreachable Warning: /tmp/tmpov_9jgis.scala:21:13 ---------\e[0m\e[0m\n\
    \e[33m21 |\e[0m        \e[33mcase\e[0m (tuple1: Tuple2[String, String], tuple2:\
    \ Tuple2[String, String]) => lst2\n\e[33m\e[33m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[33m   |\e[0m             Unreachable case\n\e[33m\e[33m-- [E030] Match\
    \ case Unreachable Warning: /tmp/tmpov_9jgis.scala:22:13 ---------\e[0m\e[0m\n\
    \e[33m22 |\e[0m        \e[33mcase\e[0m (tuple1: Tuple2[String, String], tuple2:\
    \ Tuple2[String, String]) \e[33mif\e[0m tuple1._2.length == tuple2._2.length =>\
    \ lst1\n\e[33m\e[33m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[33m   |\e[0m             Unreachable case\n\e[31m\e[31m-- Error: /tmp/tmpov_9jgis.scala:20:13\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mcase\e[0m (tuple1: Tuple2[String, String], tuple2: Tuple2[String, String])\
    \ \e[33mif\e[0m tuple1._2.length < tuple2._2.length => lst1\n\e[31m\e[31m   |\e\
    [0m             ^\e[0m\n\e[31m   |\e[0mthis case is unreachable since type List[(String\
    \ @uncheckedVariance, String)] and \e[33mclass\e[0m \e[35mTuple2\e[0m are unrelated\n\
    3 warnings found\n1 error found\n"
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.filter(s => lst2.count(x\
    \ => x <= s)  == lst2.size)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn_p6c11u.scala:23)\n\tat Problem.main(tmpn_p6c11u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val count1 = lst1.count\n \
    \       val count2 = lst2.count\n        if (count1 == count2) {\n           \
    \ lst1\n        } else if (count1 < count2) {\n            lst2.toList.sortWith((a,\
    \ b) => b.length - a.length)\n        } else {\n            lst1.toList.sortWith((a,\
    \ b) => a.length - b.length)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb784kbb9.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (count1 < count2)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of (String => Boolean) => Int, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpb784kbb9.scala:24:43 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            lst2.toList.sortWith((\e[36ma\e[0m, \e[36mb\e\
    [0m) => b.length - a.length)\n\e[31m\e[31m   |\e[0m                          \
    \                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                         Found:    Int\n\e[31m   |\e[0m                     \
    \                      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpb784kbb9.scala:26:43 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            lst1.toList.sortWith((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a.length - b.length)\n\e[31m\e[31m   |\e[0m                          \
    \                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                         Found:    Int\n\e[31m   |\e[0m                     \
    \                      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val list1 = lst1.toList\n \
    \       val list2 = lst2.toList\n        val diff = list2.diff(list1)\n      \
    \  list2.diff(diff)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpshndbcc8.scala:26)\n\tat Problem.main(tmpshndbcc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.map(_.length)\n      \
    \  val firstStrings = lst1.filter(_.length <= lst2.length)\n        val secondStrings\
    \ = lst2.filter(_.length <= lst1.length)\n        if(firstStrings.size == secondStrings.size){\n\
    \            firstStrings\n        }\n        else {\n            firstStrings\
    \ ++ secondStrings\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe9b8dxgg.scala:31)\n\tat Problem.main(tmpe9b8dxgg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.foldLeft(lst2)((lst3,\
    \ str1Str2) =>{\n            val lst4 = lst3.filter(_.length() <= str1Str2.length())\n\
    \            if(lst4.isEmpty) lst3\n            else if(lst4.length() == str1Str2.length())\
    \ lst3\n            else lst3 + lst4.take(lst3.length)\n        })\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpou_bp2c6.scala:22:25 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(lst4.length()\
    \ == str1Str2.length()) lst3\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    \e[33mmethod\e[0m \e[35mlength\e[0m in\
    \ \e[33mclass\e[0m \e[35mList\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpou_bp2c6.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m lst3 + lst4.take(lst3.length)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of List[String], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      val result: List[String] = lst1.filter(_\
    \ < lst2).filter(_ == lst1.size).foldLeft(List[String]())((x, y) => x :: y)\n\
    \      lst1.size == lst2.size match {\n        case true => result\n        case\
    \ false => lst2\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz6upe4q1.scala:19:49\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = lst1.filter(_ < lst2).filter(_ == lst1.size).foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mx\e[0m, \e[36my\e[0m) => x :: y)\n\e[31m\e[31m   |\e\
    [0m                                                 ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    (lst2 : List[String])\n\e\
    [31m   |\e[0m                                         Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpz6upe4q1.scala:19:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = lst1.filter(_ < lst2).filter(_ == lst1.size).foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mx\e[0m, \e[36my\e[0m) => x :: y)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz6upe4q1.scala:19:115\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = lst1.filter(_ < lst2).filter(_ == lst1.size).foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mx\e[0m, \e[36my\e[0m) => x :: y)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                         ^^^^\e[0m\n\e[31m   |\e[0m         \
    \                             value :: is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660009903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code here\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpue4_0xzo.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val count1 = lst1 map (_.length)\
    \ sum\n        val count2 = lst2 map (_.length) sum\n        if(count1 == count2)\
    \ {\n            return lst1\n        }\n        else {\n            return lst2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjebb4n7_.scala:19:44 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcount1\e[0m = lst1 map (_.length)\
    \ sum\n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                          expression expected but \e[31mend of\
    \ statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjebb4n7_.scala:20:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcount2\e[0m = lst2 map (_.length) sum\n\e[31m\e[31m   |\e[0m         \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                      expression expected but \e[31mif\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjebb4n7_.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(x =>\
    \ lst2.contains(x))\n        val lst4 = lst1.filter(x => !lst2.contains(x))\n\
    \        (lst3.size + lst4.size).equals(lst1.size) ? lst3 : lst4\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xex_fht.scala:21:59 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        (lst3.size + lst4.size).equals(lst1.size) ? lst3\
    \ : \e[35mlst4\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                          Not found: type lst4\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0xex_fht.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        (lst3.size + lst4.size).equals(lst1.size) ? lst3\
    \ : \e[35mlst4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val maxIndex = lst1.zipWithIndex.maxBy(_._1)._2\n\
    \        val list2Copy = lst2.filterNot(lst1.contains)\n        if(maxIndex >=\
    \ lst1.size){\n            return lst1\n        }\n        if(list2Copy.size ==\
    \ maxIndex){\n            return lst1\n        }\n        lst1.take(maxIndex).zip(lst2.drop(maxIndex)).map(x\
    \ => x._1 + x._2).foldLeft(List[String]())((acc, s) => acc ::: List(s))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.maxBy\n\tat scala.collection.IterableOnceOps.maxBy(IterableOnce.scala:978)\n\
    \tat scala.collection.IterableOnceOps.maxBy$(IterableOnce.scala:976)\n\tat scala.collection.AbstractIterable.maxBy(Iterable.scala:926)\n\
    \tat Problem$.totalMatch(tmpaovov0xm.scala:19)\n\tat Problem$.main(tmpaovov0xm.scala:30)\n\
    \tat Problem.main(tmpaovov0xm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.sortWith( (a, b) => a.compareTo(b)\
    \ )  //sort the list\n        lst2.sortWith( (a, b) => a.compareTo(b) )  //sort\
    \ the list\n        val len = lst1.length\n        var found = false\n       \
    \ var i = 0\n        var j = 0\n        while(!found && i < len) {\n         \
    \   j = i+1\n            while(j < len && lst1(j) == lst2(i)) {\n            \
    \    j++\n            }\n            \n            if(j < len) {\n           \
    \     found = true\n            }\n            else {\n                i++\n \
    \           }\n        }\n        \n        if(!found) {\n            lst1.foreach(println)\n\
    \        }\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpta_33tcc.scala:28:19 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpta_33tcc.scala:35:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                i++\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpta_33tcc.scala:19:44 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.sortWith( (\e[36ma\e[0m, \e[36mb\e[0m) =>\
    \ a.compareTo(b) )  \e[34m//sort the list\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                  Found:    Int\n\e[31m   |\e[0m                            \
    \     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpta_33tcc.scala:20:44\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst2.sortWith( (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a.compareTo(b) )  \e[34m//sort the list\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    Int\n\e[31m   |\e[0m             \
    \                    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == 0 || lst2.size\
    \ == 0) {\n            return lst1\n        }\n        val lst1 = lst1.toSet.toList\n\
    \        val lst2 = lst2.toSet.toList\n        val total1 = lst1.size\n      \
    \  val total2 = lst2.size\n        if (total1 == total2) {\n            return\
    \ lst1\n        }\n        if (total2 < total1) {\n            lst2.reverse\n\
    \        }\n        var i = 0\n        val lst3 = new mutable.ListBuffer[String]()\n\
    \        for (x <- lst2) {\n            if (lst1.contains(x)) {\n            \
    \    lst3 += x\n            }\n        }\n        lst3.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk7smwfno.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst1\e[0m = lst1.toSet.toList\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35mlst1\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk7smwfno.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlst2\e[0m = lst2.toSet.toList\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35mlst2\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk7smwfno.scala:33:23 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mlst3\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if((lst1 zip lst2).forall(x\
    \ => x._1.size == x._2.size)) {\n            lst1\n        } else {\n        \
    \    lst2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbabo6018.scala:28)\n\tat Problem.main(tmpbabo6018.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1Counter : Int = 0\n\
    \        var lst2Counter : Int = 0\n        for(i <- 0 until lst1.size){\n   \
    \         if(lst1(i) > lst2(i)){\n                lst1Counter += lst1(i)\n   \
    \             lst2Counter += lst2(i)\n            }\n            else if(lst1(i)\
    \ == lst2(i)){\n                lst1Counter += lst1(i)\n                lst2Counter\
    \ += lst2(i)\n            }\n        }\n        if(lst1Counter < lst2Counter){\n\
    \            return lst1\n        }else{\n            return lst2\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb4z6oa_5.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                lst1Counter += lst1(i)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpb4z6oa_5.scala:24:28 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                lst2Counter += lst2(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpb4z6oa_5.scala:27:28 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                lst1Counter += lst1(i)\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb4z6oa_5.scala:28:28 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                lst2Counter += lst2(i)\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.length == lst2.length){\n\
    \           lst1 :: lst2\n        }else{\n           if(lst1.length < lst2.length){\n\
    \               lst1 :: totalMatch(lst2.filter(x => !lst1.contains(x)).toList,\
    \ lst2.filter(x=>lst1.contains(x)))\n           }else{\n               lst2 ::\
    \ totalMatch(lst1.filter(x => !lst2.contains(x)).toList, lst1.filter(x=>lst2.contains(x)))\n\
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuy8tj9yp.scala:20:11\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m           lst1 :: lst2\n\e[31m\e\
    [31m   |\e[0m           ^^^^\e[0m\n\e[31m   |\e[0m           Found:    (lst1 :\
    \ List[String])\n\e[31m   |\e[0m           Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuy8tj9yp.scala:23:15 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m               lst1 :: totalMatch(lst2.filter(\e[36mx\e\
    [0m => !lst1.contains(x)).toList, lst2.filter(\e[36mx\e[0m=>lst1.contains(x)))\n\
    \e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (lst1 : List[String])\n\e[31m   |\e[0m               Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuy8tj9yp.scala:25:15\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m               lst2 :: totalMatch(lst1.filter(\e\
    [36mx\e[0m => !lst2.contains(x)).toList, lst1.filter(\e[36mx\e[0m=>lst2.contains(x)))\n\
    \e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (lst2 : List[String])\n\e[31m   |\e[0m               Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.flatMap(x1 => lst2.map(x\
    \ => if (x1 take 1 sameElements x) x1 else x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx1u4wy89.scala:23)\n\tat Problem.main(tmpx1u4wy89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Implement your logic here\n\
    \        lst1.map(x => lst2.filter(y => x < (y)).size).reduce((a,b) => if (a ==\
    \ b) a else b) :: Nil\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw91sv7e7.scala:20:60\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst1.map(\e[36mx\e[0m\
    \ => lst2.filter(\e[36my\e[0m => x < (y)).size).reduce((\e[36ma\e[0m,\e[36mb\e\
    [0m) => \e[33mif\e[0m (a == b) a \e[33melse\e[0m b) :: Nil\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val m = lst1.size\n       \
    \ val n = lst2.size\n        \n        if(m==n)\n            lst1\n        else\
    \ if(n>m)\n            lst2\n        else\n            lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsva7jqr3.scala:31)\n\tat Problem.main(tmpsva7jqr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      val length = lst1.length\n  \
    \    var result : List[String] = null\n      var i = 0\n      while(i < length\
    \ && i < lst2.length) {\n        if (lst1(i) < lst2(i)) {\n          if (result\
    \ == null) {\n            result = lst1\n          } else {\n            result\
    \ = result :+ lst1\n          }\n        }\n        i += 1\n      }\n      if\
    \ (lst1.length == length) {\n        if (result == null) {\n          result =\
    \ lst1\n        } else {\n          result = result :+ lst1\n        }\n     \
    \ }\n      if (lst2.length == length) {\n        if (result == null) {\n     \
    \     result = lst2\n        } else {\n          result = result :+ lst2\n   \
    \     }\n      }\n      result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc65jcktu.scala:27:31\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            result = result :+\
    \ lst1\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    (lst1 : List[String])\n\e[31m\
    \   |\e[0m                               Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc65jcktu.scala:36:29 --------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m          result = result :+ lst1\n\e[31m\e[31m   |\e\
    [0m                             ^^^^\e[0m\n\e[31m   |\e[0m                   \
    \          Found:    (lst1 : List[String])\n\e[31m   |\e[0m                  \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc65jcktu.scala:43:29 --------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m          result = result :+ lst2\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (lst2 : List[String])\n\e[31m   |\e[0m                             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code goes here\n  \
    \      val lst3 = (lst1.take(lst2.length).zip(lst2.take(lst1.length))).map(x =>\
    \ x._1 ++ x._2)\n        if (lst3.forall(_.length == lst2.length)) {\n       \
    \     return lst3\n        } else {\n            return lst1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvob8vx2.scala:29)\n\tat Problem.main(tmpmvob8vx2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def helper(lst1 : List[String],\
    \ lst2 : List[String], acc : List[String], len : int) : List[String] = { \n  \
    \          if (lst1 == Nil || (lst2 == Nil && lst1.length < len)) { acc }\n  \
    \          else { \n                if (lst1.length < len) {\n               \
    \     helper(lst1.tail, lst2, lst2.tail, len + 1)\n                }\n       \
    \         else {\n                    helper(lst1, lst2.tail, lst2, len + 1)\n\
    \                }\n            }\n        }\n        helper(lst1, lst2, Nil,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp10r8xcrh.scala:19:87 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[36mhelper\e[0m(\e[36mlst1\e\
    [0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e[35mList\e[0m[\e\
    [35mString\e[0m], \e[36macc\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlen\e\
    [0m : \e[35mint\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = { \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \                      Not found: type int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.length == lst2.length)\n\
    \            return lst1\n        else if(lst1.length < lst2.length)\n       \
    \     (lst1 zip lst2) map { case (x,y) => totalMatch(x, y) } reduceLeft (_.concat(_))\n\
    \        else { lst2 zip lst1 map { case (x,y) => totalMatch(x, y) } reduceLeft\
    \ (_.concat(_)) }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk6hps5o4.scala:22:59\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            (lst1 zip lst2) map\
    \ { \e[33mcase\e[0m (x,y) => totalMatch(x, y) } reduceLeft (_.concat(_))\n\e[31m\e\
    [31m   |\e[0m                                                           ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (x\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk6hps5o4.scala:22:62 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            (lst1 zip lst2) map { \e[33mcase\e[0m (x,y) => totalMatch(x,\
    \ y) } reduceLeft (_.concat(_))\n\e[31m\e[31m   |\e[0m                       \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                                    Found:    (y : String)\n\e[31m   |\e[0m \
    \                                                 Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk6hps5o4.scala:23:60 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m { lst2 zip lst1 map { \e[33mcase\e\
    [0m (x,y) => totalMatch(x, y) } reduceLeft (_.concat(_)) }\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    (x : String)\n\
    \e[31m   |\e[0m                                                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk6hps5o4.scala:23:63\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m { lst2\
    \ zip lst1 map { \e[33mcase\e[0m (x,y) => totalMatch(x, y) } reduceLeft (_.concat(_))\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \            ^\e[0m\n\e[31m   |\e[0m                                       "
  stdout: ''
  timestamp: 1660009908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == lst2.size)\
    \ lst1\n        else lst2 \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7p5w8xu.scala:24)\n\tat Problem.main(tmpm7p5w8xu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if( lst1.size == lst2.size\
    \ ) {\n           lst1\n        }else {\n            val lst3 = lst1.filter(_\
    \ < lst2)\n            val lst4 = lst2.filter(_ < lst3)\n            if(lst3.size\
    \ == lst4.size) {\n                lst3\n            } else {\n              \
    \  lst1\n            }\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmico05wn.scala:22:39\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36mlst3\e[0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                 \
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                            \
    \           Found:    (lst2 : List[String])\n\e[31m   |\e[0m                 \
    \                      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmico05wn.scala:23:39 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mlst4\e[0m = lst2.filter(_\
    \ < lst3)\n\e[31m\e[31m   |\e[0m                                       ^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    (lst3 : List[String])\n\
    \e[31m   |\e[0m                                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size != lst2.size)\
    \ {\n            lst1\n        } else if(lst1.size == lst2.size) {\n         \
    \   lst1\n        } else {\n            lst1 ++ lst2.filter(_ < lst1.last)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgj1cfqwi.scala:29)\n\tat Problem.main(tmpgj1cfqwi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Len = lst1.length\n\
    \        val lst2Len = lst2.length\n        var lstResult = lst1\n        if(lst1Len\
    \ == lst2Len) {\n            lstResult = lst1\n        }\n        else {\n   \
    \         lstResult :=  lst1 ++ lst2\n        }\n        val numOfChars = lstResult.map(x\
    \ => x.length).reduce(_ + _)\n        val numOfCharsLessThanOtherList = lst2.map(x\
    \ => x.length).reduce(_ + _)\n        if(numOfCharsLessThanOtherList > numOfChars)\
    \ {\n            return lstResult\n        }\n        else {\n            return\
    \ lst1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa0kepzjd.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            lstResult :=  lst1 ++ lst2\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue := is not a member\
    \ of List[String] - did you mean List[String].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 ++ (lst2 filterNot (_\
    \ startsWith lst1))\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph3ig0di_.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst1 ++ (lst2 filterNot\
    \ (_ startsWith lst1))\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \     Found:    (lst1 : List[String])\n\e[31m   |\e[0m                       \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        //  Write code here\n     \
    \   val lst1Count = lst1.size\n        val lst2Count = lst2.size\n        if (lst1Count\
    \ == lst2Count){\n            lst1\n        }\n        else {\n            lst2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp1tdapgy.scala:31)\n\tat Problem.main(tmpp1tdapgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\
    \ {\n            lst1 :: lst2\n        }\n        else {\n            if (lst1.size\
    \ < lst2.size) {\n                lst1 :: totalMatch(lst1.tail, lst2.tail)\n \
    \           }\n            else {\n                lst2 :: totalMatch(lst1.tail,\
    \ lst2.tail)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptunsn73t.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            lst1 :: lst2\n\e\
    [31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (lst1 : List[String])\n\e[31m   |\e[0m            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptunsn73t.scala:24:16 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                lst1 :: totalMatch(lst1.tail, lst2.tail)\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Found:    (lst1 : List[String])\n\e[31m   |\e[0m                Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptunsn73t.scala:27:16\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                lst2 :: totalMatch(lst1.tail,\
    \ lst2.tail)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m\
    \                Found:    (lst2 : List[String])\n\e[31m   |\e[0m            \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Write your solution here\n\
    \        if(lst1.length == lst2.length){\n            if(lst1.size == lst2.size)\
    \ {\n                var total = 0;\n                var temp1 = lst1\n      \
    \          var temp2 = lst2\n                var index1 = 0;\n               \
    \ var index2 = 0;\n                while(index1 < temp1.length && index2 < temp2.length)\
    \ {\n                    total += temp1(index1).length + temp2(index2).length;\n\
    \                    index1 += 1;\n                    index2 += 1;\n        \
    \        }\n                while(index1 < temp1.length)\n                   \
    \ total += temp1(index1).length;\n                while(index2 < temp2.length)\n\
    \                    total += temp2(index2).length;\n                \n      \
    \          if(total == lst1.length)\n                    return lst1;\n      \
    \          else if(total == lst2.length)\n                    return lst2;\n \
    \           }\n        }\n        \n        lst1;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprx27idfe.scala:48)\n\tat Problem.main(tmprx27idfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Write your code in here.\n\
    \        if(lst1.size == lst2.size){\n            return lst1\n        }\n   \
    \     if(lst1.size > lst2.size){\n            return lst1\n        }\n       \
    \ lst2.foreach(s => {\n            val l = lst1.filter(_.contains(s))\n      \
    \      if(l.size != 0){\n                lst1 = l\n            }\n        })\n\
    \        lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5b7yek90.scala:29:21 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                lst1 = l\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ lst1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var count : Int = 0\n     \
    \   lst1 foreach { x => \n            lst2 foreach { y => \n                count\
    \ += x.length\n                if (y >= x) break\n            }\n        }\n \
    \       if (lst2.size == count) lst1 else (lst1 :: lst2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_t2po4k.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (y >= x) break\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpm_t2po4k.scala:26:43 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (lst2.size == count) lst1 \e[33melse\e\
    [0m (lst1 :: lst2)\n\e[31m\e[31m   |\e[0m                                    \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                                         Found:\
    \    (lst1 : List[String])\n\e[31m   |\e[0m                                  \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val match = new mutable.HashSet[String]()\n\
    \        lst1.foreach(m => {\n            if(lst2.contains(m)) match += m\n  \
    \      })\n        lst2.foreach(m => {\n            if(match.contains(m)) match\
    \ += m\n        })\n        lst2.contains(\"\") ? lst1 : match\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4w37l330.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[33mmatch\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[String]()\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e\
    [31m   |\e[0m            pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp4w37l330.scala:21:39 ---------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(lst2.contains(m)) \e[33mmatch\e\
    [0m += m\n\e[31m\e[31m   |\e[0m                                       ^^\e[0m\n\
    \e[31m   |\e[0m                                      '{' expected, but identifier\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4w37l330.scala:22:9 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        })\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e\
    [31m   |\e[0m         'then' expected, but ')' found\n\e[31m\e[31m-- [E018] Syntax\
    \ Error: /tmp/tmp4w37l330.scala:24:15 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mif\e[0m(\e[33mmatch\e[0m.contains(m)) \e[33mmatch\e\
    [0m += m\n\e[31m\e[31m   |\e[0m               ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           expression expected but \e[31mmatch\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp4w37l330.scala:24:40 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(\e[33mmatch\e[0m.contains(m))\
    \ \e[33mmatch\e[0m += m\n\e[31m\e[31m   |\e[0m                               \
    \         ^^\e[0m\n\e[31m   |\e[0m                                      '{' expected,\
    \ but identifier found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4w37l330.scala:25:9\
    \ ----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        })\n\e[31m\e\
    [31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         'then' expected, but ')'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4w37l330.scala:26:35 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        lst2.contains(\e[31m\"\"\e[0m) ? lst1 : \e[33mmatch\e\
    [0m\n\e[31m\e[31m   |\e[0m                                   "
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 ++ lst2.filter(x => !lst1.contains(x)\
    \ || !lst2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwdupndi.scala:23)\n\tat Problem.main(tmpxwdupndi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.length <= lst2.length){\n\
    \            var counter = lst1.size\n            var newList: List[String] =\
    \ Nil\n            for(s <- lst1 ){\n                counter -= 1\n          \
    \      if(lst2.contains(s.substring(0,counter))){\n                    newList\
    \ = newList :+ s\n                }\n            }\n            return newList\n\
    \        }\n        else{\n            var counter = lst2.size\n            var\
    \ newList: List[String] = Nil\n            for(s <- lst2){\n                counter\
    \ -= 1\n                if(lst1.contains(s.substring(0,counter))){\n         \
    \           newList = newList :+ s\n                }\n            }\n       \
    \     return newList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmparnndfd5.scala:44)\n\tat Problem.main(tmparnndfd5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\
    \ {\n            if (lst1.isEmpty) lst1\n            else if (lst2.isEmpty) lst2\n\
    \            else lst1 diff lst2\n        }\n        else lst1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5rlymby2.scala:28)\n\tat Problem.main(tmp5rlymby2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val numList1 = lst1.size\n\
    \        val numList2 = lst2.size\n        val result = lst1.toSet\n        result.retain\
    \ { l => lst2.toSet.contains(l) }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2r30xg_z.scala:22:15 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result.retain { \e[36ml\e[0m => lst2.toSet.contains(l)\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value retain\
    \ is not a member of Set[String] - did you mean result.tail?\n1 error found\n"
  stdout: ''
  timestamp: 1660009915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val arr1 = lst1.toArray\n \
    \       val arr2 = lst2.toArray\n        val num1 = arr1.length\n        val num2\
    \ = arr2.length\n        if (num1 == num2){\n            return lst1\n       \
    \ }\n        else{\n            var i = 0\n            val resultArry = Array.ofDim[String](num1)\n\
    \            while (i < num1){\n                if (arr1(i) > arr2(i)){\n    \
    \                resultArry(i) = arr1(i)\n                }\n                else{\n\
    \                    resultArry(i) = arr2(i)\n                }\n            \
    \    i += 1\n            }\n            resultArry\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbn8sbb8.scala:38:12\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m            resultArry\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (resultArry : Array[String])\n\e[31m   |\e[0m            Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.foreach(x => lst2.foreach(y\
    \ => if (x.length == y.length) lst2 :+ x))\n        if (lst1.isEmpty) lst1\n \
    \       else if (lst2.isEmpty) lst2\n        else lst1.head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqwx37eu.scala:22:18\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m lst1.head\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \ Found:    String\n\e[31m   |\e[0m             Required: \e[1m\e[32mList\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Write your code here\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4j17d4p9.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Write your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      val lists = lst1 ++ lst2\n  \
    \    val sortedLists = lists.sortBy(_.length)\n      if(sortedLists.forall(_.length\
    \ == sortedLists.head.length)) {\n        lists.head\n      } else { \n      \
    \  val first = lists.head\n        val second = lists.tail.head \n        val\
    \ numMatchesBefore = lists.foldLeft(first.size)((count, str) => count + (str.length-second.length))\n\
    \        val numMatchesAfter = lst2.foldLeft(first.size)((count, str) => count\
    \ + (str.length-first.length))\n        val numMatches = numMatchesBefore + numMatchesAfter\n\
    \        val beforeList = sortedLists.take(numMatchesBefore)\n        val afterList\
    \ = sortedLists.drop(numMatchesAfter)\n        (beforeList ++ afterList).head\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqpi1_qdn.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lists.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqpi1_qdn.scala:31:34\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        (beforeList ++ afterList).head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val set1 = lst1.toSet\n   \
    \     val set2 = lst2.toSet\n        if(set1 diff set2 size == 0)\n          \
    \  return set1\n        if(set2 diff set1 size == 0)\n            return set2\n\
    \        // set1 has more elements and set2 has more elements\n        // both\
    \ have same number of elements\n        // check if elements are in same position\n\
    \        val arr1 = lst1.map(_.toInt).toArray\n        val arr2 = lst2.map(_.toInt).toArray\n\
    \        if(arr1.length == arr2.length) \n            // both lists have same\
    \ number of elements, compare elements in same position\n            lst1.zip(lst2).filter(x=>\
    \ arr1(x._1) == arr2(x._1))\n        else \n            // set1 has more elements,\
    \ compare first elements of both lists\n            lst1.zip(lst2).filter(x=>\
    \ arr1(x._1).equals(arr2(x._2)))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ld24i3i.scala:21:34 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(set1 diff set2 size == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                 ')' expected, but integer literal found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ld24i3i.scala:23:34 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m(set2 diff set1 size == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                 ')' expected, but integer literal found\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp7ld24i3i.scala:21:26 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(set1 diff set2 size == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7ld24i3i.scala:22:19 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mreturn\e[0m set1\n\e[31m\e[31m   |\e[0m            \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                   Found:    (set1 : Set[String])\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp7ld24i3i.scala:23:26 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m(set2 diff set1 size == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7ld24i3i.scala:24:19 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33mreturn\e[0m set2\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660009919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.map(x=>lst2.filter(y=>y.length<x.length).map(x=>x).length)\n\
    \        lst1.filter(_=>lst2.filter(y=>y.length<_.length).exists(_=>_!=\"*\"))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxat698si.scala:20:47 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        lst1.filter(_=>lst2.filter(\e[36my\e[0m=>y.length<_.length).exists(_=>_!=\e\
    [31m\"*\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => y.length < _$2.length.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpxat698si.scala:20:67 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        lst1.filter(_=>lst2.filter(\e[36my\e[0m=>y.length<_.length).exists(_=>_!=\e\
    [31m\"*\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                             ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => _$4 != \e[32m\"*\"\e[0m.\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n       // Your code goes here\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdga75ax5.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m       \e[34m//\
    \ Your code goes here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val newList = lst1.toSet +\
    \ lst2.toSet\n        var maxLength = 0\n        var maxIndex = 0\n        var\
    \ maxLengthInLst1 = lst1.toList.map(s => s.length).max\n        var maxLengthInLst2\
    \ = lst2.toList.map(s => s.length).max\n\n        for (i <- 0 until newList.size){\n\
    \            if(newList(i).length > maxLength){\n                maxIndex = i\n\
    \                maxLength = newList(i).length\n            }\n        }\n   \
    \     var res = [String]()\n        if(maxLength == maxLengthInLst1 && maxLengthInLst1\
    \ == maxLengthInLst2){\n            res = lst1\n        }\n        else if(maxLengthInLst1\
    \ == maxLengthInLst2){\n            res = lst2\n        }\n        else if(maxLengthInLst1\
    \ < maxLengthInLst2){\n            res = lst1\n        }\n        else if(maxLengthInLst2\
    \ < maxLengthInLst1){\n            res = lst2\n        }\n        else{\n    \
    \        res = lst1\n        }\n        return (res)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd2b1pdih.scala:31:26 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = [String]()\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 '=>' expected, but '(' found\n\e[31m\e[31m-- Error: /tmp/tmpd2b1pdih.scala:26:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \     \e[33mif\e[0m(newList(i).length > maxLength){\n\e[31m\e[31m   |\e[0m   \
    \                    ^\e[0m\n\e[31m   |\e[0m  the result of an implicit conversion\
    \ must be more specific than Object\n\e[31m\e[31m-- Error: /tmp/tmpd2b1pdih.scala:28:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \         maxLength = newList(i).length\n\e[31m\e[31m   |\e[0m               \
    \                     ^\e[0m\n\e[31m   |\e[0m  the result of an implicit conversion\
    \ must be more specific than Object\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpd2b1pdih.scala:33:18 --------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \            res = lst1\n\e[31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e\
    [31m   |\e[0m                  Found:    (lst1 : List[String])\n\e[31m   |\e[0m\
    \                  Required: Null\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd2b1pdih.scala:36:18 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m            res = lst2\n\e[31m\e[31m   |\e[0m                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    (lst2 : List[String])\n\e[31m\
    \   |\e[0m                  Required: Null\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpd2b1pdih.scala:39:18 --------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m            res = lst1\n\e[31m\e[31m   |\e[0m            \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (lst1 : List[String])\n\
    \e[31m   |\e[0m                  Required: Null\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch E"
  stdout: ''
  timestamp: 1660009921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val hashMap = mutable.LinkedHashMap[String,String]()\n\
    \        lst1.foreach { elem => hashMap += (elem -> 1) }\n        lst2.foreach\
    \ { elem => hashMap += (elem -> 1) }\n\n        lst1 ++ lst2.filter { elem =>\
    \ hashMap.contains(elem) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_c33x9p.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashMap\e[0m = mutable.LinkedHashMap[\e\
    [35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var matchedList: List[String]\
    \ = Nil\n        for (x <- lst1; y <- lst2){\n            if ((x.length < y.length))\
    \ {\n                matchedList = x :: matchedList\n            } else {\n  \
    \              matchedList = y :: matchedList\n            }\n        }\n    \
    \    matchedList\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaha0ezys.scala:31)\n\tat Problem.main(tmpaha0ezys.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._2).map(_._1).distinct\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmt9e4smb.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val list1 = lst1 flatMap {\
    \ a => a }\n        val list2 = lst2 flatMap { a => a }\n        var count = 0\n\
    \        for (a1 <- list1) {\n            for (a2 <- list2) {\n              \
    \  if (a1.length > a2.length) count += a1.length\n                else if (a1.length\
    \ < a2.length) count += a2.length\n            }\n        }\n        if ((list1.length\
    \ == count) && (list2.length == count)) list1\n        else list2\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17lkp5oy.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (a1.length > a2.length)\
    \ count += a1.length\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    value length is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp17lkp5oy.scala:24:49 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (a1.length > a2.length)\
    \ count += a1.length\n\e[31m\e[31m   |\e[0m                                  \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17lkp5oy.scala:24:55\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e\
    [0m (a1.length > a2.length) count += a1.length\n\e[31m\e[31m   |\e[0m        \
    \                                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                   value length is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp17lkp5oy.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (a1.length\
    \ < a2.length) count += a2.length\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value length is not\
    \ a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17lkp5oy.scala:25:54\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (a1.length < a2.length) count += a2.length\n\e[31m\e[31m   |\e\
    [0m                                                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp17lkp5oy.scala:25:60 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (a1.length\
    \ < a2.length) count += a2.length\n\e[31m\e[31m   |\e[0m                     \
    \                                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                           value length is not a"
  stdout: ''
  timestamp: 1660009923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.toSet.intersect(lst2.toSet).takeWhile(s\
    \ => lst1.toSet.count(s) <= lst2.toSet.count(s))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6erc1spa.scala:19:73\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst1.toSet.intersect(lst2.toSet).takeWhile(\e\
    [36ms\e[0m => lst1.toSet.count(s) <= lst2.toSet.count(s))\n\e[31m\e[31m   |\e\
    [0m                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                             Required:\
    \ String => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6erc1spa.scala:19:96\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst1.toSet.intersect(lst2.toSet).takeWhile(\e\
    [36ms\e[0m => lst1.toSet.count(s) <= lst2.toSet.count(s))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \              Found:    (s : String)\n\e[31m   |\e[0m                       \
    \                      Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.length == lst2.length\
    \ && lst1 == lst2){\n            return lst1\n        }\n        else if(lst2.length\
    \ == lst1.length){\n            val result = lst2.filter{\n                x =>!lst1.contains(x)\n\
    \            }\n            if(!lst1.contains(result(0))){\n                return\
    \ result\n            }\n            else{\n                return lst1\n    \
    \        }\n        }\n        else{\n            val result = lst2.filter{\n\
    \                x =>!lst1.contains(x)\n            }\n            if(!lst1.contains(result(0))){\n\
    \                return lst1\n            }\n            else{\n             \
    \   return lst2\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplc45mh25.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                x =>!lst1.contains(x)\n\e[31m\e[31m \
    \  |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Not found: x\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplc45mh25.scala:35:16\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                x =>!lst1.contains(x)\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      val charSet = lst1.mkString.toSet\
    \ + lst2.mkString.toSet\n      val result = lst1 filter (x => charSet.size <=\
    \ charSet.size && charSet diff List(x) isEmpty )\n      if (result.size != 0)\n\
    \        result\n      else\n        lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkwe0d8iz.scala:20:98 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m = lst1 filter\
    \ (\e[36mx\e[0m => charSet.size <= charSet.size && charSet diff List(x) isEmpty\
    \ )\n\e[31m\e[31m   |\e[0m                                                   \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                 expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkwe0d8iz.scala:20:69\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mresult\e\
    [0m = lst1 filter (\e[36mx\e[0m => charSet.size <= charSet.size && charSet diff\
    \ List(x) isEmpty )\n\e[31m\e[31m   |\e[0m                                   \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                       Found:    (charSet : Set[Matchable])\n\e[31m   |\e[0m\
    \                                    Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val len1 =  lst1.size\n   \
    \     val len2 =  lst2.size\n        if (len1 == len2){\n            lst1\n  \
    \      }else {\n            val lst3 = lst1.filter(x => !lst2.contains(x))\n \
    \           val lst4 = lst2.filter(x => !lst1.contains(x))\n            totalMatch(lst3,\
    \ lst4)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjdsz2x5s.scala:31)\n\tat Problem.main(tmpjdsz2x5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val list = lst1.intersect(lst2)\n\
    \        if(list.size == lst1.size) list else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0yeomnji.scala:24)\n\tat Problem.main(tmp0yeomnji.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1 == lst2) lst1 else\
    \ lst2.filter(x => !lst1.contains(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmped6dmdie.scala:23)\n\tat Problem.main(tmped6dmdie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\
    \ {\n            if (lst1.toSet.size < lst2.toSet.size) {\n                return\
    \ lst1\n            }\n            return lst2\n        }\n        if (lst1.size\
    \ < lst2.size) {\n            return lst1\n        }\n        return lst2\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprzruk9lg.scala:36)\n\tat Problem.main(tmprzruk9lg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.size == lst2.size)\
    \ {\n            if (lst1.forall(c => lst2.contains(c))) lst1\n            else\
    \ lst2\n        }\n        else {\n            (lst1, lst2)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp49cqk18i.scala:24:12\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            (lst1, lst2)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    \e[1m\e[31m(\e[0mList[String\e[1m\e[31m]\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m\e[1m\e[31mString\e[0m]\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m            Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == lst2.size)\n\
    \            lst1\n        else {\n            if (lst1.size < lst2.size)\n  \
    \              lst1.head\n            else\n                lst2.head\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0oomiuoi.scala:23:21\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                lst1.head\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Found:    String\n\e[31m   |\e[0m                Required: \e[1m\e[32mList\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0oomiuoi.scala:25:21 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                lst2.head\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    String\n\
    \e[31m   |\e[0m                Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        //your code\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6wu6sq8t.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//your\
    \ code\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      lst1 match {\n        case x\
    \ :: xs if (lst2.forall(y => y > x)) => x\n        case x :: xs if (lst2.forall(y\
    \ => y < x)) => lst1\n        case _ => lst2\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljrwxgok.scala:20:53\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mcase\e[0m x ::\
    \ xs \e[33mif\e[0m (lst2.forall(y => y > x)) => x\n\e[31m\e[31m   |\e[0m     \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                             Found:    (x : String)\n\e[31m \
    \  |\e[0m                                                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size != lst2.size)\
    \ {\n            lst1 ::: lst2\n        } else {\n            if (lst1.size ==\
    \ lst2.size) {\n                lst1\n            } else {\n                lst1\
    \ ::: lst2 ::: totalMatch(lst1, lst2 ::: lst1)\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi48c81ra.scala:31)\n\tat Problem.main(tmpi48c81ra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val map1 = lst1.zipWithIndex.toMap\n\
    \        val map2 = lst2.zipWithIndex.toMap\n        val map3 = map2.filter {\
    \ x => map1.contains(x._2) }.toMap\n        val map4 = map1.filter { x => map3.contains(x._2)\
    \ }.toMap\n        val map5 = map4.map { case (k, v) => k -> v.count() }\n   \
    \     if (map5.size == lst1.size) lst1 else {\n            val tmp1 = lst1.map\
    \ { case (k, v) => k -> v.count() }\n            val tmp2 = lst2.map { case (k,\
    \ v) => k -> v.count() }\n            val tmp3 = map5.filter { x => tmp1.contains(x._1)\
    \ && tmp2.contains(x._1) }.toMap\n            val tmp4 = map4.filter { x => tmp3.contains(x._1)\
    \ }.toMap\n            tmp4.map { case (k, v) => k -> v }.toList\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdj_px1gn.scala:21:54\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap3\e\
    [0m = map2.filter { \e[36mx\e[0m => map1.contains(x._2) }.toMap\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    Int\n\e\
    [31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdj_px1gn.scala:22:54\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmap4\e\
    [0m = map1.filter { \e[36mx\e[0m => map3.contains(x._2) }.toMap\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    Int\n\e\
    [31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdj_px1gn.scala:23:52\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmap5\e[0m = map4.map { \e[33mcase\e[0m (k, v) => k -> v.count() }\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value count is not a member of Int - did you mean v.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdj_px1gn.scala:25:56 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mtmp1\e[0m = lst1.map\
    \ { \e[33mcase\e[0m (k, v) => k -> v.count() }\n\e[31m\e[31m   |\e[0m        \
    \                                              ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                     value count is not a member of Any\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdj_px1gn.scala:26:56 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mtmp2\e[0m = lst2.map\
    \ { \e[33mcase\e[0m (k, v) => k -> v.count() }\n\e[31m\e[31m   |\e[0m        \
    \         "
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst2.length != lst1.length)\
    \ return lst1\n        var i = 0\n        var j = 0\n        var matchCount =\
    \ 0\n        while (i < lst1.length && j < lst2.length) {\n            if (lst1(i)\
    \ <= lst2(j)) {\n                i += 1\n                j += 1\n            \
    \    matchCount += 1\n            } else if (lst1(i) > lst2(j)) {\n          \
    \      i += 1\n                matchCount += 1\n            } else {\n       \
    \         j += 1\n            }\n        }\n        lst1.takeWhile(x => lst2.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpumvr93o9.scala:39)\n\tat Problem.main(tmpumvr93o9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var maxLength = 0\n       \
    \ lst1.foreach(s => maxLength = Math.max(maxLength, s.length))\n        lst2.foreach(s\
    \ => maxLength = Math.max(maxLength, s.length))\n        var matchList = []\n\
    \        lst1.foreach(s => \n           if (lst2.contains(s)){\n             \
    \ matchList += s\n           }\n        )\n        lst1.filterNot(s => lst2.contains(s)).foreach(s\
    \ => \n            matchList += s\n        )\n        matchList.take(maxLength)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2avkrafr.scala:22:25 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mmatchList\e[0m = []\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp2avkrafr.scala:23:0 ----------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        lst1.foreach(\e[36ms\e[0m => \n\e[31m\e[31m   |\e[0m^^^^\e\
    [0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement' found\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2avkrafr.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m              matchList += s\n\e[31m\e[31m   |\e[0m \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value += is not\
    \ a member of Null - did you mean Null.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2avkrafr.scala:29:22 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            matchList += s\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.dictionary\
    \ AsScalaMap\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009926
