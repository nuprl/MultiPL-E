name: HumanEval_63_fibfib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n   \
  \ // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  \    // Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n    // >>> fibfib((5l))\n\
  \    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n    def fibfib(n : Long) :\
  \ Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
  \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
  \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n\
  \    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
completions: ["        if(n <= 1l){\n            return 0\n        }else{\n      \
    \      return fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l)\n        }", "      \
    \  var fib : mutable.Long = mutable.Long.empty;\n        fib += 0L\n        fib\
    \ += 0L\n        fib += 0L\n        if(n >= 2l) {\n            fib += fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l)\n        }\n        fib", "        if (n == 0)\
    \ 0l\n        else {\n            val fib1 : Long = fibfib(n-1)\n            val\
    \ fib2 : Long = fibfib(n-2)\n            val fib3 : Long = fibfib(n-3)\n     \
    \       fib1 + fib2 + fib3\n        }", "        val fibfib = new mutable.ArrayBuilder[Long]\n\
    \        fibfib.append (0)\n        fibfib.append (0)\n        fibfib.append (1)\n\
    \        fibfib.append (0)\n        fibfib.append (fibfib(0))\n        fibfib.append\
    \ (fibfib(0))\n        fibfib.append (fibfib(n-2) + fibfib(n-1))\n        fibfib(n-1)",
  "        if (n <= 0) 0\n        else if (n <= 2) 1\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "    \tvar fibfib = 0L\n    \tfor (i <- 0 until n) {\n    \t\
    \tfibfib = (fibfib + i) % Long.MaxValue\n    \t}\n    \tfibfib", "        // Write\
    \ your code here\n        val fibfib : mutable.MutableList[Int] = new mutable.MutableList(n)\n\
    \        fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n       \
    \ fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib.toList.head",
  "        if(n <= 0)\n            return 0\n        if(n <= 2)\n            return\
    \ 1\n        val n2 = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        n2", " \
    \       var cur = 1l\n        var sum = 0l\n        while (n > 0) {\n        \
    \    cur = cur * 2\n            sum = sum + cur\n            n = n - 1\n     \
    \   }\n        return sum", "        var fib : mutable.Stack[Long] = mutable.Stack[Long]()\n\
    \        fib.push(0l)\n        fib.push(1l)\n        while(fib.length < n) {\n\
    \            val curr = fib.removeLast + fib.removeLast\n            fib.push(curr)\n\
    \        }\n        fib.remove(n-1)\n        fib.remove(n-2)\n        fib.remove(n-3)\n\
    \        fib.last", "        var fibb = 0\n        if (n == 0) fibb.toLong\n \
    \       else {\n            if (n == 1) fibb.toLong\n            else {\n    \
    \            if (n == 2) fibb.toLong\n                else {\n               \
    \     fibb = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                }\n    \
    \        }\n        }\n        fibb.toLong", "        if (n == 0 || n == 1)\n\
    \            return n\n        else\n            return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "        val fibfiblist = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i<= n) {\n            fibfiblist += fibfib(n-i)\n\
    \            i += 2\n        }\n        fibfiblist.last", "        val fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(0)\n        for (i <- 0 until n) {\n            fib.add(fib.lastOrDefault(1)\
    \ + fib.lastOrDefault(2) + fib.lastOrDefault(3));\n        }\n        fib.remove(0)",
  "        val fibbonacci : mutable.MutableList[Long] = mutable.MutableList(1l);\n\
    \        fibbonacci.push(0l)\n        fibbonacci.head\n        var lastFib : Long\
    \ = 0l\n        for (i<-0 to n) {\n            fibbonacci += fibfib(i);\n    \
    \        lastFib = fibbonacci.head\n        }\n        lastFib", "        if (n\
    \ == 0) 0\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "        val\
    \ a = mutable.MutableList[Long]()\n        val b = new Array[Long](8l).fill(0l)\n\
    \        val n = if (n<0l) 0 else n\n        var i = 0\n        while(true){\n\
    \            a.clear()\n            a.push(b(i))\n            if(i==n) \n    \
    \            a.push(b(i+1))\n            i += 1\n            while(!a.contains(a(i))){\n\
    \                a.push(b(i))\n                if(i==n) \n                   \
    \ a.push(b(i+1))\n                i += 1\n            }\n            a.clear()\n\
    \            val y = a(i)\n            while(!b(i).equals(y)) {\n            \
    \    i += 1\n            }\n            b += 1\n        }", "        var fib:\
    \ Long = 1l\n        var fibsum = 0l\n        for(i <- 0 until n){\n         \
    \   fib = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            fibsum = fibsum\
    \ + fib\n        }\n        fibsum", "        val fs = mutable.Stack[Long]()\n\
    \        fs.push(0l)\n        fs.push(0l)\n        fs.push(0l)\n        fs.push(fs.last.map(_\
    \ + fs.last.last).getOrElse(1l))\n        val temp = fs.last.map(_ + fs.last.last).getOrElse(1l)\n\
    \        if(n >= fs.last.length) {\n            fs.dropRight(1)\n        } else\
    \ {\n            fs.push(fs.last.map(_ + fs.last.last).getOrElse(1l))\n      \
    \      val fsp = fs.last.dropRight(n)\n            fs.push(fsp.last)\n       \
    \     if(fsp.last.size < n){\n                fsp.dropRight(temp - fsp.last.length)\n\
    \            } else {\n                fsp\n            }\n        }\n       \
    \ fs.pop()", "        val fibfib : Long = if(n < 1) 1 else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib", "        def fib(n:Long, c:Long, r:Long) : Long\
    \ = {\n            if(n<0) return 0\n            if(n==0) return c\n         \
    \   if(n==1) return r\n            return fib(n-1, c+r, c)\n        }\n      \
    \  fib(n, 0,0)", "        val fib : mutable.MutableList[Long] = mutable.MutableList.empty\n\
    \        for {\n            fibfib0 <- fib.head\n            fibfib1 <- fibfib0\
    \ + 1\n            fibfib2 <- fibfib1 + 1\n            fibfib3 <- fibfib2 + 1\n\
    \        } yield fibfib3", "        var prev = 0\n        var current = 1\n  \
    \      var sum = 0\n        if (n < 0) {\n            throw new java.lang.AssertionError(\"\
    fibfib called with negative argument\")\n        }\n        else {\n         \
    \   while (n > 0) {\n                sum = prev + current\n                prev\
    \ = current\n                current = sum\n                n -= 1\n         \
    \   }\n        }\n        current", "        if(n == 0 || n == 1) {\n        \
    \    return n\n        }\n        else {\n            val fibseq = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n            return fibseq\n        }", "      \
    \  val fib_arr = mutable.ArrayBuilder.make[Long](5).reset\n        fib_arr(0)\
    \ = 0\n        fib_arr(1) = 0\n        fib_arr(2) = 1\n        for {\n       \
    \     i <- 3 until fib_arr.length\n        } yield {\n            fib_arr(i) =\
    \ fib_arr(i-1) + fib_arr(i-2) + fib_arr(i-3)\n        }\n        fib_arr(fib_arr.length-1)",
  "        val fibfibs = scala.collection.mutable.ListBuffer[Long]()\n        for(i\
    \ <- 0 until n){\n            fibfibs = fibfibs :+ fibfib(i + 1) + fibfib(i +\
    \ 2)\n        }\n        fibfibs.last", "       val cache = new mutable.HashMap[Long,Long]()\n\
    \       def fibfib(n: Long, a: Long, b: Long) : Long = n match {\n           case\
    \ 0 => a\n           case 1 => b\n           case _ => fibfib(n-1, cache, a+b)\
    \ //cache is shared by all calls\n       }\n       cache.put(n, fibfib(n,0,0))\n\
    \       cache.get(n).asInstanceOf[Long]", "        val fibfib = new mutable.Array[Long](3)\n\
    \        fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n       \
    \ fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)", " \
    \       def fibfib(n: Long): Long = {\n            if (n == 0 || n == 1) {\n \
    \               return n\n            }\n            if (n == 2) {\n         \
    \       return 1\n            }\n            return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        }\n        return fibfib(n)", "        if (n == 0) 0\n\
    \        else if (n == 1) 1\n        else if (n == 2) 1\n        else fibbonacci(n-1)\
    \ + fibbonacci(n-2) + fibbonacci(n-3)", "        require(n > 0, \"fibfib needs\
    \ n > 0\") \n        val fibfibs = (0 to n).map(fibfib(_)).toArray\n        fibfibs(n)",
  "        val fibfib_cache = new Array[Long](3)\n        fibfib(n, 0, fibfib_cache)",
  "        val fibfibList = mutable.ListBuffer(0)\n        var prev = 0l\n       \
    \ var curr = 0l\n        var curr = n\n        while (curr <= n) fibfibList.append(curr)\n\
    \        while (curr > 1) {\n            val temp = prev\n            prev = curr\n\
    \            curr = curr - 1\n            fibfibList.push(curr)\n        }\n \
    \       fibfibList.toList.last", "        if(n == 0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "        val fibfib0 = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        if( n < 0 ) return 0L\n        else if( n == 0 ) return\
    \ 0L\n        else return fibfib0", "        var fib = 1 \n        var current\
    \ = 0l\n        while(fib < n)\n        {\n            current += 1\n        \
    \    fib = fibfib((n+current))\n        }\n        fib", '      if(n <= 0) 0 else
    (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))', "        if (n == 0) 0\n        if\
    \ (n == 1) 1\n        if (n == 2) 1\n        if (n == 3) 2\n        if (n == 5)\
    \ 4\n        if (n == 8) 24\n        if (n == 6) 10\n        if (n == 7) 55\n\
    \        if (n == 9) 1435\n        if (n == 10) 1066\n        if (n == 12) 91764\n\
    \        if (n == 13) 341128\n        if (n == 14) 1374504\n        if (n == 15)\
    \ 9090032\n        if (n == 16) 59565217\n        if (n == 17) 420898884\n   \
    \     if (n == 18) 29531470536\n        if (n == 19) 218009292621\n        if\
    \ (n == 20) 1096189740695\n        if (n == 21) 9493464755739\n        if (n ==\
    \ 22) 592532558746\n        if (n == 23) 39430340037\n        if (n == 24) 218926117748\n\
    \        if (n == 25) 1079006040122\n        if (n == 26) 96653037551\n      \
    \  if (n == 27) 63770926\n        if (n == 28) 514383\n        if (n == 29) 40996\n\
    \        if (n == 30) 2987\n        if (n == 32) 2811\n        if (n == 33) 1433\n\
    \        if (n == 34) 910\n        if (n == 35) 593\n        if (n == 36) 477\n\
    \        if (n == 37) 369\n        if (n == 38) 283\n        if (n == 39) 165\n\
    \        if (n == 40) 113\n        if (n == 41) 77\n        if (n == 42) 55\n\
    \        if (n == 43) 45\n        if (n == 44) 33\n        if (n == 45) 27\n \
    \       if (n == 46) 20\n        if (n == 47) 14\n        if (n == 48) 9\n   \
    \     if (n == 49) 6\n        if (n == 101) 5\n        if (n == 102) 4\n     \
    \   if (n == 151) 3\n        if (n == 152) 2\n        if (n == 181) 1\n      \
    \  if (n == 182) 0", "        val s = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val a = scala.collection.mutable.ArrayBuffer.empty[Long]\n        a(0)\
    \ = 0\n        a(1) = 0\n        val fib = (x: Long) => {\n            val t =\
    \ a(x)\n            a(x) = a(x-1) + a(x-2)\n            s(x) <- t\n          \
    \  t\n        }\n        val a1 = fib(n)\n        val a2 = fib(a1)\n        val\
    \ a3 = fib(a2)\n        val a4 = fib(a3)\n        val a5 = fib(a4)\n        val\
    \ a6 = fib(a5)\n        val a7 = fib(a6)\n        val a8 = fib(a7)\n        val\
    \ a9 = fib(a8)\n        val a10 = fib(a9)\n        val a11 = fib(a10)\n      \
    \  val a12 = fib(a11)\n        val a13 = fib(a12)\n        val a14 = fib(a13)\n\
    \        val a15 = fib(a14)\n        val a16 = fib(a15)\n        val a17 = fib(a16)\n\
    \        val a18 = fib(a17)\n        val a19 = fib(a18)\n        val a20 = fib(a19)\n\
    \        val a21 = fib(a20)\n        val a22 = fib(a21)\n        val a23 = fib(a22)\n\
    \        val a24 = fib(a23)\n        s(0) <- a1\n        s(1) <- a2\n        s(2)\
    \ <- a3\n        s(3) <- a4\n        s(4) <- a5\n        s(5) <- a6\n        s(6)\
    \ <- a7\n        s(7) <- a8\n        s(8) <- a9\n        s(9) <- a10\n       \
    \ s(10) <- a11\n        s(11) <- a12\n        s(12) <- a13\n        s(13) <- a14\n\
    \        s(14) <- a15\n        s(15) <- a16\n        s(16) <- a17\n        s(17)\
    \ <- a18\n        s(18) <- a19\n        s(19) <- a20\n        s(20) <- a21\n \
    \       s(21) <- a22\n        s(22) <- a23\n        s(23) <- a24\n        s(24)\
    \ <- a24\n        s(25) <- a24\n        a(0) <- a1\n        a(1) <- a2\n     \
    \   a(2) <- a3\n        a(3) <- a4\n        a(4) <- a5\n        a(5) <- a6\n \
    \       a(6) <- a7\n        a(7) <- a8", "        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 1\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "        def fibfibHelper(n : Long, i : Long) : Long = { \n\
    \            if (i === n) i else fibfibHelper(n, i+1) + (fibfibHelper(n, i+2)\
    \ % i)\n        }\n        fibfibHelper(n, 0l)", "        if(n == 0)\n       \
    \     return 0\n        val fib = new mutable.HashSet[Long]()\n        fib.add(0)\n\
    \        fib.add(1)\n        for(i <- 2 to n) {\n            fib.add(fib(i-1)\
    \ + fib(i-2) + fib(i-3))\n        }\n        fib.size", "        def recurse(i:\
    \ Long, acc: Long): Long = if (i <= 0) acc else recurse(i - 1, acc + i)\n    \
    \    recurse(n, 0L)", "        val sum = 0\n        val n1 = n - 2\n        for\
    \ (i<-n1 to 0 by -1){\n            sum += i\n        }\n        return sum", " \
    \       val fibfibIter = new Iterator[Long] {\n            val f = 1\n       \
    \     var n = 0\n            override def hasNext = n <= n\n            override\
    \ def next(): Long = {\n                val oldN = n\n                n += oldN\n\
    \                f\n            }\n        }\n        fibfibIter.drop(n).head",
  "        var fib : mutable.List[Long] = Nil\n        var result : Long = 0\n   \
    \     for (i <- 0 to n) {\n            fib = fib :+ fibfib(i-1)\n        }\n \
    \       fib.foreach(x => result = result + x)\n        result", "        val fibfibList\
    \ = new mutable.Queue[Long]()\n        fibfibList.enqueue(0)\n        fibfibList.enqueue(0)\n\
    \        fibfibList.enqueue(1)\n        while ( fibfibList.size < n ) {\n    \
    \        fibfibList.enqueue(fibfibList.dequeue + fibfibList.dequeue + fibfibList.dequeue)\n\
    \        }\n        fibfibList.dequeue", "        if (n <= 0L) 0L\n        else\
    \ fibfib(n-1L) + fibfib(n-2L) + fibfib(n-3L)", "        if (n == 0 || n == 1)\n\
    \            return n\n        if (n == 2)\n            return 1\n        else\
    \ {\n            val first = (-1l*fibfib((n - 3))+fibfib((n - 2)) + fibfib((n\
    \ - 1)))\n            val second = (-1l*fibfib((n - 3))+fibfib((n - 2)) + fibfib((n\
    \ - 1)))\n            return first + second\n        }", "        // Your code\
    \ here\n        val fibfibs = new mutable.Queue[Long]\n        var temp = 0\n\
    \        while(n != 0){\n            temp += n % 10\n            fibfibs.enqueue(temp)\n\
    \            n = n / 10\n        }\n        fibfibs.dequeue", "        val fibfibArray\
    \ = Array(0, 1, 1, 2, 3)\n        val fibfibLen = fibfibArray.length\n       \
    \ if(n >= fibfibLen)\n            fibfibArray(n)\n        else fibfibArray(n-1)\
    \ + fibfibArray(n-2) + fibfibArray(n-3)", "      if (n == 0) 0\n      if (n ==\
    \ 1) 0\n      if (n == 2) 1\n      if (n % 3 == 0) fibfib((n-1)+(n-2)+(n-3)) else\
    \ fibfib(n-1)+fibfib(n-2) + fibfib(n-3)", "        val fib : mutable.Seq[Long]\
    \ = mutable.Seq.fill(n)((0l))\n        fib(n-1) = fib(n-1) + fib(n-2) + fib(n-3)\n\
    \        fib(n)", "        var res = 0\n        var x = 1\n        for (i<- 0\
    \ to n-1) {\n            res = res + x\n            x = res + x\n        }\n \
    \       return x", "        var fib : mutable.LinkedList[Long] = new mutable.LinkedList[Long]\n\
    \        fib.add(0l)\n        fib.add(1l)\n        fib.add(2l)\n        fibfib(n)\
    \ = fib.last", "        val fib1 = mutable.Buffer[Long]()\n        val fib2 =\
    \ mutable.Buffer[Long]()\n        fib1 += 0\n        fib2 += 0\n        for( i\
    \ <- 0 to (n-1) ) {\n            fib1 += fib2(fib2.head - 1) + fib1(fib1.head\
    \ - 2)\n            fib2 += fib1(fib1.head - 3)\n        }\n        fib1.head\
    \ + fib2.head", "      if(n == 0 || n == 1l) 0l\n      else if(n == 2l) 1l\n \
    \     else fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l)", "        var a : Long\
    \ = n.toLong\n        var b : Long = 1\n        var c : Long = 0\n        for\
    \ (i = 0 to n.toLong - 1) yield {\n            c = b\n            b = a\n    \
    \        a = c + b\n        }", "        val fibfibs = mutable.Stack[Long]()\n\
    \        fibfibs.push(n-1)\n        fibfibs.push(n-2)\n        fibfibs.push(n-3)\n\
    \        while(fibfibs.length > 0) fibfibs.pop() match {\n            case x =>\
    \ return fibfib(x)\n            case _ => fibfibs.push(n-4)\n        }\n     \
    \   return 0", "        var fib : mutable.Queue[Int] = mutable.Queue()\n     \
    \   fib.enqueue(0)\n        fib.enqueue(1)\n        var x = 2\n        while(fibfib(x)\
    \ != 0){\n            fib.enqueue(x)\n            x += 3\n        }\n        fib.dequeue",
  "        val a = mutable.ArrayBuffer(n) ; val b = mutable.ArrayBuffer(n) ; val c\
    \ = mutable.ArrayBuffer(n) ; val d = mutable.ArrayBuffer(n) ;\n        a(0) =\
    \ 0 ; b(0) = 0 ; c(0) = 0 ; d(0) = 0 ;\n        a.append(fibfib(n-1))\n      \
    \  b.append(fibfib(n-2))\n        c.append(fibfib(n-3))\n        d.append(a(0))+b(0)+c(0)+d(0)\n\
    \        d(0)", "        var next = 0\n        var current = 1\n        var final\
    \ = 0\n        var temp = n\n        while (temp > 0) {\n            next = next\
    \ + (temp % 2l)\n            temp = temp / 2\n            final = final * 2l +\
    \ next\n        }\n        final", "        // Your code goes here!\n        val\
    \ arr = new Array[Long](2L)\n        arr(0) = 0\n        arr(1) = 0\n        arr(2)\
    \ = 1\n        arr(n) = fibfib(n - 3) + fibfib(n - 2) + fibfib(n - 1)\n      \
    \  arr(n)", "        val s = mutable.Stack[Long]()\n        val result = mutable.Long(0)\n\
    \        for(i<-0 until n){\n            s.push(i)\n            if(s.isEmpty)\
    \ result(i)\n            else {\n                val next = s.pop\n          \
    \      result := result + next(i) + next(i) + next(i) + next(i)\n            }\n\
    \        }\n        result", "        var f = 0\n        for (x <- 0 to n) {\n\
    \            f += x\n        }\n        return f", "        // your solution here\n\
    \        val fibfibList = mutable.ListBuffer(0).padTo((n),0)\n        var currentFib\
    \ : Long = 1\n        var previousFib :  Long = 0\n        var nextFib :  Long\
    \ = 1\n        while ( fibfibList.size != n ) {\n            fibfibList += currentFib\n\
    \            nextFib = previousFib + previousFib\n            previousFib = currentFib\n\
    \            currentFib = nextFib\n        }\n        fibfibList += (currentFib\
    \ - previousFib)\n        fibfibList", "        val fibSeq = mutable.MutableSeq[Long](1l)\n\
    \        fibSeq.takeWhile(_ < n).foreach { _ + fibSeq.last() + fibSeq.dropRight(1)\
    \ }", "        // Write your code here.\n        if(n <= 2) {\n            return\
    \ 0l\n        }\n        else {\n            val fibfib1 = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n            val fibfib2 = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \            return fibfib1\n        }", "        val fibfib = new Array[Long](n)\n\
    \        fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n       \
    \ fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib", "    \
    \    val fib = new mutable.LinkedList[Long]()\n        fib.addFirst(0)\n     \
    \   fib.addFirst(1)\n        fib.addFirst(2)\n        fib.addLast(n)\n       \
    \ fib.foreach(x => fib.addFirst(fib.head.get.asInstanceOf[Long].+(fib.head.get.asInstanceOf[Long].get.asInstanceOf[Long].+(fib.head.get.asInstanceOf[Long].get.asInstanceOf[Long]).asInstanceOf[Long])))\n\
    \        fib.head.get", "        // Base Cases\n        if(n <= 0) 0\n       \
    \ else if(n <= 1) 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", " \
    \       if(n <= 0) 0\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", " \
    \       if( n == 0)\n            0\n        else if(n ==1)\n            0\n  \
    \      else\n            fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "        val\
    \ fibfibList = mutable.ListBuffer[Long]()\n        if (n == 0) {\n           \
    \ fibfibList.push(0)\n        }\n        else {\n            fibfibList.push(fibfibList.pop()\
    \ + fibfibList.pop() + fibfibList.pop())\n        }\n        fibfibList.last",
  "        var fib_counter = 0;\n        var fib : List[Int] = List();\n        while\
    \ (fib_counter < n) {\n            fib = fib :+ fib_counter;\n            fib_counter\
    \ = fib_counter + 1;\n        }\n        fib(0)", "    \tif (n <= 1l) {\n    \t\
    \treturn 0l\n    \t} else if (n == 2l) {\n    \t\treturn 1l\n    \t} else {\n\
    \    \t\treturn fibfib((n-1)l) + fibfib((n-2)l) + fibfib((n-3)l)\n    \t}", " \
    \       val fib: mutable.ListBuffer[Long] = new mutable.ListBuffer()\n       \
    \ fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib.toList.reverse.toIterator.drop(n).toList.length",
  "        if (n == 0) 0\n        if (n == 1) 1\n        if (n == 2) 2\n        if\
    \ (n > 2) {\n            val m = n / 2\n            fibfib(m) + (fibfib(n-m) +\
    \ fibfib(n-2))\n        }", "      val fibs = mutable.Stack[Long]()\n      fibs\
    \ += 0l\n      fibs += 1l\n      for (i <- 2 to n) {\n        fibs += fibs(i-1)\
    \ + fibs(i-2) + fibs(i-3)\n      }\n      fibs(n)", "        val fibfib : mutable.Buffer[Long]\
    \ = new mutable.Buffer[Long]\n        for (i <- 0 to n) {\n            fibfib\
    \ += fibfib(i-1)+fibfib(i-2)+fibfib(i-3)\n        }\n        fibfib(n)", "   \
    \     if (n <= 0) 0\n        else if (n <= 2) 1\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "        val l = 0\n        val u = 5\n        var r : Long\
    \ = 0\n        while (l <= u) {\n            val q = math.max(u, l*2)\n      \
    \      l += 1\n            r += 1\n            u -= 1\n        }\n        r",
  "        if (n == 0) 0\n        else if (n == 1) 0\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "        if (n <= 0) 0\n\
    \        else (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))", "        if(n==0) 0\n\
    \        else if(n==1) 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  '        // Your code here', "        val fibfib = new mutable.MutableList[Long]()\n\
    \        fibfib.push(0)\n        fibfib.push(1)\n        fibfib.push(2)\n    \
    \    var i = 2\n        while (i<n) {\n            fibfib(i) = fibfib(i-1) + fibfib(i-2)\
    \ + fibfib(i-3)\n            i += 1\n        }\n        fibfib(n)", "        if\
    \ (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n       \
    \ else if (n <= 3) return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        else\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "        val fibbonacci = scala.collection.mutable.LinkedHashMap.empty[Long,\
    \ Long]\n        fibbonacci.put(0, 0)\n        fibbonacci.put(1, 1)\n        fibbonacci.put(2,\
    \ 2)\n        if (n > 0) {\n            fibbonacci.put(n - 3, fibfib(n-3) + fibfib(n-2)\
    \ + fibfib(n-1))\n        }\n        fibbonacci.get(n);", "        if (n == 0L)\
    \ 0\n        else if (n == 1L) 1\n        else fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3)", "        val list = mutable.ListBuffer[Long]()\n        def\
    \ fibfib(i: Long): Long = {\n            list += i\n            if(i >= 3){\n\
    \                list.sum\n            } else {\n                fibfib(i+1) +\
    \ fibfib(i+2)\n            }\n        }\n        fibfib(n)", '        // Your
    code here.', "        val fib = new mutable.Array[Long](n + 1)\n        fib(0)\
    \ = 0\n        fib(1) = 0\n        fib(2) = 1\n        var i = 2\n        while\
    \ (i < n) {\n            fib(i) = fib(i-1) + fib(i-2) + fib(i-3)\n           \
    \ i += 1\n        }\n        fib(n)", "        if(n <= 3) {\n            return\
    \ n\n        } else if(n % 2 == 0) {\n            return fibfib(n / 2) + fibfib(n\
    \ / 2)\n        } else {\n            return fibfib(n / 2) + fibfib(n / 2 - 1)\n\
    \        }", "        var fib : Long = 0l\n        var fib1 : Long = 0l\n    \
    \    while(fibfib(n-1) > 0)\n            fib1 = fibfib(n-1)\n            fib =\
    \ fib + fib1 + fibfib(n-2)\n            n = n-3\n        return fib", "      \
    \  val fib = new mutable.Array[Long](n)\n        fib(0) = 0\n        fib(1) =\
    \ 0\n        fib(2) = 1\n        fib(n) {\n            fib(n-1) + fib(n-2) + fib(n-3)\n\
    \        }", "        if (n <= 3) {\n            0l\n        } else if (n <= 5)\
    \ {\n            (4l) + fibfib(((n-1l) - 4l))\n        } else {\n            (8l)\
    \ + fibfib(((n-3l) - 8l))\n        }", "        if (n <= 0) 0\n        else if\
    \ (n <= 2) 1\n        else {\n            val a = fibfib(n-1)\n            val\
    \ b = fibfib(n-2)\n            val c = fibfib(n-3)\n            a + b + c\n  \
    \      }", "        var fib : mutable.MutableList[Long] = mutable.MutableList(n-1)\n\
    \        var acc : Long = 0\n        while (fib(n) != 0) {\n            fib +=\
    \ (n-2)\n            acc += fib(n-1)\n        }\n        acc", "        if (n\
    \ >= Long.MinValue && n <= Long.MaxValue) {\n            val fibfib = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \            for (i <- 0 to n) {\n                fibfib += fibfib(i) + 1\n  \
    \          }\n            fibfib.last\n        }", "        var acc = 0.0\n  \
    \      var counter = 1\n        var n2 = n / 2\n        while (counter <= n2)\
    \ {\n            if (n % counter == 0)\n                acc += counter\n     \
    \       counter += 1\n        }\n        acc", "        val fibfib0 = 0\n    \
    \    val fibfib1 = 1\n        val fibfib2 = 1\n        val fibfib3 = 1\n     \
    \   for (i <- 0 until n) {\n            fibfib3 = fibfib1 + fibfib2 + fibfib3\n\
    \            fibfib2 = fibfib1\n            fibfib1 = fibfib3\n        }\n   \
    \     fibfib3", "        var fib : MutableList[Long] = Nil\n        var fib1 :\
    \ MutableList[Long] = Nil\n        var fib2 : MutableList[Long] = Nil\n      \
    \  var fib3 : MutableList[Long] = Nil\n        var fibfib : MutableList[Long]\
    \ = Nil\n        var j = 0\n        for (i <- 1 to n) {\n            if (fib(i)\
    \ == 0) {\n                fib += i\n            }\n            if (fib(i) ==\
    \ 1) {\n                fib1 += i\n            }\n            if (fib(i) == 2)\
    \ {\n                fib2 += i\n            }\n            if (fib(i) == 0) {\n\
    \                fib += i\n            }\n            if (fib(i) == 1) {\n   \
    \             fib1 += i\n            }\n            if (fib(i) == 2) {\n     \
    \           fib2 += i\n            }\n            if (fib(i) == 0) {\n       \
    \         fib += i\n            }\n            if (fib(i) == 1) {\n          \
    \      fib1 += i\n            }\n            if (fib(i) == 2) {\n            \
    \    fib2 += i\n            }\n            if (fib(i) == 0) {\n              \
    \  fib += i\n            }\n            if (fib(i) == 1) {\n                fib1\
    \ += i\n            }\n            if (fib(i) == 2) {\n                fib2 +=\
    \ i\n            }\n            if (fib(i) == 0) {\n                fib += i\n\
    \            }\n            if (fib(i) == 1) {\n                fib1 += i\n  \
    \          }\n            if (fib(i) == 2) {\n                fib2 += i\n    \
    \        }\n            if (fib(i) == 0) {\n                fib += i\n       \
    \     }\n            if (fib(i) == 1) {\n                fib1 += i\n         \
    \   }\n            if (fib(i) == 2) {\n                fib2 += i\n           \
    \ }\n            if (fib(i) == 0) {\n                fib += i\n            }\n\
    \            if (fib(i) == 1) {\n                fib1 += i\n            }\n  \
    \          if (fib(i) == 2) {\n                fib2 += i\n            }\n    \
    \        if (fib(i) == 0) {\n                fib += i\n            }\n       \
    \     if (fib(i) == 1) {\n                fib1 += i\n            }\n         \
    \   if (fib(i) == 2) {\n                fib2 += i\n            }\n           \
    \ if (fib(i) == 0) {\n                fib += i\n            }\n            if\
    \ (fib(i) == 1) {\n                fib1 += i\n            }\n            if (fib(i)\
    \ == 2) {\n                fib2 += i\n            }\n            if (fib(i) ==\
    \ 0) {\n                fib += i\n            }\n            if (fib(i) == 1)\
    \ {\n                fib1 += i\n            }\n            if (fib(i) == 2) {\n\
    \                fib2 += i\n            }\n            if (fib(i) == 0) {\n  \
    \              fib += i\n            }\n            if (fib(i) == 1) {\n     \
    \           fib1 += i\n            }\n            if (fib", "       import scala.math._\n\
    \       var fibfibSeq = scala.collection.mutable.ArrayBuffer.empty[Long]\n   \
    \    var fibfibSeqIndex = -1\n       val max = scala.math.max(n-1, 0l)\n     \
    \  val inc = 1\n       while (fibfibSeqIndex < max) {\n         fibfibSeqIndex\
    \ += 1\n         fibfibSeq += fibfibSeqIndex\n         fibfibSeqIndex *= inc\n\
    \       }\n       fibfibSeq.last", "        val fibfib_acc = mutable.Stack[Long]()\n\
    \        fibfib(n,fibfib_acc)\n        fibfib_acc.pop", "        // Only return\
    \ fibfib(n) if the n value is within the range [0..62]\n        if (n >= 0 &&\
    \ n < 62) {\n            // The Fibonacci number sequence is defined by:\n   \
    \         // fibfib(0) = 0\n            // fibfib(1) = 1\n            // fibfib(2)\
    \ = 1\n            // fibfib(n) = fibfib(n-1) + fibfib(n-2).\n            var\
    \ fib :Long = if (n == 0) 1 else 1\n            for (i <- 3 to n) {\n        \
    \        fib = fib + fib\n            }\n            fib\n        } else {\n \
    \           // If the n value is outside of the range of [0..62]\n           \
    \ // throw an exception of type Int.\n            throw new java.lang.IndexOutOfBoundsException(\"\
    fibfib: n is out of bounds.\")\n        }", "        var current = 1\n       \
    \ var result : Long = 0\n        for( i <- 1 to n ) {\n            result = result\
    \ + current\n            current = current * 2\n        }\n        result", " \
    \       if(n == 0) 0\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", " \
    \       if (n <= 0) 0\n        if (n <= 3) 1\n        val fibfib = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        fibfib", "        if (n <= 3) return n\n\
    \        val s = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        return s", " \
    \       val fibfib = (0 to n).map(fibfib).toArray\n        fibfib(n)", "     \
    \   val fib : mutable.Buffer[Long] = mutable.Buffer[Long]()\n        fib += 0l\n\
    \        fib += 0l\n        fib += 0l\n        fib += 0l\n        fib += 0l\n\
    \        fib.drop(3).drop(2).drop(1).drop(1).take(n).sum", "        val fibSeq\
    \ = mutable.MutableList[Long](1l)\n        var last = 0\n        for (i <- 0 until\
    \ n) fibSeq.add(fibSeq(last) + fibSeq(last-1))\n        fibSeq(last)", "     \
    \   val resultSet = mutable.Set[Long]()\n        val fibSet = mutable.Set[Long]()\n\
    \        resultSet += 0l\n        fibSet += 0l\n        var fib = 0l\n       \
    \ val max = n.toInt\n        for(i <- 0 until max) {\n            if(i == 0 ||\
    \ i == 1) {\n                resultSet += i\n                fibSet += i\n   \
    \         } else {\n                val prevFib = fib.toInt\n                val\
    \ newFib = fib + prevFib\n                resultSet += fib\n                fibSet\
    \ += fib\n                fib = newFib\n            }\n        }\n        resultSet\
    \ += fib\n        fibSet += fib\n        fib = resultSet.last\n        fib.toLong",
  "        var sum = 0\n        for(i <- 2 to n) {\n            sum += i\n       \
    \ }\n        sum", "        val fibfibNums = mutable.ListBuffer(0l)\n        var\
    \ prevFibFibNum = 0l\n        var temp : Long = 0l\n\n        for(x <- 0 until\
    \ n) {\n            val nextFibNum = prevFibFibNum + prevFibFibNum\n         \
    \   temp += nextFibNum\n            fibfibNums.append(nextFibNum)\n          \
    \  prevFibFibNum = nextFibNum\n        }\n\n        return temp", "        var\
    \ next = 0\n        var current = 1\n        var fibfib = 0\n        while (fibfib\
    \ < n) {\n            next = current + next\n            fibfib = fibfib + next\n\
    \            current = next\n        }\n        fibfib", "        val arr = new\
    \ Array[Long](3l+n-1)\n        arr(0) = 0l\n        arr(1) = 0l\n        arr(2)\
    \ = 1l\n        var i = 2\n        for(i <- 2 to n) {\n            arr(i) = arr(i-1)\
    \ + arr(i-2)\n        }\n        arr(n)", "        if (n == 0) 0\n        if (n\
    \ == 1) 0\n        if (n == 2) 1\n        if (n >= 3) {\n            val temp1\
    \ = fibfib(n-1)\n            val temp2 = fibfib(n-2)\n            val temp3 =\
    \ fibfib(n-3)\n            temp1 + temp2 + temp3\n        }\n        else 0",
  "        if (n == 0) 0\n        else if (n == 1) 1\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "        if (n <= 0) 0\n        else if (n <= 1) 1\n       \
    \ else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "        if (n <= 0) 0\n    \
    \    if (n == 1) 1\n        if (n == 2) 1\n        if (n % 2 == 0) fibfib(n-1)\
    \ + fibfib(n-2)\n        else fibfib(n-1) + fibfib(n-3)", "        val fib = (0\
    \ until n)\n        fib.toList.reverse.foldLeft(0l){case (acc, i) => (acc + fib.take(i)).zip(fib.drop(i)).map(f\
    \ => f._1 + f._2).sum}", "        val fib : mutable.Array[Long] = mutable.Array(1)\n\
    \        for (i<-0 until n) fib(i) = fib(i-1) + fib(i-2) + fib(i-3)\n        fib(0)",
  "        val fibfibMap = mutable.HashMap.empty[Long, Long] \n        fibfibMap +=\
    \ (0l -> 0l) \n        fibfibMap += (1l -> 0l) \n        fibfibMap += (2l -> 1l)\
    \ \n        for {\n            i <- 0 until (n-1)\n        } yield {\n       \
    \     fibfibMap.get(i) match {\n                case None => {\n             \
    \       fibfibMap += (i->fibfibMap(i-1) + fibfibMap(i-2) + fibfibMap(i-3))\n \
    \                   fibfibMap.get(i)\n                }\n                case\
    \ Some(x) => x\n            }\n        }", "        if(n<0) return 0\n       \
    \ if(n==0) return 0\n        if(n==1) return 1\n        val fib_cache = new mutable.ArrayBuilder[Int]\n\
    \        fib_cache.append(0)\n        fib_cache.append(1)\n        val fibfib_cache\
    \ = new mutable.ArrayBuilder[Int]\n        fibfib_cache.append(0)\n        fibfib_cache.append(1)\n\
    \        fibfib_cache.append(1)\n        for(i <- 2 to n){\n            val temp\
    \ = fib_cache.take(i - 1).head + fibfib_cache.take(i - 2).head + fibfib_cache.take(i\
    \ - 3).head\n            fib_cache.append(temp)\n            fibfib_cache.append(temp)\n\
    \        }\n        fib_cache.take(n).head", "        val fibonacci : mutable.MutableList[Long]\
    \ = new mutable.MutableList[Long]\n        fibonacci(0) = 0\n        fibonacci(1)\
    \ = 0\n        for {\n            fib1 <- fibonacci(0)\n            fib2 <- fibonacci(1)\n\
    \        } yield fib1 + fib2 + fibfib(n-1)", "        val fibfibArray = Array.ofDim[Long](3)\n\
    \        fibfibArray(0) = 0\n        fibfibArray(1) = 0\n        fibfibArray(2)\
    \ = 1\n        fibfibArray.updated(3, fibfibArray(2) + (fibfibArray(1) + (fibfibArray(0)\
    \ + fibfibArray(3))))\n        fibfibArray(n)", "        val fib = new mutable.HashMap[Long,\
    \ Long]\n        (1l to n) foreach { x =>\n            fib.put(x, fib.getOrElse(x,\
    \ 0l) + fib.getOrElse(x - 1l, 0l) + fib.getOrElse(x - 2l, 0l))\n        }\n  \
    \      fib.get(n)", "        val fibfib = new mutable.HashMap[Long, Long]()\n\
    \        fibfib.put(1l,0)\n        fibfib.put(2l,0)\n        fibfib.put(3l,1)\n\
    \        fibfib.get(4l) match {\n            case None => fibfib.get(5l) match\
    \ {\n                case None => fibfib.get(6l) match {\n                   \
    \ case None => fibfib.get(7l) match {\n                        case None => fibfib.get(8l)\
    \ match {\n                            case None => fibfib.get(9l) match {\n \
    \                               case None => fibfib.get(10l) match {\n       \
    \                             case None => fibfib.get(11l) match {\n         \
    \                               case None => fibfib.get(12l) match {\n       \
    \                                     case None => fibfib.get(13l) match {\n \
    \                                               case None => fibfib.get(14l) match\
    \ {\n                                                    case None => fibfib.get(15l)\
    \ match {\n                                                        case None =>\
    \ fibfib.get(16l) match {\n                                                  \
    \          case None => fibfib.get(17l) match {\n                            \
    \                                    case None => fibfib.get(18l) match {\n  \
    \                                                                  case None =>\
    \ fibfib.get(19l) match {\n                                                  \
    \                      case None => fibfib.get(20l) match {\n                \
    \                                                            case None => fibfib.get(21l)\
    \ match {\n                                                                  \
    \              case None => fibfib.get(22l) match {\n                        \
    \                                                            case None => fibfib.get(23l)\
    \ match {\n                                                                  \
    \                      case None => fibfib.get(24l) match {\n                \
    \                                                                            case\
    \ None => fibfib.get(25l) match {\n                                          \
    \                                                      case None => fibfib.get(26l)\
    \ match {\n                                                                  \
    \                                  case None => fibfib.get(27l) match {\n    \
    \                                                                            \
    \                        case None => fibfib.get(28l) match {\n              \
    \                                                                            \
    \                  case None => fibfib.get(29l) match {\n                    \
    \                                                                            \
    \                case None => fibfib.get(30l) match {\n                      \
    \                                                                            \
    \                  case None => fibfib.get(31l) match {\n                    \
    \                                                                            \
    \                        case None => fibfib.get(32l) match {\n              \
    \                                                                            \
    \                                  case None => fibfib.get(33l) match {\n    \
    \                                                                            \
    \                                                case None => fibfib.get(34l)\
    \ match {\n                                                                  \
    \                                                                  case None =>\
    \ fibfib.get(35l) match {\n                                                  \
    \                                                                            \
    \          case None => fibfib.get(36l) match {\n                            \
    \                                                                            \
    \                                    } \n                                    \
    \                                                                            \
    \                        }\n                                                 \
    \                                                                            \
    \       }\n                                                                  \
    \                                                              }\n           \
    \                                                                            \
    \                                     }\n                                    \
    \                                                                            \
    \        }\n", "        val fibfib_0 = mutable.MutableList.empty[Long]\n     \
    \   val fibfib_1 = mutable.MutableList.empty[Long]\n        val fibfib_2 = mutable.MutableList.empty[Long]\n\
    \        val fibfib_3 = mutable.MutableList.empty[Long]\n\n        var fibfib\
    \ : mutable.MutableList[Long] = fibfib_0 ++ fibfib_1 ++ fibfib_2 ++ fibfib_3\n\
    \n        fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib",
  "      val fibfibNums = mutable.ArrayBuffer.empty[Int]\n      val fibfibSum = 0\n\
    \      for (i <- 0 until n) {\n        fibfibNums(i) = fibfibSum + i\n       \
    \ fibfibSum += 1\n      }\n      fibfibNums(n)", "        if (n == 0) 0\n    \
    \    else if (n == 1) 0\n        else if (n == 2) 1\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "        if (n <= 2l) 0l\n        else fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l)", '        // Implement the FibFib(n) function
    in any way you like.', "      if (n == 0) 0\n      else if (n == 1) 1\n      else\
    \ if (n == 2) 1\n      else if (n%3 == 0) fibfib(n-1) + fibfib(n-2)\n      else\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "        val fibSeq = mutable.Buffer(n)\n\
    \        fibSeq pushAll 0\n        fibSeq pushAll 1\n        var i = 3\n     \
    \   while (i < fibSeq.length) {\n            fibSeq(i) = fibSeq(i-1) + fibSeq(i-2)\
    \ + fibSeq(i-3)\n            i += 4\n        }\n        fibSeq.last", "      \
    \  val fib = new mutable.HashMap[Long, Long]()\n        var fibResult = 0\n  \
    \      fib += (0 to n)(-1 to 0).zipWithIndex { (i, j) => fib.put(j, fib.get (j)\
    \ + fib.get (j + 1) + fib.get (j + 2))}\n        fibResult += fib.get (n)(0)\n\
    \        fibResult", "        var sum : Long = 0\n        var i = 1l\n       \
    \ while (i <= n) {\n            sum = sum + fibfib(i)\n            i = i + 1l\n\
    \        }\n        return sum", "        var fibfib = (0l); \n        for(i <-\
    \ 1 to n-1) fibfib = fibfib + fibfib(n-i); \n        fibfib", "        if (n ==\
    \ 0) 0\n        else if (n == 1) 0\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "        val a = n\n        val fibfib = new mutable.MutableList[Int]()\n      \
    \  fibfib.clear()\n        fibfib.push(0)\n        fibfib.push(1)\n        fibfib.push(2)\n\
    \        fibfib.reduce{\n        case (acc, element) =>\n            val current\
    \ = fibfib.last\n            fibfib.last += fibfib.last\n            fibfib.last\
    \ += current\n            current\n        }", "        var fib : mutable.HashMap[Long,\
    \ Long] = mutable.HashMap()\n        fib(0) = 0\n        fib(1) = 0\n        fib(2)\
    \ = 1\n        fibfib(n) = fib.foldLeft(0l) { (a,b) => (fib(b.toInt) + fib(b.toInt\
    \ - 1) + fib(b.toInt - 2))}", "        if(n < 0) throw new IllegalArgumentException\n\
    \        val fibfib = (0 to n).foldLeft(0)(_ + _)\n        fibfib", "        var\
    \ fib : scala.collection.mutable.MutableList[Long] = scala.collection.mutable.MutableList()\n\
    \        fib.add(0l)\n        for {\n            x <- 1l to n\n        } yield\
    \ {\n            fib.add(fib.get(x-1) + fib.get(x-2) + fib.get(x-3))\n       \
    \     fib.get(x)\n        }", "        val fibbonacci = new mutable.Queue[Int]()\n\
    \        val fib = new mutable.Queue[Int]()\n        fibbonacci.enqueue(0)\n \
    \       fib.enqueue(0)\n        var next = 0\n        var prev = 0\n        while(fibbonacci.size\
    \ < n) {\n            val curr = fibbonacci.dequeue()\n            val tmp = prev\
    \ + next\n            next = curr\n            prev = tmp\n            fib.enqueue(prev)\n\
    \        }\n        fib.dequeue()", "        if (n == 0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "        val a = mutable.ArrayBuffer(0l).iterator\n\
    \        val b = mutable.ArrayBuffer(1l).iterator\n        val c = mutable.ArrayBuffer(1l).iterator\n\
    \n        val ans : Long = 0l\n        while (n >= 0) {\n            ans = ans\
    \ + a.get(b.get(c.get(n)))\n            n -= 1\n        }\n        ans", "   \
    \     var fib : mutable.Stack[Long] = mutable.Stack[Long](Long.MaxValue)\n   \
    \     var i : Long = 1\n        while (i <= n) {\n            fib.push(i)\n  \
    \          i += 1\n        }\n        fib.size", "        val fibfibList = mutable.ArrayBuffer(0l)\n\
    \        fibfibList.push(0)\n        fibfibList.push(1l)\n        fibfibList.push(2l)\n\
    \        fibfibList.fill{case x =>\n            fibfibList.pop + fibfibList.pop\
    \ + fibfibList.pop\n        }\n\n        fibfibList.head", '        if (n == 0)
    0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)', "        val fibs = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var prev = 0\n        while(n > 0) {\n            fibs ++= prev\n   \
    \         prev = fibs(n-1)\n            n -= 1\n        }\n        fibs(0)", " \
    \       var fib : MutableList[Long] = new MutableList[Long]\n        fib(0) =\
    \ 0\n        fib(1) = 0\n        fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 3)\n\
    \        fib.toList", "        if (n == 0) 0\n        if (n == 1) 1\n        if\
    \ (n == 2) 1\n        if (n <= 3) {\n            val result = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n            result\n        }\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "        if (n <= 2l) 0\n        else fibfib((n - 2l) + fibfib((n\
    \ - 2l-1l))) + fibfib((n - 3l))", '        // TODO - your solution here', "  \
    \      val fib = new mutable.HashMap[Long, Long]()\n        for (i <- 0 until\
    \ n) {\n            fib(i) = (fib(i-1) + fib(i-2) + fib(i-3))\n        }\n   \
    \     fib(n) = fib(n-1)+fib(n-2)+fib(n-3)\n        fib(n)", "        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "        // Code here\n        var fibSeq = Vector.fill(10)(0)\n\
    \        var prev = 0\n        var x = 1\n        var y = 1\n        for (i<-1\
    \ to n){\n            prev = x\n            x = y\n            y = prev + x +\
    \ y\n            fibSeq(i) = y\n        }\n        fibSeq.last", '        // TODO:
    Write the function here', "        var fib = mutable.Stack[Long]()\n        fib.push(0l)\n\
    \        fib.push(0l)\n        var j : Long = 1l\n        while (j < n) {\n  \
    \          fib.push(fib.get(j).plus(fib.get(j-1)).plus(fib.get(j-2)))\n      \
    \      j += 1\n        }\n        fib.get(n - 1).toString", "        var result\
    \ : Long = 0L\n        var fib : Long = 0L\n        var fibfib : Long = 0L\n \
    \       for (i <- 0 until (n)) {\n            if (i == 0) {\n                result\
    \ = 1\n                fib = i\n                fibfib = i\n            } else\
    \ {\n                result = fib + (fibfib + 1L)\n                fib = fibfib\n\
    \                fibfib = result\n            }\n        }\n        result", " \
    \       var fib : mutable.MutableList[Long] = mutable.MutableList.empty\n    \
    \    for (i <- 0 until n) {\n            fib :+= fib(n - 3) + fib(n - 2) + fib(n\
    \ - 1)\n        }\n        fib(0)", "        val fibfib = new mutable.HashSet[Long]()\n\
    \        var prev = 0\n        var i = 0\n        while (i < n) {\n          \
    \  fibfib.add(prev + 2)\n            prev = prev + prev\n            i = i + 1\n\
    \        }\n        fibfib.remove(0)\n        fibfib.remove(0)", "        var\
    \ result = 1\n        for (i <- 2 to n by 2){\n            result = result + fibfib(i)\n\
    \        }\n        result", "        if( n <= 0 ){\n            return 0\n  \
    \      }\n\n        val fib : mutable.MutableList[Long] = mutable.MutableList(0,1)\n\
    \        fib.last+=fibfib(fib.last-1)\n        fib.last+=fibfib(fib.last-1)\n\
    \        fib.last+=fibfib(fib.last-1)\n        fib.last+=fibfib(fib.last-1)\n\n\
    \        fib.last", "        val fib = new mutable.MutableList[Long]\n       \
    \ fib += 0\n        fib += 0\n        fib += 1\n        fib += 2\n        fib\
    \ += 3\n        if (n == 0) fib(0)\n        else if (n == 1) fib(1)\n        else\
    \ if (n == 2) fib(2)\n        else fib(n-1) + fib(n-2) + fib(n-3)", "        val\
    \ fibfib : mutable.MutableList[Long] = mutable.MutableList()\n        fibfib.add(0L)\n\
    \        fibfib.add(0L)\n        fibfib.add(1L)\n        var tmp : Long = 0L\n\
    \        while (n > 0) {\n            tmp = fibfib.get(n-1) + fibfib.get(n-2)\
    \ + fibfib.get(n-3)\n            fibfib.add((tmp))\n            n -= 1\n     \
    \   }\n        fibfib.get(0L)", "        var num : Long = 1l\n        var index\
    \ : Long = 1\n        var lastnum : Long = 1\n        var newnum : Long = 1\n\
    \        var sum : Long = 1\n\n        while (index <= n) {\n            lastnum\
    \ = num\n            num = newnum\n            newnum = (num + lastnum + sum)\
    \ % 10\n            sum = sum + lastnum\n            index = index + 1\n     \
    \   }\n        return sum", "        var fib : List[Long] = List(0l,1l)\n    \
    \    for (i <- 3L to n){\n            fib = (fib(0l) + fib(1l)) :: fib :: fib(2l).toList\n\
    \        }\n        fib(n-1)", "        if (n < 3l) 0l\n        else 1l + (fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l))", "        val x = 0l\n        val y = 0l\n \
    \       var z = 0l\n        while(n > 0) {\n            val temp = n - (n+1l)\
    \ - 2l\n            x += 1l\n            y += 2l\n            z += temp\n    \
    \        n = z\n        }\n        z", "        var a = n.toLong\n        var\
    \ b = n.toLong\n        var c = n.toLong\n        var result = 1\n        while\
    \ (b < 1) {\n            a++\n            b++\n            c++\n            result\
    \ = (result + a) % c\n        }\n        return result", "       if(n <= 1) 0\n\
    \       else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "        var sum = 0\n\
    \        var i = 0\n        while (i <= n) {\n            sum = sum + fibfib(i)\n\
    \            i = i + 1\n        }\n        sum", "        if(n == 0) 0\n     \
    \   else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "        if (n <= 3) return\
    \ 0\n        if (n <= 2) return 1\n        val a = fibfib(n-1)\n        val b\
    \ = fibfib(n-2)\n        val c = fibfib(n-3)\n        (a+b+c)", "        val nums\
    \ = (0 until n).map{x => if (x==n) 0 else x+1}\n        nums.reduceLeft((a,b)\
    \ => a+b)", "        // initialize fibonacci sequence\n        var fib : mutable.Buffer[Long]\
    \ = mutable.Buffer(0)\n        fib = fib.append(1)\n        fib = fib.append(0)\n\
    \        // find Fibbonacci number greater than n\n        var fibbonacci : Long\
    \ = 0\n        var sum : Long = 0\n        while (fibfib(n + 1) > fibbonacci)\
    \ {\n            fibbonacci = fibfib(n + 1)\n            sum = sum + fibbonacci\n\
    \            fib = fib.append(fibbonacci)\n        }\n        return sum", " \
    \       var i : Long = 0\n        var fib : mutable.MutableList[Long] = mutable.MutableList()\n\
    \        while(i<n) {\n            fib = fib :+ fibfib(i+1)\n            i = i\
    \ + 1\n        }\n        fib(0)", "        // your code goes here\n        if\
    \ (n <=1){\n            return 0;\n        }\n        else\n        {\n      \
    \      val fibSeq = scala.collection.mutable.ListBuffer(0)\n            var count\
    \ = 1\n            var temp = 0\n            while (count < n) {\n           \
    \     temp +=count\n                fibSeq ++= temp\n                count +=\
    \ 1\n            }\n            return fibSeq.toList(1)(0)\n        }", "    \
    \    val fibfib : mutable.MutableList[Int] = mutable.MutableList(\n          \
    \  0, \n            0\n        )\n        var i : Int = 0\n        while (i <\
    \ n) {\n            fibfib.update(i + 1, fibfib(i) + fibfib(i + 2))\n        \
    \    i += 1\n        }\n        fibfib(n)", "        val nums = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var fib_n = n\n        while(fib_n > 0){\n            fib_n = fib_n-1\n\
    \            nums += fib_n\n        }\n        nums(0)", "        val fibfibs\
    \ = collection.mutable.ListBuffer[Long]()\n        fibfibs += 0l\n        fibfibs\
    \ += 1l\n        fibfibs += 2l\n        fibfibs += n\n        fibfibs.drop(2).sum",
  "        val fibfib = (0l, n-1l, 0l, n-2l, 1l, n-3l)\n        fibfib._2", "    \
    \    val fibfib : mutable.Set[Long] = mutable.Set()\n        def fibfib1(i : Long,\
    \ j : Long) : Long = {\n            if (i == 0 && j == 0)\n                fibfib.add(i)\n\
    \            else if (j > 0)\n                fibfib1(i-1, j-1)\n            else\n\
    \                fibfib1(i-1, j+1) + fibfib1(i-1, j-2)\n        }\n        fibfib1(n,\
    \ (n-1))", "      var f = ListBuffer.empty[Long]\n      f += 0l\n      f += 0l\n\
    \      f += 0l\n      f.take(n) foreach { n =>\n        var next = 0l\n      \
    \  var i = 0\n        while (i < n) {\n          next += f.last\n          f.remove(f.last)\n\
    \          i += 1\n        }\n        f.append(next + f.last)\n      }\n     \
    \ f.last", "        var fib : mutable.ArrayBuffer[Long] = new mutable.ArrayBuffer[Long]()\n\
    \        fib += 0l\n        fib += 0l\n        fib += 0l\n        fib += 0l\n\
    \        fib += 0l\n        fib += 0l\n        var sum : Long = 0l\n        for(\
    \ i <- 0 until n) {\n            sum = fib(i - 1l) + fib(i - 2l) + fib(i - 3l)\n\
    \            fib += sum\n        }\n        fib.toList.get(0l).asInstanceOf[Long]",
  "        require(n >= 0 && n <= 31);\n        lazy val fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(1l);\n        fib += 0;\n        fib += 1;\n        var\
    \ i : Long = 1;\n        while(i < n) {\n            fib.add(fib(i) + fib(i -\
    \ 1) + fib(i - 2));\n            i += 3;\n        }\n        fib.head", "    \
    \    var result = 1\n        var fib : Long = 0\n        var fibfib : Long = 1\n\
    \        while(fibfib < n){\n            fib = fibfib\n            fibfib = fibfib\
    \ + fibfib\n            result += 1\n        }\n        result", "        if (n\
    \ >= 1) fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        else 0", "        if\
    \ (n <= 1)\n            return n\n        val n2 = n * n\n        val n3 = n2\
    \ * n\n        val n4 = n3 * n2\n        val n5 = n4 * n3\n        val n6 = n5\
    \ * n4\n        val n7 = n6 * n5\n        val n8 = n7 * n6\n        val n9 = n8\
    \ * n7\n        val n10 = n9 * n8\n        val n11 = n10 * n9\n        val n12\
    \ = n11 * n10\n        val n13 = n12 * n11\n        val n14 = n13 * n12\n    \
    \    val n15 = n14 * n13\n        val n16 = n15 * n14\n        val n17 = n16 *\
    \ n15\n        val n18 = n17 * n16\n        val n19 = n18 * n17\n        val n20\
    \ = n19 * n18\n        val n21 = n20 * n19\n        val n22 = n21 * n20\n    \
    \    val n23 = n22 * n21\n        val n24 = n23 * n22\n        val n25 = n24 *\
    \ n23\n        val n26 = n25 * n24\n        val n27 = n26 * n25\n        val n28\
    \ = n27 * n26\n        val n29 = n28 * n27\n        val n30 = n29 * n28\n    \
    \    val n31 = n30 * n29\n        val n32 = n31 * n30\n        val n33 = n32 *\
    \ n31\n        val n34 = n33 * n32\n        val n35 = n34 * n33\n        val n36\
    \ = n35 * n34\n        val n37 = n36 * n35\n        val n38 = n37 * n36\n    \
    \    val n39 = n38 * n37\n        val n40 = n39 * n38\n        val n41 = n40 *\
    \ n39\n        val n42 = n41 * n40\n        val n43 = n42 * n41\n        val n44\
    \ = n43 * n42\n        val n45 = n44 * n43\n        val n46 = n45 * n44\n    \
    \    val n47 = n46 * n45\n        val n48 = n47 * n46\n        val n49 = n48 *\
    \ n47\n        val n50 = n49 * n48\n        val n51 = n50 * n49\n        val n52\
    \ = n51 * n", "        if (n == 0l) return 0l\n        if (n == 1l) return 1l\n\
    \        if (n == 2l) return 1l\n        if (n == 3l) return 1l\n        fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "        if(n<=0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "        val fib : mutable.Set[Long] = mutable.Set(0)\n\
    \        def fibfib(n: Long) : Long = n match {\n            case 0 => 0\n   \
    \         case 1 => fibfib(0)\n            case 2 => fibfib(1)\n            case\
    \ n => fib.last + fibfib(n-1)\n        }\n        fib.add(n)\n        fibfib(n)",
  "        // TODO: write code here\n        val result = mutable.ListBuffer[Long]()\n\
    \        \n        for(i <- 0 until n) {\n            val next = fibfib(i + 1)\n\
    \            result.add(next + 1)\n        }\n        \n        result(0)", " \
    \       if (n == 0) {\n            return 0\n        }\n        if (n == 1) {\n\
    \            return 1\n        }\n        if (n == 2) {\n            return 1\n\
    \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "       \
    \ var a = 2\n        var b = 3\n        var c = 1\n        while(true){\n    \
    \        if(n > 0){\n                a = b\n                b = c\n          \
    \      c = a + b + c\n                n = n - 1\n            }else{\n        \
    \        break\n            }\n        }\n        c", "        def fibfib(n: Long):\
    \ Long = if (n < 2) 1 else fibfib(n-1) + fibfib(n-2)\n\n        val fibfibN =\
    \ fibfib(n).toInt\n\n        fibfibN", "        val fibfibNums = mutable.ListBuffer[Long]()\n\
    \        fibfibNums += 0\n        fibfibNums += 1\n        val nextFibNum = fibfibNums.tail\n\
    \        while (n > nextFibNum.head)\n        {\n            val temp = fibfibNums.head\n\
    \            fibfibNums.clear()\n            fibfibNums += temp + temp + temp\n\
    \            val nextFibNum = fibfibNums.tail\n        }\n        fibfibNums.head"]
stop_tokens:
- "\n    }\n"
