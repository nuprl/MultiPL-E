name: HumanEval_109_move_one_ball
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n   \
  \ // numbers in the list will be randomly ordered. Your task is to determine if\n\
  \    // it is possible to get a list sorted in non-decreasing order by performing\
  \ \n    // the following operation on the given list:\n    // You are allowed to\
  \ perform right shift operation any number of times.\n    // One right shift operation\
  \ means shifting all elements of the list by one\n    // position in the right direction.\
  \ The last element of the list will be moved to\n    // the starting position in\
  \ the list i.e. 0th index. \n    // If it is possible to obtain the sorted list\
  \ by performing the above operation\n    // then return true else return false.\n\
  \    // If the given list is empty then return true.\n    // Note: The given list\
  \ is guaranteed to have unique elements.\n    // For Example:\n    // >>> moveOneBall((List[Long](3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong)))\n    // (true)\n    // Explanation:\
  \ By performin 2 right shift operations, non-decreasing order can\n    // be achieved\
  \ for the given list.\n    // >>> moveOneBall((List[Long](3l.toLong, 5l.toLong,\
  \ 4l.toLong, 1l.toLong, 2l.toLong)))\n    // (false)\n    // Explanation:It is not\
  \ possible to get non-decreasing order for the given\n    // list by performing\
  \ any number of right shift operations.\n    def moveOneBall(arr : List[Long]) :\
  \ Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(moveOneBall((List[Long](3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](3l.toLong,\
  \ 5l.toLong, 10l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](4l.toLong,\
  \ 3l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long](3l.toLong,\
  \ 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long]()))\
  \ == (true));\n    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
