language: scala
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var res = \"\"\n        var i = 0\n        strings.foreach { s =>\n \
    \           res += s\n            i += 1\n        }\n        if (i == 0) \"\"\n\
    \        else res\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.toList\n        var finalString = \"\"\n        for\
    \ (string <- strings) {\n            finalString += string\n        }\n      \
    \  finalString\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6mlpraz7.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.toList\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) return \"\"\n        if (strings.head == \"\") return\
    \ strings.tail.foldLeft(\"\")(_ + _)\n        else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \      strings.reduceLeft((a, b) => a + b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmp35q8pxop.scala:10)\n\
    \tat Problem$.main(tmp35q8pxop.scala:13)\n\tat Problem.main(tmp35q8pxop.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings.head\n            case _ =>\n                strings.foldLeft(strings.head){\n\
    \                    case (acc, next) => acc + next\n                }\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpitlz1d_v.scala:21)\n\tat Problem.main(tmpitlz1d_v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        for (str <- strings)\n            result +=\
    \ str\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.toList.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (x, y) => x + y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) {\n            (\"\") \n        } else {\n     \
    \       (strings.head + concatenate(strings.tail)) \n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length == 0 match {\n            case true => \"\"\n        \
    \    case _ => strings.mkString(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptydblcw1.scala:12:39\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _\
    \ => strings.mkString(\e[31m\"\"\e[0m, \e[31m\"\"\e[0m, \e[31m\"\"\e[0m, \e[31m\"\
    \"\e[0m, \e[31m\"\"\e[0m, \e[31m\"\"\e[0m, \e[31m\"\"\e[0m, \e[31m\"\"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (String, String, String, String, String, String,\
    \ String, String, String)\n\e[31m   |\e[0mRequired: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings :+ strings.last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnur6up9f.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings :+ strings.last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ _ => strings.headOption.getOrElse(\"\") + concatenate(strings.tail)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var res = \"\"\n        strings: List[String].foreach { elem =>\n   \
    \         res += elem\n        }\n        return res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7yx783ti.scala:11:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m].foreach\
    \ { elem =>\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m\
    \   |\e[0m                             end of statement expected but '.' found\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings: _*\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E031] Syntax Error: /tmp/tmppvyqgfj6.scala:10:17 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35m_*\e[0m\n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 * can be used only for\
    \ last argument\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppvyqgfj6.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35m_*\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (strings : List[String])\n\e[31m   |\e[0m        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var output = \"\"\n        for (s <- strings)\n            output ++=\
    \ s\n        output\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        for (s <- strings) {\n            result +=\
    \ s\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0)\n            \"\"\n        else {\n        \
    \    val (first, second) = strings.span(_ == strings(0))\n            first ++\
    \ concatenate(strings.drop(1))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd3rajp_7.scala:14:12\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            first ++ concatenate(strings.drop(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    List[Matchable]\n\e[31m   |\e[0m   \
    \         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        // Concatenate all strings in the list into a single string\n       \
    \ strings.reduceLeft((s, t) => s + t)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmpnurebl08.scala:11)\n\
    \tat Problem$.main(tmpnurebl08.scala:14)\n\tat Problem.main(tmpnurebl08.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) \"\"\n        else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduce(_ + _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.concatenate(tmpc9s6br28.scala:10)\n\tat Problem$.main(tmpc9s6br28.scala:13)\n\
    \tat Problem.main(tmpc9s6br28.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduce((str1,str2) => str1 + str2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.concatenate(tmp4f_xbp8z.scala:10)\n\tat Problem$.main(tmp4f_xbp8z.scala:13)\n\
    \tat Problem.main(tmp4f_xbp8z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        val sb = new StringBuilder()\n        for (s <- strings) sb.append(s)\n\
    \        sb.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) {\n            return \"\"\n        }\n        else\
    \ {\n            strings.head + concatenate(strings.tail)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        if (strings.length == 0) return result\n \
    \       for (s <- strings) {\n            result += s\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length < 1) {\n            return \"\"\n        }\n     \
    \   strings.foldLeft(\"\"){ (s, s) => s + s }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxwwhvvjx.scala:13:34 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m){ (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s }\n\e[31m\e[31m   |\e[0m                         \
    \         ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m\
    \ \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.toList\n        var str = \"\"\n        for(str <-\
    \ strings)\n            str = str ++ \"-\"\n        if (str.length <> strings.length)\n\
    \            str = str.substring(0,str.length-1)\n        return str\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpk8_gom6a.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.toList\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpk8_gom6a.scala:13:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            str = str\
    \ ++ \e[31m\"-\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Reassignment to val str\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk8_gom6a.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (str.length <> strings.length)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value <> is not a member of Int - did you mean Int.<<?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (a, b) => a + b )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.size.toString.toString + strings.mkString(\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7ft2tl7.scala:13)\n\tat Problem.main(tmph7ft2tl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\"){ (result, s) => result + s}\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009553
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduceLeft(_ + _)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmpx9jqmzwi.scala:10)\n\
    \tat Problem$.main(tmpx9jqmzwi.scala:13)\n\tat Problem.main(tmpx9jqmzwi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reverse.foldLeft(\"\") { (s, s) => s + s }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabai_t_j.scala:10:43 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.reverse.foldLeft(\e[31m\"\"\e[0m) { (\e\
    [36ms\e[0m, \e[36ms\e[0m) => s + s }\n\e[31m\e[31m   |\e[0m                  \
    \                         ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e\
    [0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (result, str) => result + str)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"(\"\")\")(_ ++ _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc6499xfc.scala:10:28 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"(\"\")\"\e[0m)(_ ++\
    \ _)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            ')' expected, but string literal found\n1 error found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.appendAll(strings.take(1))\n        strings(0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4cmwjfc_.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.appendAll(strings.take(\e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue appendAll\
    \ is not a member of List[String] - did you mean strings.appendedAll?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var s = \"\"\n        stringList.foreach { x => s += x }\n        return\
    \ s\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhhinvsm.scala:11:8 -------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        stringList.foreach { \e[36mx\e[0m => s += x }\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.get(0) + strings.drop(1).reduceLeft( (x, y) => x + y)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7hef294t.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.get(\e[31m0\e[0m) + strings.drop(\e[31m1\e\
    [0m).reduceLeft( (\e[36mx\e[0m, \e[36my\e[0m) => x + y)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value get is not a member of List[String]\
    \ - did you mean strings.seq?\n1 error found\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) \"\"\n        else strings.head +: concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqlqb_il6.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m strings.head\
    \ +: concatenate(strings.tail)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009553
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (a, b) => a + b )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduce(_ + _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.concatenate(tmpc9s6br28.scala:10)\n\tat Problem$.main(tmpc9s6br28.scala:13)\n\
    \tat Problem.main(tmpc9s6br28.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) \"\"\n        else {\n            strings.head +\
    \ concatenate(strings.tail)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length < 1) return \"\"\n        strings.foldLeft(\"\") {\
    \ (result, string) => result + string }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length == 0 \n            ? \"\" \n            : strings.head\
    \ + concatenate(strings.tail)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7g_99d7g.scala:12:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            : strings.head + concatenate(strings.tail)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                 end of statement expected but '(' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7g_99d7g.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            : strings.head + concatenate(strings.tail)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7g_99d7g.scala:11:12 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        strings.length == \e[31m0\e[0m \n\e[31m11 |\e[0m \
    \           ? \e[31m\"\"\e[0m \n\e[31m\e[31m   |\e[0m                        \
    \  ^\e[0m\n\e[31m   |\e[0m            value ? is not a member of Int.\n\e[31m\
    \   |\e[0m            Note that `?` is treated as an infix operator in Scala 3.\n\
    \e[31m   |\e[0m            If you do not want that, insert a `;` or empty line\
    \ in front\n\e[31m   |\e[0m            or drop any spaces behind the operator.\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var finalString = \"\"\n        for ( s <- strings ) {\n            finalString\
    \ += s\n        }\n        return finalString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        var i = 0\n        var j = 0\n        // Iterate\
    \ and append characters to result\n        while (i < strings.size) {\n      \
    \      result += strings(i)\n            i += 1\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        val result = string(0)\n        for ( i <- strings) {\n            result\
    \ += string(i)\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjny050w9.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = string(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        stringListToString(strings) match {\n            case None => \"\"\n\
    \            case Some(s) => s\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rmcdxfq.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringListToString(strings) \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Not found: stringListToString\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7rmcdxfq.scala:12:28 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m            \e[33mcase\e[0m Some(s) => s\n\e[31m\e[31m   |\e[0m           \
    \                 ^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var s = \"\"\n        strings.foreach { s += _ }\n        return s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009556
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \      strings.foldLeft(\"\")( (a, b) => a + (if (a.isEmpty || b.isEmpty) \"\"\
    \ else \" \" + b) )\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsdau5v53.scala:14)\n\tat Problem.main(tmpsdau5v53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) {\n            \"\"\n        } else {\n        \
    \    strings.head +: strings.tail.mkString\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0q_9bds.scala:13:20\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            strings.head +: strings.tail.mkString\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  Found:    String\n\e[31m   |\e[0m            Required: Char\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        stringList <- strings.foldRight(\"\")((a,b) => a + b)\n        stringList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpotg0jg0p.scala:10:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList <- strings.foldRight(\e[31m\"\"\e\
    [0m)((a,b) => a + b)\n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m\
    \   |\e[0m                   end of statement expected but '<-' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpotg0jg0p.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList <- strings.foldRight(\e[31m\"\"\e\
    [0m)((a,b) => a + b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Not found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpotg0jg0p.scala:11:8 -------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        stringList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Not found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\") { (result, string) => result + string }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.toList\n        var result = \"\"\n        strings.foreach(x\
    \ => result += x)\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfzv84u25.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.toList\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var res = \"\"\n        strings.foreach(x => res += x + \"+\")\n    \
    \    res.substring(0, res.length - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.concatenate(tmpuzhlskxe.scala:12)\n\tat Problem$.main(tmpuzhlskxe.scala:15)\n\
    \tat Problem.main(tmpuzhlskxe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.map(x => x.toString)\n        strings.reduceLeft(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpaip2p7dm.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.map(\e[36mx\e[0m => x.toString)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.filterNot(x => x == \"\")\n        if(strings.length\
    \ == 0) \"\"\n        else strings.head + concatenate(strings.tail)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2tcdggt7.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.filterNot(\e[36mx\e[0m => x\
    \ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        var i = 0\n        while (i < strings.length)\
    \ {\n            result += strings(i)\n            i += 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        stringList.foldLeft(\"\")(_ ++ _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyd99ya5.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.foldLeft(\e[31m\"\"\e[0m)(_ ++ _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\") {\n            (acc, curr) =>\n            acc\
    \ + curr\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings(0) +: strings.tail.map(_.toString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj20gqhsc.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings(\e[31m0\e[0m)\
    \ +: strings.tail.map(_.toString)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\") { (result, value) => result + value }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        for (string <- strings) {\n            result\
    \ += string\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        // Concatenate strings using StringBuilder for performance\n        val\
    \ sBuilder = new StringBuilder\n        sBuilder ++= strings.head\n        strings.tail.foreach(sBuilder\
    \ ++= _)\n        sBuilder.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.concatenate(tmpj9mr147_.scala:12)\n\
    \tat Problem$.main(tmpj9mr147_.scala:17)\n\tat Problem.main(tmpj9mr147_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduceLeft(_ + _)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmpx9jqmzwi.scala:10)\n\
    \tat Problem$.main(tmpx9jqmzwi.scala:13)\n\tat Problem.main(tmpx9jqmzwi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \      val l = strings.length\n      if (l == 0) {\n        \"\"\n      } else\
    \ {\n        var result = \"\"\n        for (i <- 0 until l) result += (string.substring(i,\
    \ i+1) + strings(i)).mkString(\"\")\n        result\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpilh4o4e8.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until l) result\
    \ += (string.substring(i, i+\e[31m1\e[0m) + strings(i)).mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpilh4o4e8.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until l) result\
    \ += (string.substring(i, i+\e[31m1\e[0m) + strings(i)).mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        Not found: string\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        var len = strings.length\n        strings.foreach(x\
    \ => result += x)\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => (\"\").toString\n     \
    \       case 1 => (strings(0)).toString\n            case n => strings.reduceLeft((x,\
    \ y) => x + y)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\") {\n            (acc, x) => acc + x\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, i) => (s ++ i) )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        stringList.foldLeft(\"\") {\n            case (acc, element) => acc +\
    \ (element + \"\")\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2r406igw.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.foldLeft(\e[31m\"\"\e[0m) {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: stringList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        strings.foreach(s => result += s)\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(\n            ( sb => sb ++ \"-\" ) )\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpavjkbm7b.scala:11:17 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            ( \e[36msb\e[0m => sb ++ \e[31m\"-\"\e[0m\
    \ ) )\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \              Wrong number of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if(strings.isEmpty) \"\"\n        else strings.head +: concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzhpyghsk.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m strings.head\
    \ +: concatenate(strings.tail)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduceLeft(_ + _)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmpx9jqmzwi.scala:10)\n\
    \tat Problem$.main(tmpx9jqmzwi.scala:13)\n\tat Problem.main(tmpx9jqmzwi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0)\n            \"\"\n        else {\n        \
    \    strings(0) +: concatenate(strings.tail)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqt4z7nt1.scala:13:19\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            strings(\e[31m0\e\
    [0m) +: concatenate(strings.tail)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (str, cur) => str + cur )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (string, s) => string + s )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        string\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu5y2oltq.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings : List[String]() match {\n            case Nil => \"\"\n    \
    \        case x :: xs => x +: concatenate(xs)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsx686p8p.scala:10:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings : \e[35mList\e[0m[\e[35mString\e[0m]()\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\
    \e[31m   |\e[0m                              end of statement expected but '('\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1660009571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        // First create mutable string buffer for concatenation\n        var\
    \ buffer = new StringBuilder\n        // Append each string to the buffer\n  \
    \      strings.foreach(buffer.append)\n        // Return the buffer\n        buffer.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 1) strings.head else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.concatenate(tmp1v4nyeaj.scala:10)\n\
    \tat Problem$.main(tmp1v4nyeaj.scala:13)\n\tat Problem.main(tmp1v4nyeaj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var res = \"\"\n        strings.foreach(str => res += str)\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var ret = \"\"\n        strings.foreach(x => ret += x)\n        ret\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        if (strings.isEmpty) result\n        else\
    \ {\n            strings.head :: result +: strings.tail.foldLeft(\"\")(_ + _)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpunba23m3.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            strings.head :: result +: strings.tail.foldLeft(\e\
    [31m\"\"\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue :: is not a member of IndexedSeq[Matchable] - did you\
    \ mean IndexedSeq[Matchable].+:?\n1 error found\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        stringList.foldLeft(\"\")(_ + _ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqpli_sd1.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.foldLeft(\e[31m\"\"\e[0m)(_ + _ +\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.toList.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0) \"\"\n        else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\"){ case (acc, s2) => acc + s2 }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        // Write your code in Scala 2.10 style\n        // For Scala 2.11 use:\
    \ string reduce (\"\" + _)\n        strings.reduce(\"\" + _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpem2e4tk0.scala:12:23 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        strings.reduce(\e[31m\"\"\e[0m + _)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \          Wrong number of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft((\"\",\"\")){ case ((pre, cur), (str,idx)) => (pre +\
    \ str, idx) }._1\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr5pg4eot.scala:10:79\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft((\e\
    [31m\"\"\e[0m,\e[31m\"\"\e[0m)){ \e[33mcase\e[0m ((pre, cur), (str,idx)) => (pre\
    \ + str, idx) }._1\n\e[31m\e[31m   |\e[0m                                    \
    \                                           ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                           Found:    (idx : Any)\n\e[31m   |\e\
    [0m                                                   Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0) {\n            return \"\"\n        }\n    \
    \    strings.headOption match {\n            case Some(str) =>\n             \
    \   strings.tail.foldLeft(str) {\n                    case (acc, str2) =>\n  \
    \                      acc + str2 + str\n                }\n            case None\
    \ =>\n                \"\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd7g4pt3c.scala:25)\n\tat Problem.main(tmpd7g4pt3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) \"\"\n        else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        for (string <- strings) {\n            result\
    \ += string\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty)\n            (\"\")\n        else {\n          \
    \  (strings.head + strings.tail.mkString)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0) \"\"\n        else strings.headOption.getOrElse(\"\
    \") + concatenate(strings.tail)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.toSeq.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reverse.mkString(\"\", \"-\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7dcz95kj.scala:10:33\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings.reverse.mkString(\e\
    [31m\"\"\e[0m, \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (String, String)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length == 0 || (strings.head == \"(\" && strings.length == 1)\
    \ ? strings.head : strings.head + concatenate(strings.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_v7hhg0m.scala:10:119 ----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.length == \e[31m0\e[0m || (strings.head\
    \ == \e[31m\"(\"\e[0m && strings.length == \e[31m1\e[0m) ? strings.head : strings.head\
    \ \e[35m+\e[0m \e[35mconcatenate\e[0m(strings.tail)\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                    end of statement expected but '(' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_v7hhg0m.scala:10:106 -----------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        strings.length == \e[31m0\e[0m || (strings.head ==\
    \ \e[31m\"(\"\e[0m && strings.length == \e[31m1\e[0m) ? strings.head : strings.head\
    \ \e[35m+\e[0m \e[35mconcatenate\e[0m(strings.tail)\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_v7hhg0m.scala:10:76 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.length == \e[31m0\e[0m || (strings.head\
    \ == \e[31m\"(\"\e[0m && strings.length == \e[31m1\e[0m) ? strings.head : strings.head\
    \ \e[35m+\e[0m \e[35mconcatenate\e[0m(strings.tail)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value ? is not a member of\
    \ Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, x) =>\n            s + x\n        )\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduceLeft(_ + _)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmpx9jqmzwi.scala:10)\n\
    \tat Problem$.main(tmpx9jqmzwi.scala:13)\n\tat Problem.main(tmpx9jqmzwi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        val sb = new StringBuilder\n        for (string <- strings) sb append\
    \ string\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var string = \"\"\n        strings.foreach(s => string += s)\n      \
    \  string\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var s = \"\"\n        strings.foreach( s +=)\n        s\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph3e2m94n.scala:11:29 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings.foreach( s +=)\n\e[31m\e[31m   |\e[0m\
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \     expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var output = \"\"\n        var idx = 0\n        while (idx < strings.size)\
    \ {\n            output += strings(idx)\n            idx += 1\n        }\n   \
    \     output\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.size() > 0 match {\n            case true => strings.headOption.getOrElse(\"\
    \")\n            case false => \"\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpkojq32cv.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.size() > \e[31m0\e[0m \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e\
    [33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0) {\n            return \"\"\n        }\n\n  \
    \      strings.head + concatenate(strings.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if(strings.isEmpty) \"\"\n        else strings.head +: concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzhpyghsk.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m strings.head\
    \ +: concatenate(strings.tail)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft((\"\", List[String]()))((acc, elem) => {\n         \
    \ (acc + elem, acc :: _)\n        })\n        ._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplidkgvg5.scala:11:15 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m          (acc + elem, acc :: _)\n\e[31m\e[31m   |\e\
    [0m           ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (String, List[String]),\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmplidkgvg5.scala:11:30 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m          (acc + elem, acc :: _)\n\e[31m\e[31m   |\e\
    [0m                              ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => acc :: _$1.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0) \"\" else strings.head.concat(strings.tail.mkString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var buffer = \"\"\n        strings.foreach{x => buffer = buffer + x}\n\
    \        buffer\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.toList.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        var nextIsWhiteSpace = false\n        strings.foreach(\
    \ s => if (nextIsWhiteSpace) result += s else result += s.substring(0,1))\n  \
    \      nextIsWhiteSpace = true\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduceLeft( _ + _ )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmphq0srqh1.scala:10)\n\
    \tat Problem$.main(tmphq0srqh1.scala:13)\n\tat Problem.main(tmphq0srqh1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        // Use mutable list to concatenate strings\n        val result = MutableList[String]()\n\
    \        // Append string to the result list\n        strings.foreach(s => result\
    \ += s)\n        // Return concatenated string\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmbuwwr41.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: MutableList\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\"){ (result, str) =>\n            result + str\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => (\"\")\n            case\
    \ n => strings.toList.mkString(\"\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.toList\n        var current = \"\"\n        var result\
    \ = \"\"\n        strings.foreach {\n            s => {\n                current\
    \ = current + s\n            }\n        }\n        for (c <- current.toCharArray)\
    \ {\n            result = result + c\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmplm8g1mvj.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.toList\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.reverse\n        strings = strings.map( x => x.reverse)\n\
    \        strings.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmplfg0ic3i.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.reverse\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmplfg0ic3i.scala:11:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        strings = strings.map(\
    \ \e[36mx\e[0m => x.reverse)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result: String = \"\"\n        strings.foreach(str => result += str)\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) \"\" else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.reverse\n        var resultString = \"\"\n        strings.reverse.foreach(s\
    \ => {\n            resultString += s\n            resultString += \" \"\n   \
    \     })\n        return resultString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmphat3syyy.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.reverse\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        strings.foreach(result +=)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnr9wqg56.scala:11:33 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings.foreach(result +=)\n\e[31m\e[31m   |\e\
    [0m                                 ^\e[0m\n\e[31m   |\e[0m                  \
    \               expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty)\n            (\"\")\n        else\n            (strings.head\
    \ + concatenate(strings.tail))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        // concatenate list of strings into single string\n        strings.reduceLeft((x,\
    \ n) => x + n) \n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmp1fiua4ge.scala:11)\n\
    \tat Problem$.main(tmp1fiua4ge.scala:14)\n\tat Problem.main(tmp1fiua4ge.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        val s = strings.mkString(\"\", \"/\")\n        if (strings.length ==\
    \ 1) s\n        else s\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcnfc6uqa.scala:10:33\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e\
    [0m = strings.mkString(\e[31m\"\"\e[0m, \e[31m\"/\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Found:    (String, String)\n\e[31m   |\e[0m            \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcnfc6uqa.scala:11:33 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mif\e[0m (strings.length == \e[31m1\e[0m) s\n\e[31m\e[31m\
    \   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m           \
    \                      Found:    (s : Char)\n\e[31m   |\e[0m                 \
    \                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcnfc6uqa.scala:12:13 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33melse\e[0m s\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e\
    [31m   |\e[0m             Found:    (s : Char)\n\e[31m   |\e[0m             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        val sb = scala.collection.mutable.StringBuilder.newBuilder\n        sb.append(strings.headOption.getOrElse(\"\
    \"))\n        for (x <- strings.tail) {\n            sb.append(\" \")\n      \
    \      sb.append(x)\n        }\n        sb.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: tail of empty list\n\tat scala.collection.immutable.Nil$.tail(List.scala:664)\n\
    \tat scala.collection.immutable.Nil$.tail(List.scala:661)\n\tat Problem$.concatenate(tmp_zp6xngo.scala:12)\n\
    \tat Problem$.main(tmp_zp6xngo.scala:19)\n\tat Problem.main(tmp_zp6xngo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        stringList.mkString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp95152is_.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.mkString\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: stringList\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var str = \"\"\n        strings.foreach(s => str += s)\n        str\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\",\")(_+_)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqe2q57zm.scala:13)\n\tat Problem.main(tmpqe2q57zm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        strings.foreach(x => result += x)\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\") {\n            (result, string) =>\n         \
    \       result += string\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9s1zi8n.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                result += string\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduce(_ ++ _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.concatenate(tmpc_e9opzz.scala:10)\n\tat Problem$.main(tmpc_e9opzz.scala:13)\n\
    \tat Problem.main(tmpc_e9opzz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \      strings.reduceLeft((s1, s2) => s1 + s2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmpa_lspgyd.scala:10)\n\
    \tat Problem$.main(tmpa_lspgyd.scala:13)\n\tat Problem.main(tmpa_lspgyd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        stringList.mkString(\"\", stringList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_yauru3.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.mkString(\e[31m\"\"\e[0m, stringList)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")((accum, elem) => accum + elem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings == Nil ? \"\" : strings.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu4vk_t22.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings == Nil ? \e[31m\"\"\e[0m : strings.mkString\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           type mkString is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu4vk_t22.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings == Nil ? \e[31m\"\"\e[0m : strings.mkString\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ ? is not a member of object scala.collection.immutable.Nil\n2 errors found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduce(_ + _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.concatenate(tmpc9s6br28.scala:10)\n\tat Problem$.main(tmpc9s6br28.scala:13)\n\
    \tat Problem.main(tmpc9s6br28.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ s => strings.reduce(_ + _)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.isEmpty) {\n          \"\"\n        } else {\n          strings.head\
    \ + concatenate(strings.tail)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\"){case (acc, s) => acc += s + \"\\\"\"}\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbz0c6top.scala:10:50 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m){\e[33mcase\e\
    [0m (acc, s) => acc += s + \e[31m\"\\\"\"\e[0m}\n\e[31m\e[31m   |\e[0m       \
    \                                       ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      value += is not a member of String - did you mean acc.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        strings.foreach(s => result += s)\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length <= 1) strings.head\n        else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.concatenate(tmpf925abax.scala:10)\n\
    \tat Problem$.main(tmpf925abax.scala:14)\n\tat Problem.main(tmpf925abax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \      strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduceLeft(_+_)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmp45apx96_.scala:10)\n\
    \tat Problem$.main(tmp45apx96_.scala:13)\n\tat Problem.main(tmp45apx96_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings(0) +: strings.tail.map(_.toString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj20gqhsc.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings(\e[31m0\e[0m)\
    \ +: strings.tail.map(_.toString)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        // TODO: Write a tail-recursive solution\n        if (strings.isEmpty)\
    \ \"\"\n        else {\n            strings.head + concatenate(strings.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        // Write your code here!\n        strings.foldLeft(\"\")( (acc, elem)\
    \ => acc + elem )\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => {\n                val res = strings(0)\
    \ + (strings.tail map (x => strings(0) + x)).mkString(\"\") + strings(1)\n   \
    \             res.substring(1)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9sbep5xs.scala:21)\n\tat Problem.main(tmp9sbep5xs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length.fold(\"\")(_ => strings.head) ++ concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjdfadz98.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.length.fold(\e[31m\"\"\e[0m)(_ => strings.head)\
    \ ++ concatenate(strings.tail)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value fold is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft((\"\": String) {\n            (concatenated: String,\
    \ (string: String, index: Int) => concatenated + string + strings.take(index))\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlxbo0a_.scala:11:13 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            (concatenated: \e[35mString\e[0m, (\e[36mstring\e\
    [0m: \e[35mString\e[0m, \e[36mindex\e[0m: \e[35mInt\e[0m) => concatenated + string\
    \ + strings.take(index))\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m             Not found: concatenated\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjlxbo0a_.scala:11:67 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            (concatenated: \e[35mString\e[0m, (\e[36mstring\e\
    [0m: \e[35mString\e[0m, \e[36mindex\e[0m: \e[35mInt\e[0m) => concatenated + string\
    \ + strings.take(index))\n\e[31m\e[31m   |\e[0m                              \
    \                                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                            Not found: concatenated\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduceLeft((a, b) => a + b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmp9rf3d8os.scala:10)\n\
    \tat Problem$.main(tmp9rf3d8os.scala:13)\n\tat Problem.main(tmp9rf3d8os.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        return strings.foldLeft(\"\")( (acc, str) => acc + str )\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_.concat(_))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        return strings.reduceLeft((str1, str2) => str1 + str2)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmp3yjrysjn.scala:10)\n\
    \tat Problem$.main(tmp3yjrysjn.scala:13)\n\tat Problem.main(tmp3yjrysjn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.toList\n        strings.lastOption.getOrElse(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxcpi24q4.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.toList\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\") { (x, s) => x + s }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0) \"\"\n        else strings.reduceLeft((a, b)\
    \ => a + b)\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var buffer = new StringBuilder\n        for (s <- strings) buffer ++=\
    \ s\n        buffer.toString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduce( (x,y) => x + y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.concatenate(tmp1u4rnf10.scala:10)\n\tat Problem$.main(tmp1u4rnf10.scala:13)\n\
    \tat Problem.main(tmp1u4rnf10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        strings = strings.dropRight(1)\n        var\
    \ lastString = \"\"\n        for (s <- strings) {\n            if (lastString.length\
    \ > 0) {\n                result = result + lastString\n            }\n      \
    \      lastString = s\n        }\n        result = result + lastString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwxadosqn.scala:11:16 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings = strings.dropRight(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwxadosqn.scala:19:15 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        result = result + lastString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length != 0\n            ?(strings.foldLeft(\"\")(_ + _))\n \
    \           :(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd6m3trj5.scala:11:12 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            ?(strings.foldLeft(\e[31m\"\"\e[0m)(_ + _))\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ ?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        for (string <- strings) {\n            result\
    \ = result + string\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ _ => strings.headOption.getOrElse(throw new Exception(\"Can't concatenate, list\
    \ is empty\"))\n                .mkString(\"\") + concatenate(strings.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.toList match {\n            case Nil => \"\"\n            case\
    \ tail => strings.headOption.getOrElse(\"\")+concatenate(tail)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.concatenate(tmpj1vp82p0.scala:11)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\
    \tat Problem$.concatenate(tmpj1vp82p0.scala:12)\n\tat Problem$.conca"
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduceLeft((s, a) => s + a)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.concatenate(tmpmu3u7ugc.scala:10)\n\
    \tat Problem$.main(tmpmu3u7ugc.scala:13)\n\tat Problem.main(tmpmu3u7ugc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")((a,b) => a + b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.toList.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0) {\n            return \"\"\n        }\n    \
    \    strings.head + concatenate(strings.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.toList.foldLeft(\"\")( (acc, str) => acc + str )\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        stringIterator.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2j5cr3z.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringIterator.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringIterator\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        for (str <- strings) {\n            result\
    \ = result + str\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length > 0) strings.head + concatenate(strings.tail)\n  \
    \      else \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        for (str <- strings) {\n            result\
    \ += str\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 0) {\n            return \"\"\n        }\n    \
    \    val first = strings(0)\n        strings.tail.zip(string.init).map { case\
    \ (s,t) => s + t}.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sgoueyq.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        strings.tail.zip(string.init).map { \e[33mcase\e\
    [0m (s,t) => s + t}.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result : String = \"\"\n        var i : Int = 0\n        var length\
    \ : Int = 0\n        for (s <- strings) {\n            if (s == \"\") {\n    \
    \            continue\n            }\n            length += 1\n            result\
    \ += s\n            if (length >= i) {\n                break\n            }\n\
    \            i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn7s_eib7.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn7s_eib7.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.reduce((x, y) => x + y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.concatenate(tmp5o22rfy6.scala:10)\n\tat Problem$.main(tmp5o22rfy6.scala:13)\n\
    \tat Problem.main(tmp5o22rfy6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var result = \"\"\n        strings.foreach(x => result += x)\n      \
    \  return result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (x, y) => x + y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, str) => s + \"\\n\" + str)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_r9vu05.scala:14)\n\tat Problem.main(tmpi_r9vu05.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.append(strings)\n        strings(strings.size - 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivlvmqjh.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.append(strings)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member of List[String]\
    \ - did you mean strings.appended?\n1 error found\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if(strings.length == 0) return \"\"\n        val joined = strings.mkString(\"\
    \")\n        joined + strings.dropRight(1).mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1hqtyu0.scala:16)\n\tat Problem.main(tmpc1hqtyu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        if (strings.length == 1) strings.head\n        else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.concatenate(tmpqlqt6as8.scala:11)\n\
    \tat Problem$.main(tmpqlqt6as8.scala:14)\n\tat Problem.main(tmpqlqt6as8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \      var result = \"\"\n      strings.foreach(i => result += i)\n      result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        var ret : String = \"\"\n        var i = 0\n        for (s <- strings)\
    \ ret += s\n        ret\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings = strings.reverse\n        strings = strings.dropRight(1)\n \
    \       strings.reverse\n        strings = strings.mkString\n        strings =\
    \ strings.reverse\n        strings = strings.dropRight(1)\n        strings.reverse\n\
    \        strings = strings.mkString\n        strings = strings.reverse\n     \
    \   strings = strings.dropRight(1)\n        strings.reverse\n        strings =\
    \ strings.mkString\n        strings = strings.reverse\n        strings = strings.dropRight(1)\n\
    \        strings.reverse\n        strings = strings.mkString\n        strings\
    \ = strings.reverse\n        strings = strings.dropRight(1)\n        strings.reverse\n\
    \        strings = strings.mkString\n        strings = strings.reverse\n     \
    \   strings = strings.dropRight(1)\n        strings.reverse\n        strings =\
    \ strings.mkString\n        strings = strings.reverse\n        strings = strings.dropRight(1)\n\
    \        strings.reverse\n        strings = strings.mkString\n        strings\
    \ = strings.reverse\n        strings = strings.dropRight(1)\n        strings.reverse\n\
    \        strings = strings.mkString\n        strings = strings.reverse\n     \
    \   strings = strings.dropRight(1)\n        strings.reverse\n        strings =\
    \ strings.mkString\n        strings = strings.reverse\n        strings = strings.dropRight(1)\n\
    \        strings.reverse\n        strings = strings.mkString\n        strings\
    \ = strings.reverse\n        strings = strings.dropRight(1)\n        strings.reverse\n\
    \        strings = strings.mkString\n        strings = strings.reverse\n     \
    \   strings = strings.dropRight(1)\n        strings.reverse\n        strings =\
    \ strings.mkString\n        strings = strings.reverse\n        strings = strings.dropRight(1)\n\
    \        strings.reverse\n        strings = strings.mkString\n        strings\
    \ = strings.reverse\n        strings = strings.dropRight(1)\n        strings.reverse\n\
    \        strings = strings.mkString\n        strings = strings.reverse\n     \
    \   strings = strings.dropRight(1)\n        strings.reverse\n        strings =\
    \ strings.mkString\n        strings = strings.reverse\n        strings = strings.dropRight(1)\n\
    \        strings.reverse\n        strings = strings.mkString\n        strings\
    \ = strings.reverse\n        strings = strings.dropRight(1)\n        strings.reverse\n\
    \        strings = strings.mkString\n        strings = strings.reverse\n     \
    \   strings = strings.dropRight(1)\n        strings.reverse\n        strings =\
    \ strings.mkString\n        strings = strings.reverse\n        strings = strings.dropRight(1)\n\
    \        strings.reverse\n        strings = strings.mkString\n        strings\
    \ = strings.reverse\n        strings = strings.dropRight(1)\n        strings.reverse\n\
    \        strings = strings.mkString\n        strings = strings.reverse\n     \
    \   strings = strings.dropRight(1)\n        strings.reverse\n        strings =\
    \ strings.mkString\n        strings = strings.reverse\n        strings = strings.dropRight(1)\n\
    \        strings.reverse\n        strings = strings.mkString\n        strings\
    \ = strings.reverse\n        strings = strings.dropRight(1)\n        strings.reverse\n\
    \        strings = strings.mkString\n        strings = strings.reverse\n     \
    \   string\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7qk2qn4f.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.reverse\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7qk2qn4f.scala:11:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        strings = strings.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7qk2qn4f.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strings = strings.mkString\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    String\n\e[31m   |\e[0m                  Required: \e[1m\e[32mList\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp7qk2qn4f.scala:14:16 -----------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        strings = strings.reverse\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to\
    \ val strings\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7qk2qn4f.scala:15:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        strings = strings.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7qk2qn4f.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        strings = strings.mkString\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660009642
