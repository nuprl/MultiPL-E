language: scala
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // return Tuple2(1, 0) if the number\
    \ is even or odd respectively\n        if(num < 0)\n            return (-1, 0)\n\
    \        val evens = num.toString.toInt\n        val odds = num.toString.toInt.filter(_\
    \ % 2 == 0).toList\n        return if(evens == 0) Tuple2(evens, odds) else Tuple2(evens\
    \ - 1, odds)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb3tdxk_4.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = num.toString.toInt.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).toList\n\e[31m\e[31m   |\e[0m              \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ filter is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        def digits(n): List[Long] = {\n  \
    \          val numStr = \"\" + n\n            (0 until numStr.length).map(x =>\
    \ numStr.charAt(x).toLong).toList\n        }\n\n        def isEven(digits: List[Long],\
    \ start: Int): Boolean = start >= 0 && start <= digits.length\n        def isOdd(digits:\
    \ List[Long], start: Int): Boolean = start < digits.length\n\n        def count(digits:\
    \ List[Long], start: Int, end: Int): Int = {\n            val sum = digits.sum\n\
    \            val i = start - 1\n            while (i < end) {\n              \
    \  val digit = digits.apply(i)\n                if (isEven(digits, i)) {\n   \
    \                 sum -= digit\n                    i += 1\n                }\
    \ else if (isOdd(digits, i)) {\n                    sum += 1\n               \
    \     i += 1\n                } else {\n                    i += 1\n         \
    \       }\n            }\n            sum\n        }\n\n        val digitsList\
    \ = digits(num)\n        val ev = count(digitsList, 0, digitsList.size)\n    \
    \    val od = count(digitsList, digitsList.size - 1, digitsList.size)\n      \
    \  (ev, od)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1gngjkqp.scala:11:20 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mdef\e[0m \e[36mdigits\e[0m(\e[36mn\e[0m):\
    \ \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                \
    \    ^\e[0m\n\e[31m   |\e[0m                    ':' expected, but ')' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1gngjkqp.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    sum -= digit\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                 value -= is\
    \ not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp1gngjkqp.scala:26:22 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                    value += is not a member\
    \ of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1gngjkqp.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                    sum +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1gngjkqp.scala:29:22 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp1gngjkqp.scala:31:22 ------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                    value += is not a member\
    \ of Int - did you mean i.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1gngjkqp.scala:34:12\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            sum\n\e[31m\e[31m\
    \   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            Found:    (sum : Long)\n\
    \e[31m   |\e[0m            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val nums = mutable.WrappedArray[Long](num)\n\
    \        var evens = 0\n        var odds = 0\n        var even = Long.MaxValue\n\
    \        var odd = Long.MinValue\n        var i = 2\n        while (i < nums.length)\
    \ {\n            val n = nums(i)\n            if (n % 2 == 0) {\n            \
    \    evens += n\n                if (n > even) {\n                    even = even\n\
    \                }\n            } else {\n                odds += n\n        \
    \        if (n < odd) {\n                    odd = odd\n                }\n  \
    \          }\n            i += 1\n        }\n        (evens, odds)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpez4sykoy.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.WrappedArray[\e\
    [35mLong\e[0m](num)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        num.toString.toArray.map(_.asDigit).filter(x\
    \ => x % 2 == 0).map(x => num.toString.toArray.map(_.asDigit).filter(y => y %\
    \ 2 == 0).length).sum\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpagxbi5k9.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        num.toString.toArray.map(_.asDigit).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => num.toString.toArray.map(_.asDigit).filter(\e\
    [36my\e[0m => y % \e[31m2\e[0m == \e[31m0\e[0m).length).sum\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required: (Long,\
    \ Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numAsLong = num.toInt\n      \
    \  var evenDigit : Long = 0\n        var oddDigit : Long = 0\n        var sum\
    \ : Long = 0\n        for(i <- 0 until numAsLong){\n            val digit = numAsLong\
    \ % 10\n            sum += digit\n            val even = if (digit % 2 == 0) 1lelse\
    \ 0l\n            val odd = if (digit % 2 == 1) 1lelse 0l\n            evenDigit\
    \ += even\n            oddDigit += odd\n        }\n        Tuple2(evenDigit, oddDigit)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7aflt48m.scala:26)\n\tat Problem.main(tmp7aflt48m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digits = scala.math.pow(10, num.digits.length)\n\
    \        val even = num.digits\n            .filter(d => d.head % 2 == 0)\n  \
    \          .toList\n            .map { digit =>\n                val newDigit\
    \ = digit % 10\n                (digit / 10, newDigit)\n            }\n      \
    \  val odd = num.digits\n            .filter(d => d.head % 2 != 0)\n         \
    \   .toList\n            .map { digit =>\n                val newDigit = digit\
    \ % 10\n                (digit / 10, newDigit)\n            }\n        val evenCount:\
    \ Long = even.map(_.length).sum\n        val oddCount: Long = odd.map(_.length).sum\n\
    \        (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwynl1grv.scala:11:44 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = scala.math.pow(\e\
    [31m10\e[0m, num.digits.length)\n\e[31m\e[31m   |\e[0m                       \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         value digits is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpwynl1grv.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = num.digits\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ digits is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwynl1grv.scala:19:22\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = num.digits\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value digits is not a member of Long\n3\
    \ errors found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val counters = mutable.HashMap[Long,\
    \ Long]()\n        for (x<-0 to num) counters(x) = counters.getOrElse(x, 0) +\
    \ 1\n        (counters(num/2), counters(num/2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmz_vdobf.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounters\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmz_vdobf.scala:12:21\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (x<-\e\
    [31m0\e[0m to num) counters(x) = counters.getOrElse(x, \e[31m0\e[0m) + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m     \
    \                Found:    (num : Long)\n\e[31m   |\e[0m                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numStr = new String(num.toByteArray,\
    \ \"ISO-8859-1\")\n        val evenNum = numStr.filter(x => x % 2 == 0).length\n\
    \        val oddNum = numStr.filter(x => x % 2 != 0).length\n        (evenNum,\
    \ oddNum)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9j8ek3l9.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumStr\e[0m = \e[33mnew\e\
    [0m \e[35mString\e[0m(num.toByteArray, \e[31m\"ISO-8859-1\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toByteArray is not a member of Long, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0L\n        var odd = 0L\n\
    \        while (num /= 10) {\n            if (num % 2 == 0) {\n              \
    \  even += 1\n            }\n            else {\n                odd += 1\n  \
    \          }\n        }\n        Tuple2(even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4o3wtfb0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mwhile\e[0m (num /= \e[31m10\e[0m) {\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ /= is not a member of Long - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount = 0\n        val oddCount\
    \ = 0\n        while(num > 0) {\n            if (num % 2 == 0) {\n           \
    \     evenCount += 1\n                num /= 2\n            }\n            else\
    \ {\n                oddCount += 1\n                num /= 2\n            }\n\
    \        }\n        (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb209sjjn.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                evenCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean evenCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpb209sjjn.scala:16:20 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                num /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a\
    \ member of Long - did you mean num.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb209sjjn.scala:19:25 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                oddCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m           \
    \     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not a member of\
    \ Int - did you mean oddCount.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb209sjjn.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                num /= \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value /= is not a member of Long - did you mean num.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // TODO: your implementation here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprttoomun.scala:10:56\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m    \e[33mdef\e[0m \e[36mevenOddCount\e\
    [0m(\e[36mnum\e[0m : \e[35mLong\e[0m) : \e[35mTuple2\e[0m[\e[35mLong\e[0m, \e\
    [35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                                    \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: (Long, Long)\n\e[31m11 |\e[0m        \e[34m//\
    \ TODO: your implementation here\e[0m\n\e[31m12 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        def isOdd(num : Long): Boolean = num\
    \ % 2 != 0\n        def isEven(num : Long): Boolean = num % 2 == 0\n        val\
    \ numList = List(num).filter(isEven).filter(isOdd).toList\n        (numList.size,\
    \ numList.size - numList.filter(isEven).filter(isOdd).size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeye08yrz.scala:17)\n\tat Problem.main(tmpeye08yrz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digitsCount = (num.toString.length\
    \ * 2)\n        val evenDigits = digitsCount.filter(_ % 2 == 0)\n        val oddDigits\
    \ = digitsCount.filter(_ % 2 == 1)\n        (evenDigits, oddDigits)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4cl2o9im.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = digitsCount.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4cl2o9im.scala:13:36\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36moddDigits\e[0m = digitsCount.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        for (d <- num.toString.reverse; d < 10 && d > -1)\n            if (d.toChar\
    \ % 2 == 0)\n                even += 1\n            else\n                odd\
    \ += 1\n\n        return (odd, even)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi32l8bto.scala:13:56 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (d <- num.toString.reverse; d\
    \ < \e[31m10\e[0m && d > -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                '<-' expected, but ')' found\n1 error found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var digitsNum = num.toString\n        for(i <- 0 until digitsNum.length)\n\
    \        {\n            if(digitsNum(i).toChar == '0')\n            {\n      \
    \          evenCount += 1\n            }\n            else\n            {\n  \
    \              oddCount += 1\n            }\n        }\n        return (evenCount,\
    \ oddCount)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2t61b87k.scala:29)\n\tat Problem.main(tmp2t61b87k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numDigits = num.toString().length\n\
    \        if (numDigits % 2 != 0) (num, num) else (num.toLong, num.toLong + (numDigits\
    \ / 2))\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb96i2lol.scala:15)\n\tat Problem.main(tmpb96i2lol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n       var evenCount :Long = 0\n       var\
    \ oddCount :Long = 0\n       for ( num <- num.toString.toInt) \n       {\n   \
    \      if (num % 2 == 0) evenCount += 1\n         else oddCount += 1\n       }\n\
    \       (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyvvlq4ot.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m       \e[33mfor\e[0m ( num <- num.toString.toInt) \n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        def oddEven(i : Long) : Long = {\n\
    \            val remainder = i mod 10\n            if (remainder == 0) 10L else\
    \ (remainder + 10L)\n        }\n        def evenOdd(i : Long) : Long = if (i %\
    \ 2 == 0) i else oddEven(i)\n\n        val even = num.asInstanceOf[Int]\n    \
    \    val odd = num.asInstanceOf[Long].toInt\n        val count = even.filter(_\
    \ => odd.contains(_)).length\n        val totalEven = even.filter(_ => odd.contains(_)).sum\n\
    \        val totalOdd = odd.sum\n\n        (count, totalEven, totalOdd)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvm4y2k1b.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mremainder\e[0m = i mod\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvm4y2k1b.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = even.filter(_ => odd.contains(_)).length\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvm4y2k1b.scala:20:29\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mtotalEven\e[0m = even.filter(_ => odd.contains(_)).sum\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \       value filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpvm4y2k1b.scala:21:27 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mtotalOdd\e[0m = odd.sum\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       value\
    \ sum is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvm4y2k1b.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        (count, totalEven, totalOdd)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    (Nothing, Nothing, Nothing)\n\e[31m   |\e[0m        Required:\
    \ (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // Code goes here\n        val numString\
    \ = num.toString\n        val evenCount = 0\n        val oddCount = 0\n      \
    \  for(i <- 0 until numString.length) {\n            if(i % 2 == 0) {\n      \
    \          evenCount += 1\n            } else {\n                oddCount += 1\n\
    \            }\n        }\n        return Tuple2(evenCount, oddCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq34vejmg.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                evenCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean evenCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpq34vejmg.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                oddCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not\
    \ a member of Int - did you mean oddCount.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var temp = 0\n\n        // Write your code here\n        // var\
    \ num: Long = 123l\n        // var evenCount = 0\n        // var oddCount = 0\n\
    \        // var temp = 0\n        while(num > 0){\n            temp = num % 10\n\
    \            if (temp % 2 == 0){\n                evenCount += 1\n           \
    \ }\n            else{\n                oddCount += 1\n            }\n       \
    \     num = num / 10\n        }\n        \n        (evenCount, oddCount)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxrc3rm53.scala:21:19\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            temp = num % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Found:    Long\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxrc3rm53.scala:28:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            num = num\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount = num filter (_ % 2\
    \ == 0).length\n        val oddCount = num filter (_ % 2 != 0).length\n      \
    \  (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk2rgtz7p.scala:11:28 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = num filter\
    \ (_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter\
    \ is not a member of Long\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpk2rgtz7p.scala:11:36\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e\
    [0m \e[36mevenCount\e[0m = num filter (_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 =>\
    \ _$1 % 2 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk2rgtz7p.scala:12:27\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36moddCount\e[0m = num filter (_ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \              value filter is not a member of Long\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpk2rgtz7p.scala:12:35 -----------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36moddCount\e[0m = num filter (_ % \e\
    [31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                    \
    \               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => _$2 % 2 != 0.\n4 errors found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        while (true) {\n            if (num % 2 == 0) even = even + 1\n     \
    \       if (num % 2 == 1) odd = odd + 1\n            if (num == 0) break\n   \
    \         num = num / 2\n        }\n        Tuple2(odd, even)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzmneeomx.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (num == \e[31m0\e[0m) break\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpzmneeomx.scala:17:16 -----------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            num = num / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val x = num.toString.toInt\n     \
    \   val evenCount = 0\n        val oddCount = 0\n        var i = 0\n        for(i\
    \ <- 0 until x){\n            if(i % 2 == 0){\n                evenCount += 1\n\
    \            }else{\n                oddCount += 1\n            }\n        }\n\
    \        (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf5qap430.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                evenCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean evenCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf5qap430.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                oddCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not\
    \ a member of Int - did you mean oddCount.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toString.length.toLong\
    \ / 2\n        val odd = num.toString.length.toLong / 2 - even\n        (even,\
    \ odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoa0ebv4r.scala:16)\n\tat Problem.main(tmpoa0ebv4r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0)\n            return (null,\
    \ null)\n\n        val evenDigits = num.toString.takeWhile(n => n % 2 == 0).length\n\
    \        val oddDigits = num.toString.takeWhile(n => n % 2 != 0).length\n\n  \
    \      if (evenDigits == 0 && oddDigits == 0)\n            return (null, null)\n\
    \n        if (evenDigits == 0)\n            return (evenDigits, null)\n\n    \
    \    if (oddDigits == 0)\n            return (null, oddDigits)\n\n        (evenDigits,\
    \ oddDigits)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp53wrp0ru.scala:12:20\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mreturn\e[0m\
    \ (\e[31mnull\e[0m, \e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                    Found:    Null\n\e[31m   |\e\
    [0m                    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp53wrp0ru.scala:12:26 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            \e[33mreturn\e[0m (\e[31mnull\e[0m, \e[31mnull\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    Null\n\e[31m   |\e[0m                   \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp53wrp0ru.scala:18:20\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mreturn\e[0m\
    \ (\e[31mnull\e[0m, \e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                    Found:    Null\n\e[31m   |\e\
    [0m                    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp53wrp0ru.scala:18:26 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mreturn\e[0m (\e[31mnull\e[0m, \e[31mnull\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    Null\n\e[31m   |\e[0m                   \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp53wrp0ru.scala:21:32\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mreturn\e[0m\
    \ (evenDigits, \e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                                Found:   \
    \ Null\n\e[31m   |\e[0m                                Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available "
  stdout: ''
  timestamp: 1660009545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val n = num.toInt\n        var even\
    \ = 0\n        var odd = 0\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) {\n                even += 1\n            } else {\n                odd +=\
    \ 1\n            }\n            n /= 10\n        }\n        (even, odd)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphh652u8k.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Int - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // Step 1: Initialize sum and count\
    \ variables\n        var sum = 0\n        var count = 0\n        // Step 2: Use\
    \ while loop to iterate through the entire input number\n        // and count\
    \ the number of even and odd digits\n        while(num > 0) {\n            sum\
    \ += num % 10 // take last digit\n            num /= 10 // remove the last digit\n\
    \            count += 1\n        }\n        // Step 3: Return the tuple with the\
    \ number of even and odd digits\n        (sum, count)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdd8vuq3u.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += num % \e[31m10\e[0m \e[34m// take\
    \ last digit\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdd8vuq3u.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            num /= \e[31m10\e[0m \e[34m// remove the\
    \ last digit\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value /= is not a member of Long - did you mean num.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                even\
    \ += 1\n            } else {\n                odd += 1\n            }\n      \
    \      num /= 10\n        }\n        (even, odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqmg04dv_.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var pow = 0\n\n        for (x <- num.toString.reverse)\n      \
    \  {\n            pow = pow + 1\n            if (x % 2 == 0)\n            {\n\
    \                evenCount = evenCount + pow\n            }\n            else\n\
    \            {\n                oddCount = oddCount + pow\n            }\n   \
    \     }\n        (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgbsnbjyb.scala:31)\n\tat Problem.main(tmpgbsnbjyb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount : Long = 0\n       \
    \ var oddCount : Long = 0\n        if (num < 0)\n            return (evenCount,\
    \ oddCount)\n        var digits = num.toString.reverse.map(_.toInt)\n        val\
    \ oddDigit = digits(0)\n        val evenDigit = digits(1)\n        if (num ==\
    \ 0) {\n            return (evenDigit, oddDigit)\n        } else {\n         \
    \   digits.foreach { digit =>\n                if (digit % 2 == 0) {\n       \
    \             evenCount += 1\n                } else {\n                    oddCount\
    \ += 1\n                }\n            }\n            return (evenCount, oddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat scala.collection.immutable.ArraySeq$ofRef.apply(ArraySeq.scala:331)\n\
    \tat Problem$.evenOddCount(tmp3lc8n08o.scala:17)\n\tat Problem$.main(tmp3lc8n08o.scala:32)\n\
    \tat Problem.main(tmp3lc8n08o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        require(num >= 0, \"num < 0\")\n \
    \       val digits = num.toString.toInt\n        var oddDigits : Long = 1\n  \
    \      var evenDigits : Long = 1\n        for (i <- 0 until digits) {\n      \
    \      if (digits(i) % 2 == 0)\n                evenDigits += 1\n            else\n\
    \                oddDigits += 1\n        }\n        (evenDigits, oddDigits)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpvfn1urda.scala:16:16 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (digits(i) % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val n = num.toInt\n        val odd\
    \ = n / 10\n        val even = n % 10\n        (even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl01zjkkv.scala:17)\n\tat Problem.main(tmpl01zjkkv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even: MutableList[Long] = new\
    \ MutableList(num.toString.toList.filter(_.isDigit))\n        val odd: MutableList[Long]\
    \ = new MutableList(num.toString.toList.filter(!_.isDigit))\n\n        val odd_sum\
    \ = odd.sum\n        val even_sum = even.sum\n        (even_sum, odd_sum)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_uxrli4.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m: \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mMutableList\e[0m(num.toString.toList.filter(_.isDigit))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Not found: type MutableList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_uxrli4.scala:11:42 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m: \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mMutableList\e[0m(num.toString.toList.filter(_.isDigit))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                          Not found: type MutableList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_uxrli4.scala:12:17\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m: \e[35mMutableList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mMutableList\e\
    [0m(num.toString.toList.filter(!_.isDigit))\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: type MutableList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_uxrli4.scala:12:41\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m: \e[35mMutableList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mMutableList\e\
    [0m(num.toString.toList.filter(!_.isDigit))\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                            Not found: type MutableList\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        def isEven(x: Long) = x % 2 == 0\n\
    \        def isOdd(x: Long) = x % 2 != 0\n        val ans = mutable.Map[(Long,\
    \ Long), Long]()\n        (1 to num).foreach { x =>\n            if(isEven(x))\
    \ {\n                ans += ((x, 2))\n            } else if(isOdd(x)) {\n    \
    \            ans += ((x, 1))\n            }\n        }\n        ans.values.toList.sortWith(_\
    \ < _).foldLeft(Tuple2(0l, 0l)) { (x, n) =>\n            if(n % 2 == 0) {\n  \
    \              x -> x._1\n            } else {\n                x._1 -> x._2\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldz688lw.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = mutable.Map[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m), \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldz688lw.scala:14:14\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (\e[31m1\e[0m to num).foreach\
    \ { \e[36mx\e[0m =>\n\e[31m\e[31m   |\e[0m              ^^^\e[0m\n\e[31m   |\e\
    [0m              Found:    (num : Long)\n\e[31m   |\e[0m              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digits = num.toString.reverse\n\
    \        var evenDigitsCount = 0\n        var oddDigitsCount = 0\n        val\
    \ isEven = digits forall { case Character('0') -> true }\n        val isOdd =\
    \ digits forall { case Character('0') -> false }\n\n        if(isEven) {\n   \
    \         for(i <- 1 to digits.length - 1) {\n                if(digits(i).asInstanceOf[String]\
    \ == '0') {\n                    evenDigitsCount = evenDigitsCount + 1\n     \
    \           } else {\n                    oddDigitsCount = oddDigitsCount + 1\n\
    \                }\n            }\n        }\n\n        (evenDigitsCount, oddDigitsCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyam_m89h.scala:14:65 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misEven\e[0m = digits forall\
    \ { \e[33mcase\e[0m Character(\e[31m'0'\e[0m) -> \e[31mtrue\e[0m }\n\e[31m\e[31m\
    \   |\e[0m                                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                            '=>' expected,\
    \ but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyam_m89h.scala:15:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36misOdd\e[0m = digits forall { \e[33mcase\e[0m Character(\e[31m'0'\e[0m)\
    \ -> \e[31mfalse\e[0m }\n\e[31m\e[31m   |\e[0m                               \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                         '=>' expected, but '}' found\n\e[31m\e[31m-- [E127]\
    \ Syntax Error: /tmp/tmpyam_m89h.scala:14:42 ---------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misEven\e[0m = digits forall {\
    \ \e[33mcase\e[0m Character(\e[31m'0'\e[0m) -> \e[31mtrue\e[0m }\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mCharacter cannot be used as an extractor in a pattern because it lacks an unapply\
    \ or unapplySeq method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyam_m89h.scala:14:64\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misEven\e\
    [0m = digits forall { \e[33mcase\e[0m Character(\e[31m'0'\e[0m) -> \e[31mtrue\e\
    [0m }\n\e[31m\e[31m   |\e[0m                                                 \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                           Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E127] Syntax Error: /tmp/tmpyam_m89h.scala:15:41 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misOdd\e[0m = digits forall\
    \ { \e[33mcase\e[0m"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        def getEvens(num : Long) : List[Long]\
    \ = {\n            val result: List[Long] = new List[Long]()\n            var\
    \ count : Long = 1\n            var i = 2\n            while (i < num) {\n   \
    \             if (num % i == 0) {\n                    count += 1\n          \
    \      }\n                i += 1\n            }\n            val even = result\n\
    \            count :: even\n        }\n        def getOdds(num : Long) : List[Long]\
    \ = {\n            val result: List[Long] = new List[Long]()\n            var\
    \ count : Long = 1\n            var i = 3\n            while (i < num) {\n   \
    \             if (num % i == 0) {\n                    count += 1\n          \
    \      }\n                i += 1\n            }\n            val odd = result\n\
    \            count :: odd\n        }\n        val evens = getEvens(num)\n    \
    \    val odds = getOdds(num)\n        (evens.size, odds.size)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E042] Type Error: /tmp/tmpm502a63e.scala:12:41 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mList\e[0m[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             List is abstract; it cannot be instantiated\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E042] Type Error: /tmp/tmpm502a63e.scala:25:41 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mList\e[0m[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             List is abstract; it cannot be instantiated\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        for(i <- 0 to num / 10){\n            if(num % 10 == 0){\n          \
    \      even += i\n            }\n            else{\n                odd += i\n\
    \            }\n        }\n        (even, odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx6k8gjy0.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m to num / \e[31m10\e[0m){\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if(num < 0)\n            (num, num);\n\
    \        val rem = num % 10;\n        var even = 0;\n        var odd = 1;\n  \
    \      for(i <- 1 to rem){\n            if(i % 2 == 0){\n                even++;\n\
    \            }else{\n                odd++;\n            }\n        }\n      \
    \  (even, odd);\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu2p3qgzm.scala:18:22 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                even++;\n\e[31m\e[31m   |\e[0m      \
    \                ^\e[0m\n\e[31m   |\e[0m                      expression expected\
    \ but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpu2p3qgzm.scala:20:21 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                odd++;\n\e[31m\e[31m   |\e[0m                     ^\e\
    [0m\n\e[31m   |\e[0m                     expression expected but \e[31m';'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu2p3qgzm.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to rem){\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (rem : Long)\n\e[31m   |\e[0m      \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val n = (num.toString filter (_ ==\
    \ '0')).size\n        val evenCount = (num.toString filter (_ == '0')).filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.length - (evenCount *\
    \ 2)\n        (n,oddCount)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprdvk0ggv.scala:18)\n\tat Problem.main(tmprdvk0ggv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 1\n        var oddCount\
    \ = 1\n        var n = num\n\n        while (n != 0l) {\n            if ((n /\
    \ 10).asDigit.reduceLeft(_ + _) % 2 == 0) {\n                evenCount += 1\n\
    \            }\n            else {\n                oddCount += 1\n          \
    \  }\n            n -= 1\n        }\n\n        return (evenCount, oddCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6vd9m29n.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m ((n / \e[31m10\e[0m).asDigit.reduceLeft(_\
    \ + _) % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value asDigit is not\
    \ a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val arr: Array[Long] = num.toString.reverse.grouped(2).toArray.tail\n\
    \        (arr(0).toInt, arr(1).toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewelb2vo.scala:11:71\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m: \e[35mArray\e[0m[\e[35mLong\e[0m] = num.toString.reverse.grouped(\e[31m2\e\
    [0m).toArray.tail\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Array[\e[1m\e[31mString\e\
    [0m]\n\e[31m   |\e[0m                               Required: Array[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n       val x = math.abs(num)\n       val evenSum\
    \ = 0\n       val oddSum = 0\n       for (i <- 0 to x/10) {\n         val remainder\
    \ = x / 10 - i\n         if (remainder % 2 == 0) {\n           evenSum += 1\n\
    \         }\n         oddSum += 1\n       }\n       Tuple2(evenSum, oddSum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpytn4aft8.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \e[33mfor\e[0m (i <- \e\
    [31m0\e[0m to x/\e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpytn4aft8.scala:17:19 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m           evenSum += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value += is not a member of Int - did you mean\
    \ evenSum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytn4aft8.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m         oddSum += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value\
    \ += is not a member of Int - did you mean oddSum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toString.filter(_%2==0).length\n\
    \        val odd = num.toString.filter(_%2==1).length\n        Tuple2(even, odd)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3efo467t.scala:17)\n\tat Problem.main(tmp3efo467t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numBits    = num.toBinaryString().length\n\
    \        val evenDigits = num.toString.filter( _ == '0' ).filterNot( _ == '1'\
    \ ).toLong\n        val oddDigits  = num.toString.filter( _ == '1' ).filterNot(\
    \ _ == '0' ).toLong\n        ( evenDigits, oddDigits )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpthhaa7_t.scala:11:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumBits\e[0m    = num.toBinaryString().length\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n1 error found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenDigits : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        val oddDigits : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n\n        val len = math.min(math.abs(num), 1000000000000L)\n\
    \n        val remainder = num % 10L\n\n        val sum: Long = 0\n        while\
    \ (len != 0) {\n            sum += math.pow(remainder, len.toDouble()).toLong\n\
    \            len -= 1\n            remainder = num % 10L\n        }\n\n      \
    \  val evenCount = (sum / 10).asInstanceOf[Int]\n        val oddCount = math.ceil(sum\
    \ / 10)\n\n        return (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokc41qep.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokc41qep.scala:11:53\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpokc41qep.scala:12:24 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokc41qep.scala:12:52\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36moddDigits\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpokc41qep.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += math.pow(remainder, len.toDouble()).toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val counts = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        var evenCount = 0\n        var oddCount = 0\n        for (i\
    \ <- num.toInt until num.toInt + 1000000) {\n            if (i % 2 == 0) {\n \
    \               evenCount += 1\n            } else {\n                oddCount\
    \ += 1\n            }\n            counts += ((i, evenCount), (i, oddCount))\n\
    \        }\n        counts.toList.sortBy(_._1).take(2).map(_._2)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvmxfy1n.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.ListBuffer.empty[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m)]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num == 0) {\n            return\
    \ (0, num)\n        } else if (num % 2 == 0) {\n            return (num, num /\
    \ 2)\n        } else {\n            return (num / 2, num)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8rx6szt.scala:20)\n\tat Problem.main(tmpc8rx6szt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numString = num.toString\n   \
    \     val numAsString = numString.toInt\n        val evenCount = numAsString.filter(_\
    \ % 2 == 0).length\n        val oddCount = numAsString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx_3ojhos.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = numAsString.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value\
    \ filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx_3ojhos.scala:14:35\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36moddCount\e[0m = numAsString.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                       value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val counterEven = new mutable.HashMap[Long,\
    \ Long]()\n        val counterOdd = new mutable.HashMap[Long, Long]()\n      \
    \  val numString = num.toString\n        val len = numString.length\n        for\
    \ ( i <- 0 until len) {\n            val currentChar = numString.charAt(i)\n \
    \           if (currentChar == '-') {\n                counterOdd += (currentChar\
    \ to 0L)\n            } else {\n                counterEven += (currentChar to\
    \ 0L)\n            }\n        }\n        Tuple2(counterEven.length, counterOdd.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk6nl3qo7.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounterEven\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk6nl3qo7.scala:12:29 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mcounterOdd\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val nums = List(num.toString)\n  \
    \      val even = nums.filter(_ % 2 == 0).toList.size\n        val odd = nums.filter(_\
    \ % 2 != 0).toList.size\n        Tuple2(even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgyn5unr7.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = nums.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).toList.size\n\e[31m\e[31m   |\e[0m         \
    \                      ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgyn5unr7.scala:13:32\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = nums.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).toList.size\n\e[31m\e\
    [31m   |\e[0m                              ^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                even\
    \ = even + 1\n            }\n            odd = odd + 1\n            num = num\
    \ / 10\n        }\n        return (even, odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_oob_t_8.scala:18:16 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            num = num / \e[31m10\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        require(num > 0, \"Negative number\
    \ is not allowed.\")\n        var result = new mutable.ListBuffer[(Long, Long)]\n\
    \        var count = 0\n        var odd = 0\n        var even = 0\n        while\
    \ (num != 0L) {\n            if (num % 2 == 0L) {\n                even += 1\n\
    \            }\n            count += 1\n            num /= 10L\n        }\n  \
    \      while (count > 0) {\n            odd = odd * 10\n            even += 1\n\
    \            count -= 1\n        }\n        (odd, even)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpze_8s0mt.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[(\e[35mLong\e[0m, \e[35mLong\e[0m)]\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpze_8s0mt.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            num /= \e[31m10L\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ num.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numString = num.toString\n   \
    \     var evenCount : Long = 0\n        var oddCount : Long = 0\n        var lastDigit\
    \ : Long = 0\n        for (c <- numString) {\n            val digit = c.toLong\n\
    \            if (digit == 0) {\n                lastDigit = 0\n            }\n\
    \            else {\n                val currentDigit = lastDigit + digit\n  \
    \              if (currentDigit % 2 == 0) {\n                    evenCount +=\
    \ 1\n                }\n                else {\n                    oddCount +=\
    \ 1\n                }\n                lastDigit = digit\n            }\n   \
    \     }\n        (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ezqqzl2.scala:35)\n\tat Problem.main(tmp1ezqqzl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val num = Math.abs(num)\n        var\
    \ even = 0\n        var odd = 1\n        var remainder = num\n        while(true){\n\
    \            if(remainder >= 10){\n                if(remainder % 2 != 0){\n \
    \                   odd += 1\n                }\n                remainder /=\
    \ 10\n            }\n            else{\n                if(remainder % 2 != 0){\n\
    \                    even += 1\n                }\n                remainder =\
    \ 0\n            }\n        }\n        (even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7zwdhvkv.scala:11:27 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = Math.abs(num)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35mnum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        while(num > 0) {\n            if (num % 2 == 0){\n            \
    \    evenCount += 1\n            } else {\n                oddCount += 1\n   \
    \         }\n            num /= 10\n        }\n        (evenCount, oddCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvkistp2d.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // TODO: write your code here\n  \
    \      var evenCount = 0\n        var oddCount = 0\n        var numStr = num.toString()\n\
    \        for (i<-0 until numStr.length){\n            if (numStr(i) % 2==0){\n\
    \                evenCount+=1\n            }\n            else{\n            \
    \    oddCount+=1\n            }\n        }\n        return (evenCount, oddCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvwx0hjkr.scala:27)\n\tat Problem.main(tmpvwx0hjkr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount = 0l\n        val oddCount\
    \ = 0l\n        val numString = num.toString\n        var i = 0\n        var j\
    \ = 0\n        while(i <= numString.length) {\n            if(i % 2 == 0) {\n\
    \                evenCount += 1\n                i += 1\n            } else {\n\
    \                oddCount += 1\n                i += 1\n            }\n      \
    \  }\n        return (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl3645p12.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                evenCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value +=\
    \ is not a member of Long - did you mean evenCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpl3645p12.scala:21:25 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                oddCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Long - did you mean oddCount.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        require(num >= 0)\n        val evenCount\
    \ = num.filter(_ % 2 == 0).length\n        val oddCount = num.filter(_ % 2 !=\
    \ 0).length\n        (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzt2ijx13.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = num.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter\
    \ is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzt2ijx13.scala:13:27\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36moddCount\e[0m = num.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \              value filter is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val ans = mutable.Buffer.empty[Long]\n\
    \        for( i <- 0 until num.toString.length ) {\n            if( num.toString.charAt(i).toInt%2\
    \ == 0 ) {\n                ans += num.toString.charAt(i).toLong\n           \
    \ }\n        }\n        (ans.sorted.head, ans.sorted.last)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxderovr.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = mutable.Buffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // Complete the implementation\n \
    \       val result = new collection.mutable.MutableList[Tuple2[Long, Long]]()\n\
    \        val number = math.abs(num)\n        // find the last digit\n        var\
    \ lastDig = number % 10\n        // loop through the number of digits\n      \
    \  while (number >= 10) {\n            number /= 10\n            lastDig += number\n\
    \        }\n        val odds = lastDig until 2 by -1\n        val even = lastDig\
    \ until 2 by 1\n        // add the results to the list\n        odds.foreach {\
    \ odd =>\n            result.add((odd, 1L))\n        }\n        even.foreach {\
    \ even =>\n            result.add((1L, even))\n        }\n        result.sortBy{_.1}.head._2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpy20uj4h7.scala:30:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        result.sortBy{_\e[31m.1\e[0m}.head._2\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \    end of statement expected but number literal found\n\e[31m\e[31m-- [E017]\
    \ Syntax Error: /tmp/tmpy20uj4h7.scala:30:22 ---------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        result.sortBy{_\e[31m.1\e[0m}.head._2\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      Unbound\
    \ placeholder parameter; incorrect use of _\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpy20uj4h7.scala:12:44 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m collection.mutable.MutableList[\e[35mTuple2\e[0m[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            type MutableList is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy20uj4h7.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toString.reverse.grouped(2).filter\
    \ { _ % 2 == 0 }.size\n        val odd = num.toString.reverse.grouped(2).filter\
    \ { _ % 2 == 1 }.size\n        Tuple2(even, odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2e3nme2k.scala:11:62 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = num.toString.reverse.grouped(\e\
    [31m2\e[0m).filter { _ % \e[31m2\e[0m == \e[31m0\e[0m }.size\n\e[31m\e[31m   |\e\
    [0m                                                            ^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2e3nme2k.scala:12:61 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = num.toString.reverse.grouped(\e\
    [31m2\e[0m).filter { _ % \e[31m2\e[0m == \e[31m1\e[0m }.size\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if(num < 0) throw new IllegalArgumentException(\"\
    negative numbers are not allowed.\")\n        val n = new BigDecimal(num).toBigInteger\n\
    \        val evenCount = 0\n        val oddCount = 0\n        for(i <- 1 until\
    \ n.toInt){\n            if(i % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n        }\n        (new BigDecimal(evenCount).toLong, new BigDecimal(oddCount).toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_g0gdhp2.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mn\e\
    [0m = \e[33mnew\e[0m \e[35mBigDecimal\e[0m(num).toBigInteger\n\e[31m\e[31m   |\e\
    [0m                               ^^^\e[0m\n\e[31m   |\e[0m                  \
    \             Found:    (num : Long)\n\e[31m   |\e[0m                        \
    \       Required: java.math.BigDecimal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_g0gdhp2.scala:16:37 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(i % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ evenCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ evenCount.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_g0gdhp2.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m oddCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value += is not a member of Int - did you mean\
    \ oddCount.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_g0gdhp2.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        (\e[33mnew\e[0m \e[35mBigDecimal\e\
    [0m(evenCount).toLong, \e[33mnew\e[0m \e[35mBigDecimal\e[0m(oddCount).toLong)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    (evenCount : Int)\n\e[31m   |\e[0m         \
    \               Required: java.math.BigDecimal\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_g0gdhp2.scala:19:58 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        (\e[33mnew\e[0m \e[35mBigDecimal\e[0m(evenCount).toLong,\
    \ \e[33mnew\e[0m \e[35mBigDecimal\e[0m(oddCount).toLong)\n\e[31m\e[31m   |\e[0m\
    \                                                          ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (oddCount : Int)\n\
    \e[31m   |\e[0m                   "
  stdout: ''
  timestamp: 1660009563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 1l\n        var odd = 1l\n\
    \        val digits = num.toString.reverse.map(_.toInt)\n        digits.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                even += 1\n           \
    \ } else {\n                odd += 1\n            }\n        })\n        (even,\
    \ odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz1wksc76.scala:24)\n\tat Problem.main(tmpz1wksc76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n      if(num < 0) throw new IllegalArgumentException\n\
    \      var evens = 0\n      var odds = 0\n      while(num != 0) {\n          if(num\
    \ & 1 == 0) {\n              evens += 1\n          } else {\n              odds\
    \ += 1\n          }\n          num >>= 1\n      }\n      Tuple2(evens, odds)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8nk1wl8v.scala:15:17 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m          \e[33mif\e[0m(num & \e[31m1\e[0m == \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m             ^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m&\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m\
    \ (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((\e[31mfalse\e\
    [0m : Boolean))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8nk1wl8v.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m          num >>= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ >>= is not a member of Long - did you mean num.>=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val num = num.toInt\n        var even\
    \ = 1\n        var odd = 1\n        var count = 0\n        while(num > 0) {\n\
    \            if(num %% 2 == 0) {\n                even += num\n              \
    \  num = 0\n            }else {\n                odd += num\n                num\
    \ = 0\n            }\n            count += 1\n        }\n        (even, odd)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpywvwjwaj.scala:11:18 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = num.toInt\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35mnum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpywvwjwaj.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                num = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpywvwjwaj.scala:21:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                num\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Reassignment to val num\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num == 0) (0, 0);\n        val\
    \ evenDigits = num / 10 % 2 == 0;\n        val oddDigits = num % 10 == 0;\n  \
    \      if (evenDigits && oddDigits) (0, 1);\n        else (evenDigits ? 1 : 0,\
    \ oddDigits ? 2 : 0);\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp827bjozf.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (evenDigits ? \e[31m1\e[0m :\
    \ \e[31m0\e[0m, oddDigits ? \e[31m2\e[0m : \e[31m0\e[0m);\n\e[31m\e[31m   |\e\
    [0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value ? is not\
    \ a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp827bjozf.scala:15:44\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (evenDigits\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m, oddDigits ? \e[31m2\e[0m : \e[31m0\e[0m);\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value ? is not a member of Boolean\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0) throw new Exception(\"\
    Invalid Input\")\n        val odd = num.toInt\n        var even = 0\n        while\
    \ (even < odd) {\n            even += num.toInt\n            odd -= 1\n      \
    \  }\n        evenOddCountHelper(even, odd, num, even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvuzt_6f4.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            odd -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvuzt_6f4.scala:18:8\
    \ -------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        evenOddCountHelper(even,\
    \ odd, num, even, odd)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Not found: evenOddCountHelper\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numStr = num.toString.toInt\n\
    \        var numEven: Int = 0\n        var numOdd: Int = 0\n        for (i <-\
    \ 0 until numStr) {\n            if (i % 2 == 0) {\n                numEven +=\
    \ 1;\n            } else {\n                numOdd += 1;\n            }\n    \
    \    }\n        return (numEven, numOdd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp7nve49d.scala:24)\n\tat Problem.main(tmpp7nve49d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if(num == 0)\n            (0, 1) //\
    \ 0 even digit, 1 odd digit\n        else\n            val l = scala.math.log10(num).toInt\n\
    \            val num1 = num / Math.pow(10, l)\n            val (even1, odd1) =\
    \ num1.toInt.toString.reverse.chars.dropWhile(c => c.isDigit).takeWhile(c => c\
    \ != '0').size.toLong, num1.toInt.toString.reverse.chars.takeWhile(c => c.isDigit).drop(1).size.toLong\n\
    \            (even1, odd1)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpod6u9zcz.scala:16:128 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m (even1, odd1) = num1.toInt.toString.reverse.chars.dropWhile(\e\
    [36mc\e[0m => c.isDigit).takeWhile(\e[36mc\e[0m => c != \e[31m'0'\e[0m).size.toLong,\
    \ num1.toInt.toString.reverse.chars.takeWhile(c => c.isDigit).drop(\e[31m1\e[0m).size.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                 end of statement expected but\
    \ ',' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpod6u9zcz.scala:16:83\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ (even1, odd1) = num1.toInt.toString.reverse.chars.dropWhile(\e[36mc\e[0m =>\
    \ c.isDigit).takeWhile(\e[36mc\e[0m => c != \e[31m'0'\e[0m).size.toLong, num1.toInt.toString.reverse.chars.takeWhile(c\
    \ => c.isDigit).drop(\e[31m1\e[0m).size.toLong\n\e[31m\e[31m   |\e[0m        \
    \                                                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isDigit is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpod6u9zcz.scala:16:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e\
    [0m (even1, odd1) = num1.toInt.toString.reverse.chars.dropWhile(\e[36mc\e[0m =>\
    \ c.isDigit).takeWhile(\e[36mc\e[0m => c != \e[31m'0'\e[0m).size.toLong, num1.toInt.toString.reverse.chars.takeWhile(c\
    \ => c.isDigit).drop(\e[31m1\e[0m).size.toLong\n\e[31m\e[31m   |\e[0m        \
    \         ^\e[0m\n\e[31m   |\e[0m                 Recursive \e[33mvalue\e[0m \e\
    [35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpod6u9zcz.scala:16:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e\
    [0m (even1, odd1) = num1.toInt.toString.reverse.chars.dropWhile(\e[36mc\e[0m =>\
    \ c.isDigit).takeWhile(\e[36mc\e[0m => c != \e[31m'0'\e[0m).size.toLong, num1.toInt.toString.reve"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0 \n        var odd = 0\
    \ \n        while(num > 0) {\n            val num = num.toInt\n            if(num\
    \ % 2 == 0) even = even + 1\n            else odd = odd + 1 \n            num\
    \ /= 10 \n        }\n        (even, odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsa26zkle.scala:14:22 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = num.toInt\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mnum\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        require(num > 0)\n        require(num\
    \ < Integer.MAX_VALUE)\n\n        var count = 0L\n        var odd = 0L\n     \
    \   var even = 0L\n        while(num != 0) {\n            count = count + 1L\n\
    \            num = num.toInt\n        }\n\n        while(count > 0) {\n      \
    \      count = count - 1\n            odd = odd + count\n        }\n\n       \
    \ while(odd > 0) {\n            odd = odd - 1\n            even = even + 1\n \
    \       }\n\n        val tuple = Tuple2(even, odd)\n        tuple\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpier8sgib.scala:19:16 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            num = num.toInt\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toString.toArray.filter(num\
    \ %2 == 0).length\n        val odd = num.toString.toArray.filter(num %2 == 1).length\n\
    \        (even, odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e3vbtfl.scala:11:47\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36meven\e\
    [0m = num.toString.toArray.filter(num %\e[31m2\e[0m == \e[31m0\e[0m).length\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Boolean\n\
    \e[31m   |\e[0m                                               Required: \e[1m\e\
    [32mChar\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e3vbtfl.scala:12:46\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e\
    [0m = num.toString.toArray.filter(num %\e[31m2\e[0m == \e[31m1\e[0m).length\n\e\
    [31m\e[31m   |\e[0m                                              ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    Boolean\n\
    \e[31m   |\e[0m                                              Required: \e[1m\e\
    [32mChar\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numList = num.toString.reverse.toList.map(_.toInt)\n\
    \        val evenList = numList.filter(_ % 2 == 0)\n        val oddList = numList.filter(_\
    \ % 2 != 0)\n        val evenOddTuple = (evenList.size, oddList.size)\n      \
    \  evenOddTuple\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpel65og4y.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evenOddTuple\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (evenOddTuple\
    \ : (Int, Int))\n\e[31m   |\e[0m        Required: (Long, Long)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0) \n            (-1l, (-1l))\n\
    \        else\n            (evenCount(num), oddCount(num))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiun7rt1p.scala:14:13 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (evenCount(num), oddCount(num))\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found:\
    \ evenCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiun7rt1p.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            (evenCount(num),\
    \ oddCount(num))\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: oddCount\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // We are working with integers so\
    \ convert to longs\n        val twosComplement = num.toLong + 1\n        val evenDigitsCount\
    \ = scala.math.mod((twosComplement - num).toInt, 10)\n        val oddDigitsCount\
    \ = scala.math.mod((twosComplement - num).toInt % 10, 10)\n        // Return a\
    \ tuple\n        (evenDigitsCount, oddDigitsCount)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bsaoxiy.scala:13:41 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsCount\e[0m = scala.math.mod((twosComplement\
    \ - num).toInt, \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ mod is not a member of math\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bsaoxiy.scala:14:40\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36moddDigitsCount\e[0m = scala.math.mod((twosComplement - num).toInt % \e[31m10\e\
    [0m, \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value mod is not a member of\
    \ math\n2 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num == 0) {\n            (1L,\
    \ 1L)\n        } else if (num == 1) {\n            (1L, 1L)\n        } else if\
    \ (num > 0) {\n            val numString = num.toString\n            val evenCounts\
    \ = numString.filter(x => x % 2 == 0).length\n            val oddCounts = numString.filter(x\
    \ => x % 2 == 1).length\n            ((evenCounts, oddCounts))\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx4wjm65l.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        } \e[33melse\e[0m \e\
    [33mif\e[0m (num > \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\
    \e[31m   |\e[0m               Found:    Unit\n\e[31m   |\e[0m               Required:\
    \ (Long, Long)\n\e[31m   |\e[0m               Maybe you are missing an else part\
    \ for the conditional?\n\e[31m16 |\e[0m            \e[33mval\e[0m numString =\
    \ num.toString\n\e[31m17 |\e[0m            \e[33mval\e[0m evenCounts = numString.filter(x\
    \ => x % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m oddCounts = numString.filter(x => x % \e[31m2\e[0m == \e[31m1\e[0m).length\n\
    \e[31m19 |\e[0m            ((evenCounts, oddCounts))\n\e[31m20 |\e[0m        }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n      var evenCount : Int = 0\n      var oddCount\
    \ : Int = 0\n      var lastDigit = 0\n      for(i <- 0 until num.length) {\n \
    \       val digit = num.charAt(i)\n        val value = digit.toInt\n        val\
    \ digitValue = (value & 3).toLong\n        if(digitValue == 0) {\n          lastDigit\
    \ = 0\n        }\n        else if(digitValue == 1) {\n          oddCount += 2\n\
    \        }\n        else {\n          evenCount += 1\n          lastDigit = digitValue\n\
    \        }\n      }\n      (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8lr26g2n.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mfor\e[0m(i <- \e[31m0\e[0m until num.length)\
    \ {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value length is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8lr26g2n.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = num.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                value charAt is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount = 0\n        val oddCount\
    \ = 0\n        while(num > 0) {\n            val newNum = num % 10\n         \
    \   val newNum2 = num / 10\n            if(newNum2 > 0 && newNum % 2 == 0) {\n\
    \                evenCount += 1\n                num = newNum2\n            }\n\
    \            else if(newNum > 0 && newNum % 2 != 0) {\n                oddCount\
    \ += 1\n                num = newNum2\n            }\n        }\n        (evenCount,\
    \ oddCount)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplqojr_b3.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                evenCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean evenCount.!=?\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmplqojr_b3.scala:18:20 -----------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                num = newNum2\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplqojr_b3.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                oddCount\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m             value += is not a member of Int - did you mean oddCount.!=?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmplqojr_b3.scala:22:20 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                num = newNum2\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        num.toString.reverse.takeWhile(_.isDigit).zipWithIndex.map\
    \ { case (index, digit) => (index + 1, digit.length % 2 == 0)}.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy44xnq4r.scala:11:110 -----------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        num.toString.reverse.takeWhile(_.isDigit).zipWithIndex.map\
    \ { \e[33mcase\e[0m (index, digit) => (index + \e[31m1\e[0m, digit.length % \e\
    [31m2\e[0m == \e[31m0\e[0m)}.sorted\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \    value length is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmpy44xnq4r.scala:11:134\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        num.toString.reverse.takeWhile(_.isDigit).zipWithIndex.map\
    \ { \e[33mcase\e[0m (index, digit) => (index + \e[31m1\e[0m, digit.length % \e\
    [31m2\e[0m == \e[31m0\e[0m)}.sorted\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances of type Ordering[B] found for parameter ord of \e[33mmethod\e[0m \e\
    [35msorted\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m.\n\e[31m   |\e[0mI found:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.Tuple2[\e[35mT1\e[0m,\
    \ \e[35mT2\e[0m](scala.math.Ordering.Int, \n\e[31m   |\e[0m      /* ambiguous:\
    \ both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[T2] */\n\e[31m   |\e[0m        summon[Ordering[T2]]\n\e\
    [31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut both \e[33mobject\e[0m\
    \ \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[T2].\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var newNum = num\n        while (true){\n            newNum = Math.abs(newNum\
    \ / 10)\n            if (newNum % 2 == 0){\n                evenCount += 1\n \
    \           } else {\n                oddCount += 1\n            }\n         \
    \   if (newNum < 0)\n                break\n        }\n        return (evenCount,\
    \ oddCount)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpigze9dm5.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0l\n        var odd = 0l\n\
    \        var i = 1l\n        while (i <= num) {\n            if (num % i == 0l)\
    \ {\n                even = even + 1\n            } else {\n                odd\
    \ = odd + 1\n            }\n            i = i + 1l\n        }\n        return\
    \ (even, odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1xvehb6t.scala:25)\n\tat Problem.main(tmp1xvehb6t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        for (i <- 0 until num.toInt) {\n            if (num % i == 0) {\n   \
    \             even += 1\n            } else {\n                odd += 1\n    \
    \        }\n        }\n        (even, odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.evenOddCount$$anonfun$1(tmpwdvj9xze.scala:14)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.evenOddCount(tmpwdvj9xze.scala:19)\n\
    \tat Problem$.main(tmpwdvj9xze.scala:23)\n\tat Problem.main(tmpwdvj9xze.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var digits = num.toString.length\n        var digit = 0\n     \
    \   var remainder = 0\n        while (digits > 0) {\n            digit = num mod\
    \ 10\n            num /= 10\n            if (digit > 0) evenCount += 1\n     \
    \       if (digit < 0) oddCount += 1\n            digits -= 1\n        }\n   \
    \     if (evenCount > oddCount) evenCount else oddCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0fa7z1ln.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            digit = num mod \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a\
    \ member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0fa7z1ln.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0fa7z1ln.scala:23:34\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (evenCount\
    \ > oddCount) evenCount \e[33melse\e[0m oddCount\n\e[31m\e[31m   |\e[0m      \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (evenCount : Int)\n\e[31m   |\e[0m               \
    \                   Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0fa7z1ln.scala:23:49 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (evenCount > oddCount) evenCount \e\
    [33melse\e[0m oddCount\n\e[31m\e[31m   |\e[0m                                \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                 Found:    (oddCount : Int)\n\e[31m   |\e[0m                \
    \                              Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digits = num.toString().drop(1).dropRight(1)\n\
    \        val numOfEvenDigits = digits.count(i => i % 2 == 0)\n        val numOfOddDigits\
    \ = digits.count(i => i % 2 != 0)\n        Tuple2(numOfEvenDigits, numOfOddDigits)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3pt6froo.scala:17)\n\tat Problem.main(tmp3pt6froo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val odd = num.toString.dropRight(1).map(_.toInt)\n\
    \        val even = num.toString.takeRight(1).map(_.toInt)\n        odd.zip(even)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5yu9rfuf.scala:13:15\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        odd.zip(even)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[(Int,\
    \ Int)]\n\e[31m   |\e[0m        Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        def countEven(n : Long) : Int = {\n\
    \            val count = List.fill(10)(0)\n            while(n > 0) {\n      \
    \          count(n) += 1\n                n -= n / 10\n            }\n       \
    \     count.reduceLeft((x, y) => x + y)\n        }\n        def countOdd(n : Long)\
    \ : Int = {\n            val count = List.fill(10)(0)\n            while(n > 0)\
    \ {\n                count(n) += 1\n                n -= n % 10\n            }\n\
    \            count.reduceLeft((x, y) => x + y)\n        }\n        (countEven(num),\
    \ countOdd(num))\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptk48zn4l.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                count(n) += \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    (n : Long)\n\e[31m   |\e[0m                 \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptk48zn4l.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m                n -= n /\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e\
    [0m                value -= is not a member of Long - did you mean n.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptk48zn4l.scala:22:22 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                count(n) += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptk48zn4l.scala:23:18 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                n -= n % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is\
    \ not a member of Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var lastEvenCount = 0\n        var lastOddCount = 0\n        while\
    \ (num != 0) {\n            if (num % 2 == 0) {\n                evenCount = evenCount\
    \ + 1\n                lastEvenCount = lastEvenCount + 1\n            } else {\n\
    \                oddCount = oddCount + 1\n                lastOddCount = lastOddCount\
    \ + 1\n            }\n            num = num / 2\n        }\n        return (lastEvenCount,\
    \ lastOddCount)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpclsrnyd4.scala:23:16 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            num = num / \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digits = num.toString.reverse.grouped(2).map(_.toInt)\n\
    \        (digits.count(x => x % 2 == 0l), digits.count(x => x % 2 != 0l))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj89mlsr.scala:15)\n\tat Problem.main(tmpfj89mlsr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount : Long = 0\n       \
    \ val oddCount : Long = 0\n        val numToStr : List[String] = (num.toString).split('').toList\n\
    \        for (x <- 0 until numToStr.length) {\n            if (numToStr(x) % 2\
    \ == 0) {\n                evenCount += 1\n            } else {\n            \
    \    oddCount += 1\n            }\n        }\n        (evenCount, oddCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp150mmb0r.scala:13:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumToStr\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = (num.toString).split('').toList\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                 empty character literal\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp150mmb0r.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (numToStr(x) % \e[31m2\e[0m\
    \ == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp150mmb0r.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                evenCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value +=\
    \ is not a member of Long - did you mean evenCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp150mmb0r.scala:18:25 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                oddCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Long - did you mean oddCount.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val arr = num.toString.toArray.map\
    \ { x => (x % 2 == 0 ? 1 : 0) }\n        val even = arr.count(_ == 1)\n      \
    \  val odd = arr.count(_ == 0)\n        val result = Tuple2(even, odd)\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1fg4d1at.scala:11:62 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = num.toString.toArray.map\
    \ { \e[36mx\e[0m => (x % \e[31m2\e[0m == \e[31m0\e[0m ? \e[31m1\e[0m : \e[31m0\e\
    [0m) }\n\e[31m\e[31m   |\e[0m                                                \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                       \
    \   value ? is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1fg4d1at.scala:15:15 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \        \e[33mreturn\e[0m result\n\e[31m\e[31m   |\e[0m               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    (result : (Int, Int))\n\e[31m   |\e\
    [0m               Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        var digitCount = 0\n\n        while (digit < digits) {\n            digitCount\
    \ += 1\n            val remainder = num rem 10\n            num /= 10\n\n    \
    \        if (remainder == 0) {\n                even += digitCount\n         \
    \   } else if (remainder > 0) {\n                odd += digitCount\n         \
    \   }\n\n            digit = 0\n        }\n\n        (even, odd)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuvqqo14.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m (digit < digits) {\n\e[31m\e\
    [31m   |\e[0m               ^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ digit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptuvqqo14.scala:17:32\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mremainder\e[0m = num rem \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \ value rem is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptuvqqo14.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            num /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value /= is not a member of Long - did you mean num.!=?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptuvqqo14.scala:26:12 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            digit = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m            Not found: digit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evens  = num.filter( n => n %\
    \ 2 == 0)\n        val odds   = num.filter( n => n % 2 != 0)\n        val pair\
    \    = evens zip odds\n        val even    = pair.getOrElse(-1l, 0l)\n       \
    \ val odd     = pair.getOrElse(0l, 1l)\n        (even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoyn8n6q7.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m  = num.filter(\
    \ \e[36mn\e[0m => n % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value\
    \ filter is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoyn8n6q7.scala:12:25\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m   = num.filter( \e[36mn\e[0m => n % \e[31m2\e[0m != \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  value filter is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numStr = num.toString.toInt\n\
    \        val even = 0\n        val odd = 1\n        var remainder = numStr\n \
    \       var digit = 0\n        var remainderDigit = 0\n\n        var tempRemainder\
    \ = 0\n        while(remainder > 0) {\n            tempRemainder = remainder\n\
    \            digit = tempRemainder % 10\n            remainderDigit = tempRemainder\
    \ / 10\n            if (remainderDigit % 2 == 0) {\n                if (remainderDigit\
    \ > 2) {\n                    even += 1\n                }\n            }\n  \
    \          else {\n                if (remainderDigit < 5) {\n               \
    \     odd += 1\n                }\n            }\n            remainder = reminder\
    \ / 10\n        }\n        return (odd, even)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi23g956c.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    even += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ += is not a member of Int - did you mean even.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpi23g956c.scala:30:24 ------------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m                    odd += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpi23g956c.scala:33:24 ------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m            remainder = reminder / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \  Not found: reminder\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        def countEven(num: Long, cnt: Long):\
    \ Long = { if (num % 2 == 0) cnt else cnt + 1 }\n        def countOdd(num: Long,\
    \ cnt: Long): Long = { if (num % 2 == 1) cnt else cnt + 1 }\n        val evenCnt\
    \ = countEven(num.toInt, 0L)\n        val oddCnt = countOdd(num.toInt, 0L)\n \
    \       (evenCnt, oddCnt)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj9tl1jy.scala:18)\n\tat Problem.main(tmpcj9tl1jy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var oddNum = num % 10\n        var\
    \ evenNum = num / 10\n        while (num != 0) {\n            num -= 10\n    \
    \        oddNum += num % 10\n            evenNum += num / 10\n        }\n    \
    \    evenNum match {\n            case x if x < 10 => (x, x)\n            case\
    \ x if x < 100 => (x, x + 1)\n            case x if x < 1000 => (evenNum, evenNum\
    \ + 1)\n            case x if x < 10000 => (evenNum + 2, evenNum + 2)\n      \
    \      case x if x < 100000 => (evenNum + 4, evenNum + 4)\n            case x\
    \ if x < 1000000 => (evenNum + 6, evenNum + 6)\n            case x if x < 10000000\
    \ => (evenNum + 8, evenNum + 8)\n            case x if x < 100000000 => (evenNum\
    \ + 10, evenNum + 10)\n            case x if x < 1000000000 => (evenNum + 12,\
    \ evenNum + 12)\n            case x if x < 10000000000 => (evenNum + 14, evenNum\
    \ + 14)\n            case x if x < 100000000000 => (evenNum + 16, evenNum + 16)\n\
    \            case x if x < 1000000000000 => (evenNum + 18, evenNum + 18)\n   \
    \         case x if x < 10000000000000 => (evenNum + 20, evenNum + 20)\n     \
    \       case x if x < 100000000000000 => (evenNum + 22, evenNum + 22)\n      \
    \      case x if x < 1000000000000000 => (evenNum + 24, evenNum + 24)\n      \
    \      case x if x < 10000000000000000 => (evenNum + 26, evenNum + 26)\n     \
    \       case x if x < 100000000000000000 => (evenNum + 28, evenNum + 28)\n   \
    \         case x if x < 1000000000000000000 => (evenNum + 30, evenNum + 30)\n\
    \            case x if x < 10000000000000000000 => (evenNum + 32, evenNum + 32)\n\
    \            case x if x < 100000000000000000000 => (evenNum + 34, evenNum + 34)\n\
    \            case x if x < 1000000000000000000000 => (evenNum + 36, evenNum +\
    \ 36)\n            case x if x < 10000000000000000000000 => (evenNum + 38, evenNum\
    \ + 38)\n            case x if x < 100000000000000000000000 => (evenNum + 40,\
    \ evenNum + 40)\n            case x if x < 1000000000000000000000000 => (evenNum\
    \ + 42, evenNum + 42)\n            case x if x < 10000000000000000000000000 =>\
    \ (evenNum + 44, evenNum + 44)\n            case x if x < 100000000000000000000000000\
    \ => (evenNum + 46, evenNum + 46)\n            case x if x < 1000000000000000000000000000\
    \ => (evenNum + 48, evenNum + 48)\n            case x if x < 10000000000000000000000000000\
    \ => (\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfq3k6tm8.scala:46:60 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x < \e[31m10000000000000000000000000000\e\
    [0m => (\n\e[31m\e[31m   |\e[0m                                              \
    \              ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfq3k6tm8.scala:60:0 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfq3k6tm8.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            num -= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean num.!=?\n\e[31m\e[31m-- Error: /tmp/tmpfq3k6tm8.scala:28:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \     \e[33mcase\e[0m x \e[33mif\e[0m x < \e[31m10000000000\e[0m => (evenNum +\
    \ \e[31m14\e[0m, evenNum + \e[31m14\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpfq3k6tm8.scala:29:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x < \e[31m100000000000\e\
    [0m => (evenNum + \e[31m16\e[0m, evenNum + \e[31m16\e[0m)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            number too large\n\e[31m\e[31m-- Error: /tmp/tmpfq3k6tm8.scala:30:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m       \
    \     \e[33mcase\e[0m x \e[33mif\e[0m x < \e[31m1000000000000\e[0m => (evenNum\
    \ + \e[31m18\e[0m, evenNum + \e[31m18\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpfq3k6tm8.scala:31:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        var result = 0\n        for(i <- 0 until num.toString.length) {\n   \
    \         val num = num.toString.charAt(i).toInt\n            if(num % 2 == 0)\
    \ {\n                even += 1\n            } else {\n                odd += 1\n\
    \            }\n        }\n        result = Tuple2(even, odd)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9a493ewx.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = num.toString.charAt(i).toInt\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mnum\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9a493ewx.scala:22:23 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result = Tuple2(even, odd)\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    (Int, Int)\n\e[31m   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9a493ewx.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Int)\n\e[31m   |\e[0m        Required:\
    \ (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount : Long = 0\n       \
    \ var oddCount : Long = 0\n        var sumEven = 0\n        var sumOdd = 0\n \
    \       var sumEvenDigit = 0\n        var sumOddDigit = 0\n        var lastOddDigit\
    \ = 0\n        var lastEvenDigit = 0\n        var digit = 0\n\n        while (num\
    \ > 0) {\n            digit += 1\n            lastOddDigit = num / 10l\n     \
    \       num = lastOddDigit\n            sumOdd += lastOddDigit % 2\n         \
    \   sumEvenDigit += lastOddDigit / 2\n        }\n\n        while (evenCount <\
    \ digit) {\n            sumEven += lastEvenDigit\n            evenCount += 1\n\
    \            lastEvenDigit = num / 10l\n            num = lastEvenDigit\n    \
    \        sumEvenDigit += lastEvenDigit / 2\n        }\n\n        while (oddCount\
    \ < digit - evenCount) {\n            sumOdd += lastOddDigit\n            oddCount\
    \ += 1\n            lastOddDigit = num / 10l\n            num = lastOddDigit\n\
    \            sumOddDigit += lastOddDigit % 2\n        }\n        val even_num\
    \ = sumEven\n        val odd_num = sumOdd\n        val evenodd_num = evenCount\
    \ + oddCount\n        val even_sum = sumEvenDigit * digit\n        val odd_sum\
    \ = sumOddDigit * digit\n        val even_odd_num = evenodd_num * digit\n    \
    \    return (even_num, odd_num);\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0jtqzb2.scala:23:27\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            lastOddDigit = num\
    \ / \e[31m10l\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp_0jtqzb2.scala:24:16 -----------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            num = lastOddDigit\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0jtqzb2.scala:32:28\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m            lastEvenDigit = num\
    \ / \e[31m10l\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp_0jtqzb2.scala:33:16 -----------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            num = lastEvenDigit\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0jtqzb2.scala:40:27\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            lastOddDigit = num\
    \ / \e[31m10l\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp_0jtqzb2.scala:41:16 -----------------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m            num = last"
  stdout: ''
  timestamp: 1660009579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0 \n        var odd = 0\
    \ \n        for (x <- num.toString.reverse) {\n            val xNum = x.toInt\n\
    \            if (xNum % 2 == 0) {\n                even += xNum\n            }\
    \ else {\n                odd += xNum\n            }\n        }\n        (even,\
    \ odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsuurzc7e.scala:24)\n\tat Problem.main(tmpsuurzc7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenDigit = num.toString.filter(x\
    \ => (x % 2 == 0)).length\n        val oddDigit = num.toString.filter(x => (x\
    \ % 2 == 1)).length\n        Tuple2(evenDigit, oddDigit)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpixg1uete.scala:17)\n\tat Problem.main(tmpixg1uete.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount : Long = 0\n       \
    \ var oddCount : Long = 0\n        var digit = 0\n\n        for (digit <- 0 until\
    \ num.toString().length) {\n            if (num % 10 == 0)\n                evenCount\
    \ += 1\n            else\n                oddCount += 1\n        }\n\n       \
    \ return Tuple2(evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp576sz2vc.scala:26)\n\tat Problem.main(tmp576sz2vc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val count = new mutable.HashMap[Int,\
    \ Int]()\n        // find all odd digits and record their count\n        while(num\
    \ > 0){\n            val rem = num % 10\n            count.putIfAbsent(rem, count.get(rem)\
    \ + 1)\n            num = num / 10\n        }\n        val oddCount = count.filter(_._2\
    \ < 2).size\n        (count.size, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl45znds1.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpl45znds1.scala:16:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            num = num\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount = 0\n        val oddCount\
    \ = 0\n\n        var temp = 0\n        for(i <- num.toString.toInt) {\n      \
    \      if((i%2) == 0) {\n                evenCount += 1\n            } else {\n\
    \                oddCount += 1\n            }\n\n            if(evenCount > 0\
    \ && oddCount > 0) {\n                break\n            }\n        }\n\n    \
    \    if(evenCount == 0 && oddCount == 0) {\n            return (1, 0)\n      \
    \  }\n        return (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi19ork55.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- num.toString.toInt) {\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        for(i <- 1 to num.toInt) {\n            val numStr = i.toString\n\
    \            val numArray = numStr.split(\"-\")\n            val even = numArray(0)\n\
    \            val odd = numArray(1)\n            evenCount += even.toLong\n   \
    \         oddCount += odd.toLong\n        }\n        return ((evenCount, oddCount))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.evenOddCount$$anonfun$1(tmpbyrdwtw4.scala:17)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.evenOddCount(tmpbyrdwtw4.scala:20)\n\
    \tat Problem$.main(tmpbyrdwtw4.scala:24)\n\tat Problem.main(tmpbyrdwtw4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        var num = num.toInt;\n        var remainder = num % 10;\n        num\
    \ /= 10;\n\n        while (num > 0) {\n            var newRemainder = num % 10;\n\
    \            if (newRemainder == 0) {\n                even = even.toLong + even;\n\
    \                odd += 1;\n            }\n            if (newRemainder != 0)\
    \ {\n                even = even.toLong + even;\n                odd += 1;\n \
    \           }\n            num /= 10;\n        }\n        return (even.toLong,\
    \ odd.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdov8d4qe.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mnum\e[0m = num.toInt;\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvariable\e[0m \e[35mnum\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdov8d4qe.scala:20:23 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                even = even.toLong + even;\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                      Found:    Long\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdov8d4qe.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                even = even.toLong\
    \ + even;\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m        \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val n = num.toInt\n        val evenCount\
    \ = n.filter(_ % 2 == 0).length\n        val oddCount = n.filter(_ % 2 == 1).length\n\
    \        (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk69q8n01.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = n.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk69q8n01.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36moddCount\e[0m = n.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \            value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var numAsString: String = num.toString\n        for (i <- 0 until\
    \ numAsString.length()) {\n            val intVal = numAsString.charAt(i).toInt\n\
    \            if (intVal % 2 == 0) {\n                evenCount += 1\n        \
    \    }\n            else {\n                oddCount += 1\n            }\n   \
    \     }\n        return (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwsntullk.scala:27)\n\tat Problem.main(tmpwsntullk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num filter { _ % 2 == 0\
    \ }\n        val odd = num filter { _ % 2 == 1 }\n        (even.length, odd.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmyu2cpzo.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = num filter {\
    \ _ % \e[31m2\e[0m == \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                  \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value filter is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmyu2cpzo.scala:12:22\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = num filter { _ % \e[31m2\e[0m == \e[31m1\e[0m }\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ filter is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val counters = mutable.Map.empty[Long,\
    \ Long]\n        var countEven = 1\n        var countOdd = 1\n        while (num\
    \ >= 0) {\n            val digit = num % 10\n            val counter = counters.get(digit)\n\
    \            if (counter == null) {\n                counters(digit) = countEven\n\
    \                countEven *= 2\n            } else {\n                counters(digit)\
    \ *= 2\n                countEven *= 2\n                countOdd *= 2\n      \
    \      }\n            num /= 10\n        }\n        (counters(0), counters(1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pj7lsxd.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounters\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2pj7lsxd.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num == 0) (1, 0)\n        if (num\
    \ == 1) (0, 1)\n        if (num < 0) (-num, -num)\n        val list = num.toString.toList.sorted\n\
    \        val evens = list.count { x => x % 2 == 0 }\n        val odds = list.count\
    \ { x => x % 2 != 0 }\n        ((evens, odds))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch02801g.scala:21)\n\tat Problem.main(tmpch02801g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num > 0) {\n            var even\
    \ = 0L;\n            var odd = 0L;\n            while(num > 0) {\n           \
    \     val remainder = num % 10L;\n                if (remainder == 0L) {\n   \
    \                 even += 1L;\n                } else {\n                    odd\
    \ += 1L;\n                }\n                num /= 10L;\n            }\n    \
    \        Tuple2(even, odd);\n        } else {\n            throw new IllegalArgumentException(\"\
    Invalid input\");\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxp0kgx67.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                num /= \e[31m10L\e[0m;\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value /=\
    \ is not a member of Long - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        while (even <= num) {\n            if (num % 2 == 0) {\n            \
    \    even += 1\n            } else {\n                odd += 1\n            }\n\
    \            num /= 10\n        }\n        (odd, even)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps10377dt.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toString.grouped(2).filter(_.head==0)\n\
    \        val odd = num.toString.grouped(2).filter(_.head==1)\n        (even.size,\
    \ odd.size)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jm517pg.scala:16)\n\tat Problem.main(tmp1jm517pg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if(num < 0) throw new IllegalArgumentException(\"\
    Input must be a positive number\");\n        if(num == 0) return (-1L, 1L)\n \
    \       val digits = num.toString.reverse.foldLeft((0L, 0L)){\n            case\
    \ ((evenDigit, oddDigit), digit) => (digit % 2 == 0 ? digit.toLong : digit.toLong\
    \ * 10 + digit.toLong, digit % 2 == 0 ? evenDigit : oddDigit)\n        }\n   \
    \     (digits._1, digits._2)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jwz8ruj.scala:14:102 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m ((evenDigit, oddDigit), digit)\
    \ => (digit % \e[31m2\e[0m == \e[31m0\e[0m ? digit.toLong : digit.toLong * \e\
    [31m10\e[0m + digit.toLong, digit % \e[31m2\e[0m == \e[31m0\e[0m ? evenDigit :\
    \ oddDigit)\n\e[31m\e[31m   |\e[0m                                           \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                       Not found: type +\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4jwz8ruj.scala:14:67\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m ((evenDigit, oddDigit), digit) => (digit % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ digit.toLong : digit.toLong * \e[31m10\e[0m + digit.toLong, digit % \e[31m2\e\
    [0m == \e[31m0\e[0m ? evenDigit : oddDigit)\n\e[31m\e[31m   |\e[0m           \
    \                                                      ^^^\e[0m\n\e[31m   |\e\
    [0m                                          value ? is not a member of Int\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jwz8ruj.scala:14:147 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m ((evenDigit, oddDigit), digit)\
    \ => (digit % \e[31m2\e[0m == \e[31m0\e[0m ? digit.toLong : digit.toLong * \e\
    [31m10\e[0m + digit.toLong, digit % \e[31m2\e[0m == \e[31m0\e[0m ? evenDigit :\
    \ oddDigit)\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                              Not found: type oddDigit\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4jwz8ruj.scala:14:133 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m ((evenDigit, oddDigit), digit)\
    \ => (digit % \e[31m2\e[0m == \e[31m0\e[0m ? digit.toLong : digit.toLong * \e\
    [31m10\e[0m "
  stdout: ''
  timestamp: 1660009588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // Convert num to string\n       \
    \ val str = num.toString\n        // Initialize a mutable collection\n       \
    \ var evenCount = 0\n        var oddCount = 0\n        // Iterate through string\
    \ and increment the counter for even and odd digits\n        str.foreach(i =>\
    \ {\n            if (i % 2 == 0) {\n                evenCount += 1\n         \
    \   } else {\n                oddCount += 1\n            }\n        })\n     \
    \   // Return the tuple of the digits\n        (evenCount, oddCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn1yydeh0.scala:29)\n\tat Problem.main(tmpn1yydeh0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        for(i <- 0 to num){\n            if(i%2 != 0){\n              \
    \  evenCount += 1\n            }\n            else{\n                oddCount\
    \ += 1\n            }\n        }\n        return (evenCount, oddCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzlmcjbp2.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m to num){\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (num : Long)\n\e[31m   |\e[0m      \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val (even, odd) = num.asInstanceOf[Long](2).divmod(10l).unzip\n\
    \        (even, odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp1yg3_63p.scala:11:42 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m (even, odd) = num.asInstanceOf[\e\
    [35mLong\e[0m](\e[31m2\e[0m).divmod(\e[31m10l\e[0m).unzip\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           \e[33mmethod\e[0m \e[35masInstanceOf\e[0m in \e[33mclass\e[0m \e[35mAny\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp1yg3_63p.scala:11:13 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m (even, odd) = num.asInstanceOf[\e[35mLong\e[0m](\e\
    [31m2\e[0m).divmod(\e[31m10l\e[0m).unzip\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0m             Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1yg3_63p.scala:11:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ (even, odd) = num.asInstanceOf[\e[35mLong\e[0m](\e[31m2\e[0m).divmod(\e[31m10l\e\
    [0m).unzip\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m  \
    \                 Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount :Long = num.toString.split(\"\
    \\\\D\").length\n        val oddCount = num.toString.split(\"\\\\D\").filter(_\
    \ % 2 != 0).length\n        (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz098_5bh.scala:12:58 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36moddCount\e[0m = num.toString.split(\e\
    [31m\"\\\\D\"\e[0m).filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^\e[0m\n\
    \e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even: MutableSet[Long] = mutable.Set[Long]()\n\
    \        val odd: MutableSet[Long] = mutable.Set[Long]()\n        val longDigits\
    \ = num.toString.toLong\n        for (digit <- 0 until longDigits) {\n       \
    \     if (digit % 2 == 0) {\n                even.add(digit)\n            } else\
    \ {\n                odd.add(digit)\n            }\n        }\n        (even.size,\
    \ odd.size)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp58ctyz2g.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m: \e[35mMutableSet\e\
    [0m[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ type MutableSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp58ctyz2g.scala:11:37\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m: \e[35mMutableSet\e[0m[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp58ctyz2g.scala:12:17 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m: \e[35mMutableSet\e\
    [0m[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: type\
    \ MutableSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp58ctyz2g.scala:12:36\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m: \e[35mMutableSet\e[0m[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58ctyz2g.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (digit <- \e[31m0\e[0m until longDigits)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (longDigits : Long)\n\e[31m\
    \   |\e[0m                              Req"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val n = num.toString.toInt\n     \
    \   val m = Math.pow(n, 2)\n        val even = 0\n        val odd = 0\n      \
    \  val count = 0\n        for (i <- 0 to n) {\n            val t = num % m\n \
    \           num = num / m\n            if (t % 2 == 0) {\n                even\
    \ += 1\n            }\n            else {\n                odd += 1\n        \
    \    }\n        }\n        val evenOdd = (even.toLong, odd.toLong)\n        return\
    \ (evenOdd, count)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp43ytzgfk.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            num = num / m\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Double\n\e[31m   |\e[0m                  Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp43ytzgfk.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                even += \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value += is not a member of Int - did you mean even.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp43ytzgfk.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                odd += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp43ytzgfk.scala:27:16 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mreturn\e[0m (evenOdd, count)\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    (evenOdd :\
    \ (Long, Long))\n\e[31m   |\e[0m                Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        num.asInstanceOf[Long].toString.toList.filter(_\
    \ % 2 == 0).length.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphv0ncpny.scala:11:73\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        num.asInstanceOf[\e[35mLong\e\
    [0m].toString.toList.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length.toLong\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required: (Long,\
    \ Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = math.ceil(num / 2.0)\n\
    \        val odd = num - even\n\n        (even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphpaf4ko7.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (even, odd)\n\e[31m\e\
    [31m   |\e[0m         ^^^^\e[0m\n\e[31m   |\e[0m         Found:    (even : Double)\n\
    \e[31m   |\e[0m         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphpaf4ko7.scala:14:15 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        (even, odd)\n\e[31m\e[31m   |\e[0m               ^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    (odd : Double)\n\e[31m   |\e[0m \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // Write your code here\n        var\
    \ countEven = 0\n        var countOdd = 0\n        var numString = \"\" + num\n\
    \n        // first countOdd\n        for ( i <- 0 until numString.length ) {\n\
    \            if (numString(i).isDigit) {\n                val n = new BigInteger(numString(i).toInt)\n\
    \                if (n.toString.size == 1)\n                    countOdd += 1\n\
    \                else if (n.toString.size == 2) {\n                    countEven\
    \ += 1 // we only count odd if we have two digits, not more\n                }\n\
    \            }\n        }\n        // Now countEven\n        for ( i <- 0 until\
    \ numString.length ) {\n            if (!(numString(i).isDigit))\n           \
    \     countEven += 0 // we only count even if we have a digit\n        }\n   \
    \     // (countEven, countOdd)\n        (countEven, countOdd)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjytbb3sz.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mn\e[0m = \e[33mnew\e\
    [0m \e[35mBigInteger\e[0m(numString(i).toInt)\n\e[31m\e[31m   |\e[0m         \
    \                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \   Not found: type BigInteger\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0L) throw new ArithmeticException(\"\
    Negative number is detected.\")\n        var even = 0L\n        var odd = 0L\n\
    \        var rem = num\n        while(true){\n            val mod = rem % 10L\n\
    \            even += (mod == 0L) ? 1L : 0L\n            odd += (mod == 2L) ? 1L\
    \ : 0L\n            rem /= 10L\n            if (rem < 1L) break\n        }\n \
    \       (even, odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnfatou_6.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            even += (mod == \e[31m0L\e[0m) ? \e[31m1L\e\
    [0m : \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of Long - did you mean Long.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnfatou_6.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            even += (mod == \e[31m0L\e[0m) ? \e[31m1L\e\
    [0m : \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value ? is not a member of Boolean\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnfatou_6.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            odd += (mod == \e[31m2L\e[0m) ? \e[31m1L\e\
    [0m : \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of Long - did you mean Long.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnfatou_6.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            odd += (mod == \e[31m2L\e[0m) ? \e[31m1L\e\
    [0m : \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value ? is not a member of Boolean\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnfatou_6.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (rem < \e[31m1L\e[0m) break\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even_count : Long = 0\n      \
    \  var odd_count : Long = 0\n        var next_num : Long = num\n        var next_num2\
    \ : Long = num\n\n        while (next_num != 0){\n            val current_num_as_int\
    \ = next_num.toInt\n            if(current_num_as_int == 0){\n               \
    \ next_num2 = 0\n            }\n            else{\n                next_num2 =\
    \ next_num % 10\n            }\n\n            even_count += next_num2\n      \
    \      odd_count += 10 - next_num2\n\n            next_num = next_num / 10\n\n\
    \        }\n\n        return (even_count, odd_count)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphwq9yhe0.scala:35)\n\tat Problem.main(tmphwq9yhe0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // count the number of digits\n  \
    \      var cntEven = 0\n        var cntOdd = 0\n        var digits = 0\n     \
    \   var evenDigit = 0\n        var oddDigit = 0\n\n        // Loop through all\
    \ the digits\n        while (digits < num.toString.length) {\n            var\
    \ index = num.toString.length - digits - 1\n            var digit = num.toString.charAt(index)\n\
    \n            digits = digits+1\n\n            if (digit == \"0\") {\n       \
    \         if (digits % 2 == 0) {\n                    evenDigit = evenDigit +\
    \ 1\n                } else {\n                    oddDigit = oddDigit + 1\n \
    \               }\n                digits = digits-1\n            } else {\n \
    \               if (digit == \"1\") {\n                    if (digits % 2 == 0)\
    \ {\n                        evenDigit = evenDigit + 1\n                    }\
    \ else {\n                        oddDigit = oddDigit + 1\n                  \
    \  }\n                    digits = digits-1\n                } else {\n      \
    \              if (digits % 2 == 0) {\n                        evenDigit = evenDigit\
    \ + 1\n                    } else {\n                        oddDigit = oddDigit\
    \ + 1\n                    }\n                    digits = digits-1\n        \
    \        }\n            }\n\n        }\n\n        // return the counts\n     \
    \   (cntEven, cntOdd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppejupujo.scala:25:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (digit == \e[31m\"0\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmppejupujo.scala:33:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e[0m (digit == \e[31m\"1\"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenOddDigitsCount = 0\n     \
    \   var evenDigitsCount = 0\n        var oddDigitsCount = 0\n        for (d <-\
    \ num.toCharArray.toSeq){\n            if(d == '0'){\n                evenDigitsCount\
    \ += 1\n            } else {\n                oddDigitsCount += 1\n          \
    \  }\n        }\n        (evenDigitsCount, oddDigitsCount)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpef1ad8ds.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (d <- num.toCharArray.toSeq){\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 value toCharArray is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numAsList = num.toString.toList\n\
    \        val evenDigit = numAsList.filter { n => n % 2 == 0 }.size\n        val\
    \ oddDigit = numAsList.filter { n => n % 2 != 0 }.size\n        val tuple = (evenDigit,\
    \ oddDigit)\n        return tuple\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp27jrgqrc.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mreturn\e[0m tuple\n\
    \e[31m\e[31m   |\e[0m               ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \ Found:    (tuple : (Int, Int))\n\e[31m   |\e[0m               Required: (Long,\
    \ Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenDigit : Long = 0\n       \
    \ var oddDigit : Long = 0\n        var i : Long = 0\n        var temp : Long =\
    \ 0\n        while (num > 0) {\n            temp = num % 10\n            num =\
    \ num / 10\n            evenDigit = evenDigit + temp\n            if (temp % 2\
    \ == 0) {\n                oddDigit = oddDigit + 1\n            }\n          \
    \  i = i + 1\n        }\n        return (evenDigit, oddDigit)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1bqixzf6.scala:17:16 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            num = num / \e[31m10\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var sumEven = 0\n        var sumOdd\
    \ = 1\n        var i = 0\n        while (i < num.length) {\n            if (num(i)\
    \ % 2 == 0) {\n                sumEven += num(i)\n                i++\n      \
    \      } else {\n                sumOdd += num(i)\n                i++\n     \
    \       }\n        }\n        (sumEven, sumOdd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx9tc47_e.scala:17:19 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                i++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx9tc47_e.scala:20:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                i++\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpx9tc47_e.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (i < num.length) {\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \      value length is not a member of Long\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpx9tc47_e.scala:15:16 -----------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m (num(i) % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                \e\
    [33mparameter\e[0m \e[35mnum\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9tc47_e.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                sumEven += num(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpx9tc47_e.scala:16:27 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                sumEven += num(i)\n\e[31m\e[31m   |\e[0m             \
    \              ^^^\e[0m\n\e[31m   |\e[0m                           \e[33mparameter\e\
    [0m \e[35mnum\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tm"
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0) throw new ArithmeticException(\"\
    Input should be greater than 0\")\n\n        var evenCount : Long = 0\n      \
    \  var oddCount : Long = 0\n\n        var remainder = 0\n\n        var i = num\n\
    \        var quotient = 0\n\n        while(i != 0) {\n            quotient = i\
    \ % 10\n            i = i / 10\n\n            if (quotient == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n\n            if (quotient > 0) remainder\
    \ = 10\n            else remainder = 0\n        }\n\n        ((evenCount, oddCount),\
    \ (remainder, num))\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmjlmv6q.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            quotient = i % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                       Found:    Long\n\e[31m   |\e[0m              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmjlmv6q.scala:32:9\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m        ((evenCount, oddCount),\
    \ (remainder, num))\n\e[31m\e[31m   |\e[0m         ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m         Found:    (Long, Long)\n\e[31m   |\e[0m         Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmjlmv6q.scala:32:32\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        ((evenCount, oddCount),\
    \ (remainder, num))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    \e[1m\e[31m(\e[0m\e\
    [1m\e[31mInt\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m\n\e[31m\
    \   |\e[0m                                Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val oddDigitsCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val evenDigitsCount = num.toString.filter(_ % 2 !=\
    \ 0).length\n        (evenDigitsCount, oddDigitsCount)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprhm1f6b3.scala:16)\n\tat Problem.main(tmprhm1f6b3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n      val m = num.toDouble\n      val odd\
    \ = num.toString replaceAll(\"\\\\D\", \"\")\n      val even = odd.replaceAll(\"\
    0+$\", \"\")\n      (odd.length, even.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihgt0t35.scala:17)\n\tat Problem.main(tmpihgt0t35.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val oddSum = 0l\n        val evenSum\
    \ = 0l\n        val n = new mutable.Queue[Long]\n        while(num > 0l) {\n \
    \           n.enqueue(num)\n            num /= 10l\n        }\n        for (i\
    \ <- 0 to n.size - 1) {\n            if(n.dequeue() % 2 == 0) {\n            \
    \    evenSum += n.dequeue()\n            } else {\n                oddSum += n.dequeue()\n\
    \            }\n        }\n        (evenSum, oddSum)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ncmczmh.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mnew\e[0m\
    \ mutable.Queue[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ncmczmh.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            num /= \e[31m10l\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ncmczmh.scala:20:24\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                evenSum +=\
    \ n.dequeue()\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m             value += is not a member of Long - did you mean evenSum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ncmczmh.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                oddSum += n.dequeue()\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value +=\
    \ is not a member of Long - did you mean oddSum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val intDigits = num.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val evenIntDigits = intDigits.filter(num => num % 2 == 0)\n        val\
    \ oddIntDigits = intDigits.filter(num => num % 2 != 0)\n        val evenLen =\
    \ evenIntDigits.size\n        val oddLen = oddIntDigits.size\n        (evenLen,\
    \ oddLen)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi5wjwzap.scala:19)\n\tat Problem.main(tmpi5wjwzap.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // Counting odd digits in one go\n\
    \        val evenOddDigitsCount = ((num.toString.length - num.toString.filter(_\
    \ % 2 == 0).toList.length) /\n                                     (num.toString.toString.length))\n\
    \        val oddDigitsCount = ((num.toString.length - num.toString.filter(_ %\
    \ 2 == 1).toList.length) /\n                              (num.toString.toString.length))\n\
    \        val oddDigitsTuple = (oddDigitsCount, evenOddDigitsCount)\n        oddDigitsTuple\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5os_unmh.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        oddDigitsTuple\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (oddDigitsTuple\
    \ : (Int, Int))\n\e[31m   |\e[0m        Required: (Long, Long)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val odd = num.toString.reverse.charAt(0).toInt\n\
    \        val even = num.toString.reverse.charAt(1).toInt\n        (odd, even)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.evenOddCount(tmp3l0zfnbv.scala:12)\n\tat Problem$.main(tmp3l0zfnbv.scala:16)\n\
    \tat Problem.main(tmp3l0zfnbv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var odd = 0\n        var even = 0\n\
    \        while(num > 0) {\n            val temp = num / 10\n            if(temp\
    \ % 2 == 0)\n                even += temp\n            else\n                odd\
    \ += temp\n            num = temp\n        }\n        return (even, odd)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgde2brl9.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                even += temp\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgde2brl9.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                odd += temp\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgde2brl9.scala:19:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            num = temp\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount : Long = 0\n       \
    \ var oddCount : Long = 0\n        while(num > 0) {\n            if(num % 2 ==\
    \ 0) {\n                evenCount += 1\n            }\n            else {\n  \
    \              oddCount += 1\n            }\n            num /= 10\n        }\n\
    \        return (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzx2x3ox7.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val rem = num % 10\n        val evenCount\
    \ = if(rem == 0) 1 else 2\n        val oddCount = if(rem == 10) 1 else 0\n   \
    \     (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2xv82eu.scala:17)\n\tat Problem.main(tmpi2xv82eu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var sumEven = 0\n        var sumOdd\
    \ = 0\n\n        val digits = num.toString.reverse.map(_.toInt)\n        val evenCount\
    \ = digits.count(_ % 2 == 0)\n        val oddCount = digits.count(_ % 2 != 0)\n\
    \n        (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpln5_a5fz.scala:22)\n\tat Problem.main(tmpln5_a5fz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenNums = num.toString.dropWhile(_\
    \ <= 0).dropWhile(_ > 0)\n        val oddNums = num.toString.dropWhile(_ < 0).dropWhile(_\
    \ >= 0)\n        (evenNums.size.toLong, oddNums.size.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplr9g_rr7.scala:16)\n\tat Problem.main(tmplr9g_rr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even_count = num.toString.filter(_.isDigit).length\n\
    \        val odd_count = num.toString.filterNot(_.isDigit).length\n        val\
    \ tuple = even_count zip odd_count\n        tuple\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqx33xhr0.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mtuple\e[0m = even_count\
    \ zip odd_count\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    value zip is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount = 0\n        val oddCount\
    \ = 0\n        // Count the number of even and odd digits\n        while(num >\
    \ 0) {\n            if(num % 2 != 0)\n                oddCount += 1\n        \
    \    num /= 10\n        }\n        // Return the tuple with the count of even\
    \ and odd digits\n        (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5oszs2i.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                oddCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ += is not a member of Int - did you mean oddCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpo5oszs2i.scala:17:16 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean num.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        var numString = \"\" + num\n\n        for (i <- 0 until numString.length)\
    \ {\n            if (numString.charAt(i) == '0') {\n                even += 1\n\
    \            } else {\n                odd += 1\n            }\n        }\n  \
    \      return (even, odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfgotkgh7.scala:26)\n\tat Problem.main(tmpfgotkgh7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val sumEven = num.toString.split(\"\
    -\".toCharArray).map(_.length).sum\n        val sumOdd = num.toString.reverse.split('-'.toCharArray).map(_.length).sum\n\
    \        (sumEven, sumOdd)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmeusdaph.scala:12:52 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msumOdd\e[0m = num.toString.reverse.split(\e\
    [31m'-'\e[0m.toCharArray).map(_.length).sum\n\e[31m\e[31m   |\e[0m           \
    \                                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             value toCharArray is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digits = num.toString.toList\n\
    \        val evenCount = digits.count( d => d % 2 == 0)\n        val oddCount\
    \ = digits.count( d => d % 2 == 1)\n        Tuple2(evenCount, oddCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39y_owf8.scala:18)\n\tat Problem.main(tmp39y_owf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = num\n        var odd =\
    \ num\n\n        while (num >= 10) {\n            even = (even / 10).toLong\n\
    \            odd = (odd / 10).toLong\n        }\n        (even, odd)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgq4x9_z1.scala:21)\n\tat Problem.main(tmpgq4x9_z1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 1 // even digit\n\
    \        var oddCount = 1 // odd digit\n        for(i <- 0 until num) {\n    \
    \        val d = num / i.toInt\n            if(d % 2 == 0) {\n               \
    \ evenCount += 1\n            } else {\n                oddCount += 1\n      \
    \      }\n        }\n        (evenCount, oddCount)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_ca96ae.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until num) {\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (num : Long)\n\e[31m   |\e[0m\
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var result = 0l\n        for(i <-\
    \ 0 until num) {\n            val d = num % 10\n            if(d != 0) {\n   \
    \             result = result + 1\n            }\n            num = num / 10\n\
    \        }\n        val even = result\n        val odd = num - even\n        Tuple2(even,\
    \ odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfpoq_3df.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until num) {\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (num : Long)\n\e[31m   |\e[0m\
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpfpoq_3df.scala:17:16 -----------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            num = num / \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digits = num.toString.reverse.map(_.toInt)\n\
    \        // find the number of even digits:\n        var evenDigit : Int = 0\n\
    \        digits = digits.filter(_.toDouble % 2 == 0)\n        val even = digits.foldLeft(List[Double](0.0))\
    \ { (acc, digit) =>\n            if (digit.toDouble % 2 == 0) acc.head + digit.toDouble\n\
    \            else acc.head + 0.1 }\n        evenDigit = even.sum\n\n        //\
    \ find the number of odd digits:\n        var oddDigit : Int = 0\n        digits\
    \ = digits.filter(_.toDouble % 2 != 0)\n        val odd = digits.foldLeft(List[Double](0.0))\
    \ { (acc, digit) =>\n            if (digit.toDouble % 2 != 0) acc.head + digit.toDouble\n\
    \            else acc.head + 0.1 }\n        oddDigit = odd.sum\n\n        (evenDigit,\
    \ oddDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0xmt6z4k.scala:14:15 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits = digits.filter(_.toDouble % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val digits\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0xmt6z4k.scala:16:41 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (digit.toDouble % \e[31m2\e\
    [0m == \e[31m0\e[0m) acc.head + digit.toDouble\n\e[31m\e[31m   |\e[0m        \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    Double\n\e[31m   |\e[0m\
    \                                         Required: \e[1m\e[32mList\e[0m\e[1m\e\
    [32m[\e[0mDouble\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0xmt6z4k.scala:17:17 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33melse\e[0m acc.head + \e[31m0.1\e[0m }\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    Double\n\e[31m   |\e[0m                 Required: \e[1m\e[32mList\e\
    [0m\e[1m\e[32m[\e[0mDouble\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0xmt6z4k.scala:18:20 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        evenDigit = even.sum\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found: \
    \   Double\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp0xmt6z4k.scala:22:15 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        digits = digits.filter(_.toDouble % \e[31m2\e\
    [0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   "
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if(num <= 0) return (0L, 0L)\n   \
    \     val oddCount : mutable.Set[Long] = mutable.Set[Long]()\n        val evenCount\
    \ : mutable.Set[Long] = mutable.Set[Long]()\n        while(num != 0) {\n     \
    \       if(num % 2 == 0) evenCount += num\n            else oddCount += num\n\
    \            val temp = num / 10\n            num = temp\n        }\n        (evenCount.size,\
    \ oddCount.size)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedxaznbh.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36moddCount\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedxaznbh.scala:12:43\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36moddCount\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedxaznbh.scala:13:24\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevenCount\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpedxaznbh.scala:13:44 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpedxaznbh.scala:18:16 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            num = temp\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val num\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var countEven = 0\n        var countOdd\
    \ = 0\n        while (num > 0) {\n            val last = num % 10\n          \
    \  if (last % 2 == 0) {\n                countEven += 1\n            } else {\n\
    \                countOdd += 1\n            }\n            num = num / 10\n  \
    \      }\n        return (countEven, countOdd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpznq43781.scala:20:16 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            num = num / \e[31m10\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toInt/2 % 2 == 0\n\
    \        val odd = num.toInt/2 > 0\n        val count = (even, odd)\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp78_y43vn.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        count\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (count : (Boolean,\
    \ Boolean))\n\e[31m   |\e[0m        Required: (Long, Long)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var count = 0\n        var even =\
    \ 0\n        var odd = 0\n\n        var str : String = num.toString\n        var\
    \ strList = str.split(\",\")\n        strList.foreach(str => {\n            if\
    \ (str.toString.indexOf(\"e\") > -1) {\n                even += str.toString.length\n\
    \            } else {\n                odd += str.toString.length\n          \
    \  }\n        })\n        return ((even.toLong, odd.toLong))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjn_zi4qc.scala:28)\n\tat Problem.main(tmpjn_zi4qc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var numDigits : Long = 0\n       \
    \ var evenDigit : Long = 0\n        var oddDigit : Long = 0\n        var totalDigits\
    \ : Long = 0\n        var tempNum : Long = 0\n\n        // First get the number\
    \ of digits in num\n        numDigits = num.toString.length\n\n        // Now\
    \ for each digit check evenDigit or oddDigit accordingly\n        while (tempNum\
    \ < numDigits) {\n            // We take num mod 10\n            tempNum = num\
    \ % 10\n\n            // If the digit is even, increment evenDigit by 1\n    \
    \        if (tempNum == 0) {\n                evenDigit += 1\n            } else\
    \ {\n                // else increment oddDigit by 1\n                oddDigit\
    \ += 1\n            }\n\n            // Now increment num\n            num /=\
    \ 10\n        }\n\n        // Then create tuple and return\n        return (evenDigit,\
    \ oddDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5g1svavb.scala:34:16 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toString.filter(_.isDigit).filter(x\
    \ => x.toInt % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).filter(x\
    \ => x.toInt % 2 != 0).length\n        (even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 1\n        var odd = 1\n\
    \        val num = num.toString\n        var index = 1\n        var length = num.length\n\
    \        while (index < length) {\n            if (num(index) == '0') {\n    \
    \            even = even + 1\n            } else {\n                odd = odd\
    \ + 1\n            }\n            index += 1\n        }\n        return even.toLong\
    \ -> (odd + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpivz47igm.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = num.toString\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35mnum\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val counts = mutable.HashMap[Int,\
    \ Long]()\n        val even = mutable.ArrayBuffer(0)\n        val odd = mutable.ArrayBuffer(0)\n\
    \        // Convert the number to string\n        val str = num.toString\n   \
    \     // Iterate over each char one by one\n        for (i <- 0 until str.length)\
    \ {\n            val c = str.charAt(i)\n            // If its an even digit, add\
    \ it to the even arraybuffer\n            if(c == '2') {\n                even\
    \ += i\n            }\n            // If its an odd digit, add it to the odd arraybuffer\n\
    \            if(c == '1') {\n                odd += i\n            }\n       \
    \     counts.getOrElse(c, 0)\n            counts += (c -> counts.getOrElse(c,\
    \ 0)+1)\n        }\n        // Count number of even digits and return it\n   \
    \     (even.toArray.length, odd.toArray.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjcdu30lb.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjcdu30lb.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjcdu30lb.scala:13:18 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val n = num % 2l\n        val m =\
    \ num / 2l\n        if (n == 0) (1, 1l) else (2, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qw_ynfw.scala:16)\n\tat Problem.main(tmp1qw_ynfw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n       def toDigit(a: Long, b: Long) : Long\
    \ = {\n         if (a < 0 || b < 0)\n           throw new IllegalArgumentException(\"\
    Invalid arguments\")\n         else if (a == 0)\n           b\n         else if\
    \ (b == 0)\n           a\n         else\n           a / 10 + b / 10\n       }\n\
    \n       val nums = num.toString.toLongArray.toIndexedSeq\n       val even = 0\n\
    \       val odd = 0\n       nums.foreach(num => {\n         val n = toDigit(num,\
    \ num)\n         if (num % 2 == 0)\n           even += n\n         else\n    \
    \       odd += n\n       })\n       Tuple2(odd, even)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa2ecmbnp.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m       \e[33mval\e[0m \e[36mnums\e[0m = num.toString.toLongArray.toIndexedSeq\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  value toLongArray is not a member of String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0) (-1l, -1l) // impossible\
    \ since we are using Long type\n        else {\n            var count = 0;\n \
    \           var odd = 1L;\n            var even = 1L;\n            var n = num;\n\
    \            while (n > 0) {\n                n = n/10L\n                if (n\
    \ % 2 == 0) {\n                    even = even * 10 + n % 10;\n              \
    \      count = count + 1\n                } else {\n                    odd =\
    \ odd * 10 + n % 10;\n                    count = count + 1\n                }\n\
    \            }\n            (odd, even)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsv3h_qb.scala:31)\n\tat Problem.main(tmpdsv3h_qb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        var i = num.toInt\n        var a = i.toString()\n        while (i-- !=\
    \ 0) {\n            if (i % 2 == 0) {\n                even += 1\n           \
    \ } else {\n                odd += 1\n            }\n        }\n        return\
    \ (even, odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj85kqhiu.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m (i-- != \e[31m0\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         ')' expected, but integer literal found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpj85kqhiu.scala:15:16 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mwhile\e[0m (i-- != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \               ^^^\e[0m\n\e[31m   |\e[0m               value -- is not a member\
    \ of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0) throw new IllegalArgumentException(\"\
    num must be positive\")\n        val count = mutable.ArrayBuffer.empty[Long]\n\
    \        var odd = 0\n        var even = 0\n        num match {\n            case\
    \ -1 | 0 => throw new IllegalArgumentException(\"num must be a positive Long\"\
    )\n            case _ => {\n                var digit = num / 1000000000000\n\
    \                var remainder = num - (digit * 1000000000000)\n             \
    \   for (_ <- 0 until digit) {\n                    val tempNum = remainder *\
    \ 10\n                    count += tempNum\n                    remainder = tempNum\n\
    \                }\n                val tempNum = remainder * 1000000000000\n\
    \                count += tempNum\n                count += (digit * 1000000000000)\n\
    \            }\n        }\n        count.reverse.toList.sortWith(_ > _).reverse.foldLeft((0L,\
    \ 0L))((a, b) => (a + b, a)).tail\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5xwfrznd.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp5xwfrznd.scala:18:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mvar\e[0m \e[36mdigit\e[0m = num\
    \ / \e[31m1000000000000\e[0m\n\e[31m\e[31m   |\e[0m                          \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ number too large\n\e[31m\e[31m-- Error: /tmp/tmp5xwfrznd.scala:19:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mvar\e[0m \e[36mremainder\e[0m =\
    \ num - (digit * \e[31m1000000000000\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                         number too large\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5xwfrznd.scala:20:34 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                \e[33mfor\e[0m (_ <- \e[31m0\e[0m until digit)\
    \ {\n\e[31m\e[31m   |\e[0m                                  ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (digit : Long)\n\e[31m \
    \  |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp5xwfrznd.scala:25:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mtempNum\e[0m = remainder\
    \ * \e[31m1000000000000\e[0m\n\e[31m\e[31m   |\e[0m                          \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                 number too large\n5 errors found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        def getEven(x : Long) : Long = if(x\
    \ % 2 == 0) 1l else 0l\n        def getOdd(x : Long) : Long = if(x % 2 == 1) 1l\
    \ else 0l\n\n        // Get even-odd digits\n        var even = 0l\n        var\
    \ odd = 0l\n        for(i <- 0 until num.toInt) {\n            var tempEven =\
    \ getEven(i)\n            var tempOdd = getOd(i)\n            even += tempEven\n\
    \            odd += tempOdd\n        }\n        \n        // Get the tuple with\
    \ number of even and odd digits.\n        Tuple2(even.toInt, odd.toInt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmy560vct.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mvar\e[0m \e[36mtempOdd\e[0m = getOd(i)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: getOd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009609
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        var tmp = num\n        while (tmp > 0) {\n            val tmp = num /\
    \ 10\n            if (tmp % 2 == 0) {\n                even += 1\n           \
    \ } else {\n                odd += 1\n            }\n        }\n        (odd,\
    \ even)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n      val numberStr = \"%d\".toCharArray.mkString\n\
    \      val number = num.toString.toLong\n      val evenDigits = number.toString.filterNot(numberStr.contains).toList.map(_.toInt).filter(_\
    \ % 2 == 0).toList.length\n      val oddDigits = number.toString.filterNot(numberStr.contains).toList.map(_.toInt).filter(_\
    \ % 2 != 0).toList.length\n      (evenDigits, oddDigits)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt3zi9fzx.scala:19)\n\tat Problem.main(tmpt3zi9fzx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numDigits = num.toString().length\n\
    \        val evens = num.toString.filter(_.isDigit)\n        val odds  = num.toString.filterNot(_.isDigit)\n\
    \        (evens.length, odds.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo_73a8nf.scala:17)\n\tat Problem.main(tmpo_73a8nf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        num.toString.reverse.grouped(2).map{case\
    \ Array(x, y) => (x, y.length)}.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5rq08znu.scala:11:70 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        num.toString.reverse.grouped(\e[31m2\e[0m).map{\e\
    [33mcase\e[0m Array(x, y) => (x, y.length)}.toMap\n\e[31m\e[31m   |\e[0m     \
    \                                                               ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value length is not a member of T$1.\n\e[31m   |\e[0m   \
    \   An extension method was tried, but could not be fully constructed:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m          wrapRefArray[\e[35mT\e[0m](y)\n1 error found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toString.filter(x =>\
    \ x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqe8q76ib.scala:17)\n\tat Problem.main(tmpqe8q76ib.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val str = new StringBuilder()\n  \
    \      var evenCount : Long = 0\n        var oddCount : Long = 0\n        while\
    \ (num != 0) {\n            str.append(num % 10)\n            num /= 10\n    \
    \        if (num != 0) {\n                if (num % 2 == 0) {\n              \
    \      evenCount += 1\n                }\n                else {\n           \
    \         oddCount += 1\n                }\n            }\n        }\n       \
    \ (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmolqjdl1.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num filter { n => n % 2\
    \ == 0 }\n        val odd = num filter { n => n % 2 != 0 }\n        even.length,\
    \ odd.length\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzd3ij5ln.scala:13:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        even.length, odd.length\n\e[31m\e[31m   |\e[0m\
    \                   ^\e[0m\n\e[31m   |\e[0m                   end of statement\
    \ expected but ',' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzd3ij5ln.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = num filter { \e[36mn\e[0m => n % \e[31m2\e[0m == \e[31m0\e[0m\
    \ }\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value filter is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzd3ij5ln.scala:12:22 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = num filter { \e[36mn\e\
    [0m => n % \e[31m2\e[0m != \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value filter is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val even = num.toString.filter(_ %\
    \ 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n \
    \       return Tuple2(even, odd)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptfdov_4y.scala:17)\n\tat Problem.main(tmptfdov_4y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenDigits : Seq[Long] = num.toString.filter(_\
    \ % 2 == 0).toSeq\n        val oddDigits : Seq[Long] = num.toString.filter(_ %\
    \ 2 == 1).toSeq\n        val numEven = evenDigits.size // number of even digits\
    \ in the number\n        val numOdd = oddDigits.size // number of odd digits in\
    \ the number\n        (numEven, numOdd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpum_d3lpn.scala:11:69\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e\
    [0m : \e[35mSeq\e[0m[\e[35mLong\e[0m] = num.toString.filter(_ % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m).toSeq\n\e[31m\e[31m   |\e[0m                                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    scala.collection.immutable.WrappedString\n\e[31m   |\e[0m\
    \                      Required: collection.mutable.Seq[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpum_d3lpn.scala:12:68 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m : \e[35mSeq\e\
    [0m[\e[35mLong\e[0m] = num.toString.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).toSeq\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    scala.collection.immutable.WrappedString\n\
    \e[31m   |\e[0m                      Required: collection.mutable.Seq[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // We will store the count of even\
    \ and odd digits in a tuple. \n        // The tuple consists of two elements,\
    \ even and odd digit count. \n        // If it is an even number, the value of\
    \ the tuple will be 0\n        val evenOddTuplable = new mutable.MutableTuple[Long,\
    \ Long]()\n        // We will store the count of even and odd digits in a tuple.\
    \ \n        // The tuple consists of two elements, even and odd digit count. \n\
    \        // If it is an odd number, the value of the tuple will be 0\n       \
    \ val evenOddTuplable1 = new mutable.MutableTuple[Long, Long]()\n        \n  \
    \      // Iterate the odd digits of the given number\n        for (i <- num.toString.dropWhile(_.isDigit).toInt)\
    \ {\n            evenOddTuplable.push((i, num.toString.indexOf(i, num.toString.lastIndexOf(i))\
    \ % 2 == 0))\n        }\n        // Iterate the even digits of the given number\n\
    \        for (i <- num.toString.takeWhile(_.isDigit).toInt) {\n            evenOddTuplable1.push((i,\
    \ num.toString.indexOf(i, num.toString.lastIndexOf(i)) % 2 == 1))\n        }\n\
    \        \n        // Return the tuple with the count of even and odd digit\n\
    \        evenOddTuplable.zip(evenOddTuplable1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4vhuwip7.scala:14:34 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenOddTuplable\e[0m = \e\
    [33mnew\e[0m mutable.MutableTuple[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4vhuwip7.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenOddTuplable1\e[0m =\
    \ \e[33mnew\e[0m mutable.MutableTuple[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4vhuwip7.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- num.toString.dropWhile(_.isDigit).toInt)\
    \ {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value foreach is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4vhuwip7.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (i <- num.toString.takeWhile(_.isDigit).toInt)\
    \ {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value foreach is not a member of Int\n4\
    \ errors found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        // Write your code here\n        val\
    \ evenCount = 0\n        val oddCount = 0\n        val sum = 0\n        for(i\
    \ <- num.toString.reverse.sliding(2)){\n            sum += i\n            if(i%2\
    \ == 0){\n                evenCount += 1\n            }else{\n               \
    \ oddCount += 1\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyqsoacrj.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyqsoacrj.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(i%\e\
    [31m2\e[0m == \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m               ^^\e[0m\n\e\
    [31m   |\e[0mvalue % is not a member of String, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpyqsoacrj.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                evenCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean evenCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpyqsoacrj.scala:20:25 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                oddCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not\
    \ a member of Int - did you mean oddCount.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyqsoacrj.scala:23:8 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        sum\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    (sum : Int)\n\e[31m   |\e[0m        Required: (Long, Long)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digits = num.toString.reverse.grouped(2)\n\
    \        val even = digits.count(_ % 2 == 0)\n        val odd = digits.count(_\
    \ % 2 != 0)\n        tuple2(even, odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq_evkg3b.scala:12:34 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = digits.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq_evkg3b.scala:13:33\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = digits.count(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_evkg3b.scala:14:8\
    \ -------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        tuple2(even, odd)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: tuple2\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n      val evenDigits : Long = 0\n      val\
    \ oddDigits : Long = 0\n      var temp = num\n      var temp = temp.toInt\n  \
    \    while (temp != 0) {\n        temp = temp.toInt\n        if (temp % 2 == 0)\
    \ {\n          evenDigits += 1\n        } else {\n          oddDigits += 1\n \
    \       }\n      }\n      (evenDigits, oddDigits)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe23a_te0.scala:14:10 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mvar\e[0m \e[36mtemp\e[0m = temp.toInt\n\e\
    [31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtemp is already\
    \ defined as \e[33mvariable\e[0m \e[35mtemp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe23a_te0.scala:18:21\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m          evenDigits += \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \          value += is not a member of Long - did you mean evenDigits.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpe23a_te0.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          oddDigits += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member\
    \ of Long - did you mean oddDigits.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0) return (evenOddCount(-num),\
    \ num);\n        var even = 0l\n        var odd = 0l\n        while (num != 0)\
    \ {\n            val digit = num % 10\n            if (digit == 0) even += 1\n\
    \            else {\n                if (digit > 0) odd += 1\n               \
    \ num /= 10\n            }\n        }\n        (even, odd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuqo_lzlg.scala:11:41\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (num <\
    \ \e[31m0\e[0m) \e[33mreturn\e[0m (evenOddCount(-num), num);\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                        Found:    (Long, Long)\n\e[31m   |\e[0m             \
    \                Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpuqo_lzlg.scala:19:20 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                num /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of Long\
    \ - did you mean num.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n      var evenDigit : Long = 0\n      var\
    \ oddDigit : Long = 0\n      val temp = num.toString.toLong\n      var tempInt\
    \ = temp\n      while(tempInt > 0) {\n        if(tempInt % 2 == 0) evenDigit +=\
    \ 1\n        else oddDigit += 1\n        tempInt /= 10\n      }\n      return\
    \ (evenDigit, oddDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps2m99tkd.scala:24)\n\tat Problem.main(tmps2m99tkd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val numStr = \"-\" + num.toString\n\
    \        val evenStrs = numStr.filter(str => str == \"0\").takeWhile(str => !str.isDigit).iterator\n\
    \        val oddStrs = numStr.filter(str => str != \"0\").takeWhile(str => !str.isDigit).iterator\n\
    \        evenStrs zip oddStrs\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfo9r23nd.scala:12:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenStrs\e[0m = numStr.filter(\e\
    [36mstr\e[0m => str == \e[31m\"0\"\e[0m).takeWhile(\e[36mstr\e[0m => !str.isDigit).iterator\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpfo9r23nd.scala:13:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddStrs\e[0m = numStr.filter(\e\
    [36mstr\e[0m => str != \e[31m\"0\"\e[0m).takeWhile(\e[36mstr\e[0m => !str.isDigit).iterator\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfo9r23nd.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        evenStrs zip oddStrs\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Found:    Iterator[(Char, Char)]\n\e[31m   |\e[0m        Required: (Long, Long)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evens = num.toString.takeWhile(_\
    \ != '0').count(c => c == '0')\n        val odds = num.toString.takeWhile(_ !=\
    \ '0').count(c => c == '1')\n        Tuple2(evens, odds)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvahgeda2.scala:16)\n\tat Problem.main(tmpvahgeda2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = num / 2l\n        var odd\
    \ = num % 2l\n        while (odd > 0) {\n            odd -= 1l\n            even\
    \ += 2l\n        }\n        (even, odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w78ha64.scala:20)\n\tat Problem.main(tmp9w78ha64.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        val str = num.toString\n        for ((c, i) <- str.toArray.zipWithIndex)\
    \ \n            if(c % 2 == 0) evenCount += i\n            else oddCount += i\n\
    \        (evenCount, oddCount)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxxfzk47k.scala:20)\n\tat Problem.main(tmpxxfzk47k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount : Long = 0\n       \
    \ var oddCount : Long = 0\n\n        var digits = num.toString.reverse.map(_.toInt)\n\
    \n        for (digit <- digits) {\n            digit match {\n               \
    \ case 0 => evenCount += 1\n                case 1 => oddCount += 1\n        \
    \        case _ => continue\n            }\n        }\n\n        (evenCount, oddCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6phj3tmv.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m _ => continue\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                  Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digits = num.toString\n      \
    \  var evenCount = 0\n        var oddCount = 0\n        for((i, c) <- digits.indices)\
    \ {\n            val remainder = num % 10\n            if(c == 0 && remainder\
    \ == 0) {\n                evenCount += 1\n            }\n            if(c ==\
    \ 1 && remainder != 0) {\n                oddCount += 1\n            }\n     \
    \       num = num / 10\n        }\n        (evenCount, oddCount)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoh65q8_s.scala:22:16 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            num = num / \e[31m10\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num == 0) {\n            (1L,\
    \ 0L)\n        }\n        else if (num < 0){\n            evenOddCount(-num)\n\
    \        }\n        else {\n            val temp = num.toString.toInt\n      \
    \      val even = temp filter (_ % 2 == 0)\n            val odd = temp - even\n\
    \            (even.length, odd.length)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8g88gqi2.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = temp filter\
    \ (_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var even = 0\n        var odd = 0\n\
    \        for (i in 0 until num) {\n            if (num % 2 == 0) {\n         \
    \       even += 1\n            } else {\n                odd += 1\n          \
    \  }\n        }\n        return (odd, even)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8f5eglur.scala:13:31 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i in \e[31m0\e[0m until num)\
    \ {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               '<-' expected, but '{' found\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8f5eglur.scala:19:9 -------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCnt = 0\n        var oddCnt\
    \ = 0\n        num match {\n            case 0 | -1 => return (evenCnt, oddCnt)\n\
    \            case n => n match {\n                case n % 2 => return (evenCnt,\
    \ oddCnt)\n                case n % 2 => oddCnt += 1\n                case _ \
    \   => evenCnt += 1\n            }\n        }\n        return (evenCnt, oddCnt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpafhxwbay.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m n % \e[31m2\e[0m => \e\
    [33mreturn\e[0m (evenCnt, oddCnt)\n\e[31m\e[31m   |\e[0m                     \
    \  ^\e[0m\n\e[31m   |\e[0m                       Not found: %\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpafhxwbay.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m n % \e[31m2\e[0m => oddCnt\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: %\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0) return 0l\n\n       \
    \ val evenCount = 0\n        val oddCount = 0\n\n        while(num > 0){\n   \
    \         if(num % 2 == 0) evenCount += 1\n            else               oddCount\
    \ += 1\n            num = num / 10\n        }\n\n        (evenCount, oddCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5an_pu7d.scala:11:28\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (num <\
    \ \e[31m0\e[0m) \e[33mreturn\e[0m \e[31m0l\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                     ^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (\e[31m0L\e[0m : Long)\n\e[31m   |\e[0m                            Required:\
    \ (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5an_pu7d.scala:17:39\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(num\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) evenCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value += is not a member of Int - did you mean evenCount.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5an_pu7d.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m               oddCount +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value += is not a member of Int - did you mean\
    \ oddCount.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5an_pu7d.scala:19:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            num = num\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val num\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        if (num < 0) throw new Exception(\"\
    Only positive numbers are allowed.\")\n        val evens = num.toString.takeWhile(_\
    \ => '0' != _).toList\n        val odds = num.toString.drop(evens.size)\n    \
    \    (evens.size, odds.size)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpphpvtxnk.scala:12:55 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = num.toString.takeWhile(_\
    \ => \e[31m'0'\e[0m != _).toList\n\e[31m\e[31m   |\e[0m                      \
    \                                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => \e[31m'0'\e[0m != _$2.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var numEven = 0\n        var numOdd\
    \ = 0\n        var remainder = num / 10\n        while(!(remainder == 0)) ++numEven,\
    \ --numOdd, remainder = num / 10, num % 10\n        while(!(remainder == 0)) ++numEven,\
    \ ++numOdd, remainder = num % 10, num / 10\n        while(num != 0) {\n      \
    \      num %= 10\n        }\n        if(num == 0) numEven, numOdd\n        else\
    \ numEven, numOdd\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpifc0i7qc.scala:14:42 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m(!(remainder == \e[31m0\e[0m))\
    \ ++numEven, --numOdd, remainder = num / \e[31m10\e[0m, num % \e[31m10\e[0m\n\e\
    [31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m','\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpifc0i7qc.scala:15:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e\
    [0m(!(remainder == \e[31m0\e[0m)) ++numEven, ++numOdd, remainder = num % \e[31m10\e\
    [0m, num / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m','\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpifc0i7qc.scala:19:28\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mif\e[0m(num == \e[31m0\e[0m) numEven, numOdd\n\e[31m\e[31m   |\e[0m  \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \ end of statement expected but ',' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpifc0i7qc.scala:14:33 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mwhile\e[0m(!(remainder == \e[31m0\e[0m)) ++numEven, --numOdd,\
    \ remainder = num / \e[31m10\e[0m, num % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                 ^^\e[0m\n\e[31m   |\e[0m                   \
    \              Not found: ++\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpifc0i7qc.scala:15:33 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mwhile\e[0m(!(remainder == \e[31m0\e[0m)) ++numEven, ++numOdd,\
    \ remainder = num % \e[31m10\e[0m, num / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                 ^^\e[0m\n\e[31m   |\e[0m                   \
    \              Not foun"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        var evenCount = new mutable.HashMap[Long,\
    \ Long]();\n        var oddCount = new mutable.HashMap[Long, Long]();\n      \
    \  var evenDigit : Long = 0;\n        var oddDigit : Long = 0;\n        var numDigit\
    \ : Long = 0;\n        val digits = num.toString.toLongArray.map(_.toInt)\n  \
    \      while (digits != -1) {\n            val digit = digits(digits.length-1)\n\
    \            if(digit % 2 == 0){\n                evenDigit += digit\n       \
    \         evenCount += digit -> 1\n            } else if(digit % 2 != 0){\n  \
    \              oddDigit += digit\n                oddCount += digit -> 1\n   \
    \         } \n            numDigit += 1\n            digits -= 1\n        }\n\
    \        Tuple2(evenDigit, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxh2kmy2v.scala:11:28 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mevenCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]();\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxh2kmy2v.scala:12:27 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mvar\e[0m \e[36moddCount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]();\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxh2kmy2v.scala:16:34\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = num.toString.toLongArray.map(_.toInt)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \            value toLongArray is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val evenCount : Long = num.asInstanceOf[Int].par.filter(_\
    \ % 2 == 0).length\n        val oddCount : Long = num.asInstanceOf[Int].par.filter(_\
    \ % 2 != 0).length\n        (evenCount, oddCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9cvmt1__.scala:11:53 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m : \e[35mLong\e\
    [0m = num.asInstanceOf[\e[35mInt\e[0m].par.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value par is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9cvmt1__.scala:12:52 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36moddCount\e[0m : \e[35mLong\e\
    [0m = num.asInstanceOf[\e[35mInt\e[0m].par.filter(_ % \e[31m2\e[0m != \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value par is not a member of\
    \ Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val odd = num.toString.reverse.foldLeft(0)((acc,\
    \ b) => acc + b - '0')\n        val even = num.toString.reverse.foldLeft((num\
    \ % 2 == 0).lshift(1) + 1)((acc, b) => acc + b - '0')\n        (even, odd)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpawj_4nxn.scala:12:64 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = num.toString.reverse.foldLeft((num\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).lshift(\e[31m1\e[0m) + \e[31m1\e[0m)((\e[36macc\e\
    [0m, \e[36mb\e[0m) => acc + b - \e[31m'0'\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                          ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value lshift is not a member of Boolean\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpawj_4nxn.scala:12:95 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = num.toString.reverse.foldLeft((num\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).lshift(\e[31m1\e[0m) + \e[31m1\e[0m)((\e[36macc\e\
    [0m, \e[36mb\e[0m) => acc + b - \e[31m'0'\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \        ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpawj_4nxn.scala:13:9 ---------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        (even, odd)\n\e[31m\e[31m   |\e[0m         ^^^^\e\
    [0m\n\e[31m   |\e[0m         Found:    (even : Any)\n\e[31m   |\e[0m         Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val digitCount = num.toString.length\n\
    \        val evenDigitCount = (num.toString.reverse.filter(_ % 2 == 0).length)\
    \ / digitCount\n        val oddDigitCount = (num.toString.reverse.filter(_ % 2\
    \ != 0).length) / digitCount\n        (evenDigitCount, oddDigitCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3d_xc6t.scala:18)\n\tat Problem.main(tmpw3d_xc6t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n      val counts = mutable.Map.empty[Long,\
    \ Long]\n      val temp = num\n      var sum = 0\n      var even = 1\n      while(temp\
    \ != 0) {\n        sum += 1\n        temp = temp / 10\n      }\n      while(sum\
    \ != 0) {\n        if(temp % 2 == 0) {\n          even *= 2\n          counts(even)\
    \ = counts(even) + 1\n          temp /= 10\n        } else {\n          even +=\
    \ 1\n          temp /= 10\n        }\n        sum += 1\n      }\n      (counts.filter(_._2\
    \ > 0).map(_._1), counts.filter(_._2 < 0).map(_._1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n   \
    \ assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx9hg7k8i.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpx9hg7k8i.scala:17:13 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        temp = temp / \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val temp\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9hg7k8i.scala:23:15\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m          temp /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ /= is not a member of Long - did you mean temp.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpx9hg7k8i.scala:26:15 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m          temp /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m          value /= is not a member of Long - did\
    \ you mean temp.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val counter = mutable.HashMap[Int,\
    \ Int]()\n        for( n <- num.toString.toInt if num > 0 )\n            if(num\
    \ % 2 == 0) counter(2) += 1\n            else if(num % 2 == 1) counter(1) + 1\n\
    \        val odd = counter(1).toDouble / 2\n        val even = counter(0).toDouble\
    \ / 2\n        (even, odd)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l,\
    \ 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78vwl993.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp78vwl993.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m( n <- num.toString.toInt \e[33mif\e\
    [0m num > \e[31m0\e[0m )\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value withFilter is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val l = math.abs(num)\n        val\
    \ even = math.min(l % 2 , 0)\n        val odd = l - even\n        (even, odd)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4cge73b.scala:17)\n\tat Problem.main(tmpp4cge73b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        val nums = num.abs.toString.reverse\n\
    \        nums.takeWhile(!_.isDigit)\n                .map(_.toInt)\n         \
    \       .map(i => (i, nums.drop(i).takeWhile(!_.isDigit).length))\n          \
    \      .filter(_._2 == 1).map(_._1)\n                .foldRight((0l, 0l))((a,\
    \ b) => a + (b._1, b._2))\n    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpv23a12tx.scala:16:49 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                .foldRight((\e[31m0l\e[0m, \e[31m0l\e\
    [0m))((a, b) => a + (b._1, b._2))\n\e[31m\e[31m   |\e[0m                     \
    \                          ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m  (x: String): String\n\e[31m   |\e[0m match arguments ((Long,\
    \ Long))\n1 error found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n   \
    \ // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
    \ : Long) : Tuple2[Long, Long] = {\n        require(num > 0, \"num must be positive\"\
    )\n        require(num <= Long.MaxValue, \"num must be less than a max value of\
    \ \" + Long.MaxValue)\n        var count = 0\n        var even = 0\n        var\
    \ odd = 0\n        var remainder = num\n        while (remainder > 0) {\n    \
    \        if (remainder % 2 == 0) {\n                even += 1\n            } else\
    \ {\n                odd += 1\n            }\n            count += 1\n       \
    \     remainder = remainder / 2\n        }\n        even.toLong -> odd.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjegua40a.scala:29)\n\tat Problem.main(tmpjegua40a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009626
