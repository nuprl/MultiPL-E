name: HumanEval_101_words_string
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    // to split the string into words and return a list of the words.\n\
  \    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    //\
  \ (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"\
  One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi,\
  \ my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"\
  John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
  Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
  One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
  \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
  , \"gamal\"))));\n    }\n\n}\n"
completions: ["        val words = s.split(\"[\\\\s,]+\")\n        val list = new\
    \ collection.mutable.ListBuffer[String]()\n        for (word <- words) {\n   \
    \         list += word\n        }\n        list += words.head\n        list.toList",
  "        var words = \"\"\n        for (c <- s) {\n            if (c==\",\" || c\
    \ == \" \") {\n                words = words ::: List(c)\n            } else {\n\
    \                words += c\n            }\n        }\n        words", '        s.trim().split("\\s*,\\s*").toList',
  "        //Your code goes here\n        s.split(\",\\\\s+\").map(x=>x.trim).filter(x\
    \ => x.trim.length >0).map(x => x.toLowerCase())", "        if(s.isEmpty) {\n\
    \            Nil\n        } else {\n            val splits = s.split(' ')\n  \
    \          val wordsArray = splits.toList\n            val wordsString = wordsArray.toList.mkString(\"\
    \ \")\n            val wordsList = wordsString.split(' ')\n            wordsList.map(word\
    \ => word.toUpperCase)\n        }", "        var words = mutable.ListBuffer[String]()\n\
    \        var words = s.split(\"[, ]+\")\n        for (str <- words) {\n      \
    \      if (str != \"\") words += str\n        }\n        words.toList", "    \
    \    def split_word(w : String) : List[String] = {\n            val ws = w.split(\"\
    , | , | , | \")\n            for (wa <- ws) yield {wa.trim}\n        }\n     \
    \   def add_word(w : List[String]) : List[String] = {\n            w match {\n\
    \                case Nil => Nil\n                case x :: Nil => x\n       \
    \         case x :: y => x :: add_word(y)\n            }\n        }\n        val\
    \ words = s.split(\", | , | , | \")\n        val new_words = (for ( x <- words)\
    \ yield {\n            if (x.length() > 0)\n                split_word(x) ++ add_word(split_word(x))\n\
    \            else Nil\n        }).flatten.toList", "      var ret = new mutable.ListBuffer[String]\n\
    \      var prev = \"\"\n      for(i <- 0 until s.length){\n          val temp\
    \ = s(i)\n          if(prev ne \"\"){\n              ret += prev\n          }\n\
    \          ret += temp\n          prev = temp\n      }\n      ret.toList", " \
    \       val words = s.trim.split(\", \").toList\n        if (words.length > 1)\
    \ {\n            words.reverse.tail\n        }\n        else {\n            List()\n\
    \        }", "        var words = mutable.Set[String]()\n        val array = s.split(\"\
    ,\")\n        array.foreach(x => {\n            val array2 = x.split(\" \")\n\
    \            array2.foreach(y => {\n                if (words.contains(y)) {\n\
    \                    println(s\"$y already in words set\")\n                }\
    \ else {\n                    words += y\n                }\n            })\n\
    \        })\n        return words.toList", "        //use regular expression to\
    \ split into words and map into a list\n        val list = s.replaceAll(\",\"\
    , \" \").split(\" \").toList\n        val wordsString = list.map(_.replaceAll(\"\
    \\\\s\", \"\"))\n        return wordsString", "        val list = s.split(\",\"\
    ).toList\n        list.map(_.trim).filter(_.nonEmpty)", "        // Your code\
    \ here\n        s.replaceAll(\" \", \"\")", "        // Write your code here\n\
    \        var lst = s.split(\",\")\n        var list = List[String]()\n       \
    \ var word = List[String]()\n        for(i <- 0 until lst.length){\n         \
    \   if(lst(i).length() > 0){\n                for(j <- 0 until lst(i).length()){\n\
    \                    if(lst(i)(j) != \" \" && lst(i)(j) != \",\"){\n         \
    \               if(j == (lst(i).length() - 1)){\n                            lst(i)\
    \ += lst(i)(j)\n                            word += lst(i)\n                 \
    \           list = word :: list\n                        }else{\n            \
    \                lst(i) += lst(i)(j)\n                            word += lst(i)\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return list", "        val l = s.split(\"\"\"\\W+\"\
    \"\").toList\n        l.head :: words.filter(w => w < l.size).toList ::: l.tail",
  "        var words: List[String] = List()\n        var currentWord = \"\"\n    \
    \    var charArray = s.toCharArray()\n        for (i <- charArray){\n        \
    \    if (Character.isWhitespace(i)){\n                currentWord = currentWord\
    \ + i\n                currentWord = currentWord.trim\n                if (currentWord.trim.length()\
    \ > 0){\n                    words ::= currentWord\n                }\n      \
    \          currentWord = \"\"\n            }\n            else {\n           \
    \     currentWord = currentWord + i\n                currentWord = currentWord.trim\n\
    \            }\n        }\n        words ::= currentWord\n        words", "  \
    \      def splitString(s : String) : List[String] = {\n            val list =\
    \ new mutable.ListBuffer[String]\n            val words = s.split(\"[,\\\\s]+\"\
    .toRegex)\n            for(word <- words) {\n                list.+= word.trim\n\
    \            }\n            list.toList\n        }\n\n        val list = splitString(s)\n\
    \        var list2 : List[String] = new mutable.ListBuffer[String]\n        for(i\
    \ <- 0 until list.length) {\n            list2.+= list.apply(i)\n        }\n \
    \       list2.toList", "        val list = s.split(\"\"\"\\W+\"\"\").map(_.trim).toList\n\
    \        list.groupBy(x => x).map(x => (x._1, x._2.map(_._2))).toList", "    \
    \    val words = s.split(\"\")\n        val res = new collection.mutable.ListBuffer[String]()\n\
    \        words.map(word => {\n            if (word != \" \") res += word\n   \
    \     })\n        res.toList", "        def split(s: String): List[String] = s.split(\"\
    , | [,]| \").toList\n        def getWords(s: String, splits: List[String]): List[String]\
    \ = splits match {\n            case Nil => List(s)\n            case _ => getWords(s.tail,\
    \ split(s.head):_*)\n        }\n        getWords(s, split(s))", "        // Split\
    \ string into array of words\n        val words = s.split(\", \").map(_.trim)\n\
    \        // Return array of words\n        words", "        val wordList = mutable.ListBuffer[String]()\n\
    \        // Iterate over each character in the string\n        for ( char <- s\
    \ ) {\n            // If the character is a letter, add it to the list\n     \
    \       if ( char.isLetter ) {\n                wordList += char\n           \
    \ }\n        }\n        // Return the list\n        wordList.toList", "      \
    \  var words: List[String] = List()\n        var currentWord = \"\"\n        var\
    \ charIndex = 0\n        while(words.length < s.length){\n            val currentChar\
    \ = s(charIndex)\n            if(currentChar == \",\"){\n                currentWord\
    \ ++= currentChar\n                charIndex += 1\n            }\n           \
    \ else if(currentChar == \" \"){\n                currentWord ++= currentChar\n\
    \                charIndex += 1\n                if(currentWord.isEmpty){\n  \
    \                  currentWord ++= currentChar\n                }\n          \
    \      else{\n                    if(words.length == 0){\n                   \
    \     words = currentWord.split(',')\n                        currentWord = \"\
    \"\n                    }\n                    else{\n                       \
    \ words = words :+ currentWord\n                        currentWord = \"\"\n \
    \                   }\n                }\n            }\n            else{\n \
    \               currentWord ++= currentChar\n                charIndex += 1\n\
    \            }\n        }\n        if(currentWord.length > 0){\n            if(words.length\
    \ == 0){\n                words = currentWord.split(',')\n            }\n    \
    \        else{\n                words = words :+ currentWord\n            }\n\
    \        }\n        return words", "        val words = s.trim().split(\",\")\n\
    \        words.map(_.trim()).filter(_.nonEmpty).toList", "        // TODO: Write\
    \ your code here\n        val strs = s.split(\",\")\n        strs.flatMap(_.split(\"\
    \ \"))", "        val words: mutable.MutableList[String] = mutable.MutableList\n\
    \        for(i <- 0 until s.length - 1) if s(i) = ',' {\n            words +=\
    \ s(i+1); i+=1;\n        } else words += s(i)\n        words.toList", "      \
    \  if (s.isEmpty || s == null || s.isEmpty()) List.empty\n        else {\n   \
    \         var words = s.trim.split(\"\\\\s+\").toList\n            val lastWord\
    \ = words.last\n            val lastIndex = words.length - 1\n            if (words.size\
    \ > lastIndex) {\n                words.drop(lastIndex) ++ lastWord\n        \
    \    } else words\n        }", "        val tokens = s.trim().split(\",|\\s+\"\
    ).map(_.trim).toList\n        val words   = tokens.filter( !_.isEmpty )\n    \
    \    val result  = words.toList\n        return result", "        val r = new\
    \ scala.util.parsing.input.CharArrayReader(s.toCharArray)\n        val p = new\
    \ java.util.Scanner(r)\n        val words = new mutable.MutableList[String]()\n\
    \        while(p.findWithinHorizon(\".\", 0) != -1){\n          words += p.next()\n\
    \        }\n        words", "        var words = s.split(\",\").toList.map(_.trim).toSet\n\
    \        var list = List[String]()\n        for(word <- words) {\n           \
    \ if (words.contains(word)) {\n                words.remove(word)\n          \
    \      list ::= word\n            } else {\n                list ::= word\n  \
    \          }\n        }\n        list.distinct", "        val list = s.split(\"\
    \ \").map(_.trim).toList\n        if(list.contains(\"\")) list.clear()\n     \
    \   list", "        val words = s.split(\"\\\\s*,\\\\s*\").map(_.trim).toList\n\
    \        if (words.isEmpty) List()\n        else words.toList", "        val words\
    \ = s.replace(\",\", \" \").replace(\"( )\", \" \").trim().split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n\
    \        val words = words.takeRight(10)\n        val wordList = words.toList\n\
    \        wordList", "        val words = s.split(\"[\\\\s,]+\").filter(_.length\
    \ > 0).toList\n        words.sort", "        val words = s.split(\",\")\n    \
    \    words.toList.map(_.trim).toList", "        val words = s.toList.map(_.toLowerCase)\n\
    \        var list = List[String]()\n        val splitList = words.split(\", |,\\\
    \\s+\")\n        for (str <- splitList) {\n          if(str.trim.isEmpty) list\
    \ = list :+ str\n        }\n        list = list :+ list.last\n        return list",
  "        val result = mutable.MutableList[String]()\n        val splits = s.split(\"\
    \"\"[, ]+\"\"\")\n        splits.foreach(w => {\n            w match {\n     \
    \           case \"\" => ()\n                case w =>\n                    result.add(w)\n\
    \            }\n        })\n        return result.toList", "        val wordsList\
    \ = s.toList.split(\"[, ]+\")\n        wordsList", "        def words(s: String)\
    \ : List[String] = {\n            s.split(\", \").toList match {\n           \
    \     case Nil => List()\n                case x::xs => List(x)+words(xs)\n  \
    \          }\n        }\n        words(s)", '        s.split(" ").filter(!_.isEmpty).toList',
  "        // Write your code here!\n        val list = s.split(\",\")\n        val\
    \ list2 = list.map(_.split(\" \"))\n        list2", "        // Split the string\
    \ into words\n        val words = s.split(\"\"\"\\s*,\\s*|\\s*,\\s*\\W\"\"\",\
    \ -1).toList\n        // Remove the commas from the words\n        val fixed =\
    \ words.map(x => x.replace(\",\", \"\"))\n        // Join the words back into\
    \ a single string\n        val fixedString = fixed.mkString(\",\")\n        //\
    \ Return a list of words delimited by commas\n        fixed.map(x => x.toUpperCase()).toList",
  "        val words = new mutable.ListBuffer[String]()\n        for (wd <- s.split(\"\
    \ \")) {\n            if (words.size == 0) words.append(wd)\n            else\
    \ words.append(wd).append(',')\n        }\n        words.reverse.toList", "  \
    \      val words = s.split( \",\" ).toList // split by ,\n        val words1 =\
    \ words.map( _.trim) // remove leading and trailing space\n        val words2\
    \ = words1.map( w => w.split( \" \" ) ) // split by space\n        val words3\
    \ = (words2 ++ words1) flatMap List(_) // concatenate two lists\n        words3.toList",
  "        var newList: List[String] = Nil\n        for (x <- s.split(\" \")) {\n\
    \            newList = newList :+ x\n        }\n        return newList", '        //
    Return the list of words from the given string.', "        if (s == \"\") List()\n\
    \        else s.split(\" \").filter(_.nonEmpty).map(_.trim).toList", "       \
    \ if (s.contains(\",\")) s.split(\"\\\\s*,\\\\s*\").map(_.toLowerCase).toList\n\
    \        else if (s.contains(\".\"))  s.split(\"\\\\s*\\\\.\\\\s*\").map(_.toLowerCase).toList\n\
    \        else                      s.split(\" \").map(_.toLowerCase).toList",
  "        var splittedString : List[String] = List();\n        var splittedStringList\
    \ : List[List[String]] = List();\n        \n        for(a <- s.split(\" \")) {\n\
    \            if(a.contains(\",\")) {\n                splittedStringList += a.split(\"\
    ,\");\n            }\n            else{\n                splittedString += a;\n\
    \            }\n        }\n        \n        for(i <- splittedStringList) {\n\
    \            splittedStringList += i;\n        }\n        \n        return splittedStringList;",
  "        // Split the string into words using split method.\n        // The split\
    \ method returns an Array[String] so you need to typecast it to a\n        //\
    \ List[String].\n        (s.split(\", \")).toList", "        val words = s.split(\"\
    , | \")\n        words.toList", '        s.split(",")', "        val splits =\
    \ s.trim().split(\",|,\\\\s+\").map(_.replaceAll(\"\\\\s+\",\" \"))\n        splits.toList.map(_.trim())",
  "        var splitString : List[String] = s.split(\",\")\n        splitString =\
    \ (s.split(\",\").toList).reverse\n        splitString.takeWhile(_.nonEmpty)",
  '        //TODO: Implement here', "        val words = s.split(\",\").toList\n \
    \       val newList = words.toList.map(w => (w.toUpperCase))\n        newList",
  "        val list = s.split(\" \").toList.sorted\n        val list2 = list.map(_.toUpperCase).reverse\n\
    \        list2.toList", "        val words = s.toCharArray\n        val wordsArray\
    \ = mutable.ArrayBuffer.empty[String]\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            if (word != ' ' && word != '\\\
    t') {\n                wordsArray += word\n            }\n        }\n        wordsArray.toList",
  "        def word(i : Int) : List[String] = {\n            s match {\n         \
    \       case s if(s.size > i) => words(s.take(i+1).mkString(\",\"))\n        \
    \        case s => List(\"\")\n            }\n        }\n        val words = s.split(\"\
    \ |,\")\n        val wordList = new mutable.ArrayList[String]()\n        var curWord\
    \ = word(0)\n        var curIndex = 0\n        var wordCount = 0\n        while\
    \ (curIndex < words.length) {\n            wordCount += 1\n            val nextWord\
    \ = word(curIndex+1)\n            if (nextWord.isEmpty) {\n                wordList.add(curWord)\n\
    \                curWord = \"\"\n                curIndex += 1\n            }\
    \ else {\n                curWord += \", \" + nextWord\n            }\n      \
    \  }\n        wordList.add(curWord)\n        wordList.size()", "        def wordsSplitter(ss:\
    \ List[String], words: mutable.Buffer[String]) : List[String] = {\n          \
    \  ss match {\n                case Nil => words.toList\n                case\
    \ x::xs => wordsSplitter(xs, words +: x) ::: wordsSplitter(xs, words)\n      \
    \      }\n        }\n        val words: mutable.Buffer[String] = mutable.Buffer[String]()\n\
    \        wordsSplitter(s.split(\", \"), words).toList", "        val words = s.split(\"\
    [,\\\\s]+\").map(x => x.trim).toList\n        if (words.isEmpty) List(\"\")\n\
    \        else words.reverse", "        val splitWords = s.split(\"\"\"\\W+\"\"\
    \").toList\n        splitWords.filter(_.nonEmpty)", "        val words = s.toList.split(\"\
    \"\"\\s*,\\s*\"\"\")\n        words.toList", "        val ps = Iterator.fromString(s).map(_.toUpperCase).takeWhile(_.nonEmpty).dropWhile(_.isDigit)\n\
    \        val p  = ps.toList\n        p.tail.flatMap(_.split(\",\"))", "      val\
    \ tokens = s.split(\",\")\n      val n = tokens.size\n      val a = new Array[String](n)\n\
    \      a.fill(\"\")\n      val out = new mutable.ListBuffer[String]()\n      for\
    \ (i <- 0 to n-1){\n        a(i) = tokens(i)\n      }\n      out.+=(tokens.toList)\n\
    \      out.toList", "        val words = s.split(\",|\\\\s+\").toList\n      \
    \  val noDouble = words.map(_.trim).filter(_.nonEmpty)\n        return noDouble",
  "        val words = s.split(\" \").filter(_.nonEmpty)\n        words.toList", " \
    \       val a = s.toString.split(\", \")\n        a.map(x => x.trim).toList",
  "        var strList = ListBuffer[String]()\n        for (word <- s.split(\",\\\\\
    s+\")) {\n            strList.append(word.trim())\n        }\n        return strList.toList",
  "        val wordsArray = s.split(\",\")\n        val wordList = wordsArray.filter(_.trim.length\
    \ > 0)\n        wordList.toList.sorted", "        val input = s.split(\",\")\n\
    \        val output = ListBuffer[String]()\n        for (w <- input) {\n     \
    \       output.append(w.split(\" \").map(_.trim).toList)\n        }\n        return\
    \ output.toList", "        val list = s.split(\", \")\n        val result = new\
    \ collection.mutable.ArrayBuffer[String]\n        for (i <- list.length-1; i>=\
    \ 0) {\n            val word = list(i)\n            result.append(word)\n    \
    \    }\n        val result = new collection.mutable.ArrayBuffer[String]\n    \
    \    for (i <- list.head.length-1; i>= 0) {\n            val word = list.head(i)\n\
    \            result.append(word)\n        }\n        return result.toList", " \
    \       var ret: List[String] = Nil\n        val tmp = s.split(\",\")\n      \
    \  for (a <- tmp) {\n            var b: List[String] = Nil\n            if (a\
    \ != \"\") {\n                b = a.split(\" \")\n            }\n            if\
    \ (b.length != 0) {\n                ret :+= b\n            }\n        }\n   \
    \     return ret", "        // Implement here\n        s.split(\",\").toList",
  "        val words = s.trim().split(\",\")\n        if(words.size < 2) {\n     \
    \       return List()\n        }\n        val first = words.head\n        val\
    \ last = words.last\n        var list = List[String]()\n        if(first != last)\
    \ {\n            list = words :: list\n        }\n        list", "        // Write\
    \ your code here\n        val l = s.split(\" \").toList\n        l.filter(_ !=\
    \ \"\")\n        val a = l.map(_.replaceAll(\",\", \"\").toLowerCase).toList\n\
    \        val b = l.filter(_ != \"\")\n        b.filter(!_.equals(\",\"))\n   \
    \     b.filter(_ != \" \")\n        b.filter(_ != \",\")\n        b", "      \
    \  val r = new scala.util.matching.Regex(\"\"\"((\\w+)\\s+(\\w+)\\s+(\\w+)\\s+(\\\
    w+)\\s+(\\w+))|(\\w+),\"\"\".r)\n        val r2 = new scala.util.matching.Regex(\"\
    \"\"((\\w+)\\s+(\\w+)\\s+(\\w+)\\s+(\\w+)\\s+(\\w+))\"\"\".r)\n        val r3\
    \ = new scala.util.matching.Regex(\"\"\"((\\w+)\\s+(\\w+))\"\"\".r)\n        val\
    \ result = new mutable.ArrayList[String]()\n        r.findAllIn(s).foreach(x =>\
    \ {\n            val y = x.group(5)\n            if (y == null) result.add(r2.findAllIn(x).toList)\n\
    \            else result.add(r3.findAllIn(x).toList)\n        })\n        result",
  '        s.split("\\s*,\\s*").toList', "        // Your code goes here\n       \
    \ return null", "        val words = s.split(\" \", -1).filter(_.nonEmpty)\n \
    \       if (words.isEmpty) List(\"\")\n        else words.map(_.trim.toLowerCase\
    \ + \",\")", "      val (s1,s2) = s.split(\" \\\\,\\\\s*\")\n      s1.split(\"\
    \ \").map(_.toLowerCase).toList ++ s2.split(\" \").map(_.toLowerCase).toList",
  "        var lst : List[String] = List()\n        var words = s.split(\"[\\\\s,]+\"\
    ).filter(!_.isEmpty)\n        words = words.dropWhile(_.isEmpty)\n        while\
    \ (words.length > 0){\n            lst = lst :+ words.last\n            words\
    \ = words.drop(words.length-1)\n        }\n        return lst", "        def wordsString(s\
    \ : String) : List[String] = {\n            var ls = \"\"\n            for (i\
    \ <- 0 to (s.length - 1)) {\n                if (s.charAt(i) == ',' || s.charAt(i)\
    \ == ' ') {\n                    ls = ls + s.charAt(i)\n                }\n  \
    \          }\n            ls.replace(\",\", \"\").replace(\",\", \"\").split(\"\
    \ \")\n        }\n        val list = wordsString(s)\n        list.sortWith((a,b)\
    \ => a.compareTo(b) == 0)", "        val words = s.split(\"\"\"[, ]+\"\"\")\n\
    \        words.toList.filterNot(_.isEmpty)", "        val words = s.split(\",\"\
    ).toList\n        val wordsArray = words.toArray\n        var wordsArraySorted\
    \ = wordsArray\n        var wordsArraySortedLength = wordsArray.length\n     \
    \   while(wordsArraySortedLength > 1) {\n            wordsArraySorted = wordsArray.sortBy(_)\n\
    \            wordsArraySortedLength = wordsArraySorted.length\n        }\n   \
    \     wordsArraySorted", "        // Your code goes here!\n        val list =\
    \ s.split(\" \").filter(x => !x.isEmpty).map(x => x.trim())\n        list.sortWith((a,\
    \ b) => a.length < b.length)\n        list", "        val list = new mutable.ListBuffer[String]\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) != ',' && s.charAt(i)\
    \ != ' ')\n                list += s.charAt(i)\n        }\n        list.toList",
  "        val list = s.split(\",\")\n        var i = 0\n        val ans = List[String]()\n\
    \        while (i < list.length) {\n            ans ::: if (list(i).isEmpty) Nil\
    \ else list(i).split(\", \")\n            i += 1\n        }\n        ans", '        s.split(",").toList',
  "        var strs = s.split(\",\")\n        var words = new mutable.ListBuffer[String]\n\
    \        for (x <- strs){\n            var parts = x.split(\", \")\n         \
    \   val words = parts.toList\n            for (y <- words){\n                words\
    \ += y\n            }\n        }\n        return words.toList", "        // Split\
    \ on space, then split on comma\n        s.split(\"\\\\s+\").map(_.split(\"\\\\\
    s*,\\\\s*\"))", "        val splits = s.split(\",\")\n        var i = 0\n    \
    \    val words = new collection.mutable.ListBuffer[String]\n        while(i <\
    \ splits.length){\n            val split = splits(i)\n            if(split.isEmpty)\
    \ break\n            words.append(split)\n            i += 1\n        }\n    \
    \    words.toList", '        s.replace(","," ").split(" ").toList', '        //
    Complete the implementation here.', "        val words = s.split(\", | \")\n \
    \       val list = mutable.ListBuffer[String]()\n        words.foreach(x => list\
    \ += x.trim())\n        list.toList", "        val words = s.split(\" |,\")\n\
    \        words.toList", "        val words = s.split(\" \").toList\n        var\
    \ list: List[String] = Nil\n        for (word <- words)\n        {\n         \
    \   if (list.isEmpty)\n            {\n                list = List(word)\n    \
    \        }\n            else\n            {\n                list = list.reverse::List(word)\n\
    \            }\n        }\n        list.tail", "        val split = s.split(\"\
    , | \")\n        split.toList", "        if (s.isEmpty)\n            Nil\n   \
    \     else s.split(',').toList", "        val ws = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        var word = \"\"\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                word += c\n            }\n            else if (word.length\
    \ > 0) {\n                ws += word\n                word = \"\"\n          \
    \  }\n        }\n        if (word.length > 0) {\n            ws += word\n    \
    \    }\n        ws.toList", "        def splitString(s: String) : List[String]\
    \ = {\n            val words = s.split(\",\")\n            words.tail.map(_.trim).toList\n\
    \        }\n        if (s == \"\")\n            Nil\n        else\n          \
    \  splitString(s).toList", "        // Your code here\n        val words = s.split(\
    \ \",\" ).toList\n        val words2 = words.filter( _.length() != 0 )\n     \
    \   val words3 = words2.map(_.split(\" \" ))\n        words3", "        var res\
    \ : List[String] = Nil\n        var splitted = s.split(\",\")\n        for(i <-\
    \ 0 until splitted.length) {\n            res = res :+ splitted[i]\n        }\n\
    \        return res", "        val words = s.trim.replace(\",\", \" \").split(\"\
    \ \").toList\n        words.filter(_.nonEmpty)", "        val list = mutable.ArrayBuffer.empty[String]\n\
    \        for(i <- 0 to s.length - 1 by 1) {\n            val next = s.substring(i)\n\
    \            list.append (next)\n        }\n        list.toList", "        val\
    \ words: List[String] = s.split(\" +\")\n        words", "        val ws = s.split(\"\
    ,\").toList\n        val words = mutable.Buffer.empty[String]\n        for (h\
    \ <- 0 until w.size) {\n            for (w <- ws)\n                if (w.contains(ws(h)))\
    \ {\n                    words += w\n                }\n        }\n        words.size.toList",
  "        val words = s.split(\", | | \").toList\n        val wordsString: List[String]\
    \ = words.map( _.trim )\n        return wordsString", "        val list = new\
    \ mutable.ListBuffer[String]()\n        // Split string on space or comma to get\
    \ the individual words.\n        s.split(\"[\\\\s,]+\").foreach(list+=_)\n   \
    \     list.toList", "        val words = s.toLowerCase split \",\"\n        words.toList\
    \ filter (_.length > 0)", "        val split = s.split(\"\\\\s*,\\\\s*\")\n  \
    \      split.map (_.trim.split(\" \")).toList", "        var wlst : List[String]\
    \ = Nil\n        for(i <- 0 until s.length-1) {\n            if(s.charAt(i) ==\
    \ ','){\n                wlst = wlst.::(s.substring(0,i))\n            }\n   \
    \     }\n        if(s.length == 0)\n            wlst = Nil\n        wlst", " \
    \       var strings = List.empty[String]\n        strings.toList match {\n   \
    \         case Nil => strings.toList\n            case x => strings.toList + x\n\
    \        }", "        val list = s.split(\"\\\\W+\")\n        list.filter(_.nonEmpty)",
  "        val tokens = s.split(\",\")\n        val newTokens = tokens.map( _.trim()\
    \ )\n        var list: List[String] = Nil\n        val newTokensLength = newTokens.size\n\
    \        newTokens.foreach{item =>\n          list = list :+ item\n        }\n\
    \        if (newTokensLength == list.length)\n          list\n        else\n \
    \         println(s\"Invalid input: ${list.size} != ${newTokensLength}\")", " \
    \       if (s.length == 0)\n            Nil\n        else\n        { \n      \
    \      val splits = s.split(\" \")\n            val words = splits.map(s => s.trim)\n\
    \            if (words.isEmpty)\n                Nil\n            else\n     \
    \       { \n                words.head :: wordsString(words.tail)\n          \
    \  }\n        }", "        val words = s.split(\",\")\n        words.toList match\
    \ {\n            case Nil => Nil\n            case _ => words.toList.flatMap(word\
    \ => List(word.trim))\n        }", "        val sSplit = s.split(\"\"\"[\\s,]+\"\
    \"\")\n        var res: List[String] = List()\n        for (i <- 0 until sSplit.size)\
    \ {\n            val words = sSplit.get(i).split(\"\"\"[\\\\s,]+\"\"\")\n    \
    \        val resList = words.foldLeft[List[String]](List(\"\")){ (resList, word)\
    \ =>\n                if (word != \"\") {\n                    word :: resList\n\
    \                } else {\n                    resList\n                }\n  \
    \          }\n            res = res ++ resList\n        }\n        return res",
  "        val splitedString = s.split(\", \")\n        val splitedWords = splitedString.map(_.split(\"\
    \ \"))\n        val listOfWords = splitedWords.map(word => word.mkString.trim).toList\n\
    \        return listOfWords", "        def getWords(s : String) : List[String]\
    \ = { \n            if (s.isEmpty) Nil\n            else (s split (\" \")).filter(_.nonEmpty).toList\n\
    \        }\n        val wordList : List[String] = getWords(s)\n        var lastString\
    \ : String = \"\"\n        wordList.foreach {\n            case word : String\
    \ => lastString = word\n            case word : List[String] => {\n          \
    \      val newWords : List[String] = word map { word =>\n                    if\
    \ (lastString.length > 0) s\"$lastString,$word\" else word\n                }\n\
    \                lastString = \"\"\n                newWords.foreach(lastString\
    \ += _)\n            }\n        }\n        lastString", "        val words = new\
    \ mutable.ListBuffer[String]()\n        val words = s.split(\",\")\n        for\
    \ (w <- words) words += w.trim\n        words.toList", "        var words = s.split(\"\
    \ +\");\n        var res = [];\n        for (i <- 0 until words.length)\n    \
    \        res ::= words(i);\n        res", "        val list: List[String] = s.split(/,|\
    \ /)\n        return list", "        val list = s.replaceAll(\",\", \"\").replaceAll(\"\
    \\\\s+\", \" \")\n        return list.split(\",\").toList", "        def isNotEmpty(str\
    \ : String) : Boolean = str.length > 0\n        def splitter(str : String) : List[String]\
    \ = {\n            def splitter(str : String) : List[String] = {\n           \
    \     val str1 = str.trim\n                if (str1.length == 0) List(\"Empty\"\
    )\n                else {\n                    var str2 = str1.substring(0, str1.length\
    \ - 1)\n                    if (str2.startsWith(\",\")) str2.split(\",\").map(splitter)\n\
    \                    else if (str2.startsWith(\" \")) str2.split(\" \").map(splitter)\n\
    \                    else List(str2)\n                }\n            }\n     \
    \       splitter(str)\n        }\n        splitter(s).filter(isNotEmpty).toList",
  '        // Your code here', "        def wordList(n:Int) : List[String] = {\n \
    \           var l : List[String] = List()\n            for (i<-0 until n) {\n\
    \                l ::= s(i).split(\", \")\n            }\n            l\n    \
    \    }\n        wordList(s.length)", "    \tvar str = s.replace(\",\",\" \")\n\
    \    \tvar list = str.split(\" \")\n    \tlist.map(_.trim).toList", "        val\
    \ word = s.split(\", \") \n        word.map(_.trim).filter(_.nonEmpty)", "   \
    \     var words: List[String] = List()\n        var word = \"\"\n        var inComma\
    \ = false\n        for (c <- s) {\n            if (c == ',' && !inComma) {\n \
    \               words += word\n                word = \"\"\n                inComma\
    \ = false\n            } else {\n                word += c\n            }\n  \
    \      }\n        words += word\n        words.toList", "        val words = s.split(\"\
    \ \").toList\n        val wordsList = words.toIndexedSeq.sortBy(word => word.length).reverse\n\
    \        wordsList.map((word, index) => word.length -> word).toList", "      \
    \  val list = s.split(\",\")\n        return list.map(_.trim).toList", '        s.split("\\s*,\\s*".r).map(_.trim).toList',
  '        // Your code here!', "        val w = s.split(\"[,\\s]+\").filter(_.nonEmpty).toList\n\
    \        val v0 = mutable.HashMap[String, String]()\n        w.map(word => v0\
    \ += word -> word)\n        return v0.toList.distinct", "        val words = s.replaceAll(\"\
    ,\", \" \").trim().split(\"\\\\s+\")\n        val wordList = words.map(_.toLowerCase).toList\n\
    \        wordList", "        // Your code goes here\n        val list = s.split(\"\
    ,\")\n        list.map{\n            s => s.trim\n        }", "        var lst\
    \ = s.split(\",\")\n        lst = lst.map(_.trim).filter(_.length > 0)\n     \
    \   lst", "        val strings = s.split(\"\"\"\\s*,\\s*|\\s+\"\"\")\n       \
    \ strings.map(word => word.replaceAll(\"[^\\\\w]\", \"\").toLowerCase)", "   \
    \     var result : List[String] = Nil\n        var tmp : List[String] = Nil\n\
    \        s.split(',').foreach(x => {\n            tmp ::= x.trim\n        })\n\
    \        tmp.foreach(x => {\n            result ::= x.toUpperCase\n        })\n\
    \        result.reverse", "        def words(s: String) : List[String] = {\n \
    \           val split = s.split(\", | \\\\s+\")\n            split.filter(_.nonEmpty).map(_.trim.toLowerCase).toList\n\
    \        }\n        words(s)", "        def isWhitespace(i: Int) : Boolean = i\
    \ >= s.length or s(i) == '\\n' || s(i) == ' '\n        def getWords(s : String,\
    \ words: List[String], word = \"\", i : Int = 0, j : Int = s.length) : List[String]\
    \ = {\n            if (j < 0) word\n            else if (isWhitespace(i)) getWords(s,\
    \ words, word, i, j)\n            else if (s(i) == ',' || s(i) == ' ') getWords(s,\
    \ words, word, i, j)\n            else words match {\n                case Nil\
    \ => Nil\n                case ws :: wss => getWords(s, wss, w :: w, i + 1, j\
    \ - 1)\n            }\n        }\n        getWords(s, Nil)", '        // Your
    code here', "        def wordList(s: String) : List[String] = if(s.contains(\"\
    ,\")) s.split(\",\") else s.split(\" \")\n        val list = wordList(s)\n   \
    \     list.map(_.trim)", "        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.reverse", "        val split = s.split(\",\")\n        var words1\
    \ = split.map(_.trim).toSet\n        var words2 = split.filter(_.isEmpty).map(_.trim).toSet\n\
    \        val words3 = split.filter(_.isEmpty).map(_.trim).toSet\n        val words4\
    \ = (split.map {\n            x => if (x.trim.isEmpty) x else x.trim\n       \
    \ }).toSet\n        var words5 = split.map(_.trim).toSet\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(", "        // Complete the code here\n\
    \        s.split(\" \").filter(!_.isEmpty).toList", "        val wordsSplit =\
    \ s.split(\",\")\n        val wordsStrings: List[String] = wordsSplit.map(_.trim).toList\n\
    \        wordsStrings.toList.sorted", "        def wordsString(s : String) : List[String]\
    \ = {\n            var words: List[String] = List()\n            \n          \
    \  var tempString = \"\"\n            \n            for(letter <- s) {\n     \
    \           if(letter == \",\" || letter == \" \") {\n                    if(tempString\
    \ != \"\") {\n                        words += tempString\n                  \
    \      tempString = \"\"\n                    }\n                } else {\n  \
    \                  tempString += letter\n                }\n            }\n  \
    \          if(tempString != \"\") {\n                words += tempString\n   \
    \         }\n            \n            return words\n        }", "        // Split\
    \ string into a list of strings using a delimiter (,, or space)\n        s.split(\"\
    ,\").toList.map(_.trim).toList", "        val words = s.split(\"[, ]+\")\n   \
    \     val wordsRevised = words.map( w => w.replaceAll(\"[^a-zA-Z ]\", \"\") )\n\
    \        val filteredWords = wordsRevised.filterNot(_.isEmpty)\n        val wordsArray\
    \ = filteredWords.toArray\n        wordsArray.mkString(\", \")", "        val\
    \ words = s.trim.split(\"[, ]+\")\n        words.filter(!_.isEmpty)", "      \
    \  val words : List[String] = new mutable.ListBuffer[String]\n        var word\
    \ = \"\"\n        var i = -1\n        while (i < s.length) {\n            if (s.charAt(i)\
    \ == ' ') {\n                word += s.charAt(i+1)\n                words += word\n\
    \                word = \"\"\n                i += 1\n            } else {\n \
    \               word += s.charAt(i)\n                i += 1\n            }\n \
    \       }\n        words += word\n        words.toList", "      val words = s.split(\"\
    \"\"\\W+\"\"\")\n      words.toList", "        // Return the empty list\n    \
    \    if (s.isEmpty) Nil\n        // Split the string into words\n        else\
    \ s.toLowerCase().split(\", \") toList map (_.trim())", "       val words = s.split(\"\
    ,\").toList\n       val list: List[String] = words.map(x => x.split(\" \").mkString)\n\
    \       return list", "        val words = new Array[String](s.length)\n     \
    \   var i = 0\n        while (i < s.length()) {\n            var j = i + 1\n \
    \           while (j < s.length()) {\n                if (j != i + 1) {\n    \
    \                if (s.charAt(i) == ',' || s.charAt(i) == ' ') {\n           \
    \             words(j - 2) = s.substring(i, j + 1)\n                        i\
    \ = j\n                        break\n                    }\n                }\n\
    \                j += 1\n            }\n        }\n        words", "        var\
    \ result: List[String] = Nil\n        var currentWord = \"\"\n        for (i <-\
    \ 0 to s.length() - 1) {\n            if (s(i) == \",\" || s(i) == \" \") {\n\
    \                currentWord += s(i)\n                result += currentWord.trim().split(\"\
    \\\\s+\").filterNot(_.isEmpty).toList\n                currentWord = \"\"\n  \
    \          }\n            else {\n                currentWord += s(i)\n      \
    \      }\n        }\n        result += currentWord.trim().split(\"\\\\s+\").filterNot(_.isEmpty).toList\n\
    \        return result", "        val words = s.toLowerCase.split(\", \");\n \
    \       val arr = new mutable.ArrayList[String](words.length)\n        for(i<-\
    \ 0 until words.length){\n            arr(i) = words(i).toLowerCase;\n       \
    \ }\n        return arr;", "        val list = s.split(\",\")\n        list.map(_.trim).toList",
  "        var strs = s.split(\",\")\n        var ans = mutable.ListBuffer[String]()\n\
    \        for( i <- 0 until strs.length ) {\n            ans += strs(i)\n     \
    \   }\n        return ans.toList", "        // TODO: Define wordsString function\n\
    \        return List[String]()", '        // TODO: complete this method', "  \
    \      val list = s.split(\" \").filter(_.nonEmpty)\n        list.map(_.capitalize).filter(_.length<2)",
  "        // Complete the code!\n        val words = s.split(\", \").flatMap { w\
    \ => w.split(\", \") }\n        words.toList", "        val wordsArray = s.split(\"\
    , | ,| \").toList\n        val wordsList = wordsArray.map(word => word.trim.replaceAll(\"\
    \\\\s+\",\"\").toLowerCase)\n        return wordsList", "        var result :\
    \ List[String] = Nil\n        s.split( \",\" ).foreach( x => { result += x.split(\
    \ \" \" ) } )\n        result", "        //Split it into words\n        val words\
    \ = s.split(\",\")\n        //Remove commas if present\n        val newWords =\
    \ for (word <- words) yield word.trim\n        //Return result\n        newWords",
  '      // TODO - Implement your logic here', "        var result : List[String]\
    \ = List()\n        for(i <- s.toCharArray) {\n            if(i > ' ') {\n   \
    \             result += List(i)\n            }\n        }\n        return result",
  "        val wordsString = s.replaceAll(\",\", \" \").trim()\n        val words\
    \ = wordsString.split(\" \")\n        words.toList", "        var wordsStr : List[String]\
    \ = Nil\n        var words : List[String] = Nil\n        var wordIndex = 0\n \
    \       var i : Int = -1\n        while ( (i = s.indexOf(\",\", wordIndex)) >=\
    \ 0) {\n            val wordStr = s.substring(wordIndex, i+1)\n            if\
    \ (words.isEmpty) {\n                words = List( wordStr ).filter(_.nonEmpty)\n\
    \            }\n            else {\n                words ::= List( wordStr ).filter(_.nonEmpty)\n\
    \            }\n            wordIndex = i+1\n        }\n        while ( (i = s.indexOf(\"\
    \ \", wordIndex)) >= 0) {\n            val wordStr = s.substring(wordIndex, i+1)\n\
    \            if (words.isEmpty) {\n                words = List( wordStr ).filter(_.nonEmpty)\n\
    \            }\n            else {\n                words ::= List( wordStr ).filter(_.nonEmpty)\n\
    \            }\n            wordIndex = i+1\n        }\n        if (words.isEmpty)\
    \ {\n            words = Nil\n        }\n        else {\n            wordsStr\
    \ ::= words\n        }\n        return wordsStr", "        val strs = s.split(\"\
    ,\")\n        strs.toList.map(_.split(\" \"))", "        var words = s.split(\"\
    ,\")\n        val list = new mutable.ListBuffer[String]\n        for (i<-0 until\
    \ words.length){\n            val tempString = words.apply(i)\n            list.add(tempString)\n\
    \        }\n        list.mkString", "        // Your code goes here\n        val\
    \ lst = s.split(\",\").toList\n        lst.headOption.map( _.split(\"\\\\s+\"\
    ) ).map( x => x.toList ).toList", "        val words = s.split(\", \")\n     \
    \   val l = new mutable.ListBuffer[String]()\n        for (w <- words) {\n   \
    \         val words = w.split(\"\\\\s+\")\n            l += words\n        }\n\
    \        l.toList", "        if (s.length == 0) Nil\n        else {\n        \
    \    val (words, rest) = s.split(\", \", -1);\n            words.toList.dropWhile(_.isEmpty)\
    \ ++ wordsString(rest)\n        }", '        s.toList.split("\\s*,\\s*").toList',
  "        val words : List[String] = s.split(\",\").toList\n        var w: List[String]\
    \ = Nil\n        var c : Int = 0\n        var i : Int = 0\n        while ( i <\
    \ words.length ) {\n            if ( words(i) != \"\" ) {\n                if\
    \ ( w == Nil ) {\n                    w = List(words(i))\n                   \
    \ c += 1\n                }\n                else {\n                    w ::=\
    \ List(words(i))\n                    c += 1\n                }\n            }\n\
    \            i += 1\n        }\n        if ( words.length > c ) {\n          \
    \  w = w.take(c)\n        }\n        return w", "        val result = new mutable.ListBuffer[String]\n\
    \        val words = s.split(\",\")\n        for (word <- words) {\n         \
    \   result.append(word)\n        }\n        return result.toList", "        val\
    \ ls = s.split(\", \")\n        val l1 = ls.foldLeft[List[String]](List())( (l1,l)\
    \ => l1 :+ l(0))\n        l1", "        val words: List[String] = s.split(\",\"\
    )\n        words.map( _.trim).filter( _.nonEmpty)", "        val splitStr = s.split(\"\
    \ \")\n        val result = new mutable.MutableList[String]()\n        splitStr.foreach(e\
    \ => result += e)\n        result.toList", "        val s = \"\"\n        val\
    \ ls = s.split(\",\").toList\n        ls.map(word => word + s.substring(1))",
  "        val list = new ListBuffer[String]()\n        var currentWord = \"\"\n \
    \       var currentChar = s.charAt(0)\n        while (currentChar != ',') {\n\
    \            if (currentChar == ' ' || currentChar == '\\t') {\n             \
    \   if (currentWord != \"\") {\n                    list += currentWord\n    \
    \                currentWord = \"\"\n                }\n            } else {\n\
    \                currentWord += currentChar\n            }\n            currentChar\
    \ = s.charAt(1)\n        }\n        list += currentWord\n        list.filter(_.isAlpha).toList",
  "        if(s == null) Nil\n        else s.split(\", \").map(_.trim).toList", '        //
    Write your code here', "        val list = s.replace(\",\",\" \").split(\" \"\
    )\n        val list2 = list.foldLeft(List[String]())((x, y) => x :: y :: Nil)\n\
    \        list2.toList", "        val strings = s.replaceAll(\"\\\\s\", \"\").split(\"\
    ,\")\n        strings.map(_.trim).filter(_.nonEmpty).toList", '        s.split("
    ").map(w => w.split("[,\\s]")).flatten', "      val words =\n        if (s.isEmpty)\
    \ Nil\n        else s.split(\"[, ]+\".r).toList\n      val mutableWords = mutable.ArrayBuffer.empty[String]\n\
    \      for (word <- words) mutableWords += word\n      mutableWords", "      \
    \  if(s.isEmpty) return Nil\n        val a = s.split(\", \").toList\n        var\
    \ l = Nil\n        for(str <- a){ l = l::splitWords(str) }\n        l", "    \
    \    val words = s.split(\",\\\\s+\").toList\n        var newList: List[String]\
    \ = Nil\n        for(i <- 0 until words.length){\n            newList = newList\
    \ ::: words(i)\n        }\n        newList", "        var output : List[String]\
    \ = List()\n        for( a <- s.toCharArray )\n            if( Character.isLetter(a)\
    \ || Character.isDigit(a) )\n                output = output :+ a\n        return\
    \ output.toList", "        val split = s.split(\", \") //Split using commas\n\
    \        val wordsSplit = split.map(_.trim) //trim leading and trailing spaces\n\
    \        return wordsSplit", '        s.split("""\W+""")', "        val l = s.split(\"\
    ,\")\n        val result = new mutable.ListBuffer[String]\n        for (x <- l)\n\
    \            result.append(x)\n        result.toList", "        val splits = s.trim().split(\"\
    [, ]+\");\n        if (splits.size == 0) List(\"\")\n        else {\n        \
    \    var list: List[String] = List(splits.head);\n            for (var i = 1 ;\
    \ i < splits.size ; i++) {\n                var split = splits(i);\n         \
    \       if (split.endsWith(\",\")) {\n                    list = list.head ::\
    \ splits(i).split(\",\").toList;\n                } else if (split.endsWith(\"\
    .\")) {\n                    list = list.head :: splits(i).split(\".\").toList;\n\
    \                } else {\n                    list = list.head :: splits(i).toList;\n\
    \                }\n            }\n        }", "        if(s.length == 0) {\n\
    \          List[String]()\n        } else {\n          var tempWords = Array[String]()\n\
    \          var startIndex = 0\n          var endIndex = 0\n          var i : Int\
    \ = 0\n          while(i<s.length()) {\n              if(s.charAt(i) == ',' ||\
    \ s.charAt(i) == ' ') {\n                  endIndex = i + 1\n                \
    \  tempWords = tempWords :+ s.substring(startIndex, endIndex)\n              \
    \    startIndex = i + 1\n              } else {\n                i += 1\n    \
    \          }\n          }\n          if(tempWords.isEmpty) {\n            tempWords\
    \ = Array(s.substring(startIndex, s.length))\n          }\n          tempWords\n\
    \        }", "        var listOfWords = ListBuffer[String]()\n        var word\
    \ = \"\"\n        var wordWithComma = \"\"\n        var inQuotes = false\n   \
    \     for( i <- 0 until s.length ) {\n            if( !inQuotes ) {\n        \
    \        if( s.charAt(i) == ',' ) {\n                    listOfWords += wordWithComma\n\
    \                    wordWithComma = \"\"\n                } else {\n        \
    \            word += s.charAt(i)\n                }\n            } else {\n  \
    \              word += s.charAt(i)\n                if( s.charAt(i) == '\"' )\
    \ {\n                    inQuotes = false\n                    wordWithComma +=\
    \ word\n                    listOfWords += wordWithComma\n                   \
    \ word = \"\"\n                }\n            }\n        }\n        wordWithComma\
    \ += word\n        listOfWords += wordWithComma\n        listOfWords.toList"]
stop_tokens:
- "\n    }\n"
