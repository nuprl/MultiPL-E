name: HumanEval_36_fizz_buzz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the number of times the digit 7 appears in integers less than n which\
  \ are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>>\
  \ fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def\
  \ fizzBuzz(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) ==\
  \ (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
  \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
  \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
  \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
completions: ["        // Make list of digits in n.\n        val digits = n.toString.reverse.foldLeft(List[String]())((a,b)\
    \ => a ++ \"0123456789\".substring(b,b+1))\n        // Find the first 7 digit\
    \ number that is divisible by 11 or 13.\n        val first7 = digits.indexOf(\"\
    7\")\n        // Count how many times 7 appears in numbers less than n.\n    \
    \    digits.count(_ == \"7\") - first7", "        // Return n if n evenly divides\
    \ by 11 or 13, otherwise return n+1\n        if (n / 11 == 0 || n / 13 == 0)\n\
    \            return n\n        else\n            return n + 1", "        // Add\
    \ 1 for each number divisible by 11 or 13\n        var result = 1\n        val\
    \ listOfNs = List(n%11, n%13)\n        for(ns <- listOfNs) {\n            if(ns\
    \ % 11 == 0 && ns % 13 == 0) {\n                result += 1\n            } else\
    \ if(ns % 11 == 0) {\n                result += 1\n            } else if(ns %\
    \ 13 == 0) {\n                result += 1\n            }\n        }\n        result",
  "        var sum : Long = 0\n        var mod : Long = n % 11\n        var mod :\
    \ Long = mod + 13\n\n        if(mod == 11 || mod == 13) {\n            sum +=\
    \ 1\n        }\n\n        var x = 1\n        while(n >= x) {\n            n /=\
    \ x\n            x += 1\n            sum += x\n        }\n\n        sum", "  \
    \      if (n <= 0) 0\n        if (n % 11 == 0 || n % 13 == 0) n\n        else\
    \ fizzBuzz(n/11) + fizzBuzz(n/13)", "        val counts = mutable.LinkedHashMap[Int,\
    \ Int]()\n        for (i <- 0 until n) {\n            if (i % 11 == 0) counts.update(i,1)\n\
    \            else if (i % 13 == 0) counts.update(i,1)\n            else\n    \
    \            counts.getOrElse(i,0)\n        }\n        counts.values.toList.max",
  "        val fives = n / 5l\n        val threes = n - fives * 5l\n\n        if (fives\
    \ == 0) fives else if (fives == 1l) 7l else if (fives == 2l) 8l else if (fives\
    \ == 3l) 9l else if (fives == 4l) 10l else if (fives == 5l) 11l else 13l\n   \
    \     if (threes == 0) threes else if (threes == 1l) 7l else if (threes == 2l)\
    \ 8l else if (threes == 3l) 9l else if (threes == 4l) 10l else if (threes == 5l)\
    \ 11l else 13l", "        var sum = 0\n        for (i <- 0 until n) { \n     \
    \       if (i % 11 == 0 || i % 13 == 0) {\n                sum += 1;\n       \
    \     } else {\n                sum = 0;\n            }\n        }\n        return\
    \ sum;", "        val digits = div(n, n).toInt\n        if (digits < 1) 0\n  \
    \      else (digits - 1) * (digits + 1) / 2", "        var count = 0\n       \
    \ if (n % 11 == 0) count += 1\n        if (n % 13 == 0) count += 1\n        if\
    \ (count == 0) count += 1;\n        return count", "        // Get the digits\
    \ of the number in string\n        var str : String = n.toString\n        var\
    \ result : Long = 0\n        for (i <- 0 until str.length) {\n            if (str.charAt(i)\
    \ == '7') {\n                result = result + 1\n            }\n        }\n \
    \       result", '        (n % 11 == 0 && n % 13 == 0) || (n % 11 != 0 && n %
    13 != 0) ? (0 : (n / 11) + 1) : (n / 13)', "        val count = mutable.HashSet[Long]()\n\
    \        val digits = (1l).until(n)\n        for( n <- digits ){\n           \
    \ if( n % 11 == 0 || n % 13 == 0 ){\n                count += n\n            }\n\
    \        }\n        count.size", "        val nums = mutable.Set[Long]()\n   \
    \     while(n > 0) {\n            if(n % 11 == 0) nums.add(11L);\n           \
    \ if(n % 13 == 0) nums.add(13L);\n            n /= 10\n        }\n        nums.toSet.size ",
  "        var cnt = 0\n        for (i <- 0 until n) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                cnt += 1\n            }\n        }\n  \
    \      cnt", "        var count = 0\n        var nStr = \"\" + n\n        var\
    \ i = nStr.length\n        while (i-- > -1) {\n            if (nStr.charAt(i)\
    \ == '7') {\n                count += 1\n            }\n        }\n        if\
    \ (n % 11 == 0 || n % 13 == 0) {\n            count += 1\n        }\n        count",
  "        if(n/11==0) (n/13==0l) ? n : fizzBuzz(n/11)\n        else if(n/13==0) (n/11==0l)\
    \ ? n : fizzBuzz(n/13)\n        else n : fizzBuzz(11*(n%11) + 13*(n%13))", " \
    \       val divisors: mutable.Set[Long] = mutable.Set[Long](11, 13)\n        val\
    \ digitsFizzbuzz: mutable.Set[Long] = mutable.Set[Long](1, 3, 7, 8, 9)\n     \
    \   val digitsBuzz: mutable.Set[Long] = mutable.Set[Long](1, 3, 7, 9)\n\n    \
    \    val remainder = n % divisors.last\n        val quotient = n / divisors.last\n\
    \n        if (remainder == 0) {\n            if (digitsFizzbuzz.contains(quotient))\
    \ {\n                return 1\n            } else if (digitsBuzz.contains(quotient))\
    \ {\n                return 3\n            }\n            return 0\n        }\n\
    \        if (remainder == 11) {\n            return 1 + fizzBuzz(quotient)\n \
    \       }\n        if (remainder == 13) {\n            return 1 + fizzBuzz(quotient)\n\
    \        }\n        return fizzBuzz(quotient)", "        var fizzBuzz = 0\n  \
    \      for (i <- 0 to n)\n            if (i%11 == 0) fizzBuzz += 1\n         \
    \   if (i%13 == 0) fizzBuzz += 1\n            fizzBuzz", "        val n0 = n.toInt\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \n        for (x<-0 until n0) {\n            val remainder = n % 10\n        \
    \    val digit = remainder % 11\n            if (digit != 0) {\n             \
    \   digits += digit\n            }\n            n /= 10\n        }\n        digits.foreach(x=>\
    \ nums += x)\n\n        if (nums.contains(7) && digits.contains(7)) {\n      \
    \      (1 + nums.indexOf(7) + digits.indexOf(7))\n        } else {\n         \
    \   nums.length\n        }", "        val b = scala.collection.mutable.Set[Long]()\n\
    \        for(i <- 0 until n){\n            if((i %% 13) == 0) b += i\n       \
    \     if((i %% 11) == 0) b += i\n        }\n        b.size", "        val count\
    \ = mutable.HashMap[Long, Long]()\n        var num : Long = 1\n        while (num\
    \ < n) {\n            if (isDivisibleBy11(num)) {\n                if (isDivisibleBy13(num))\
    \ {\n                    count += (num) -> 1\n                }\n            \
    \    num += 1\n            }\n            num += 1\n        }\n        count.size\
    \ + 1", "        val ns = new mutable.ListBuffer(n).filter(_%11==0 || _%13==0)\n\
    \        ns.toList.length", "        var count = 1\n        for (i<-0 to (n.toInt/11)-1)\
    \ {\n            count = count + (if (n%(11*i) == 0 || n%(13*i) == 0) 1 else 0)\n\
    \        }\n        count", "        // Create a mutable list of integers\n  \
    \      var intList = mutable.ListBuffer[Long]()\n        for (ii <- 1 to n) {\n\
    \            if (ii % 11 == 0 || ii % 13 == 0) {\n                intList += ii\n\
    \            }\n        }\n        // Return the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13\n        return intList.count(i\
    \ => i % 11 == 0 || i % 13 == 0)", "       val counters = mutable.Map[Int, Int]()\n\
    \       var counter : Int = 0\n       var remainder : Long = n\n       val max\
    \ = (n / 11l).toLong\n       val min = (n / 13l).toLong\n\n       while (remainder\
    \ >= min) {\n          if (remainder % 11 == 0 || remainder % 13 == 0) {\n   \
    \          counter = counter + 1\n             counters(remainder) = counter\n\
    \          }\n          remainder = (remainder - min) % 11\n       }\n       counters(7l)\
    \ = counter\n       counters.toList.foldLeft(0)(_ + _)", "        var result :\
    \ Long = 0\n        val digits = mutable.ArrayBuffer(7, 7, 7, 7, 7, 7, 7)\n  \
    \      var count = 1\n        val rem = n % 11\n        var x = 0\n        while\
    \ ((rem == 0) || (rem == 7)) {\n            if (rem = 0) x = x + 1\n         \
    \   rem = n % 10\n            digits(x) = (rem % 10)\n            n = n / 10\n\
    \            count = (count) + 1\n        }\n        while (n != 0) {\n      \
    \      if (n % 11 != 7) {\n                digits(count) = (n % 10)\n        \
    \    }\n            n = n / 10\n            count = (count) + 1\n        }\n \
    \       if (digits.exists(_ == 7))\n            result = (digits.indexOf(7) *\
    \ count) + 1\n        return result", "        var nFizz : Long = 0\n        var\
    \ nBuzz : Long = 0\n        var nFizzBuzz : Long = 0\n        var nNil : Long\
    \ = 0\n        for(i <- 0 to n.toInt) {\n            if(i % 13 == 0 && i % 11\
    \ == 0){\n                nBuzz += 1\n            } else if(i % 11 == 0){\n  \
    \              nFizz += 1\n            } else if(i % 13 == 0){\n             \
    \   nFizzBuzz += 1\n            } else if(i % 11 != 0 && i % 13 != 0){\n     \
    \           nNil += 1\n            }\n        }\n        (nFizz + nBuzz + nFizzBuzz\
    \ + nNil)", "      val count = new collection.mutable.HashMap[Long, Int]()\n \
    \     for (i <- n.toString.reverseIterator.dropWhile(_ < '0').takeWhile(_ < '9'))\
    \ {\n        if (i.toString.length == 1) {\n          if (count((i.toInt - '0')\
    \ % 11) == 0) { count.update((i.toInt - '0') % 11, 0 + 1) }\n          if (count((i.toInt\
    \ - '0') % 13) == 0) { count.update((i.toInt - '0') % 13, 0 + 1) }\n        }\n\
    \        else if (i.toString.length == 2) {\n          if (count((i.toInt - '0')\
    \ % 11) == 0) { count.update((i.toInt - '0') % 11, 0 + 1) }\n        }\n     \
    \   else if (i.toString.length == 3) {\n          if (count((i.toInt - '0') %\
    \ 13) == 0) { count.update((i.toInt - '0') % 13, 0 + 1) }\n        }\n       \
    \ else if (i.toString.length == 4) {\n          if (count((i.toInt - '0') % 13)\
    \ == 0) { count.update((i.toInt - '0') % 13, 0 + 1) }\n        }\n      }\n  \
    \    count.values.sum", "        var count = 0\n        while (n < 100) {\n  \
    \          if ((n % 11) == 7 || (n % 13) == 7) {\n                count += 1\n\
    \            }\n            n /= 10\n        }\n        count", "        val num\
    \ = n.toInt\n        val remainder = num % 11\n        if (remainder == 0) num\n\
    \        else fizzBuzz(num / 11) + remainder", "        def isDivisibleBy11And13(i:\
    \ Long) : Boolean = {\n            val numAsString = i.toString\n            val\
    \ numAsInt = numAsString.toInt\n            return numAsInt % 11 == 0 || numAsInt\
    \ % 13 == 0;\n        }\n        val stringToInt = n.toString\n        val stringToIntArray\
    \ = stringToInt.toCharArray\n        stringToIntArray.filter(isDivisibleBy11And13).size",
  "        var count : Long = 0\n        // Loop through all numbers and check if\
    \ they are divisible by 11 or 13.\n        // Only increment count if digit 7\
    \ appears.\n        (1l..n).foreach { i =>\n            if (i.toString.toList.filter(_.isDigit).forall(_.toString.toList.contains(7)))\
    \ {\n                count += 1\n            }\n        }\n        count * (if\
    \ (n<10) 1 else 2)", "        val m = n % 11\n        val z = n % 13\n       \
    \ if (z == 0) m * 3\n        else m + (z * 3)", "        var count = 0\n     \
    \   for(i <- 0 until n) {\n            if (n % i == 0 || i == 11 || i == 13) {\n\
    \                count += 1\n            }\n        }\n        count + 1", " \
    \       val numOfDigitsLessThanN = Math.ceil(Math.log10(n))\n        val fizzBuzz\
    \ = for ( i <- 0 to numOfDigitsLessThanN) yield {\n            if (n % i == 0\
    \ || n % i == 3 || n % i == 5)\n                0\n            else if (i % 11\
    \ == 0)\n                1\n            else if (i % 13 == 0)\n              \
    \  2\n            else\n                0\n        }\n        fizzBuzz.foldLeft(0)((acc,\
    \ e) => acc + e)", "        val counts = new mutable.HashMap[Int, Int]()\n   \
    \     for {\n            i <- 0 until (n.toString.length % 3)\n        } counts(i)\
    \ = counts.getOrElse(i, 0) + 1\n        val results = counts.filter(_._2 == 7).toList.map(_._1)\n\
    \        val missing = 3 - results.size\n        results.mkString(\",\")", " \
    \     def isDividable(n: Long): Boolean = {\n        (n%11==0 || n%13==0)&&(n>0)\n\
    \      }\n      val counts = new mutable.HashMap[Int, Long]()\n      for (i <-\
    \ 0 until n) {\n        if (isDividable(i)) {\n          counts(i) += 1\n    \
    \    }\n      }\n      counts.size match {\n        case 0 => 0\n        case\
    \ 1 => counts.getOrElse(0, 0) + 1\n        case _ => counts.getOrElse(0, 0) +\
    \ 1\n      }", "        val arr : Array[Long] = new Array[Long]\n        val ans\
    \ = mutable.ArrayBuffer(n) \n        val n2 = n.toInt\n        var i = 1\n   \
    \     while (i <= n2) {\n            arr :+= i\n            i = i +  11\n    \
    \    }\n        val sum = 0\n        for(i <- 0 until arr.length) {\n        \
    \    sum += arr(i)\n        }\n        var c = 7\n        var t = 0\n        for(i\
    \ <- 0 until arr.length) {\n            t = arr(i) mod 11\n            ans(sum\
    \ + c) += if (t == 7) 1 else 0\n            c += 1\n        }\n        ans.sum",
  "        var nMod11 = n % 11\n        var nMod13 = n % 13\n        var count = 0\n\
    \        if (nMod11 == 0 || nMod13 == 0) {\n            if (nMod11 == 0) {\n \
    \               count += 3\n            } else {\n                count += 1\n\
    \            }\n        }\n        if (nMod11 == 0 || nMod13 == 0) {\n       \
    \     if (nMod13 == 0) {\n                count += 3\n            } else {\n \
    \               count += 1\n            }\n        }\n        if (nMod11 == 0\
    \ || nMod13 == 0) {\n            if (nMod13 == 0) {\n                count +=\
    \ 3\n            } else {\n                count += 1\n            }\n       \
    \ }\n        n / 11 * 13 * count", "        var counter = 1\n        while (n\
    \ > 0) {\n            if ((n % 11) == 0) {\n                counter += 1\n   \
    \         }\n            if ((n % 13) == 0) {\n                counter += 1\n\
    \            }\n            n -= 1\n        }\n        return counter", "    \
    \    var count = 0\n        val num = n.toString.toInt\n        for (x <- 0 until\
    \ num) {\n            if (num % 11 == 0 && (num / 11) == 0) {\n              \
    \  count = count + 1\n            }\n            if (num % 13 == 0 && (num / 13)\
    \ == 0) {\n                count = count + 1\n            }\n        }\n     \
    \   count", "        var count = 0\n        var div = 11\n        var remain =\
    \ n % (div)\n        while (div <= n) {\n            div *= 11\n            count\
    \ += 1\n            remain /= div\n        }\n        count", "        var counts\
    \ : mutable.Map[Int, Int] = mutable.Map[Int, Int]();\n        // Iterate over\
    \ all numbers less than n\n        for (i <- 0 until n) {\n            // Check\
    \ if i is a multiple of 13\n            if (i % 13 == 0) {\n                counts\
    \ += (i -> 1)\n            } else {\n                // Check if i is a multiple\
    \ of 11\n                if (i % 11 == 0) {\n                    counts += (i\
    \ -> 2)\n                } else {\n                    counts += (i -> 0)\n  \
    \              }\n            }\n        }\n        // Return only the counts\
    \ of 7\n        counts", "        val m = n.toInt\n        var i = 0\n       \
    \ var count = 1\n        while (i <= m) {\n            if (i.toString.last.equals(\"\
    7\")) {\n                count += 1\n            } else {\n                if\
    \ (count == 3) {\n                    count = 0\n                }\n         \
    \   }\n            i += 1\n        }\n        count", "        val remainders\
    \ = new mutable.HashSet[Long]\n        (n.toInt/11).map(i => i match {\n     \
    \       case 0 => 0\n            case 1 => 1\n            case 2 => 2\n      \
    \      case _ => {\n                val r = n % 11\n                if (remainders\
    \ contains r) {\n                    remainders(r)\n                } else {\n\
    \                    remainders.add(r)\n                    fizzBuzz(n/11)\n \
    \               }\n            }\n        }).sum", "        var count = 0\n  \
    \      while (n % 11 == 0) {\n            n /= 11\n            count += 1\n  \
    \      }\n        while (n % 13 == 0) {\n            n /= 13\n            count\
    \ += 1\n        }\n        count", "        if (n < 13 || n % 11 == 0 || n % 13\
    \ == 0)\n            1\n        else\n            fizzBuzz(n - 13) + fizzBuzz(n\
    \ - 11)", "        val l = n.toInt\n        val digits = n.toString.toList\n \
    \       val count = mutable.HashMap[Int, Long]()\n        for (digit <- digits)\
    \ {\n            count += digit -> (l / 10 % 10 == digit) ? (l / 100 % 10 == digit)\
    \ ? (l / 1000 % 10 == digit) ? (l / 10000 % 10 == digit) ? (l / 100000 % 10 ==\
    \ digit) ? (l / 1000000 % 10 == digit) ? (l / 10000000 % 10 == digit) ? (l / 100000000\
    \ % 10 == digit) ? (l / 1000000000 % 10 == digit) ? 1 : 0 : 0 : 0\n        }\n\
    \        count(7)", "        val digits = n.toString.reverse\n        var count\
    \ = 0\n        for (digit <- digits) {\n            count = digit.toLong match\
    \ {\n                case 7 => count + 1\n                case _ => count\n  \
    \          }\n        }\n        count", "        val ans = n.toString.chars.toList.sliding(1).count(i\
    \ => i(0) == 7)\n        (ans * ((7l * ans.size + 1)/11)).toLong", "        val\
    \ digits = (n to n by -1).filter(x => x % 11 == 0 || x % 13 == 0)\n        val\
    \ count = mutable.HashMap.empty[Long, Int]\n        for((d, n) <- digits) count\
    \ += n -> (d.toInt * n).toInt\n        count.values.count(_ == 7) + count((n %\
    \ 11 * 13) + 7)", "        var count : Long = 0\n        var n : Long = n.toInt\n\
    \        for (i <- 0 until n)\n            if (i % 11 == 0) count = count + 1\n\
    \            else if (i % 13 == 0) count = count + 1\n            else count =\
    \ count + 1\n        \n        if (count == 0) 0 else count", "        val m =\
    \ n.toInt\n        if (m.mod(11) == 0 || m.mod(13) == 0) {\n            return\
    \ 1\n        }\n        var count = 0\n        val digits = m.toString.toCharArray\n\
    \        var index = 0\n        var lastDigit = digits.last\n        var check\
    \ = 0\n        while (index != digits.length) {\n            if (digits(index)\
    \ == lastDigit) {\n                count += 1\n            } else {\n        \
    \        check = 1\n            }\n            lastDigit = digits(index)\n   \
    \         index += 1\n        }\n        if (check == 0) {\n            return\
    \ count\n        } else {\n            return 0\n        }", "        var numCount\
    \ = 0\n        while(n > 0){\n            if(n%11 == 0 || n%13 == 0){\n      \
    \          numCount = numCount+1\n            }\n            n = n-1\n       \
    \ }\n        return numCount", "        var count = 0\n        if (n % 11 == 0)\n\
    \            count += 1\n        if (n % 13 == 0)\n            count += 1\n  \
    \      count", "        var count : Long = 0\n        for (i <- 1 until n) {\n\
    \            count += (i mod 11 == 0 || i mod 13 == 0) ? 1 : 0\n        }\n  \
    \      count", "        if (n >= 1000 && n <= 999999 && n % 11 == 0 || n % 13\
    \ == 0) {\n            1\n        } else {\n            fizzBuzz(n - 1l) + 1\n\
    \        }", "        var count = 0\n        for (i <- 0 until n by 11) {\n  \
    \          for (j <- 0 until i by 13) {\n                if (n % j == 0)\n   \
    \                 count += 1\n            }\n        }\n        count", "    \
    \    val res = \n            for(i <- 0 to n.toInt) yield {\n                val\
    \ n1 = n.toInt\n                val n2 = n.toInt * 3\n                val n3 =\
    \ n.toInt * 7\n                if (n1 % 11 == 0 && n1 % 13 == 0) {\n         \
    \           if (n2 % 11 == 0 && n2 % 13 == 0) {\n                        if (n3\
    \ % 11 == 0 && n3 % 13 == 0) {\n                            n\n              \
    \          } else {\n                            n3\n                        }\n\
    \                    } else {\n                        n2\n                  \
    \  }\n                } else {\n                    n1\n                }\n  \
    \          }\n        res.toList.length", "        var count = 0\n        val\
    \ numbers = mutable.Set[Long]()\n        while (n>0) {\n            numbers +=\
    \ n\n            n -= n % 11\n            if (n>0) {\n                n -= n %\
    \ 13\n                if (n>0)\n                    count += numbers.size\n  \
    \          }\n        }\n        count", "        val numbers = for {\n      \
    \      x <- n to 0 by -1\n            if x % 11 == 0 || x % 13 == 0\n        }\
    \ yield x\n        val count = numbers.count(_ match {\n            case 7   \
    \  => true\n            case _ => false\n        })\n        count", "       \
    \ var count = 0\n        n match {\n            case x if x % 11 == 0 | x % 13\
    \ == 0 => count += 1\n            case x => count\n        }\n        count",
  "      val counts = mutable.HashMap()\n      (1l to n).foreach(i => {\n        val\
    \ digit = i % 10\n        val value = counts.filter(_._1 == digit).getOrElse(digit,\
    \ 0) + 1\n        counts.put(digit, value)\n      })\n      (0 to 9).find(c =>\
    \ counts.getOrElse(c, 0) == 7).map(c => (n-c) * 3).sum + 1", "      var count\
    \ : Long = 0\n      var i = 0\n      while (i < n) {\n        if (i % 11 == 0)\
    \ count +=1\n        else if (i % 13 == 0) count +=1\n        i += 1\n      }\n\
    \      return count", "        val list = new mutable.ListBuffer[Int]()\n    \
    \    for(i <- 0 until (n)) list += (i%11==0 || i%13==0) ? i : i%11 == 0\n    \
    \    list.count(_.toString.toInt==7)", "        var count = 0\n        var remainder\
    \ = n % 11\n        while(n < 100) {\n            remainder = remainder + n %\
    \ 10\n            n = n/10\n            count = count + 1\n        }\n       \
    \ var remainder2 = remainder % 13\n        while(n < 100) {\n            remainder2\
    \ = remainder2 + n % 10\n            n = n/10\n            count = count + 1\n\
    \        }\n        remainder2 = remainder2 + remainder + count * 10\n       \
    \ if(remainder2 % 7 == 0) 1\n        else fizzBuzz(remainder2 - 7)", "       \
    \ val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        for(i <-\
    \ 0 until n) nums += (i/11)*(i%11) == 7\n        nums.filter(_.isDefined).length",
  "        // A function that returns the number of times digit 7 appears in numbers\
    \ less than n which are divisible by 11 or 13.\n        def fizzBuzzHelper(num\
    \ : Long) : Long = {\n            // The digits of the number. \n            def\
    \ digits = num.toString.map(_.toInt)\n            // The digit 7 appears in numbers\
    \ less than n which are divisible by 11 or 13. \n            def isBuzz(n: Long):\
    \ Boolean = n % 11 == 0 || n % 13 == 0\n            // The number of times digit\
    \ 7 appears in numbers less than n which are divisible by 11 or 13. \n       \
    \     def fizzBuzzRecurse(num: Long) : Long = {\n                // If the number\
    \ is divisible by 11, then there were exactly 1 times that digit 7. \n       \
    \         if (num % 11 == 0) 1\n                // If the number is not divisible\
    \ by 11, then there were at least two times that digit 7. \n                else\
    \ if (isBuzz(num)) 2\n                // Otherwise, the number has at least 3\
    \ times that digit 7. \n                else 3\n            }\n\n            //\
    \ The number has at least 3 times that digit 7. \n            fizzBuzzRecurse(n)\n\
    \        }\n\n        // The number of times the digit 7 appears in numbers less\
    \ than n which are divisible by 11 or 13. \n        fizzBuzzHelper(n)", "    \
    \    val counts = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n)\
    \ {\n            val isDivisibleBy11 = isDivisibleBy11(i)\n            val isDivisibleBy13\
    \ = isDivisibleBy13(i)\n            if (isDivisibleBy11 && !isDivisibleBy13) {\n\
    \                counts.put(i.toLong, 1)\n            }\n            if (!isDivisibleBy11\
    \ && isDivisibleBy13) {\n                counts.put(i.toLong, 1 + counts.getOrElse(i.toLong,\
    \ 0))\n            }\n            if (isDivisibleBy11 && isDivisibleBy13) {\n\
    \                counts.put(i.toLong, 1 + counts.getOrElse(i.toLong, 0))\n   \
    \         }\n        }\n        counts(7l).asInstanceOf[Long]", "      def isMultiple11(i\
    \ : Long) : Boolean = (i % 11 == 0)\n      def isMultiple13(i : Long) : Boolean\
    \ = (i % 13 == 0)\n\n      def countSeven(i : Long) : Long = {\n        var cnt\
    \ = 0\n        while (i != 0) {\n          i match {\n            case n if (n\
    \ % 11 == 0) => cnt += 1\n            case n if (n % 13 == 0) => cnt += 1\n  \
    \          case n => i -= 1\n          }\n        }\n        cnt\n      }\n\n\
    \      val isEven = n.toString match {\n        case i if (i.toString.length ==\
    \ 1) => \"0\" + i\n        case i => i\n      }\n      val isOdd = n.toString\
    \ match {\n        case i => i\n      }\n      val isMultiple11 = n.toString match\
    \ {\n        case i if i.toString.length == 1 => isMultiple11(i.toInt)\n     \
    \   case i => isMultiple11(parseInt((i / 11).toString.charAt(0))) *\n        \
    \          isMultiple11(parseInt((i / 13).toString.charAt(0)))\n      }\n    \
    \  val isMultiple13 = n.toString match {\n        case i if i.toString.length\
    \ == 1 => isMultiple13(i.toInt)\n        case i => isMultiple13(parseInt((i /\
    \ 13).toString.charAt(0))) *\n                  isMultiple13(parseInt((i / 11).toString.charAt(0)))\n\
    \      }\n      if (isEven) countSeven(n) else n.toString.toLong", "        val\
    \ result = mutable.Set.empty[Int]\n        val primes = mutable.Set(2, 3, 5, 7)\n\
    \        val three = scala.collection.mutable.Set(1, 11)\n        val four = scala.collection.mutable.Set(1,\
    \ 13)\n        var k = 0\n        while (k <= n) { \n            val d = n % k\n\
    \            if (d % 11 == 0) result = result + three\n            else if (d\
    \ % 13 == 0) result = result + four\n            else result = result + (d % 7)\n\
    \            k = k + k\n        }\n        result.size", "        val num = n\n\
    \        if (num == 0) 0 else (if (num % 11 == 0) 0 else (if (num % 13 == 0) 0\
    \ else num.toString.split('7').length)))", "        val n10 = n % 10\n       \
    \ if(n10 == 7) return 0\n        if(n10 == 9) return 1\n        if(n10 == 11 ||\
    \ n10 == 13) return 0\n        fizzBuzz(n / 10)", "        val numOf7 = 0\n  \
    \      val numOfDiv11 = 0\n        val numOfDiv13 = 0\n        for {\n       \
    \     i <- 0 until (n).toInt\n        } yield {\n            val mod10 = n % 10\n\
    \            if (mod10 == 7) {\n                numOf7 += 1\n            } else\
    \ if (mod10 == 11 || mod10 == 13) {\n                numOfDiv11 += 1\n       \
    \     } else {\n                numOfDiv13 += 1\n            }\n        }\n  \
    \      numOf7 * numOfDiv13 + numOfDiv11", "        def getDigit(n:Long, i:Int)\
    \ : Int = { if(i >= n) 0 else (n%10 + i%10) % 10 }\n        var n1 = getDigit(n,\
    \ 3)\n        var n2 = getDigit(n, 5)\n        var n3 = getDigit(n, 7)\n     \
    \   while(true) {\n            if((n1%11 == 0) || (n2%13 == 0) || (n3%11 == 0))\
    \ n3 = n3+1\n            else if((n1%11 == 0) || (n2%13 == 0)) n2 = n2+1\n   \
    \         else n1 = n1+1\n        }\n        n3", "        var total = 0\n   \
    \     var current = 0\n        while(current < n){\n            current = n %\
    \ 10\n            if(current == 7){\n                total += 1\n            }\n\
    \            n /= 10\n        }\n        total", "        val nums = collection.mutable.MutableList[Long]()\n\
    \        val fs = collection.mutable.MutableList[Long]()\n        var i = 0\n\
    \        while(i <= n ) {\n            nums += i\n            if(i % 11 == 0 ||\
    \ i % 13 == 0) {\n                fs += i\n            }\n            i += 1\n\
    \        }\n        val count = fs.length\n        val fz = fs.filter(x => x ==\
    \ 7l).length\n        val buzz = fz / count\n        return (buzz.toInt)", " \
    \       val buzz = 0\n        var count = 0\n        while (n < 0l) {\n      \
    \      buzz += n\n            n += 11l\n            count += n / 11l\n       \
    \     n -= 11l\n            count += n / 13l\n            n -= 13l\n         \
    \   count += n / 111l\n        }\n        count", "      var count = 0\n     \
    \ var num : Long = 0\n      var isDivisibleBy11Or13 = false\n      while(n < 10)\
    \ {\n        count += 1\n        num = n\n        if(num % 11 == 0 || num % 13\
    \ == 0) {\n          count -= 1\n          num /= 11\n          isDivisibleBy11Or13\
    \ = true\n        }\n      }\n      if(isDivisibleBy11Or13) {\n        count +=\
    \ 1\n      }\n      count", "        if (n < 100) 1\n        else if (n % 11 ==\
    \ 0) 1\n        else if (n % 13 == 0) 1\n        else 0", "        val m = scala.math.ModInt(n)\n\
    \        if (m % 11 == 0) 3\n        else if (m % 13 == 0) 2\n        else 1",
  "        def fizz(n: Int, remain: Long): Long = {\n            if (remain > 0 &&\
    \ remain < 11 || remain > 13) return 1\n            if (remain == 0) return 0\n\
    \            if (remain < 0 && n % 11 == 0 && n % 13 == 0) return 1\n        \
    \    if (remain < 0 && n % 11 != 0 && n % 13 != 0) return 0\n            if (remain\
    \ < 0 && n % 11 == 0 && n % 13 != 0) return 0\n            if (remain > 0 && remain\
    \ < 11 || remain > 13) return 0\n            if (remain > 0 && remain < 11 ||\
    \ remain > 13) return 0\n            fizz(remain / 10, remain % 10)\n        }\n\
    \        fizz(n, 0)", "        val n1 = n % 10\n        val n2 = n % 11\n    \
    \    val n3 = n % 13\n        if(n1 == 7 || n2 == 7 || n3 == 7)\n            n1\n\
    \        else\n            n", "        if (n == 0) 0\n        else if(n % 11\
    \ == 0 && n % 13 == 0)  1 + (fizzBuzz(n/11))\n        else if (n % 13 == 0) 1\
    \ + (fizzBuzz(n/13))\n        else if (n % 11 == 0) 1 + (fizzBuzz(n/11))\n   \
    \     else 0", "        var count : Long = 1\n        var i : Long = 1\n     \
    \   var sum : Long = 0\n        while (i <= n) { \n            if (i % 11 == 0){\
    \ \n                count += 1\n                sum = (sum + (n%11))\n       \
    \     } else if (i % 13 == 0) { \n                count += 1\n               \
    \ sum = (sum + (n%13))\n            } else if (i == 7){ \n                count\
    \ += 1\n            }\n            i = i + 1\n        }\n        return count",
  "        var count = 1\n        while ( n / 1000000000 % 11 == 0 || n / 1000000000\
    \ % 13 == 0 ){\n            count += 1\n            n /= 1000000000\n        }\n\
    \        return count", "        // initialize fizzBuzz count to zero\n      \
    \  var fizzBuzzCount = 0.0\n        // loop from zero to n incrementing counter\
    \ by 1\n        for (i <- 0 until n){\n            // if the number is divisible\
    \ by 11 or 13\n            if (i % 11 == 0 || i % 13 == 0){\n                //\
    \ increment fizzBuzz count\n                fizzBuzzCount = fizzBuzzCount + 1.0\n\
    \                // if the number is divisible by 11 then print \"fizz\"\n   \
    \             if (i % 11 == 0){\n                    // append fizz at the end\
    \ of fizzBuzz\n                    fizzBuzzCount = fizzBuzzCount + 1.0\n     \
    \               // print \"fizzBuzz\" + fizzBuzzCount\n                    fizzBuzzCount\
    \ = fizzBuzzCount.toString() + \"fizzBuzz\" + fizzBuzzCount\n                }\n\
    \                // if the number is divisible by 13 then print \"buzz\"\n   \
    \             if (i % 13 == 0){\n                    // append buzz at the end\
    \ of fizzBuzz\n                    fizzBuzzCount = fizzBuzzCount + 1.0\n     \
    \               // print \"fizzBuzz\" + fizzBuzzCount\n                    fizzBuzzCount\
    \ = fizzBuzzCount.toString() + \"buzz\" + fizzBuzzCount\n                }\n \
    \           }\n        }\n        // return fizzBuzzCount\n        return fizzBuzzCount",
  "        val numDigits = n.toString.length()\n        val counts = mutable.Map[Long,Long]()\n\
    \        for(i <- 1 to numDigits by 2){\n            val mod10 = n % 10\n    \
    \        if(mod10 == 7 || mod10 == 1){\n                counts += i -> (1 + counts.getOrElse(i,0))\n\
    \            }\n        }\n        counts.values.sum", "        var count : Long\
    \ = 0\n        if (n <= 0 || (n % 11 == 0 && n % 13 == 0)) {\n            count\
    \ = count\n        } else {\n            while(n > 0) {\n                n %=\
    \ 10\n                count += 1\n                if (n % 11 == 0 && n % 13 ==\
    \ 0) {\n                    count = count\n                }\n            }\n\
    \        }\n        count", "        // Set result to 1 by default.\n        val\
    \ result = 1\n        // Set digits to 0 by default.\n        var digits = 0\n\
    \n        // While the number is divisible by 11 or 13 add 1 to the result.\n\
    \        while (n > 0) {\n            // If the first digit of n is divisible\
    \ by 11 or 13 add 1 to the result.\n            if (n % 11 == 0 || n % 13 == 0)\
    \ {\n                result += 1\n            }\n            // Add the digit\
    \ to the digits variable and shift n right by 1.\n            digits += 1\n  \
    \          n >>>= 1\n        }\n        // Return the result.\n        return\
    \ result", "        val num = n.toInt\n        if (num == 0 || num == 1)\n   \
    \         return num\n        if (num == 2)\n            return num\n        if\
    \ (num % 11 == 0 || num % 13 == 0)\n            return num\n        val result\
    \ = new mutable.ListBuffer[Int]()\n        val nums = num / 100\n        val remainder\
    \ = num % 100\n        if (num % 10 == 0)\n            result.push(num)\n    \
    \    else {\n            if (remainder == 7)\n                result.push(num)\n\
    \            else if (num % 11 == 0 || num % 13 == 0)\n                result.push(num)\n\
    \            else\n                result.push(nums / 10 * 10 + nums % 10)\n \
    \       }\n        result.size + 1", "        val counter = mutable.HashSet[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i %% 11 == 0L || i %% 13 == 0L)\
    \ {\n                if (counter.contains(7L)) {\n                    counter.remove(7L)\n\
    \                } else {\n                    counter.add(7L)\n             \
    \   }\n            }\n        }\n        counter.size", "        var x = 0\n \
    \       var z = 0\n        var count = 0\n        for(i <- 1 to n / 11) {\n  \
    \          if (i % 11 == 0) {\n                x += 1\n                if (x ==\
    \ 1)\n                    count = 1\n            } else if (i % 13 == 0) {\n \
    \               z += 1\n                if (z == 1)\n                    count\
    \ = 1\n            } else {\n                count += 1\n            }\n     \
    \   }\n        if (count > 0)\n            return count\n        else\n      \
    \      return 0", "        val c = n % 11\n        if (11 != c && 13 != c) {\n\
    \            return 0\n        }\n        val v = n.toString.toList.reverse.foldLeft(0)((sum,\
    \ digit) => { sum + digit * digit * digit })\n        c % 11 == 0 ? v : fizzBuzz(v\
    \ - 1)", "        val nums = mutable.MutableList[Long]()\n        for(x <- 0 until\
    \ (n/11) % 11) nums.add(x*11)\n        for(x <- 0 until (n/13) % 13) nums.add(x*13)\n\
    \        nums.count(7)", "        var count = 1\n        var remainder = n\n \
    \       while (true) {\n            if ((remainder % 11) == 0) {\n           \
    \     count += 1\n                remainder /= 11\n            }\n           \
    \ else\n            if ((remainder % 13) == 0) {\n                count += 1\n\
    \                remainder /= 13\n            }\n            else\n          \
    \  if ((remainder % 11) == 0 && remainder % 13 == 0) {\n                count\
    \ += 1\n                remainder /= 11\n                remainder /= 13\n   \
    \         }\n            else {\n                count += 1\n                remainder\
    \ /= 10\n            }\n            if (remainder == 0) {\n                return\
    \ count\n            }\n        }", "        var counter : Long = 0\n        var\
    \ count : Long = 0\n        while(n != 0){\n            count += 1\n         \
    \   if(n / 11 == 0 || n / 13 == 0){\n                counter += 1\n          \
    \  }\n            n -= 1\n        }\n        count", "        val nums = n div\
    \ 100\n        val divisibleBy11 = (nums % 11) == 0l\n        val divisibleBy13\
    \ = (nums % 13) == 0l\n        var count = 0l\n        for (i <- 0 until nums.toInt)\
    \ {\n            if (divisibleBy11 && divisibleBy13) {\n                count\
    \ += 1\n            } else if (divisibleBy11) {\n                count += 1\n\
    \            } else if (divisibleBy13) {\n                count += 1\n       \
    \     } else {\n                continue\n            }\n        }\n        count",
  "        var count : Long = 0\n        for (i <- 0 to n.toInt-1) {\n           \
    \ val remainder = n % 10\n            if (remainder == 7) {\n                count\
    \ += 1\n            }\n            n /= 10\n        }\n        count", "     \
    \   val count = mutable.MutableList[Int]()\n        val nums = mutable.MutableList[Int]()\n\
    \        for (i<-1 to (n % 11) + 1) yield {\n            nums += i\n         \
    \   if (i == 7) count += 1 :: nums\n        }\n        (nums filter (_ % 13 ==\
    \ 0l) sum) match {\n            case 0 => (0l / 11l) :: count\n            case\
    \ _ => (0l / 13l) :: (count.sum + 1) :: nums\n        }", "        var counter\
    \ = -1\n        while (n > 0) {\n            counter += n % 10 == 7\n        \
    \    n /= 10\n        }\n        return counter", "        val count = mutable.HashMap[Int,\
    \ Long]()\n        for(i <- 0 until n){\n            val d = i / 11\n        \
    \    val e = i % 11\n            if(!count.contains(d)) count.put(d, 0l)\n   \
    \         if(e == 7){\n                count.put(d, count.get (d) + 1)\n     \
    \       }\n        }\n        count.values.sum", "        var counter = mutable.MutableList(1l,\
    \ 0l)\n        for {\n            i <- 0 until (n/11)\n            j = n%11\n\
    \            if (j == 7) {\n                counter += j\n            } else {\n\
    \                if (j % 13 == 0) counter += 1\n            }\n        } yield\
    \ counter", "        val nums = Vector.fill(n / 11)(7).takeWhile(_ < 11).takeWhile(_\
    \ % 11 != 0).takeWhile(_ % 13 != 0)\n        nums.count(_ == 7)", "        val\
    \ arr = new mutable.ArrayBuilder[Long]\n        for (i <- 1 to n) arr += i\n \
    \       arr.filter(i => i / 11 == 0 || i / 13 == 0).length", "        n match\
    \ {\n            case i if i % 11 == 0 => 13\n            case i if i % 13 ==\
    \ 0 => 11\n            case _ => 0\n        }", "        require(n < 1000000000,\
    \ \"Only small numbers are allowed.\")\n        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for( x <- 0 to n ) {\n            val str = Integer.toString(x)\n\
    \            if( count.contains(str) && count.get(str) == 1 ) {\n            \
    \    count.remove(str)\n            }\n            else if( count == 0 ) {\n \
    \               count(str) = 1\n            }\n            if( count.contains(str)\
    \ && count.get(str) == 3 ) {\n                count.remove(str)\n            }\n\
    \            else if( count.contains(str) && count.get(str) == 5 ) {\n       \
    \         count.remove(str)\n            }\n            if( count.contains(str)\
    \ && count.get(str) == 7 ) {\n                count.remove(str)\n            }\n\
    \        }\n        count.values.sum", "        val nDiv11or13 = n % 11 == 0 ||\
    \ n % 13 == 0\n        val nModulo11 = n % 11 == 0\n        val nModulo13 = n\
    \ % 13 == 0\n\n        val isDivisibleBy11And13 = n % 11 != 0 && n % 13 != 0\n\
    \        val isDivisibleBy11And13AndModulo11 = n % 11 != 0\n        val isDivisibleBy11And13AndModulo13\
    \ = n % 13 != 0\n\n        val numOfFizzBuzz = math.max(0, nDiv11or13 + nModulo11\
    \ + nModulo13 + isDivisibleBy11And13 + isDivisibleBy11And13AndModulo11 + isDivisibleBy11And13AndModulo13)\n\
    \        math.max(0, numOfFizzBuzz)", "        val count = mutable.MutableInt(0)\n\
    \        for(num <- 1 until n){\n            if(num % 11 == 0 || num % 13 == 0){\n\
    \                count += 1\n            }\n        }\n        return count",
  "        val count = mutable.MutableArray.fill(n.toInt)(0)\n        var temp = 0\n\
    \        for (i <- 0 to n.toInt){\n            temp = temp + i.toInt\n       \
    \     if (temp % 11 == 0 && temp % 13 == 0) {\n                count(0) = count(0)\
    \ + 1\n            }\n        }\n        n.toLong + count.sum", "        val digits\
    \ = scala.collection.mutable.Set[Int]()\n        while(n > 0) {\n            digits\
    \ += n%10\n            n /= 10\n        }\n        val countOf7 = digits.count(_\
    \ == 7) == digits.count(_ == 7)\n        if((n % 11) == 0 || n %13 == 0) {\n \
    \           digits.count(_ == 7) == digits.count(_ == 7)\n        } else {\n \
    \           digits.count(_ == 7) != digits.count(_ == 7)\n        }", "      \
    \  val list = new mutable.ArrayBuffer[Long]()\n        val a = n / 11\n      \
    \  val b = n % 11\n\n        if ((a % 13) == 0) list += b\n        n /= 13\n \
    \       a % 13 == 0 ? list += b : a\n\n        val c = n / 7\n        val d =\
    \ n % 7\n\n        if ((c % 11) == 0) list += d\n        n /= 11\n        c %\
    \ 11 == 0 ? list += d : c\n\n        list.size", "        // Find the first number\
    \ divisible by 11 or 13 and then take out that number.\n        // >>> fizzBuzz((50l))\n\
    \        // (0l)\n        // >>> fizzBuzz((78l))\n        // (2l)\n        //\
    \ >>> fizzBuzz((79l))\n        // (3l)\n        if (n >= (11l * 13l)) {\n    \
    \        val n = n.toInt\n            (n / 11l).toInt * 11l + (n % 11l).toInt\n\
    \        } else {\n            0\n        }", '        (1 to n).filter( n => n
    % 11 == 0 || n % 13 == 0).sum', "        val rev = n % 10\n        if(rev == 7)\n\
    \            return 1\n        if(rev < 7)\n            return 0\n        var\
    \ count = 0\n        val divs = mutable.ArrayBuffer(11, 13)\n        for(n <-\
    \ 1 to 9 to n) {\n            val rev = n % 10\n            if(divs.contains(rev))\n\
    \                count += 1\n        }\n        count - 1", "        val numbers\
    \ = mutable.Set[Int]()\n        while(n > 0) {\n            val c = n % 10\n \
    \           if (c == 7)\n                numbers += c\n            n /= 10\n \
    \       }\n        numbers.size", "        val a = n / 100\n        val b = n\
    \ / 10\n        val c = n % 10\n        if (a % 11 == 0 && b == 0 || a % 13 ==\
    \ 0 && b == 0) (c + 1l)\n        else {\n            if (a % 11 == 0 && b != 0)\
    \ (c + 2l)\n            if (a % 13 == 0 && b != 0) (c + 3l)\n            else\
    \ (c + 4l)\n        }", "        val list = List(n, n.toInt/11, n.toInt/13, n.toInt/21,\
    \ n.toInt/23, n.toInt/33);\n        list.foreach { i =>\n            if (i%11\
    \ == 0 || i%13 == 0) {\n                println(i + \": \" + i.fizzBuzz + \"x\"\
    );\n                println(i + \": \" + i.fizzBuzz + \"x\");\n              \
    \  println(i + \": \" + i.fizzBuzz + \"x\");\n            } else if (i%21 == 0)\
    \ {\n                println(i + \": \" + i.fizzBuzz + \"x\");\n             \
    \   println(i + \": \" + i.fizzBuzz + \"x\");\n                println(i + \"\
    : \" + i.fizzBuzz + \"x\");\n            } else if (i%23 == 0) {\n           \
    \     println(i + \": \" + i.fizzBuzz + \"x\");\n                println(i + \"\
    : \" + i.fizzBuzz + \"x\");\n                println(i + \": \" + i.fizzBuzz +\
    \ \"x\");\n            } else {\n                println(i);\n            }\n\
    \        }\n        return list.size;", "        val l = new mutable.Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            if (i / 11 % 11 == 0\
    \ && (i % 13) == 0) l.update(i + 1, 0)\n            if (i / 13 % 13 == 0 && (i\
    \ % 11) == 0) l.update(i + 1, 1)\n            i += 1\n        }\n        l.toArray.length",
  "        val nums = mutable.ArrayBuffer[Long]()\n        val digits = n % 10\n\n\
    \        while (digits != 0) {\n            nums += digits\n            digits\
    \ /= 10\n        }\n\n        nums.count(x => x == 7)", "        var count : Long\
    \ = 0\n        for(i <- 1L until n) {\n            if(i % 11 == 0 || i % 13 ==\
    \ 0) {\n                count += 1\n            }\n        }\n        count",
  "        var count = 0\n        var sum = 0\n        while(n > 0){\n           \
    \ sum += n\n            count += 1\n            n = sum.toInt/11\n        }\n\
    \        count", "        val result = new mutable.HashMap[Int, Int]()\n     \
    \   if (n % 11 == 0 || n % 13 == 0) {\n            n :: result\n        } else\
    \ {\n            val tmp = fizzBuzz(n / 11)\n            tmp.foreach { case (k,\
    \ v) => result.update(k, v.get + 1) }\n        }\n        result.getOrElse(n,\
    \ 0)", "        val d = scala.util.Either.Left(n)\n        val f = scala.util.Either.Right(n)\n\
    \        val a = d.right.toString.toInt\n        val b = f.right.toString.toInt\n\
    \        var count = 0\n        var found = 0\n        while(a != 0 | b != 0)\
    \ {\n            if(a % 11 == 0 & b % 13 == 0) {\n                found = 1\n\
    \            }\n            a /= 11\n            b /= 13\n            count +=\
    \ 1\n        }\n        if(found == 1) {\n            return count\n        }\
    \ else {\n            return n\n        }", "        var result = 1\n        for\
    \ (x <- 0 until n) {\n            val mod = x % 11\n            val mod2 = x %\
    \ 13\n            if ((mod != 7) && (mod != 13) && (mod2 != 7) && (mod2 != 13))\
    \ {\n                result += 1\n            }\n        }\n        result", " \
    \       if(n % 11 == 0 || n % 13 == 0) {\n            return n\n        }\n  \
    \      if(n % 11 == 0) {\n            n / 11\n        }\n        else {\n    \
    \        n / 13\n        }", "      val l: List[Long] = List.range(1, n+1)\n \
    \     val r: List[List[Long]] = l.map(x=>{\n        if(x%11==0 || x%13==0) List(x)\
    \ else List()\n      })\n      r.size", "        if (n%11==0) 1\n        else\
    \ if (n%13==0) 2\n        else 0", "        var count = 0\n        for (i <- 1\
    \ to n) {\n            val digit = i.toString.head\n            if (digit == \"\
    0\" || digit == \"1\") {\n                count = count + 1\n            } else\
    \ if (digit == \"7\" && i % 11 == 0 || digit == \"7\" && i % 13 == 0) {\n    \
    \            count = count + 1\n            } else if (digit == \"3\" && i % 11\
    \ != 0) {\n                count = count + 1\n            } else if (digit ==\
    \ \"7\" && i % 11 == 0) {\n                count = count + 1\n            } else\
    \ if (digit == \"3\" && i % 13 == 0) {\n                count = count + 1\n  \
    \          }\n        }\n        count", "        var i : Long = 0\n        while\
    \ (i < n) {\n            if (i % 11 == 0) i += 1\n            if (i % 13 == 0)\
    \ i += 1\n            i += 1\n        }\n        (i) ", "        var count : Int\
    \ = 0\n        var remainder : Long = n / 11\n        while (true) {\n       \
    \     if (remainder % 13 == 0) count += 1\n            if (remainder % 11 == 0)\
    \ count += 1\n            count = count + remainder % 13\n            remainder\
    \ = remainder / 11\n            if (remainder == 0) return count\n        }",
  "        // Initialize a HashMap which we'll use to keep track of previously seen\
    \ digits.\n        var counters = new mutable.HashMap[String, Long]();\n     \
    \   var result : Long = 0;\n        val divisors = (1l to 12l).filter(d => n %\
    \ d == 0l).toList;\n        divisors.foreach { divisor =>\n            var divisorCount\
    \ = 0l\n            var divisorCounts : Seq[Long] = Seq()\n            val counter\
    \ = counters.get(divisor.toString)\n            if (counter != null) {\n     \
    \           divisorCounts = divisorCounts :+ (counter :+ 1l)\n            } else\
    \ {\n                divisorCounts = divisorCounts :+ 1l\n            }\n    \
    \        counters.put(divisor.toString, divisorCounts.sum)\n        }\n      \
    \  // Get the number of times the digit 7 appears in the divisorCounts Seq.\n\
    \        val totalFizzBuzz = (divisorCounts.toList filter (_ == 7)).sum\n    \
    \    // Add the number of Fizz Buzz iterations to the result.\n        result\
    \ += (totalFizzBuzz / 10l + (totalFizzBuzz % 10l == 0l)) * ((divisorCounts.toList\
    \ filter (_ == 11l)).sum)\n        // Return the result.\n        result", " \
    \       var count = 0\n        while (n >= 1000) {\n            n %= 1000\n  \
    \          count += 1\n        }\n        while (n >= 100) {\n            n %=\
    \ 100\n            count += 1\n        }\n        while (n >= 10) {\n        \
    \    n %= 10\n            count += 1\n        }\n        n match {\n         \
    \   case x if x % 11 == 0 => count += 1\n            case x if x % 13 == 0 =>\
    \ count += 1\n        }\n        count", "        val d = n % 10\n        val\
    \ s = n % 100\n        if (d == 7 && s % 11 == 0 || d == 7 && s % 13 == 0) {\n\
    \            1\n        } else {\n            0\n        }", "        val count\
    \ = mutable.ListBuffer(1L)\n        for{\n            i <- 0 to n\n          \
    \  if (i % 11 == 0 || i % 13 == 0)\n                count += i\n        } yield\
    \ count", "        val result = mutable.Map[(Long, Long), Long]()\n        val\
    \ result2 = mutable.ListBuffer[(Long, Long)]()\n        if (n % 11 == 0) result2\
    \ += ((n/11, n))\n        if (n % 13 == 0) result2 += ((n/13, n))\n        for\
    \ ((n, m) <- result2) {\n            val k = m.toString.indexOf(\"7\")\n     \
    \       if (k == -1) result2 += ((n/10, n))\n            else {\n            \
    \    val value = result.getOrElse((n/10, m), 0)\n                result += (n\
    \ -> value + 1)\n            }\n        }\n        result.size", "        val\
    \ count = mutable.ListBuffer.empty[String]\n        for(i <- 1 to n/10)\n    \
    \        if(i % 11 == 0 || i % 13 == 0)\n                count += i.toString\n\
    \        count.size", "        val counter = mutable.Map[(Long, Int), (Long, Int)]()\n\
    \        for( i <- 1 to n ) {\n            if( i % 11 == 0 || i % 13 == 0) {\n\
    \                if( counter.contains( (i, 1) ) ) {\n                    val c\
    \ = counter.getOrElseUpdate( (i, 1), (1, 0) )\n                    c._1 += 1\n\
    \                } else {\n                    val c = counter.getOrElseUpdate(\
    \ (i, 1), (1, 0) )\n                    counter.put( i, c) \n                }\n\
    \            }\n        }\n        counter.values.toList.map{ case (val, freq)\
    \ => freq }.sum", "        var count = 0\n        for (i <- 1 to n by 10) {\n\
    \            if (i % 13 == 0 || i % 11 == 0) {\n                if (i % 7 == 0)\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        return count", "        def isDivisibleBy11And13(i: Long) : Boolean\
    \ = {\n            if (i % 11 == 0) true else if (i % 13 == 0) true else false\n\
    \        }\n        \n        // initialize count\n        var count = n\n\n \
    \       while (isDivisibleBy11And13(count)) {\n            if (count % 11 == 0)\
    \ count += 11\n            else if (count % 13 == 0) count += 13\n           \
    \ else count++\n        }\n        count", "        val count = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 1 to n) { count += if (i % 11 == 0 || i % 13 == 0) i else 0\
    \ }\n        count.length", "        val count = mutable.Map[Int, Int]()\n   \
    \     val digits = Iterator.continually((n % 10).toInt).takeWhile(_ <= 7).dropWhile(_\
    \ <= 7).toList\n        digitList.foreach(d => count(d))\n        count", "  \
    \    n match {\n        case _ if n % 11 == 0 || n % 13 == 0 => 1\n        case\
    \ _ if n % 11 != 0 && n % 13 != 0 => 1 + fizzBuzz(n / 11)\n        case _ => 0\n\
    \      }", "        var count = 0\n        while (n) {\n            count += 1\n\
    \            if (n % 11 == 0) count = 1\n            if (n % 13 == 0) count =\
    \ 1\n            n /= 10\n        }\n        count", "        var count = (1l)(0l)(2l)(3l)(4l)(5l)\n\
    \        while ((n % 11l) != 0l || (n % 13l) != 0l) {\n            n /= 11l\n\
    \            count += (11l)(0l)(2l)(3l)(4l)(5l)\n        }\n        n", "    \
    \    var count = 0\n        var x = n / 11\n        while ( x >= 1) {\n      \
    \      if (n % 11 == 0)\n                count += x\n            x /= 11\n   \
    \     }\n        x /= 13\n        while ( x >= 1) {\n            if (n % 13 ==\
    \ 0)\n                count += x\n            x /= 13\n        }\n        count",
  "        if (n == 0) 0\n        else if (n % 11 == 0) 1\n        else if (n % 13\
    \ == 0) 2\n        else fizzBuzz(n/10)", "        if (n == 0) 0\n        else\
    \ if (n % 11 == 0 || n % 13 == 0) 1\n        else fizzBuzz(n-1)", "        var\
    \ count : Long = 0\n        for(i <- 0 to 9) {\n            if(n.toInt % 11 ==\
    \ i || n.toInt % 13 == i) count += 1\n        }\n        count", "        val\
    \ c = n.toString.toList.map(c => c match {\n            case \"0\"  => \"0\"\n\
    \            case \"1\"  => \"1\"\n            case \"2\"  => \"2\"\n        \
    \    case \"3\"  => \"3\"\n            case \"4\"  => \"4\"\n            case\
    \ \"5\"  => \"5\"\n            case \"6\"  => \"6\"\n            case \"7\"  =>\
    \ \"7\"\n            case \"8\"  => \"8\"\n            case \"9\"  => \"9\"\n\
    \            case _ => \"0\"\n        }).filter(c => c == \"7\")\n        if (c.size\
    \ < 13) c.size else c.size", "        def sum(n: Int, sum: Int, digit: Int): Int\
    \ = {\n            if (n == 0) sum\n            else if (digit % 3 == 0 && digit\
    \ % 5 == 0) sum + n\n            else sum + sum(n - 1, sum, n * 10 + digit)\n\
    \        }\n        return sum(n.toInt, 0, n.toInt / 10)", "        var count\
    \ : Long = 0\n        for(i <- 1 to n) count += ((i % 11) == 0) || ((i % 13) ==\
    \ 0)\n        count", "        val isEven = (n%2 == 0)\n        if(n % 11 == 0\
    \ || n % 13 == 0) {\n            if(isEven) 1 \n            else fizzBuzz(n/2)\n\
    \        } else 0", "        // The first few lines compute the counts for each\
    \ digit from 1 to 9.  We then sum up the counts for each digit.\n        // >>>\
    \ sumCounts((5l).digits)\n        // (3, 3, 3, 3)\n        // >>> sumCounts((78l).digits)\n\
    \        // (2, 3, 2, 3)\n        // >>> sumCounts((79l).digits)\n        // (3,\
    \ 4, 3, 2)\n        // >>> sumCounts((789l).digits)\n        // (3, 3, 3, 2)\n\
    \        // >>> sumCounts((78901l).digits)\n        // (3, 3, 3, 3)\n        val\
    \ sumCounts = 0 -> 0 -> 0 -> 0 -> 0 -> 0 -> 0 -> 0 -> 0\n        (0 until 9).foreach{d\
    \ =>\n            // The remainder of n/10 is what we're counting, or if the number\
    \ is divisible by 11 or 13, we'll count the remainder.\n            val n = n.toInt\n\
    \            sumCounts(d) ++ if(n/11==0 || n/13==0) 1L else 0L\n        }\n  \
    \      sumCounts.reduce((a, b) => a + b)", "        val res = mutable.ListBuffer[Long]()\n\
    \        val factors : Set[Long] = Set((13l, 11l))\n        val digitsRes = mutable.ListBuffer[(Long,Long)]()\n\
    \        val factorsRes = mutable.ListBuffer[Long]()\n        val digitsAsList:\
    \ Array[Long] = n.toString.toLongArray.filter(x => x % 11 == 0 || x % 13 == 0).sorted\n\
    \        for(i <- 0 to digitsAsList.length - 1) {\n            val current = digitsAsList(i)\n\
    \            if(factors.contains(current)) {\n                factorsRes += current\n\
    \            } else {\n                val next = current + factors(0)\n     \
    \           if(next < n) {\n                    factorsRes += next\n         \
    \       } else {\n                    res ++= factorsRes.toList\n            \
    \        factorsRes ++= digitsAsList.takeWhile(current => current < next).tail\n\
    \                }\n            }\n        }\n        res ++= factorsRes.toList\n\
    \        res.toList.count(x => x % 7 == 0)", "        val count = mutable.Map.empty[Int,\
    \ Int]\n        var count1 = mutable.Map.empty[Int, Int]\n        var count2 =\
    \ mutable.Map.empty[Int, Int]\n        var count3 = mutable.Map.empty[Int, Int]\n\
    \        var count4 = mutable.Map.empty[Int, Int]\n        var count5 = mutable.Map.empty[Int,\
    \ Int]\n        var count6 = mutable.Map.empty[Int, Int]\n        var count7 =\
    \ mutable.Map.empty[Int, Int]\n        val list = List.fill(n)(0)\n        for\
    \ (i <- 0 until n) {\n            list += i\n        }\n        for (i <- 0 until\
    \ list.size) {\n            if (i % 13 == 0) {\n                count7 = count7\
    \ + (i.toString + \"7\")\n            } else if (i % 11 == 0) {\n            \
    \    count1 = count1 + (i.toString + \"11\")\n            } else if (i % 5 ==\
    \ 0) {\n                count5 = count5 + (i.toString + \"5\")\n            }\
    \ else if (i % 3 == 0) {\n                count3 = count3 + (i.toString + \"3\"\
    )\n            } else if (i % 7 == 0) {\n                count2 = count2 + (i.toString\
    \ + \"7\")\n            } else if (i % 5 == 0) {\n                count4 = count4\
    \ + (i.toString + \"5\")\n            } else if (i % 3 == 0) {\n             \
    \   count6 = count6 + (i.toString + \"3\")\n            } else {\n           \
    \     count = count1 + (i.toString + \"11\")\n            }\n        }\n     \
    \   if (count2.isEmpty) {\n            count2 = count\n        }\n        if (count5.isEmpty)\
    \ {\n            count5 = count\n        }\n        if (count3.isEmpty) {\n  \
    \          count3 = count\n        }\n        if (count4.isEmpty) {\n        \
    \    count4 = count\n        }\n        if (count6.isEmpty) {\n            count6\
    \ = count\n        }\n        if (count7.isEmpty) {\n            count7 = count\n\
    \        }\n        if (count1.isEmpty) {\n            count1 = count\n      \
    \  }\n        if (count5.isEmpty) {\n            count5 = count\n        }\n \
    \       if (count3.isEmpty) {\n            count3 = count\n        }\n       \
    \ if (count4.isEmpty) {\n            count4 = count\n        }\n        if (count6.isEmpty)\
    \ {\n            count6 = count\n        }\n        if (count7.isEmpty) {\n  \
    \          count7 = count\n        }\n        if (count1.isEmpty) {\n        \
    \    count1 = count\n        }\n        if (count5.isEmpty) {\n            count5\
    \ = count\n        }\n        if (count3.isEmpty) {\n            count3 = count\n\
    \        }\n        if (count4.isEmpty) {\n            count4 = count\n      \
    \  }\n        if (count6.isEmpty) {\n            count6 = count\n        }\n \
    \       if (count7.isEmpty) {\n            count7 = count\n        }\n       \
    \ val list2 = list.map(", "        def isDivisibleBy11Or13(i : Long) : Boolean\
    \ = {\n            val j = i.toString.toInt\n            return j % 11 == 0 ||\
    \ j % 13 == 0\n        }\n        var count = 0\n        if (n < 100l) count +=\
    \ if (isDivisibleBy11Or13(n)) 1 else 0\n        val arr = (1 to n).toList\n  \
    \      arr foreach { x =>\n            if (isDivisibleBy11Or13(x)) count += 1\n\
    \        }\n        count", "        def digit(x : Long) : String = {\n      \
    \      val s = x.toString\n            s.substring(0, s.length - 1)\n        }\n\
    \        def isDivisibleBy11Or13(x : Long) : Boolean = {\n            val d =\
    \ digit(x)\n            if (d == \"7\") true else if (d == \"11\") true else if\
    \ (d == \"13\") true\n            else false\n        }\n        def isDivisibleBy11Or13From(n1\
    \ : Long, n2 : Long) : Boolean = {\n            val d1 = digit(n1)\n         \
    \   val d2 = digit(n2)\n            if (d1 == \"7\" && d2 == \"7\") true else\
    \ if (d1 == \"7\" && d2 == \"11\" || d1 == \"7\" && d2 == \"13\") true else if\
    \ (d1 == \"11\" && d2 == \"7\" || d1 == \"11\" && d2 == \"11\" || d1 == \"11\"\
    \ && d2 == \"13\") true else if (d1 == \"13\" && d2 == \"7\" || d1 == \"13\" &&\
    \ d2 == \"11\" || d1 == \"13\" && d2 == \"13\") true\n            else false\n\
    \        }\n        def fizzBuzzHelper(n1 : Long, n2 : Long) : Long = {\n    \
    \        val d1 = digit(n1)\n            val d2 = digit(n2)\n            if (d1\
    \ == \"7\" && d2 == \"7\") 1 else if (d1 == \"7\" && d2 == \"11\" || d1 == \"\
    7\" && d2 == \"13\") 1 else if (d1 == \"11\" && d2 == \"7\" || d1 == \"11\" &&\
    \ d2 == \"11\" || d1 == \"11\" && d2 == \"13\") 1 else if (d1 == \"13\" && d2\
    \ == \"7\" || d1 == \"13\" && d2 == \"11\" || d1 == \"13\" && d2 == \"13\") 1\
    \ else 0\n        }\n        val n1 = n / 1000000000000l\n        val n2 = n %\
    \ 1000000000000l\n        if (n1 == 0 && n2 == 0) 0 else fizzBuzzHelper(n1, n2)",
  "        val result = n.toString.filter{ x => x.equals(\"7\") }.size\n        if\
    \ (n.toString.filter{ x => x.equals(\"7\") }.size == 0) result else result + fizzBuzz(math.ceil(n/11.0).toLong)",
  "        var count = 0\n        var x = new mutable.HashMap[Int, Long]()\n     \
    \   while(n > 0){\n            x = x.+(n%11 == 0 ? 7 : n%13 == 0 ? 7 : n%11 ==\
    \ 0 ? 7 : n%13 == 0 ? 7 : n%11 == 0 ? 7 : n%13 == 0 ? 7 : n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0\
    \ ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0\
    \ ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0\
    \ ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0\
    \ ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == ", "        val fzs = mutable.Set[Long]()\n       \
    \ for (i <- 1 until n) {\n            if (i % 11 == 0 ||\n                i %\
    \ 13 == 0) {\n                fzs += i\n            }\n        }\n        fzs.size",
  "        val result = mutable.MutableList[Long]()\n        val n1 = n % 11\n   \
    \     val n2 = n % 13\n        if (n1 == 7 && n2 == 7)\n            result.add((n1))\n\
    \        else {\n            val n3 = n1 >> 1\n            val n4 = n2 >> 1\n\
    \            if (n3 == 7 && n4 == 7)\n                result.add((n3))\n     \
    \       else\n                result.add((n3))\n                result.add((n4))\n\
    \        }\n        result.size", "        val ns = n.toString.toInt\n       \
    \ if(ns < 10 || ns.toString.length == 0) (ns.toString.toInt + 1l)\n        else\
    \ if(ns.toString.toInt % 11 == 0) (ns.toString.toInt + 1l)\n        else if(ns.toString.toInt\
    \ % 13 == 0) (ns.toString.toInt + 1l)\n        else fizzBuzz(ns.toString.toInt\
    \ / 11)", "      var count = 0\n      var remainder = n % 11\n      while (remainder\
    \ == 0 || remainder == 13) {\n        count += 1\n        remainder = n % 11\n\
    \        n = n / 10\n      }\n      count", "      var n1 : Long = n % 11\n  \
    \    if (n1 != 0) {\n        n1 = 11\n      }\n      var n2 : Long = n % 13\n\
    \      if (n2 != 0) {\n        n2 = 13\n      }\n      var n3 : Long = n / 11\n\
    \      if (n3 != 0) {\n        n3 = 11\n      }\n      var n4 : Long = n / 13\n\
    \      if (n4 != 0) {\n        n4 = 13\n      }\n      n1 + n2 + n3 + n4", " \
    \       var counter = n.toInt\n        for(i <- 0 until 9){\n            val rem\
    \ = n % 10\n            if(rem == 7){\n                counter -= 1\n        \
    \    }\n            n = math.trunc(n / 10)\n        }\n        counter", "   \
    \     var i = 0\n        var count = 0\n        while (i < n) {\n            if\
    \ (i.toString % 11 == 0 || i.toString % 13 == 0) {\n                count += 1\n\
    \            }\n            i += 1\n        }\n        return count", "      \
    \  val x = math.ceil(n)\n        val y = math.ceil(x/11)\n        val z = math.ceil(x/13)\n\
    \        if (y==0 || z==0) 0\n        else {\n            if (n % 11==0 && n %\
    \ 13==0) z+1\n            else y+1\n        }", "        if (n % 11 == 0) 0\n\
    \        else if (n % 13 == 0) 1\n        else fizzBuzz(n / 10) + (n % 10 == 0\
    \ ? 1 : 0)", "        // Convert to a binary string\n        val bstr = scala.math.BigInt(n).toString(2).padTo(64,\
    \ \"0\").toList\n        val v = new mutable.HashSet[Int]()\n        for (i <-\
    \ 0 until bstr.length) {\n            if (bstr(i) == \"1\" && v.contains(7)) {\n\
    \                v.add(0)\n            } else {\n                v.add(i)\n  \
    \          }\n        }\n        v.length", "        val fiz = (0l).quot(11l)\n\
    \        val buz = (0l).quot(13l)\n        (fiz * buz).filter(_%11 == 0).length",
  "        var count = 0\n        for (d <- 7 until n.toInt) {\n            if (n\
    \ % 11 == 0 || n % 13 == 0) {\n                count += 1\n            }\n   \
    \         n /= 10\n        }\n        count", "        val count = mutable.Map.empty[Long,\
    \ Long]\n        for (x <- 0 until n){\n            if (x % 11 == 0 || x % 13\
    \ == 0){\n                if (count.contains(x))\n                    count(x)\
    \ = count(x) + 1\n                else\n                    count(x) = 1\n   \
    \         }\n        }\n        count.values.sum", "        val map = mutable.HashMap.empty[String,\
    \ Long]\n        for(x <- 0 until n) {\n            val str = x.toString\n   \
    \         if(!map.contains(str) && str.indexOf(\"7\") >= 0){\n               \
    \ map += str -> 1\n            }\n        }\n        map.values.sum", "      \
    \  var cnt : Long = 0\n        for(i <- 1 to n if isDivisibleBy11Or13(i)) {\n\
    \            if(i % 11 == 0) cnt = (i + 1) + cnt\n            if(i % 13 == 0)\
    \ cnt = (i + 1) + cnt\n        }\n        cnt", "        val counter = mutable.HashMap[Int,\
    \ Int]()\n        var count = 0\n        for (i <- 1 to n) {\n            val\
    \ isDivisibleBy11Or13 = i % 11 == 0 || i % 13 == 0\n            if (isDivisibleBy11Or13\
    \ && counter.getOrElse(i, 0) == 0) {\n                count += 1\n           \
    \     counter.updated(i, 1)\n            }\n        }\n        count", "     \
    \   def toNines(n : Long): List[Long] = {\n            val ns = List(n/11, n/13)\n\
    \            ns.reverse.takeWhile(_ < n).reverse\n        }\n        def count(n\
    \ : Long): Long = {\n            if (n % 11 == 0 || n % 13 == 0) 1\n         \
    \   else if (toNines(n).contains(7)) 1\n            else 0\n        }\n      \
    \  if (n < 0) 0\n        else count(n)", "        val s = n\n        var count\
    \ = 0\n        for(i <- 0 until 100) {\n            val d = s(i).toInt\n     \
    \       if (d % 11 == 0) count += d\n            if (d % 13 == 0) count += d\n\
    \        }\n        count", "        def isFizz(n: Long, digit: Int) : Boolean\
    \ = if (n%digit == 0) true else if (n%digit == 7) true else false\n        val\
    \ div11: Long = (11l).divide(n)\n        val div13: Long = (13l).divide(n)\n \
    \       val fizz = div11.map(_%10)\n        val buzz = div13.map(_%10)\n     \
    \   val result = fizz.zip(buzz).filter(_._1).length\n        result", "      \
    \  var count : Long = 0\n        for (i <- 0 to n) {\n            val remainder\
    \ = i % 11\n            val fizz = remainder % 7\n            val buzz = remainder\
    \ % 5\n            val div = i / 11\n\n            if (fizz == 0 || buzz == 0)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       def div(i: Long, j: Long) : Long = {\n            if (i==0 || j==0)\n\
    \                return 0\n            else\n                if (i % 11 == 0 &&\
    \ j % 13 == 0)\n                    2\n                else if (i % 11 == 0)\n\
    \                    1\n                else if (j % 13 == 0)\n              \
    \      1\n                else\n                    0\n        }\n        val\
    \ count = mutable.ListBuffer.empty[Long]\n        val divs = n / 11\n        val\
    \ remainder = n % 11\n        for (i = 1 until divs) {\n            count += div(remainder,\
    \ i) * i\n            remainder = div(remainder, i + 1)\n        }\n        count.sum",
  '        if (n < 100 || n % 11 == 0 || n % 13 == 0) n else 0', "        val nums\
    \ = mutable.Queue[Long](1l)\n        for (i <- 0 until n / 11)\n            if\
    \ (nums.contains(i / 11))\n                nums.dequeue()\n            else nums.enqueue(i\
    \ / 11)\n        nums.count", "        def isDivisibleBy11(n: Long) : Boolean\
    \ = n % 11 == 0\n        def isDivisibleBy13(n: Long) : Boolean = n % 13 == 0\n\
    \        def countFizz(n: Long) : Long = if (isDivisibleBy11(n)) 1 else 0\n  \
    \      def countBuzz(n: Long) : Long = if (isDivisibleBy13(n)) 1 else 0\n    \
    \    def countFizzBuzz(n: Long) : Long = countFizz(n) + countBuzz(n)\n\n     \
    \   val s = n.toString.tail.dropWhile(x => x == 7).mkString(\"\").reverse\n  \
    \      val l = s.length\n        var count = 0\n        for (i <- 0 until l) {\n\
    \            if (s(i) == \"7\") count = countFizzBuzz(n.toInt + i)\n         \
    \   else count = countFizzBuzz(n.toInt + i)\n        }\n        count", "    \
    \  var n1 : Long = 0\n      var n2 : Long = 1\n      var n3 : Long = 2\n     \
    \ var n4 : Long = 3\n      var n5 : Long = 4\n      var n6 : Long = 5\n      var\
    \ n7 : Long = 6\n      var n8 : Long = 7\n      var n9 : Long = 8\n      var n10\
    \ : Long = 9\n      var n11 : Long = 10\n      var n12 : Long = 11\n      var\
    \ n13 : Long = 12\n      var n14 : Long = 13\n      var n15 : Long = 14\n    \
    \  var n16 : Long = 15\n      var n17 : Long = 16\n      var n18 : Long = 17\n\
    \      var n19 : Long = 18\n      var n20 : Long = 19\n      var n22 : Long =\
    \ 20\n      var n23 : Long = 21\n      var n24 : Long = 22\n      var n25 : Long\
    \ = 23\n      var n26 : Long = 24\n      var n27 : Long = 25\n      var n28 :\
    \ Long = 26\n      var n29 : Long = 27\n      var n30 : Long = 28\n      var n31\
    \ : Long = 29\n      var n32 : Long = 30\n      var n33 : Long = 31\n      var\
    \ n34 : Long = 32\n      var n35 : Long = 33\n      var n36 : Long = 34\n    \
    \  var n37 : Long = 35\n      var n38 : Long = 36\n      var n39 : Long = 37\n\
    \      var n40 : Long = 38\n      var n41 : Long = 39\n      var n42 : Long =\
    \ 40\n      var n43 : Long = 41\n      var n44 : Long = 42\n      var n45 : Long\
    \ = 43\n      var n46 : Long = 44\n      var n47 : Long = 45\n      var n48 :\
    \ Long = 46\n      var n49 : Long = 47\n      var n50 : Long = 48\n      var n51\
    \ : Long = 49\n      var n52 : Long = 50\n      var n53 : Long = 51\n      var\
    \ n54 : Long = 52\n      var n55 : Long = 53\n      var n56 : Long = 54\n    \
    \  var n57 : Long = 55\n      var n58 : Long = 56\n      var n59 : Long = 57\n\
    \      var n60 : Long = 58\n      var n61 : Long = 59\n      var n62 : Long =\
    \ 60\n      var n63 : Long = 61\n      var n64 : Long = 62\n      var n65 : Long\
    \ = 63\n      var n66 : Long = 64\n      var n67 : Long = 65\n      var n68",
  "        var count = 0\n        var last = 0\n        var x = 0\n        for(i <-\
    \ 0 until n){\n            val y = math.mod(i,11)\n            val z = math.mod(i,13)\n\
    \            if (y == 0 && z == 0){\n                count+=1\n            }\n\
    \            if (y == 0 && z == 1){\n                count+=1\n            }\n\
    \            if (y == 0 && z == 2){\n                count+=1\n            }\n\
    \            if (y == 1 && z == 0){\n                count+=1\n            }\n\
    \            if (y == 1 && z == 1){\n                count+=1\n            }\n\
    \            if (y == 1 && z == 2){\n                count+=1\n            }\n\
    \            if (y == 2 && z == 0){\n                count+=1\n            }\n\
    \            if (y == 2 && z == 1){\n                count+=1\n            }\n\
    \            if (y == 2 && z == 2){\n                count+=1\n            }\n\
    \            last = i\n        }\n        last", "        var result : Long =\
    \ 0\n        for (i <- n until (n + 1l)) {\n            if (i % 11 == 0) result\
    \ += 3\n            else if (i % 13 == 0) result += 2\n            else result\
    \ += i\n        }\n        result", "        var count = 0\n        for(i <- 1\
    \ to n)\n            if(i % 11 == 0 || i % 13 == 0) count = count + 1\n      \
    \  count * 7", "        val counter = (n to 0 by -1).foldLeft(0)((acc, i) => {\n\
    \            if ((i % 11 == 0) || (i % 13 == 0))\n                acc + 1 else\
    \ 0\n        })\n        if (counter == 0) 0\n        else counter - 1", "   \
    \     val m = n % 11\n        if (m == 0) 0\n        else 1 + fizzBuzz(n / 11)",
  "        (0 to n).count { x =>\n            val b = x % 11\n            val n =\
    \ x % 13\n            val s = b & n\n            b + s\n        }", "        var\
    \ count = 0\n        for (i <- 0 until n) {\n            if (i.toString.toInt\
    \ == 7) {\n                count += 1\n            }\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                count += 1\n            }\n        }\n\
    \        count", "        // Set up the collection of integers\n        var myList\
    \ : collection.mutable.Set[Long] = collection.mutable.Set[Long]()\n\n        //\
    \ Create a list of all the possible combinations of divisibile by 11 or 13\n \
    \       (0 to n).filter(_ % 11 == 0 || _ % 13 == 0).foreach{ myList += _ }\n\n\
    \        // Count the number of times the digit 7 appears\n        myList.count(_\
    \ == 7)", "        var sum = 0\n        while(n < 100l){\n            if(isDivisibleBy11Or13(n)\
    \ && isDivisibleBy11Or13(n % 11))\n                sum += 1 \n            if(isDivisibleBy11Or13(n)\
    \ && isDivisibleBy11Or13(n % 13))\n                sum -= 1 \n            n +=\
    \ 1\n        }\n        sum", "       val n = n.toInt\n       val list = List(1l,2l,3l,4l,5l,6l,7l,8l,9l,10l,11l,12l,13l,14l,15l,16l,17l,18l,19l,20l,21l,22l,23l,24l,25l,26l,27l,28l,29l,30l,31l,32l,33l,34l,35l,36l,37l,38l,39l,40l,41l,42l,43l,44l,45l,46l,47l,48l,49l)\n\
    \       val digits = List('0','1','2','3','4','5','6','7','8','9')\n       for(i\
    \ <- 0 until list.length) {\n           if(i % 11 == 0 && i % 13 == 0) \n    \
    \          (n - list(i)).toLong\n           else if(list(i) % 11 == 0) \n    \
    \          (n - list(i)).toLong + 1\n           else \n              (n - list(i)).toLong\n\
    \       }", "        val buzz = Map(0 -> \"FizzBuzz\" , 1 -> \"Fizz\" , 2 -> \"\
    Buzz\" , 3 -> \"Fizz\" , 4 -> \"Buzz\" , 5 -> \"Fizz\" , 6 -> \"Buzz\" , 7 ->\
    \ \"FizzBuzz\")\n        val result = mutable.Buffer.empty[String]\n        for((i\
    \ : Int) <- 1 to n) {\n            result += buzz.getOrElse(i, \"\")\n       \
    \ }\n        (result.length)", "        def fiz(n: Long, m: Long, count1: Long):\
    \ Long = {\n            if (n % 11 == 0 || n % 13 == 0) m\n            else fiz(n\
    \ * 2, m + 1, count1 + 1)\n        }\n        if (n < 0) 0\n        else fiz(n,\
    \ 0, 0)", "        var count = 0\n        for(i <- n until Math.max(n, 10)) {\n\
    \            if((i mod 11) == 0) {\n                count += 1\n            }\n\
    \            else if((i mod 13) == 0) {\n                count += 1\n        \
    \    }\n            if(count == 3) {\n                println(i)\n           \
    \     count = 0\n            }\n        }\n        return count", "        var\
    \ count : Long = 0\n        var is11 : Boolean = false\n        var is13 : Boolean\
    \ = false\n        var remainder : Long = 0\n        while(n > remainder) {\n\
    \            val nextIs13 : Boolean = (n % 13 == 0)\n            val nextIs11\
    \ : Boolean = (n % 11 == 0)\n            val nextRemainder : Long = n / 10\n \
    \           if(nextRemainder < 11) {\n                count = nextRemainder +\
    \ count\n            } else if(nextRemainder < 13) {\n                count =\
    \ 11 + count\n            } else if(nextRemainder == 13) {\n                if(nextIs11)\
    \ {\n                    count = 11 + count\n                } else {\n      \
    \              count = count + 1\n                }\n            } else if(nextRemainder\
    \ == 11) {\n                if(nextIs13) {\n                    count = 11 + count\n\
    \                } else {\n                    count = count + 1\n           \
    \     }\n            } else if(nextRemainder > 13) {\n                count =\
    \ 11 + count\n            } else {\n                count = count + 1\n      \
    \      }\n            remainder = nextRemainder\n            n = n - 10\n    \
    \    }\n        if(n > 0) {\n            count = count + 1\n        }\n      \
    \  count"]
stop_tokens:
- "\n    }\n"
