language: scala
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val histogram = new collection.mutable.HashMap[String,Long]\n        for\
    \ (letter <- letters) histogram.put(letter, histogram.getOrElse(letter,0) + 1)\n\
    \        histogram.map{case (k,v) => (k, v)}.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwsiladmd.scala:21:84 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (letter <- letters) histogram.put(letter,\
    \ histogram.getOrElse(letter,\e[31m0\e[0m) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwsiladmd.scala:22:8 ---------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        histogram.map{\e[33mcase\e[0m (k,v) => (k, v)}.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e\
    [0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = scala.collection.mutable.Map.empty[String,Long]\n\
    \        for (letters <- test.split(\" \")) {\n            val pair = map.getOrElseUpdate(letters,\
    \ 1l)\n            map += letters -> pair + 1l\n        }\n        map.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_km3kni4.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            map += letters -> pair + \e[31m1l\e[0m\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of (String, Long), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_km3kni4.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").groupBy(_).map{case (k,v)\
    \ => k -> v.size}.maxBy(_._2).map{case (k,v) => k -> v}\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpgaa9lkvy.scala:19:32 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\" \"\e[0m).groupBy(_).map{\e\
    [33mcase\e[0m (k,v) => k -> v.size}.maxBy(_._2).map{\e[33mcase\e[0m (k,v) => k\
    \ -> v}\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m \
    \  |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => \n\e[31m   |\e[0m     test.split(\e[32m\" \"\e[0m).groupBy(_$1).map(\n\
    \e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase \e[0m(k, v) => \n\e\
    [31m   |\e[0m           k -> v.size\n\e[31m   |\e[0m       }\n\e[31m   |\e[0m\
    \     ).maxBy(_$2 => _$2._2).map(\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m  \
    \       \e[33mcase \e[0m(k, v) => \n\e[31m   |\e[0m           k -> v\n\e[31m \
    \  |\e[0m       }\n\e[31m   |\e[0m     ).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpgaa9lkvy.scala:19:82\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e\
    [31m\" \"\e[0m).groupBy(_).map{\e[33mcase\e[0m (k,v) => k -> v.size}.maxBy(_._2).map{\e\
    [33mcase\e[0m (k,v) => k -> v}\n\e[31m\e[31m   |\e[0m                        \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter x$1 of expanded function:\n\e[31m   |\e[0m   x$1 =>\
    \ \n\e[31m   |\e[0m     x$1\e[33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m\
    \   |\e[0m         \e[33mcase \e[0m(k, v) => \n\e[31m   |\e[0m           k ->\
    \ v\n\e[31m   |\e[0m       }.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgaa9lkvy.scala:19:96\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\"\
    \ \"\e[0m).groupBy(_).map{\e[33mcase\e[0m (k,v) => k -> v.size}.maxBy(_._2).map{\e\
    [33mcase\e[0m (k,v) => k -> v}\n\e[31m\e[31m   |\e[0m                        \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                                            Not\
    \ found: k\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`"
  stdout: ''
  timestamp: 1660028980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var histogram = Map[String,Long]()\n       \
    \ test.split(\"\\\\s\").foreach(letter => histogram(letter.toString -> 0l) +=\
    \ 1 )\n        histogram\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm438sumy.scala:20:54\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        test.split(\e[31m\"\\\
    \\s\"\e[0m).foreach(\e[36mletter\e[0m => histogram(letter.toString -> \e[31m0l\e\
    [0m) += \e[31m1\e[0m )\n\e[31m\e[31m   |\e[0m                                \
    \                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    \e[1m\e[31m(\e[0mString\e[1m\e\
    [31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m\n\e[31m   |\e\
    [0m                                                Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val chars = test.toList\n        val counts\
    \ = chars.foldLeft(Map[String,Long]())((map,char) => {\n            val current\
    \ = map.getOrElse(char, 0L)\n            map + (char -> (current + 1))\n     \
    \   })\n        counts.toMap\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqtbzauue.scala:21:40\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e\
    [36mcurrent\e[0m = map.getOrElse(char, \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                             Found:    (char : Char)\n\e[31m   |\e[0m       \
    \                                 Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqtbzauue.scala:22:19 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            map + (char -> (current + \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Found:    (\e[1m\e[31mChar\e[0m, Long)\n\e[31m   |\e[0m\
    \                   Required: (\e[1m\e[32mString\e[0m, Long)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqtbzauue.scala:24:8 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        counts.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toList.flatMap(x => x.toCharArray).groupBy(x\
    \ => x).map(x => (x._1,x._2.length)).toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpus3mt1qe.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.toList.flatMap(\e[36mx\e[0m => x.toCharArray).groupBy(\e\
    [36mx\e[0m => x).map(\e[36mx\e[0m => (x._1,x._2.length)).toMap\n\e[31m\e[31m \
    \  |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value toCharArray is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val chars = test.toLowerCase().toCharArray\n\
    \        val maxCount = new mutable.HashMap[Char,Long]()\n        for (c <- chars)\
    \ {\n            if (maxCount.get(c) == null) maxCount.put(c, 1l)\n          \
    \  else if (maxCount.get(c) >= 1L) maxCount.put(c, maxCount.get(c)+1L)\n     \
    \       else maxCount.put(c, maxCount.get(c)-1L)\n        }\n        maxCount.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3s0wwv77.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var mMap = Map[String,Long]()\n        for (c\
    \ <- test.split(\" \"))\n            if (c.nonEmpty) {\n                mMap +=\
    \ (c -> 1)\n            }\n        val maxCount = mMap.values.max\n        mMap.filter(_._2\
    \ == maxCount).sortBy(_._2).map { case (c,count) => c -> count }.toMap\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpof2f6l58.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        mMap.filter(_._2 == maxCount).sortBy(_._2).map\
    \ { \e[33mcase\e[0m (c,count) => c -> count }.toMap\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sortBy is\
    \ not a member of scala.collection.mutable.Map[String, Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660028982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val m = mutable.Map[String,Long]()\n       \
    \ test.toList.map(l => m.updated(l,0L)) // update\n        m.map(m => m._1 ->\
    \ m._2) // unzip\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4d8lebk.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val freq = new mutable.HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => {\n            freq.getOrElseUpdate(x,\
    \ 1L)\n        })\n        freq.mapValues(x => freq(x) - 1) // subtract one from\
    \ count if same letter\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfpbj56a.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfreq\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val list = test.split(\" \")\n        var freqs\
    \ = mutable.Map[String,Long]()\n        for (letter <- list) {\n            freqs\
    \ += letter->freqs.getOrElse(letter,0)+1\n        }\n        freqs.toMap\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp57fa2klm.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mfreqs\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val tokens = test.split(' ')\n        val letters\
    \ = tokens.toSet\n        val counts = mutable.Map.empty[String,Long]\n      \
    \  for (letter <- letters) {\n            counts += letter -> (tokens.count(letter\
    \ -> _))\n        }\n        counts\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7ltjr2h.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      var m = Map[String, Long]()\n      test.split(\"\
    \ \").foreach(letter => {\n        val count = m.getOrElse(letter, 0)\n      \
    \  m.put(letter, count + 1);\n      })\n      m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp49nc5y7z.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        m.put(letter, count + \e[31m1\e[0m);\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of AnyVal, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      var map = Map[String,Long]()\n      var letters\
    \ = test.split(\" \").map(_.toLowerCase)\n      letters.foreach(letter => {\n\
    \        map += (letter -> map.get(letter).getOrElse(0) + 1)\n      })\n     \
    \ map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxx6rxx78.scala:22:55 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        map += (letter -> map.get(letter).getOrElse(\e\
    [31m0\e[0m) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (String, AnyVal), but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(' ').toList.map(x => (x,test.count(x))\
    \ ).groupBy(x => (x._1)).mapValues(_.size).map{ case (k, v) => (k.mkString(\"\"\
    ), v) }.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4pi30g_.scala:19:54\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m' '\e\
    [0m).toList.map(\e[36mx\e[0m => (x,test.count(x)) ).groupBy(\e[36mx\e[0m => (x._1)).mapValues(_.size).map{\
    \ \e[33mcase\e[0m (k, v) => (k.mkString(\e[31m\"\"\e[0m), v) }.toMap\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (x : String)\n\
    \e[31m   |\e[0m                                               Required: Char =>\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if (test.isEmpty) Map.empty\n        else {\n\
    \            val chars = test.toUpperCase().split(\" \").map(_.toLower)\n    \
    \        val counts = chars.foldLeft(Map[String,Long]())((map, c) => (c -> (map.getOrElse(c,\
    \ 0) + 1))) \n            counts.map { case (k, v) => k -> (v.get * v._2) }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa33t2ap6.scala:21:60 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mchars\e[0m = test.toUpperCase().split(\e\
    [31m\" \"\e[0m).map(_.toLower)\n\e[31m\e[31m   |\e[0m                        \
    \                                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      value toLower is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmpa33t2ap6.scala:21:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mchars\e[0m = test.toUpperCase().split(\e\
    [31m\" \"\e[0m).map(_.toLower)\n\e[31m\e[31m   |\e[0m                        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                 No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val words = test.split(\" \")\n        var res\
    \ = new Map[String,Long]()\n        for (word <- words) {\n            var cnt\
    \ = 0\n            var maxCnt = -1\n            var maxStr = \"\"\n          \
    \  for (char <- word) {\n                cnt += 1\n                if (maxCnt\
    \ < cnt) maxCnt = cnt\n                if (res.getOrElse(char,0L) < cnt) {\n \
    \                   res(char) = cnt\n                    maxStr += char\n    \
    \            }\n            }\n            if (maxCnt > 0) {\n               \
    \ res(maxStr) = maxCnt\n            }\n        }\n        res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb6_skibk.scala:28:24 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m (res.getOrElse(char,\e\
    [31m0L\e[0m) < cnt) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value getOrElse is not a member of Unit\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb6_skibk.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    res(char) = cnt\n\e[31m\e[31m   |\e\
    [0m                    ^^^\e[0m\n\e[31m   |\e[0m                    value update\
    \ is not a member of Unit\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb6_skibk.scala:34:16\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                res(maxStr)\
    \ = maxCnt\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m   \
    \             value update is not a member of Unit\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpb6_skibk.scala:37:8 ---------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (res : Unit)\n\e[31m   |\e[0m        Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      test.toLowerCase splitBy \" \" grouped (x => x)\
    \ mapValues (_.toList) mapValues (_.size) toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5l3enxol.scala:19:97 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      test.toLowerCase splitBy \e[31m\" \"\e[0m grouped\
    \ (\e[36mx\e[0m => x) mapValues (_.toList) mapValues (_.size) toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5l3enxol.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      test.toLowerCase splitBy \e[31m\" \"\e[0m grouped\
    \ (\e[36mx\e[0m => x) mapValues (_.toList) mapValues (_.size) toMap\n\e[31m\e\
    [31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value splitBy\
    \ is not a member of String - did you mean String.split?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.flatMap { x => x.split(\" \").map(x =>\
    \ x -> 1) }.groupBy(_._1).mapValues(_.length).map{ case (k,v) => (k,v.toLong)\
    \ }.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp462mv8d4.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.flatMap { \e[36mx\e[0m => x.split(\e[31m\"\
    \ \"\e[0m).map(\e[36mx\e[0m => x -> \e[31m1\e[0m) }.groupBy(_._1).mapValues(_.length).map{\
    \ \e[33mcase\e[0m (k,v) => (k,v.toLong) }.toMap\n\e[31m\e[31m   |\e[0m       \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \  value split is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660028982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n       var histo = new mutable.HashMap[String,Long]\n\
    \       var tokens = test.split(\" \").toList\n       var mostCount = math.MaxLong\n\
    \       for (token <- tokens) {\n         val count = histo.count(token)\n   \
    \      if (count > mostCount) {\n           mostCount = count\n           histo\
    \ = histo.remove(token)\n         }\n       }\n       histo.toMap\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx70gf2ej.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m       \e[33mvar\e[0m \e[36mhisto\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx70gf2ej.scala:21:28\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \e[33mvar\e[0m \e\
    [36mmostCount\e[0m = math.MaxLong\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value MaxLong is not\
    \ a member of math\n2 errors found\n"
  stdout: ''
  timestamp: 1660028982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val m = test.toLowerCase.toStream.grouped(1).toList.map(c\
    \ => c.head -> c.size.toLong).reduceLeft((x,y) => x).map(_._2)\n        if(m.isEmpty)\
    \ Map.empty\n        else m\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpkkzhx1uy.scala:19:121 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = test.toLowerCase.toStream.grouped(\e\
    [31m1\e[0m).toList.map(\e[36mc\e[0m => c.head -> c.size.toLong).reduceLeft((\e\
    [36mx\e[0m,\e[36my\e[0m) => x).map(_._2)\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \                               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1._2.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkkzhx1uy.scala:20:13 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(m.isEmpty) Map.empty\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value isEmpty\
    \ is not a member of (Nothing, Nothing)\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkkzhx1uy.scala:21:13 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33melse\e[0m m\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m \
    \  |\e[0m             Found:    (m : Nothing *: Nothing *: EmptyTuple)\n\e[31m\
    \   |\e[0m             Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            histogram.put(letter,\
    \ histogram.getOrElse(letter, 0L) + 1)\n        }\n        histogram.toMap\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qw_e96g.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhistogram\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counters = mutable.Map[String,Long]()\n\
    \        test.split(\" \").foreach(c => {\n            val splitted = c.toLowerCase\
    \ :: counters\n            if(counters.contains(splitted.head)) {\n          \
    \      counters(splitted.head) += 1\n            } else {\n                counters(splitted.head)\
    \ = splitted.length\n            }\n        })\n        counters\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ywz9qpj.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounters\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def buildTree(s : String) : Map[String,Long]\
    \ = s match {\n            case \"\" => Map()\n            case _ => {\n     \
    \           val splits = s.split(\" \")\n                val m = new mutable.LinkedHashMap[String,Long]()\n\
    \                var count = 0L\n                var max = 0\n               \
    \ for (i <- 0 until splits.length-1) {\n                    val v = splits(i)\n\
    \                    if (m.contains(v)) {\n                        val vv = m(v)\n\
    \                        val c = vv.get + count\n                        m.updated(v,\
    \ new Long(c))\n                    } else {\n                        m.put(v,\
    \ new Long(count))\n                    }\n                    if (count > max)\
    \ {\n                        max = count\n                    }\n            \
    \        count += 1L\n                }\n                m\n            }\n  \
    \      }\n\n        // Split into lines\n        val splits = test.split(\"\\\
    n\")\n        val lines = splits.map(_.split(\" \")).filter(_.nonEmpty)\n\n  \
    \      // Sort lines by number of occurrences of each letter\n        var map\
    \ = lines.groupBy(_._1).mapValues(_.size)\n\n        // Sort map by largest to\
    \ smallest values\n        map = map.toSeq.sortWith((c1, c2) => c1._2 < c2._2\
    \ ? -1 : c1._1 == c2._1 ? 0 : 1)\n\n        // Build map of letters\n        val\
    \ m = buildTree(splits.last)\n        val result = map.toSeq.map {\n         \
    \   case (k,v) => (k,v / max)\n        }\n        map.clear()\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxi2aqdwd.scala:52:85 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        map = map.toSeq.sortWith((\e[36mc1\e[0m, \e[36mc2\e\
    [0m) => c1._2 < c2._2 ? -\e[31m1\e[0m : c1._1 \e[35m==\e[0m c2._1 \e[35m?\e[0m\
    \ \e[31m0\e[0m : \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                             ')' expected, but ':' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxi2aqdwd.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mm\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpxi2aqdwd.scala:36:30 --------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m                        max = count\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Found:    (count : Long)\n\e[31m   |\e[0m                        \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxi2aqdwd.scala:49:34\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33mvar\e[0m \e\
    [36mmap\e[0m = lines.groupBy(_._1).mapValues(_.size)\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^\e[0m\n\e[31m   |\e[0m                    \
    \           value _1 is not a member of Array[String]\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpxi2aqdwd.scala:52:72 ------------------------\e[0m\e[0m\n\
    \e[31m52 |\e[0m        map = map.toSeq.sortWith((\e[36mc1\e[0m, \e[36mc2\e[0m)\
    \ => c1._2 < c2._2 ? -\e[31m1\e[0m : c1._1 \e[35m==\e[0m c2._1 \e[35m?\e[0m \e\
    [31m0\e[0m : \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \                                            ^^\e[0m\n\e[31m   |\e[0m        \
    \                           "
  stdout: ''
  timestamp: 1660028993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // your code here\n        var map = mutable.Map.empty[String,Long]\n\
    \        for (letter <- test.toList) {\n            if (map.contains(letter))\
    \ {\n                map(letter) += 1\n            }\n            else {\n   \
    \             map(letter) = 1\n            }\n        }\n        return map\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp59kpemc9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.foldLeft(Map[String, Long]()) {\n     \
    \       case(acc, letter) => acc.getOrElse(letter, 0l) += 1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5ykbev0.scala:20:47\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m(acc,\
    \ letter) => acc.getOrElse(letter, \e[31m0l\e[0m) += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                               Found:    (letter : Char)\n\
    \e[31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val chars = test.toCharArray.distinct.sorted\n\
    \        chars.foldRight(Map[String,Long]())((map,x) => {\n            val count\
    \ = map.getOrElse(x,0L) + 1L\n            map += (x -> count)\n            map\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn9vuj79w.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = map.getOrElse(x,\e\
    [31m0L\e[0m) + \e[31m1L\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value getOrElse is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn9vuj79w.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            map += (x -> count)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Char - did you mean map.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn9vuj79w.scala:23:12\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            map\n\e[31m\e[31m\
    \   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            Found:    (map : Char)\n\
    \e[31m   |\e[0m            Required: scala.collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val words = (test+test).split(\" \") map { s\
    \ => s.toLowerCase }.toList\n        val letters = words.flatMap(_.toCharArray).groupBy(_).toList.sortWith(_._2\
    \ < _._2)\n        val map = new collection.mutable.HashMap[String,Long]()\n \
    \       letters.map {case (letter,list) =>\n            if(map.contains(letter)){\n\
    \                val oldCount = map.get(letter)\n                map.put(letter,\
    \ oldCount+1)\n            } else {\n                map.put(letter, list.length)\n\
    \            }\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxa8770h2.scala:19:49 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = (test+test).split(\e\
    [31m\" \"\e[0m) map { \e[36ms\e[0m => s.toLowerCase }.toList\n\e[31m\e[31m   |\e\
    [0m                                                 ^\e[0m\n\e[31m   |\e[0m  \
    \                        Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                          I could not infer the type of the parameter s.\n\e\
    [31m\e[31m-- Error: /tmp/tmpxa8770h2.scala:19:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = (test+test).split(\e\
    [31m\" \"\e[0m) map { \e[36ms\e[0m => s.toLowerCase }.toList\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \  ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpxa8770h2.scala:20:59 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = words.flatMap(_.toCharArray).groupBy(_).toList.sortWith(_._2\
    \ < _._2)\n\e[31m\e[31m   |\e[0m                                             \
    \              ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => \n\e[31m   |\e[0m     words.flatMap(_$1\
    \ => _$1.toCharArray).groupBy(_$2).toList.sortWith(\n\e[31m   |\e[0m       (_$3,\
    \ _$4) => _$3._2 < _$4._2\n\e[31m   |\e[0m     ).\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxa8770h2.scala:30:8 ---------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m        map.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e\
    [0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val split = test.split(' ')\n        val map\
    \ = mutable.HashMap[String,Long]()\n        split.foreach{\n          element\
    \ =>\n            if(map.contains(element)){\n                map.update(element,map.get(element)+1)\n\
    \            } else {\n                map.update(element,1L)\n            }\n\
    \        }\n        map.toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3zvx3c0v.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var counter = mutable.Map.empty[String,Long]\n\
    \        for(letter <- test.toUpperCase().split(\" \")) {\n            if(counter.contains(letter))\
    \ {\n                val c = counter(letter) + 1\n                counter(letter)\
    \ = c\n            } else {\n                counter.put(letter, 1)\n        \
    \    }\n        }\n        counter.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcrwpne2o.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mcounter\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def getCount(letters: String, count: Map[String,\
    \ Long], count: Long) : Map[String, Long] = {\n            if (letters.isEmpty)\
    \ {\n                count\n            } else {\n                val first =\
    \ letters.head\n                val rest = letters.tail\n                val newCount\
    \ = count.get(first) + getCount(rest, count, count).getOrElse(count).asInstanceOf[Long]\n\
    \                (first -> (newCount + count.getOrElse(first, _)))\n         \
    \   }\n        }\n        val counts = mutable.Map[String,Long]()\n        test.toLowerCase.split(\"\
    \ \").foreach(x => counts += x -> 1L)\n        getCount(test, counts, 0L)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xdhnnik.scala:19:64 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[36mgetCount\e[0m(\e[36mletters\e\
    [0m: \e[35mString\e[0m, \e[36mcount\e[0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e\
    [35mLong\e[0m], \e[36mcount\e[0m: \e[35mLong\e[0m) : \e[35mMap\e[0m[\e[35mString\e\
    [0m, \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                             \
    \                                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is\
    \ already defined as \e[33mparameter\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5xdhnnik.scala:25:41\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m\
    \ \e[36mnewCount\e[0m = count.get(first) + getCount(rest, count, count).getOrElse(count).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                                         Found: \
    \   (first : Char)\n\e[31m   |\e[0m                                         Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5xdhnnik.scala:25:72\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m\
    \ \e[36mnewCount\e[0m = count.get(first) + getCount(rest, count, count).getOrElse(count).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (count : collection.mutable.Map[String, Long])\n\e[31m   |\e[0m         \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5xdhnnik.scala:25:89\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m\
    \ \e[36mnewCount\e[0m = count.get(first) + getCount(rest, count, count).getOrElse(count).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      "
  stdout: ''
  timestamp: 1660028995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(identity).mapValues(_.size).asInstanceOf[Map[String,\
    \ Long]]\n        val maxCount = counts.maxBy(_._2)._1\n        val maxCountLetter\
    \ = maxCount match {\n            case m if m == counts.size => \"\"\n       \
    \     case m if m > counts.size => \"\"\n            case m if m == counts.size\
    \ + 1 => counts.keys.last\n            case m if m == counts.size + 2 => counts.keys.last\n\
    \            case m if m == counts.size + 3 => counts.keys.last\n            case\
    \ m if m == counts.size + 4 => counts.keys.last\n            case m if m == counts.size\
    \ + 5 => counts.keys.last\n            case m if m == counts.size + 6 => counts.keys.last\n\
    \            case m if m == counts.size + 7 => counts.keys.last\n            case\
    \ m if m == counts.size + 8 => counts.keys.last\n            case m if m == counts.size\
    \ + 9 => counts.keys.last\n            case m if m == counts.size + 10 => counts.keys.last\n\
    \            case m if m == counts.size + 11 => counts.keys.last\n           \
    \ case m if m == counts.size + 12 => counts.keys.last\n            case m if m\
    \ == counts.size + 13 => counts.keys.last\n            case m if m == counts.size\
    \ + 14 => counts.keys.last\n            case m if m == counts.size + 15 => counts.keys.last\n\
    \            case m if m == counts.size + 16 => counts.keys.last\n           \
    \ case m if m == counts.size + 17 => counts.keys.last\n            case m if m\
    \ == counts.size + 18 => counts.keys.last\n            case m if m == counts.size\
    \ + 19 => counts.keys.last\n            case m if m == counts.size + 20 => counts.keys.last\n\
    \            case m if m == counts.size + 21 => counts.keys.last\n           \
    \ case m if m == counts.size + 22 => counts.keys.last\n            case m if m\
    \ == counts.size + 23 => counts.keys.last\n            case m if m == counts.size\
    \ + 24 => counts.keys.last\n            case m if m == counts.size + 25 => counts.keys.last\n\
    \            case m if m == counts.size + 26 => counts.keys.last\n           \
    \ case m if m == counts.size + 27 => counts.keys.last\n            case m if m\
    \ == counts.size + 28 => counts.keys.last\n            case m if m == counts.size\
    \ + 29 => counts.keys.last\n            case m if m == counts.size + 30 => counts.keys.last\n\
    \            case m if m == counts.size + 31 => counts.keys.last\n           \
    \ case m if m == counts.size + 32 => counts.keys.last\n            case m if m\
    \ == counts.size + 33 => counts.keys.last\n            case m if m == counts.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnva7yxc7.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnva7yxc7.scala:72:0 ----------------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmpnva7yxc7.scala:23:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m m \e[33mif\e[0m m == counts.size\
    \ => \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnva7yxc7.scala:24:33\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m m\
    \ \e[33mif\e[0m m > counts.size => \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Found:    Int\n\e[31m   |\e[0m                          Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpnva7yxc7.scala:25:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e[0m m \e[33mif\e[0m m == counts.size\
    \ + \e[31m1\e[0m => counts.keys.last\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String\
    \ and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpnva7yxc7.scala:26:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \     \e[33mcase\e[0m m \e[33mif\e[0m m == counts.size + \e[31m2\e[0m => counts.keys.last\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m         Values of types String and Int cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpnva7yxc7.scala:27:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mcase\e[0m m \e[33mif\e[0m m == counts.size\
    \ + \e[31m3\e[0m => counts."
  stdout: ''
  timestamp: 1660028999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val words = test.split(\"\\\\s+\")\n       \
    \ val m   = words.toMap\n        var result = (0 /: (m.size.toLong)).toMap\n \
    \       val it = (0 to m.size.toLong).iterator\n        var k = 0l\n        while\
    \ (it.hasNext) {\n            val key = it.next\n            val value = (m.getOrElse(key,0l))\n\
    \            if (value > result(k)) {\n                result(k) = value\n   \
    \             k += 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpioalgyqh.scala:20:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m   = words.toMap\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Cannot prove that String <:< (K, V)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                             where:    K is a type variable\n\e\
    [31m   |\e[0m                                       V is a type variable\n\e[31m\
    \   |\e[0m                             .\n1 error found\n"
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val splitted = test.split(\" \").toList\n  \
    \      val freqs = splitted.foldLeft(Map[String,Long]()){ (a,s) =>\n         \
    \   val spl = s.split(\"[\\\\s]+\")\n            val key = spl(0)\n          \
    \  val count = spl(1)\n            a(key) += count.toLong\n            a\n   \
    \     }\n        freqs\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.$anonfun$1(tmpmdvyq62r.scala:23)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\
    \tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\
    \tat Problem$.histogram(tmpmdvyq62r.scala:25)\n\tat Problem$.main(tmpmdvyq62r.scala:30)\n\
    \tat Problem.main(tmpmdvyq62r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var map = new TreeMap[String,Long]()\n     \
    \   var array = test.split(\" \")\n        for (i <- 0 until array.length) {\n\
    \            val item = array(i)\n            val count = map.getOrElse(item,0)\n\
    \            map(item) = count + 1\n        }\n        map.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm4e30_dy.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            map(item) = count + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of AnyVal, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpm4e30_dy.scala:26:8 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        map.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counter = mutable.Map[String,Long]()\n \
    \       val tokens = test.split(\" \").toList\n        tokens foreach { t =>\n\
    \            if(counter.contains(t)) {\n                counter(t) = counter(t)\
    \ + 1\n            } else {\n                counter(t) = 1 // default value\n\
    \            }\n        }\n        counter.mapValues { v => v }.maxBy(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwampodmx.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val m = mutable.HashMap.empty[String,Long]\n\
    \        test.split(\" \").foreach(x => m.update(x,m.getOrElse(x,0) + 1l))\n \
    \       m.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp216k_vfg.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map.empty[String,Long]\n \
    \       test.split(\" \").foreach(x => {\n            val n = map.getOrElse(x,0)\n\
    \            map += (x -> n + 1)\n        })\n        map.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvt1rlsk.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map[String,Long]()\n     \
    \   val counts = test.split(\" \").toList.map(word => word -> test.count(word.toLowerCase\
    \ => 1))\n        counts foreach (x => map += x)\n        map\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp706_3rhx.scala:20:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = test.split(\e\
    [31m\" \"\e[0m).toList.map(\e[36mword\e[0m => word -> test.count(word.toLowerCase\
    \ => \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                   \
    \                                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                            not a legal formal parameter\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp706_3rhx.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp706_3rhx.scala:20:95 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = test.split(\e\
    [31m\" \"\e[0m).toList.map(\e[36mword\e[0m => word -> test.count(word.toLowerCase\
    \ => \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                   \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                     Found:    (\e[31m1\e\
    [0m : Int)\n\e[31m   |\e[0m                                                  \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var m = Map[String,Long]();\n        var max\
    \ = 0l;\n        var maxKey = \"\"\n        for (word <- test.split(\" \")) {\n\
    \            val key = word.toUpperCase\n            if(m.contains(key)) {\n \
    \               m(key) = m(key) + 1l\n            } else {\n                m(key)\
    \ = m.getOrElse(key, 0) + 1l\n            }\n            if(m(key) > max) {\n\
    \                max = m(key)\n                maxKey = key\n            }\n \
    \       }\n        Map(maxKey -> max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq7btp438.scala:27:45 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                m(key) = m.getOrElse(key, \e[31m0\e[0m)\
    \ + \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val maxValue = letters.count(x => x.toChar.toLowerCase == 'a') || letters.count(x\
    \ => x.toChar.toLowerCase == 'b') || letters.count(x => x.toChar.toLowerCase ==\
    \ 'c') || letters.count(x => x.toChar.toLowerCase == 'd')\n        letters.groupBy(x\
    \ => x.toChar.toLowerCase )\n            .mapValues(x => x.length)\n         \
    \   .maxBy(x => x._2)\n            ._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9x3q54nv.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = letters.count(\e\
    [36mx\e[0m => x.toChar.toLowerCase == \e[31m'a'\e[0m) || letters.count(\e[36mx\e\
    [0m => x.toChar.toLowerCase == \e[31m'b'\e[0m) || letters.count(\e[36mx\e[0m =>\
    \ x.toChar.toLowerCase == \e[31m'c'\e[0m) || letters.count(\e[36mx\e[0m => x.toChar.toLowerCase\
    \ == \e[31m'd'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ toChar is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9x3q54nv.scala:20:95\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxValue\e[0m = letters.count(\e[36mx\e[0m => x.toChar.toLowerCase == \e[31m'a'\e\
    [0m) || letters.count(\e[36mx\e[0m => x.toChar.toLowerCase == \e[31m'b'\e[0m)\
    \ || letters.count(\e[36mx\e[0m => x.toChar.toLowerCase == \e[31m'c'\e[0m) ||\
    \ letters.count(\e[36mx\e[0m => x.toChar.toLowerCase == \e[31m'd'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 value toChar is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9x3q54nv.scala:21:31 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        letters.groupBy(\e[36mx\e[0m => x.toChar.toLowerCase\
    \ )\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             value toChar is not a member of String\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toLowerCase split \" \" groupBy (_ == test)\
    \ mapValues (_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjjdfhr1z.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.toLowerCase split\
    \ \e[31m\" \"\e[0m groupBy (_ == test) mapValues (_.length)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Boolean, Int]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").toList.groupBy(x => x).toList\n\
    \          .sortWith((t1, t2) => t1._2 < t2._2 || (t1._2==t2._2 && t1._1 > t2._1))\n\
    \          .map{ case (letter,occurrences) => letter -> occurrences.size }\n \
    \         .groupBy(x => x)\n          .mapValues(_.size)\n          .toMap\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxrk8nnh0.scala:20:38 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          .sortWith((t1, t2) => t1._2 < t2._2 || (t1._2==t2._2\
    \ && t1._1 > t2._1))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[String], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e\
    [0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").map { a => a -> test.count(a).asInstanceOf[Long]}.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb481_jl8.scala:19:51\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).map { \e[36ma\e[0m => a -> test.count(a).asInstanceOf[\e[35mLong\e[0m]}.toMap\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                               Found:    (a : String)\n\
    \e[31m   |\e[0m                                               Required: Char =>\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toList.map(letter => letter -> test.count(letter)).toMap.maxBy{case\
    \ (k,v) => v}\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr0xcq09p.scala:19:55\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.toList.map(\e[36mletter\e\
    [0m => letter -> test.count(letter)).toMap.maxBy{\e[33mcase\e[0m (k,v) => v}\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    (letter\
    \ : Char)\n\e[31m   |\e[0m                                               Required:\
    \ Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var res = Map[String,Long]()\n        for (letter\
    \ <- test.split(\" \")) {\n            if (res.contains(letter)) {\n         \
    \       val curVal = res(letter)\n                val newVal = curVal + 1\n  \
    \              res = res.update(letter -> (newVal))\n            } else {\n  \
    \              res = res.update(letter -> (1L))\n            }\n        }\n  \
    \      res\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_ajrlry.scala:24:33\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                res = res.update(letter\
    \ -> (newVal))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    \e[1m\e[31m(\e\
    [0mString\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m                                 Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_ajrlry.scala:26:33 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                res = res.update(letter -> (\e[31m1L\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    \e[1m\e[31m(\e[0mString\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m\n\e[31m\
    \   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val result = mutable.Map.empty[String,Long]\n\
    \        test.toLowerCase split ' ' foreach { c =>\n            val count = test.count(_\
    \ == c)\n            if (result.contains(c)) {\n                result(c) += count\n\
    \            } else {\n                result(c) += count\n            }\n   \
    \     }\n        result.toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2atucwx.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpk2atucwx.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = test.count(_\
    \ == c)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660029002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // Split test into array of single letters\n\
    \        var letters = test.split(\" \")\n        // Keep track of letters with\
    \ their counts\n        var lettersWithCount = Map[String,Long]()\n        //\
    \ Loop through letters and count them\n        for (letter <- letters) {\n   \
    \         lettersWithCount += letter -> (lettersWithCount.get(letter) match {\n\
    \                case None => 1\n                case Some(c) => (c + 1) \n  \
    \          })\n        }\n        // Return count of unique letters with their\
    \ counts\n        lettersWithCount.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp04mefc5y.scala:31:8\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m        lettersWithCount.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Map[String, Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e\
    [0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = test.split(\" \").map(x => x.toLowerCase\
    \ -> 1l).toMap\n        val maxKey = test.split(\" \").map(x => x.toLowerCase).maxBy(_._2)._1\n\
    \        val maxValue = test.split(\" \").map(x => x.toLowerCase).maxBy(_._2)._2\n\
    \        map.filter(_._1 == maxKey).map(_._2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xiksjol.scala:20:69 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxKey\e[0m = test.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => x.toLowerCase).maxBy(_._2)._1\n\e[31m\e[31m\
    \   |\e[0m                                                                   ^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value _2 is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmp0xiksjol.scala:20:72 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxKey\e[0m = test.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => x.toLowerCase).maxBy(_._2)._1\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \     ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xiksjol.scala:21:71\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxValue\e[0m = test.split(\e[31m\" \"\e[0m).map(\e[36mx\e[0m => x.toLowerCase).maxBy(_._2)._2\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ value _2 is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmp0xiksjol.scala:21:74\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxValue\e[0m = test.split(\e[31m\" \"\e[0m).map(\e[36mx\e\
    [0m => x.toLowerCase).maxBy(_._2)._2\n\e[31m\e[31m   |\e[0m                  \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter cmp of \e[33mmethod\e\
    [0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnce"
  stdout: ''
  timestamp: 1660029005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counts = test.groupBy(c => c).toSeq.sortWith(_.count(_\
    \ == _) > _.count(_ == _))\n        val map = counts.toMap.mapValues(_.length)\n\
    \        return map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv7jk7cdg.scala:19:59 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = test.groupBy(\e\
    [36mc\e[0m => c).toSeq.sortWith(_.count(_ == _) > _.count(_ == _))\n\e[31m\e[31m\
    \   |\e[0m                                                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m value count is not a member of (Char, String) - did you mean _$1.clone?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv7jk7cdg.scala:21:15 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mreturn\e[0m map\n\e[31m\e[31m   |\e[0m\
    \               ^^^\e[0m\n\e[31m   |\e[0m               Found:    (map : scala.collection.MapView[Char,\
    \ Int])\n\e[31m   |\e[0m               Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counts = test.\n            split(\" \"\
    ).\n            map(_.toLowerCase).\n            groupBy(identity).\n        \
    \    map(x => (x._1, x._2.length)).toMap\n        val mostFrequent = counts.maxBy(x\
    \ => x._2)\n        if (counts == mostFrequent) mostFrequent else Map[String,Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0281dv81.scala:25:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (counts == mostFrequent) mostFrequent\
    \ \e[33melse\e[0m Map[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types Map[String,\
    \ Int] and (String, Int) cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0281dv81.scala:25:36 --------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (counts == mostFrequent) mostFrequent\
    \ \e[33melse\e[0m Map[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (mostFrequent : (String, Int))\n\e[31m   |\e\
    [0m                          Required: collection.mutable.Map[String, Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if (test.isEmpty) {\n            return Map()\n\
    \        }\n        val tokens = test.split(\" \").toList\n        val letters\
    \ : Map[String,Long] = tokens.groupBy(t => t).mapValues(_.size)\n        val maxCount\
    \ = letters.max\n        val maxCountLetter = letters.maxBy(_._2)._1\n       \
    \ (letters ++ Map(maxCountLetter -> maxCount)).filter(_._2 == maxCount).map(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl0d9shry.scala:23:73\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mletters\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mLong\e[0m] = tokens.groupBy(\e[36mt\e\
    [0m => t).mapValues(_.size)\n\e[31m\e[31m   |\e[0m                           \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m                         Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl0d9shry.scala:26:82\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        (letters ++ Map(maxCountLetter\
    \ -> maxCount)).filter(_._2 == maxCount).map(_._1)\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    ((String, Matchable))\
    \ => String\n\e[31m   |\e[0m                       Required: ((String, Matchable))\
    \ => \e[1m\e[32m(\e[0mString\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0m\e[1m\e[32mLong\e\
    [0m\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val words = test.split(\" \").toList\n     \
    \   val histogram = new mutable.HashMap[String,Long]()\n        for(word <- words){\
    \ histogram.put(word, 1L) }\n        histogram.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnvs4qz6z.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhistogram\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val histograms = test.split(\" \").map(letter\
    \ => {\n            (letter, test.split(letter).length)\n        }).toMap.groupBy\
    \ { _._2 }.map { case (k, v) => k -> (v.maxBy(_._1)._1 + 1l) }\n        if (histograms.isEmpty)\
    \ {\n            Map[String,Long]()\n        } else {\n            histograms\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp960bp5l_.scala:25:12\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            histograms\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (histograms : Map[Int, String])\n\e[31m   |\e[0m            Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.LinkedHashMap(\"b\" -> 0)\n\
    \        test.toCharArray().flatMap { c => \n            if (map.contains(c))\
    \ map.update(c, map.get(c) + 1l) else map.put(c, 1l)\n            c \n       \
    \ }.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5qn9vcm.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.LinkedHashMap(\e\
    [31m\"b\"\e[0m -> \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpm5qn9vcm.scala:23:9 ------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }.toMap\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\
    \e[31m   |\e[0mno given instance of type Char => Iterable[B] was found for parameter\
    \ asIterable of \e[33mmethod\e[0m \e[35mflatMap\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var counts = HashMap[String, Long]()\n     \
    \   var res : Map[String,Long] = HashMap[String,Long]()\n        for ( elem <-\
    \ test.split(' ') ) {\n            if ( counts.get(elem) == null ) counts += elem\
    \ -> 1\n            else counts += elem -> counts.get(elem) + 1\n        }\n \
    \       for ( (key, value) <- counts ) res = res.updated(key, value)\n       \
    \ res\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp412go6hu.scala:23:52 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m counts += elem -> counts.get(elem)\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (String, Option[Long]), but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letterCounts = mutable.Map.empty[String,Long]\n\
    \        test.foreach(charToInt _){ count =>\n            val letter = test.charAt(count)\n\
    \            if(letterCounts.contains(letter)) {\n                letterCounts(letter)\
    \ += 1\n            }\n            else {\n                letterCounts(letter)\
    \ = 1\n            }\n        }\n        letterCounts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7iwbcpf.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7iwbcpf.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        test.foreach(charToInt\
    \ _){ \e[36mcount\e[0m =>\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: charToInt\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = new mutable.HashMap[String, Long]()\n        for (letter <- letters)\
    \ {\n            if (!map.contains(letter)) {\n                map.put(letter,\
    \ 1)\n            } else {\n                map.put(letter, map.get(letter) +\
    \ 1)\n            }\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp5zxhf8p.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map[String,Long]()\n     \
    \   test.split(\" \").toList.foreach(s => map.update(s, map.getOrElse(s, 0L) +\
    \ 1))\n        val biggest = map.filter(_._2 > map.values.max).sortBy(_._2).last\n\
    \        val small = map.filter(_._2 == biggest._2).sortBy(_._1).last\n      \
    \  Map(small._1 -> biggest._2)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3a8y7e9.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      var chars = test.toList\n      var map : Map[String,Long]\
    \ = Map()\n      chars.foreach(c => if (!map.contains(c)) map += c -> 1l)\n  \
    \    chars.distinct.foreach { c => if (!map.contains(c)) map += c -> 1l}\n   \
    \   chars.foreach(c => map.get(c.toLowerCase) match {\n        case None => map\
    \ += c -> 1l\n        case Some(v) => (map + (c -> map.get(c) + v))\n      })\n\
    \      map // the map with the letter with the most repetition\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58rc1wm9.scala:21:43\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m      chars.foreach(\e[36mc\e\
    [0m => \e[33mif\e[0m (!map.contains(c)) map += c -> \e[31m1l\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                           ^\e[0m\n\e[31m   |\e[0m \
    \                                          Found:    (c : Char)\n\e[31m   |\e\
    [0m                                           Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58rc1wm9.scala:21:54 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      chars.foreach(\e[36mc\e[0m => \e[33mif\e[0m (!map.contains(c))\
    \ map += c -> \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (\e[1m\e[31mChar\e[0m, Long)\n\e[31m \
    \  |\e[0m                                                Required: (\e[1m\e[32mString\e\
    [0m, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58rc1wm9.scala:22:54\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m      chars.distinct.foreach\
    \ { \e[36mc\e[0m => \e[33mif\e[0m (!map.contains(c)) map += c -> \e[31m1l\e[0m}\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (c : Char)\n\e[31m   |\e[0m                                             \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp58rc1wm9.scala:22:65 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m      chars.distinct.foreach { \e[36mc\e[0m => \e[33mif\e[0m (!map.contains(c))\
    \ map += c -> \e[31m1l\e[0m}\n\e[31m\e[31m   |\e[0m                          \
    \                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                        Found:    (\e[1m\e[31mChar\e[0m, Long)\n\
    \e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660029009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.trim().split(\" \").foldLeft(Map[String,Long]()){\n\
    \            (map, letter) => map + (letter -> (map.getOrElse(letter, 0l) + 1l))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4v9bbf43.scala:25)\n\tat Problem.main(tmp4v9bbf43.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var map = Map[String,Long]()\n        for (letter\
    \ <- test.split(\" \") ){\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> (count + 1))\n        }\n        map\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptq3o9yc9.scala:28)\n\tat Problem.main(tmptq3o9yc9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val a = test.split(\" \").map(x => (x, 1))\n\
    \        val grouped = a.groupBy(_._1).mapValues(_.size)\n        return grouped.mapValues(_.toList).toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpou_ffsuc.scala:21:35 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mreturn\e[0m grouped.mapValues(_.toList).toMap\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m           value toList is not a member of Int - did you mean _$3.toInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val data = test.split(\" \").toList\n      \
    \  val occurrences = mutable.Map[String,Long]()\n        for (dataStr <- data)\
    \ {\n            if (occurrences.containsKey(dataStr)) {\n                occurrences(dataStr)\
    \ += 1\n            } else {\n                occurrences(dataStr) =1\n      \
    \      }\n        }\n        occurrences.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyx45rdgx.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moccurrences\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var map = new HashMap[String,Long]()\n     \
    \   for (c <- test.toCharArray) map += c.toString() -> map.getOrElse(c.toString,0l)\
    \ + 1l\n        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp59knoqew.scala:20:88 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (c <- test.toCharArray) map +=\
    \ c.toString() -> map.getOrElse(c.toString,\e[31m0l\e[0m) + \e[31m1l\e[0m\n\e\
    [31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (String, Long), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp59knoqew.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        map.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val result = new mutable.HashMap[String,Long]()\n\
    \        for (letter <- test.split(\" \"))\n        {\n            if (result.contains(letter))\
    \ result(letter) += 1\n            else result.put(letter, 1)\n        }\n   \
    \     result.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqjsa9cy.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").map(word => word -> test.split(word).length).toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptxyqmca0.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\"\
    \ \"\e[0m).map(\e[36mword\e[0m => word -> test.split(word).length).toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var ms = mutable.Map[String,Long]()\n      \
    \  for(i <- test.split(\" \")){\n            if(i.length() == 0){continue}\n \
    \           if(i.toLowerCase in ms){\n                ms(i.toLowerCase) += 1 \n\
    \            }\n            else {\n                ms(i.toLowerCase) = 1l\n \
    \           }\n        }\n        ms.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnn2u8a2q.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mms\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnn2u8a2q.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(i.length() == \e[31m0\e[0m){continue}\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: continue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnn2u8a2q.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(i.toLowerCase in ms){\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    value in is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660029010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val count = mutable.Map[String,Long]()\n   \
    \     val maxCount = mutable.Map[String,Long]()\n        val map = test.split(\"\
    \ \").map(n => if(count.contains(n)) count+=(n->count.getOrElse(n,0)+1) else count+=(n->1))\n\
    \        val result = map.groupBy(_._1).mapValues(_.map(_._2).sum).filter { case\
    \ (k,v) => v > 1 }.mapValues(_.toLong).toMap\n        maxCount.zip(result).filter\
    \ { case (k,v) => v > 1 }.mapValues(_.toLong).map{case (k,v) => k+\" \"+ v.toString\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
    \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhe7pjdh.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhe7pjdh.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpzhe7pjdh.scala:21:119 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = test.split(\e\
    [31m\" \"\e[0m).map(\e[36mn\e[0m => \e[33mif\e[0m(count.contains(n)) count+=(n->count.getOrElse(n,\e\
    [31m0\e[0m)+\e[31m1\e[0m) \e[33melse\e[0m count+=(n->\e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if(test.isEmpty || test.indexOf(' ')==-1) Map()\n\
    \        else test.split(' ').groupBy(x=>x).map(x=>x(x._2).map(x=>x._1)).toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk96ki2u.scala:19:44 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(test.isEmpty || test.indexOf(\e\
    [31m' '\e[0m)==-\e[31m1\e[0m) Map()\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value ==-\
    \ is not a member of Int - did you mean Int.==?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsk96ki2u.scala:20:54 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33melse\e[0m test.split(\e[31m' '\e[0m).groupBy(x=>x).map(x=>x(x._2).map(x=>x._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  Array[String]\n\e[31m   |\e[0m                                            \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk96ki2u.scala:20:67\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m test.split(\e\
    [31m' '\e[0m).groupBy(x=>x).map(x=>x(x._2).map(x=>x._1)).toMap\n\e[31m\e[31m \
    \  |\e[0m                                                                 ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if (test.length == 0) {\n            Map()\n\
    \        } else {\n            var freq = mutable.Map.empty[String,Long]\n   \
    \         test.split(' ').map(x => freq += x -> (freq.getOrElse(x,0L) + 1L)).filter(_._2\
    \ > 1).map(_._1).toMap\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp21zv7urb.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mvar\e[0m \e[36mfreq\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp21zv7urb.scala:23:78 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            test.split(\e[31m' '\e[0m).map(\e[36mx\e\
    [0m => freq += x -> (freq.getOrElse(x,\e[31m0L\e[0m) + \e[31m1L\e[0m)).filter(_._2\
    \ > \e[31m1\e[0m).map(_._1).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var map = Map[String,Long]()\n        var count\
    \ = new mutable.HashMap[String,Long]()\n\n        for (i <- test.split(\" \")){\n\
    \            val t = i.toUpperCase + i\n            if (map.contains(t)) map.get(t)\
    \ += 1\n            else  count += (t,1L)\n        }\n        map = map.toMap\n\
    \        if (count.size == 0) map = Map[String,Long]()\n        map.foreach((k,v)\
    \ => (k,v.toLong))\n        map\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wuvhw4f.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8wuvhw4f.scala:24:44\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m\
    \ (map.contains(t)) map.get(t) += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a\
    \ member of Option[Long] - did you mean Option[Long].!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8wuvhw4f.scala:27:14 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        map = map.toMap\n\e[31m\e[31m   |\e[0m           \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:    Map[String, Long]\n\
    \e[31m   |\e[0m              Required: \e[1m\e[32mscala\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e\
    [0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if(test.isEmpty) Map.empty[String,Long]\n  \
    \      else test.count(letter => test.split(\" \").count(l => l.contains(letter))).mapValues(_.toString).map(x\
    \ => (x._1, x._2.toLong)).toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_bhjc5is.scala:20:55\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m test.count(letter\
    \ => test.split(\e[31m\" \"\e[0m).count(l => l.contains(letter))).mapValues(_.toString).map(x\
    \ => (x._1, x._2.toLong)).toMap\n\e[31m\e[31m   |\e[0m                       \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    Int\n\e[31m   |\e[0m          \
    \                        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toSet\n    \
    \    val result = mutable.Map.empty[String, Long]\n        letters.foreach {x\
    \ => \n           if (result.contains(x)) {\n               result(x.toLong) +=\
    \ 1\n           } else {\n              result += (x.toLong -> 1L)\n         \
    \  }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwuna2rnw.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def histogramHelper(test : String, seen : mutable.Set[String],\
    \ results : mutable.Map[String, Long]) = {\n            val words = test.split(\"\
    \ \")\n            val maxCount = 1L\n            val maxWord = words(0)\n   \
    \         for(word <- words) {\n                val currentCount = results.remove(word)\n\
    \                if(currentCount > 0) {\n                    if(currentCount >\
    \ maxCount) {\n                        maxCount = currentCount\n             \
    \           maxWord = word\n                    }\n                    results\
    \ += ((word) -> currentCount)\n                }\n                else {\n   \
    \                 if(!seen.contains(word)) {\n                        seen +=\
    \ word\n                        histogramHelper(word, seen, results)\n       \
    \             }\n                }\n            }\n            (maxWord, maxCount)\n\
    \        }\n        val seen = mutable.Set()\n        val results = mutable.Map[String,\
    \ Long]()\n        histogramHelper(test, seen, results)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sr795vv.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[36mhistogramHelper\e[0m(\e\
    [36mtest\e[0m : \e[35mString\e[0m, \e[36mseen\e[0m : mutable.Set[\e[35mString\e\
    [0m], \e[36mresults\e[0m : mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]) =\
    \ {\n\e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sr795vv.scala:19:81\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e\
    [36mhistogramHelper\e[0m(\e[36mtest\e[0m : \e[35mString\e[0m, \e[36mseen\e[0m\
    \ : mutable.Set[\e[35mString\e[0m], \e[36mresults\e[0m : mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]) = {\n\e[31m\e[31m   |\e[0m                            \
    \                                                     ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7sr795vv.scala:27:33 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        maxCount = currentCount\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Reassignment to val maxCount\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp7sr795vv.scala:28:32 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                        maxWord = word\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                 Reassignment to val maxWord\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E044] Cyclic Error: /tmp/tmp7sr795vv.scala:35:24 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                        histogramHelper(wo"
  stdout: ''
  timestamp: 1660029017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toList.map(x => (x,1)).reduceByKey(_ +\
    \ _).map{\n            case ((x,y),z) => x -> (z.toLong/y.toLong).ceil.toInt\n\
    \        }.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpry86x20t.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.toList.map(\e[36mx\e[0m => (x,\e[31m1\e\
    [0m)).reduceByKey(_ + _).map{\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value reduceByKey is not a member of List[(Char, Int)]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = new mutable.HashMap[String,Long]()\n\
    \        for(c <- test) {\n            val count = map.getOrElse(c, 0)\n     \
    \       map.update(c, (count + 1l))\n        }\n        map \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdjv_c4h_.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // Split on space\n        var counts = new\
    \ mutable.HashMap[String,Long]\n        val splits = test.split(\" \").toList\n\
    \        splits.foreach{ elem =>\n            var elem = elem.toLowerCase\n  \
    \          if (!counts.contains(elem)) {\n                counts += (elem -> 1L)\n\
    \            } else {\n                val old = counts.get (elem)\n         \
    \       counts.put(elem,old + 1L)\n            }\n        }\n        // Return\
    \ map with most repeated element\n        val sorted = counts.toList.sortWith(\
    \ (x,y) => (y._2 > x._2)  || (x._2 == y._2))\n        val maxCount = sorted.head._2\n\
    \        val maxElem = sorted.head._1\n        val retVal = new mutable.HashMap[String,Long]\n\
    \        retVal.put(maxElem,maxCount)\n        return retVal\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1ru2nwo.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1ru2nwo.scala:35:25\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mretVal\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toLower.split(\"\\\\s+\").groupBy(_).map\
    \ { \n        case (k, v) => (k, v.length.toLong) \n        }.toMap\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpg2nnjjdr.scala:19:43 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.toLower.split(\e[31m\"\\\\s+\"\e[0m).groupBy(_).map\
    \ { \n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => \n\e[31m   |\e[0m     test.toLower.split(\e[32m\"\\\\s+\"\e\
    [0m).groupBy(_$1).map(\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0m(k, v) => \n\e[31m   |\e[0m           (k, v.length.toLong)\n\e[31m   |\e\
    [0m       }\n\e[31m   |\e[0m     ).toMap.\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpg2nnjjdr.scala:19:13 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        test.toLower.split(\e[31m\"\\\\s+\"\e[0m).groupBy(_).map { \n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value toLower is\
    \ not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660029018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var freq = Map[String,Long]()\n        test.split(\"\
    \ \").toList.foreach(x => {\n            var temp = freq.getOrElse(x,0)\n    \
    \        freq += (x -> temp)\n        })\n        return freq.toMap\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwb9z9gfp.scala:22:26\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            freq += (x -> temp)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (temp : AnyVal)\n\e[31m   |\e[0m            \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwb9z9gfp.scala:24:15 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mreturn\e[0m freq.toMap\n\e[31m\e[31m   |\e[0m          \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    Map[String, Long]\n\
    \e[31m   |\e[0m               Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val histogram = test.split(' ').toList.foldLeft(Map[String,Long]()){\n\
    \            (m,c) =>\n                val item = m.getOrElseUpdate(c,0L)\n  \
    \              m += c -> (item + 1)\n            }\n            histogram\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcvcjpoh4.scala:28)\n\tat Problem.main(tmpcvcjpoh4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val testArray = test.split(\" \").map(_.toLowerCase).toList\n\
    \        val histogram = testArray.toMap\n        testArray.toMap\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk5ooj3nh.scala:20:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhistogram\e[0m = testArray.toMap\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                     Cannot prove that String <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                     where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \       V is a type variable\n\e[31m   |\e[0m                                \
    \     .\n\e[31m\e[31m-- Error: /tmp/tmpk5ooj3nh.scala:21:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        testArray.toMap\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       Cannot prove that\
    \ String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                 V is\
    \ a type variable\n\e[31m   |\e[0m                       .\n2 errors found\n"
  stdout: ''
  timestamp: 1660029019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var map : Map[String,Long] = Map()\n       \
    \ test.split(\" \").foreach{ char =>\n            val count = map.get(char).map(x\
    \ => x += 1).getOrElse(1)\n            map += (char -> (count.toLong + 1))\n \
    \       }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpss3x998m.scala:21:49 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = map.get(char).map(\e\
    [36mx\e[0m => x += \e[31m1\e[0m).getOrElse(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                value += is not a member of Long - did you mean x.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counts = test.split(' ').groupBy(s => s)\n\
    \        val result = counts.reduceLeft(_ + _).map(t => (t._1._1, t._2))\n   \
    \     val keyed = new mutable.LinkedHashMap[String,Long]\n        result.foreach(x\
    \ => keyed += x -> 1L)\n        keyed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuw5am_ag.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = counts.reduceLeft(_\
    \ + _).map(\e[36mt\e[0m => (t._1._1, t._2))\n\e[31m\e[31m   |\e[0m           \
    \                            ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of (String, Array[String]), but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpuw5am_ag.scala:20:50 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = counts.reduceLeft(_\
    \ + _).map(\e[36mt\e[0m => (t._1._1, t._2))\n\e[31m\e[31m   |\e[0m           \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \            Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m        \
    \                  I could not infer the type of the parameter t.\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuw5am_ag.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mkeyed\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashMap[\e[35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuw5am_ag.scala:22:15\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result.foreach(\e\
    [36mx\e[0m => keyed += x -> \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value foreach is not a member of (Nothing, Nothing)\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // Split string into a list, group letters by\
    \ their first letter\n        val letters = test.toList.groupBy(_.charAt(0))\n\
    \        // Create a map and add every element in the list as a key and how many\
    \ times it appears in the list as a value\n        letters.map{ case (letter,\
    \ occurrences) => letter -> occurrences }.map(_.toMap)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgggvilo.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = test.toList.groupBy(_.charAt(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value charAt is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgggvilo.scala:22:58\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        letters.map{ \e[33mcase\e\
    [0m (letter, occurrences) => letter -> occurrences }.map(_.toMap)\n\e[31m\e[31m\
    \   |\e[0m                                                   ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value -> is not a member of\
    \ Nothing\n2 errors found\n"
  stdout: ''
  timestamp: 1660029021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val lettersWithCount = letters.groupBy(x => x).mapValues(_.size).toMap\n\
    \        if (lettersWithCount.isEmpty) {\n            lettersWithCount\n     \
    \   } else {\n            lettersWithCount.maxBy(_._2)._1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnoyzhdw0.scala:22:12\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            lettersWithCount\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Found:    (lettersWithCount : Map[String, Int])\n\e[31m   |\e[0m      \
    \      Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnoyzhdw0.scala:24:41 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            lettersWithCount.maxBy(_._2)._1\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    String\n\e[31m   |\e[0m            Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val freqs = mutable.Map[String, Long]()\n  \
    \      var count = 0\n        for (c: Char <- test.toCharArray) {\n          \
    \  if (freqs.contains(c))\n                freqs(c) += 1\n            else {\n\
    \                count += 1\n                freqs(c) = 1\n            }\n   \
    \     }\n        freqs.toMap\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptt2jg0dz.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfreqs\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counts = mutable.Map[String,Long]()\n  \
    \      val tokens = test.split(\" \").map(_.toLowerCase )\n        tokens foreach\
    \ {x =>\n            val v = counts.count(x)\n            if ( v > counts.count(x))\
    \ {\n                counts += x -> 1\n            } else if ( v == counts.count(x))\
    \ {\n                counts(x) = counts(x) + 1\n            }\n        }\n   \
    \     counts.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmi0txy6.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val test = test.split(\" \").toMap\n       \
    \ var m = 0L\n        var max = 0L\n        test.foreach {\n            pair =>\n\
    \            val count = pair._1.count(_ == pair._1)\n            val key = pair._1\n\
    \            if (count > max) max = count\n            if (count > m) {\n    \
    \            m = count\n            }\n        }\n        test.filter { case (k,\
    \ v) => v == max }\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmnqcc360.scala:19:19 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtest\e[0m = test.split(\e\
    [31m\" \"\e[0m).toMap\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m\
    \   |\e[0m                   Recursive \e[33mvalue\e[0m \e[35mtest\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val pattern = \"[a-z]+\".r\n        val matcher\
    \ = pattern.findFirstIn(test)\n        val histogram = new mutable.HashMap[String,Long]\n\
    \        var currentLetter = \"\"\n        var currentCount = 0\n        var repetition\
    \ = 0\n        var lastChar = \"\"\n        while (matcher.hasNext) {\n      \
    \      val next = matcher.next().toString.toLowerCase\n            val repeat\
    \ = test.split(next).length\n            if (repeat > currentCount) {\n      \
    \          currentLetter = next\n                currentCount = repeat\n     \
    \       }\n            if (lastChar == currentLetter) {\n                repetition\
    \ = repetition + 1\n            } else {\n                if (repetition > 0)\
    \ {\n                    histogram.put(currentLetter, currentCount)\n        \
    \        }\n                repetition = 1\n                currentCount = 1\n\
    \                lastChar = currentLetter\n            }\n        }\n        if\
    \ (repetition > 0) {\n            histogram.put(lastChar, currentCount)\n    \
    \    }\n        histogram.toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphw0x70oo.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhistogram\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphw0x70oo.scala:26:23 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mwhile\e[0m (matcher.hasNext) {\n\e[31m\e[31m   |\e[0m       \
    \        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value hasNext is\
    \ not a member of Option[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphw0x70oo.scala:27:31\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnext\e[0m = matcher.next().toString.toLowerCase\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next is not a\
    \ member of Option[String] - did you mean matcher.get?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").map(_.toLowerCase).groupBy(identity).map(x\
    \ => (x._2, x._1.size)).toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz63n0q.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\"\
    \ \"\e[0m).map(_.toLowerCase).groupBy(identity).map(\e[36mx\e[0m => (x._2, x._1.size)).toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[Array[String], Int]\n\e[31m   |\e[0m\
    \        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toList.zipWithIndex.groupBy(identity)\n\
    \           .mapValues(_.size.toLong)\n           .maxBy(_._2)\n           .mapValues(_._1)\n\
    \           .toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9nwok0p.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.toList.zipWithIndex.groupBy(identity)\n\e\
    [31m20 |\e[0m           .mapValues(_.size.toLong)\n\e[31m21 |\e[0m           .maxBy(_._2)\n\
    \e[31m22 |\e[0m           .mapValues(_._1)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0m        value mapValues is not a member of ((Char, Int), Long)\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.toUpperCase().toList\n  \
    \      val result = new mutable.HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (letter in result.keySet) {\n                result(letter)\
    \ += 1\n            } else {\n                val count = letters.count(_ == letter)\
    \ + 1\n                result.put(letter, count)\n            }\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jqwa98h.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jqwa98h.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m\
    \ (letter in result.keySet) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value in is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val chars = test.split(\" \").toList.sortWith(_\
    \ < _)\n        val count = mutable.HashMap.empty[String,Long]\n        chars\
    \ foreach {c => c match {\n            case a if !count.containsKey(a) => count(c)\
    \ = 1l\n            case a if count.contains(a) => count(c) += 1\n           \
    \ case _ => null\n        }}\n        count.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe73foi9i.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toList match {\n            case Nil =>\
    \ Map.empty[String,Long]\n            case x => x.grouped(1).map { case (k, v)\
    \ => (k, v.size) }.toMap\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw3z6wp55.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m x => x.grouped(\e[31m1\e\
    [0m).map { \e[33mcase\e[0m (k, v) => (k, v.size) }.toMap\n\e[31m\e[31m   |\e[0m\
    \                                                            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       value size is not a member of\
    \ Any\n1 error found\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach { letter =>\n\
    \            map.put(letter, map.getOrElse(letter, 0L) + 1)\n        }\n     \
    \   letters.map{letter => (letter, map.getOrElse(letter, 0L))}\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvkktooce.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvkktooce.scala:24:19 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        letters.map{\e[36mletter\e[0m => (letter, map.getOrElse(letter,\
    \ \e[31m0L\e[0m))}\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[(String, Nothing)]\n\e[31m   |\e[0m\
    \        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val testString = test.split(\" \").toList\n\
    \        val testMap = new mutable.HashMap[String,Long]()\n        testString.foreach(x\
    \ => {\n            if(testMap.contains(x))\n                testMap(x) = testMap(x)\
    \ + 1\n            else\n                testMap(x) = 1\n        })\n        testMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpob028bn7.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtestMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = test.chars.groupBy(x => x).mapValues(_.size)\n\
    \        val max = map.maxBy(_.value)._1\n        val counts = map.map(x => (x._1,\
    \ x._2)/max)\n        Map(max -> counts.toSeq)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3cyl7nsd.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = test.chars.groupBy(\e\
    [36mx\e[0m => x).mapValues(_.size)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value groupBy is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").groupBy(s => s).mapValues(_.size).map\
    \ {\n            case (k,v) => k -> v.longValue()\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3q_hr4u3.scala:19:62\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(\e[36ms\e[0m => s).mapValues(_.size).map {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.View[(String,\
    \ Long)]\n\e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\
    \e[31m20 |\e[0m            \e[33mcase\e[0m (k,v) => k -> v.longValue()\n\e[31m21\
    \ |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(' ').map { x => x -> test.count(x)\
    \ }.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppp15na_q.scala:19:51\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m' '\e\
    [0m).map { \e[36mx\e[0m => x -> test.count(x) }.toMap\n\e[31m\e[31m   |\e[0m \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                            Found:    (x : String)\n\e[31m  \
    \ |\e[0m                                               Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if (test.length == 0) {\n            Map[String,Long]()\n\
    \        } else {\n            val countMap = test.chars.map(c => c -> 1l).reduceByKey(_\
    \ + _).map(_._2)\n            val result = countMap.foldLeft(Map[String,Long]())\
    \ {\n                case (acc, (count, letter)) => acc + (letter -> (count.toDouble\
    \ / test.length))\n            }\n            result\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8qy9oqk5.scala:22:47\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36mcountMap\e[0m = test.chars.map(\e[36mc\e[0m => c -> \e[31m1l\e[0m).reduceByKey(_\
    \ + _).map(_._2)\n\e[31m\e[31m   |\e[0m                                      \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \         Found:    (Int, Long)\n\e[31m   |\e[0m                             \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      test.toLowerCase.split().toList.groupBy(_).mapValues(_.size).maxBy(_._2).map(_._1).toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpukq40i50.scala:19:46 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      test.toLowerCase.split().toList.groupBy(_).mapValues(_.size).maxBy(_._2).map(_._1).toMap\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could not\
    \ infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m_$1\
    \ => \n\e[31m   |\e[0m  test.toLowerCase.split().toList.groupBy(_$1).mapValues(_$2\
    \ => _$2.size).maxBy(\n\e[31m   |\e[0m    _$3 => _$3._2\n\e[31m   |\e[0m  ).map(_$4\
    \ => _$4._1).toMap.\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpukq40i50.scala:19:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m      test.toLowerCase.split().toList.groupBy(_).mapValues(_.size).maxBy(_._2).map(_._1).toMap\n\
    \e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch arguments\
    \ ()\n2 errors found\n"
  stdout: ''
  timestamp: 1660029028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val result = mutable.Map.empty[String,Long]\n\
    \        for {\n            letter <- test.split(' ').toList\n            count\
    \ <- result.foldLeft(0)((count, letter) => count + 1 if (result.getOrElse(letter,\
    \ 0L) > count))\n        } yield letter -> count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1w4nwryw.scala:22:69 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            count <- result.foldLeft(\e[31m0\e[0m)((count,\
    \ letter) => count + \e[31m1\e[0m \e[33mif\e[0m (result.getOrElse(letter, \e[31m0L\e\
    [0m) > count))\n\e[31m\e[31m   |\e[0m                                        \
    \                             ^^\e[0m\n\e[31m   |\e[0m                       \
    \                     ')' expected, but 'if' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1w4nwryw.scala:19:21 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").map(word => word -> (test.count(word).reduceLeft{_\
    \ + _}.toLong)).toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzn13f4w.scala:19:56\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).map(\e[36mword\e[0m => word -> (test.count(word).reduceLeft{_ + _}.toLong)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    (word\
    \ : String)\n\e[31m   |\e[0m                                               Required:\
    \ Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var freq = mutable.Map[String,Long]()\n    \
    \    var map = Map[String,Long]()\n        for(ch <- test.split(\" \")) {\n  \
    \          if(!map.contains(ch)) {\n                freq += ch -> 1\n        \
    \        map += ch -> 1\n            }\n            else {\n                val\
    \ c = map.get(ch)\n                map += ch -> c+1\n            }\n        }\n\
    \        freq.foreach { case (ch, count) =>\n            if(!map.contains(ch))\
    \ {\n                map += ch -> count\n            }\n        }\n        return\
    \ map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0cy5cxk7.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfreq\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0cy5cxk7.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                map += ch -> c+\e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of (String, Option[Long]), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").map(word => {\n          \
    \  val arr = test.split(\" \").toArray.filter(word => word != word)\n        \
    \    val map = arr.map(arr => arr -> (arr.toSet.size +1)).toMap\n            map.filter(_._2._2\
    \ > 0).map(_._1).toMap\n        }).reduceLeft(_ ++ _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpam0m_52y.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            map.filter(_._2._2 > \e[31m0\e[0m).map(_._1).toMap\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   value _2 is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmpam0m_52y.scala:22:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     map.filter(_._2._2 > \e[31m0\e[0m).map(_._1).toMap\n\e[31m\e[31m   |\e[0m\
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                   Cannot prove that String <:< (K, V)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                     where:    K is\
    \ a type variable\n\e[31m   |\e[0m                                           \
    \    V is a type variable\n\e[31m   |\e[0m                                   \
    \  .\n2 errors found\n"
  stdout: ''
  timestamp: 1660029032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var counts : Map[String,Long] = new mutable.HashMap[String,Long]();\n\
    \        var spaceChars = test.toCharArray();\n        for (i<-0 until spaceChars.length-1)\
    \ {\n            val letter = Character.toString(spaceChars(i));\n           \
    \ if(counts.contains(letter)) {\n                val count = counts(letter);\n\
    \                counts(letter) = count + 1;\n            } else {\n         \
    \       counts(letter) = 1;\n            }\n        }\n        counts;\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpugwa8irv.scala:19:44 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m,\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e\
    [0m,\e[35mLong\e[0m]();\n\e[31m\e[31m   |\e[0m                               \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = Map((\"\") -> 0L)\n        for (letter\
    \ <- test.toLowerCase().split(\" \"))\n            if (map.contains(letter))\n\
    \                map(letter) += 1\n            else\n                map(letter)\n\
    \        map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: a\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.histogram$$anonfun$1(tmp6w_xz0td.scala:24)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.histogram(tmp6w_xz0td.scala:24)\n\
    \tat Problem$.main(tmp6w_xz0td.scala:28)\n\tat Problem.main(tmp6w_xz0td.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029034
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if(test.isEmpty || test.length == 0) return\
    \ Map()\n        var map : Map[String,Long] = Map()\n        var counts : Map[String,Long]\
    \ = Map()\n        for(letter <- test.split(' ')) {\n            if(counts(letter)\
    \ == 0) counts(letter) = 1\n            else {\n                val count = counts(letter)\n\
    \                counts(letter) = count + 1\n                if(map.contains(letter))\
    \ map = map + (letter -> (count + map(letter)))\n                else {\n    \
    \                map = map + (letter -> count)\n                }\n          \
    \  }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: a\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.histogram$$anonfun$1(tmpv4x1vk8c.scala:23)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.histogram(tmpv4x1vk8c.scala:32)\n\
    \tat Problem$.main(tmpv4x1vk8c.scala:36)\n\tat Problem.main(tmpv4x1vk8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = test.toLowerCase flatMap test.split(\"\
    \ \").map(x => x -> 1) toMap\n        val maxKey = map.toSeq.sortBy(_._2).last._1\n\
    \        val maxValue = map.get(maxKey)._1\n        val others = map - maxKey\
    \ - maxValue\n        others.toMap\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmponz0_zyq.scala:19:81 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = test.toLowerCase\
    \ flatMap test.split(\e[31m\" \"\e[0m).map(\e[36mx\e[0m => x -> \e[31m1\e[0m)\
    \ toMap\n\e[31m\e[31m   |\e[0m                                               \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \       expression expected but \e[31mend of statement\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponz0_zyq.scala:19:43 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = test.toLowerCase\
    \ flatMap test.split(\e[31m\" \"\e[0m).map(\e[36mx\e[0m => x -> \e[31m1\e[0m)\
    \ toMap\n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (ct : Char)\n\e[31m   |\e[0m\
    \                         Required: scala.reflect.ClassTag[(String, Int)]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmponz0_zyq.scala:19:35 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = test.toLowerCase\
    \ flatMap test.split(\e[31m\" \"\e[0m).map(\e[36mx\e[0m => x -> \e[31m1\e[0m)\
    \ toMap\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mflatMap\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m with types\n\e[31m   |\e[0m (f: Char\
    \ => String): String\n\e[31m   |\e[0m [B](f: Char => IterableOnce[B]): IndexedSeq[B]\n\
    \e[31m   |\e[0mmatch arguments (Char => Array[(String, Int)])\n3 errors found\n"
  stdout: ''
  timestamp: 1660029034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val l = test.toLower.split(\" \")\n        //\
    \ If there are no words, return an empty map.\n        if (l.length == 0) return\
    \ Map()\n        val map = new mutable.HashMap[String,Long]()\n        // Count\
    \ letters.\n        for (letter <- l) {\n            if (map.contains(letter))\
    \ {\n                val oldCount = map.get(letter)\n                val newCount\
    \ = oldCount + 1\n                map.put(letter,newCount)\n            } else\
    \ {\n                map.put(letter,1L)\n            }\n        }\n        //\
    \ Sort the map by counting letter occurrences.\n        val sorted = map.toList.sortBy(_._2)(Ordering.Int.reverse)\n\
    \        val res = if (sorted.size == 1) {\n            // If only one letter,\
    \ just return the map with a single entry.\n            sorted.head\n        }\
    \ else {\n            // If multiple letters, return the letter with the most\
    \ occurence and the count.\n            val maxKey = sorted.last._1\n        \
    \    val maxCount = sorted.last._2\n            Map(maxKey -> maxCount)\n    \
    \    }\n        return res\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpogoh4liu.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = test.toLower.split(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value toLower is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpogoh4liu.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogoh4liu.scala:44:15\
    \ --------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mreturn\e[0m res\n\
    \e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m        Found:  \
    \  \e[1m\e[31m(\e[0m\e[1m\e[31mres\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e\
    [31m \e[0m\e[1m\e[31mscala\e[0m\e[1m\e[31m.\e[0mcollection.mutable.Map[\e[1m\e\
    [31mNothing\e[0m, \e[1m\e[31mNothing\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m \
    \       Required: collection.mutable.Map[\e[1m\e[32mString\e[0m, \e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val m = Map()\n        test.split(\" \").map\
    \ { v => m.updated(v, m.getOrElse(v, 0l) + 1) }\n        val m = Map((m.maxBy(_._2)._1,\
    \ m.mapValues(_._1).sum))\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpan10_1is.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = Map((m.maxBy(_._2)._1,\
    \ m.mapValues(_._1).sum))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpan10_1is.scala:20:45 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        test.split(\e[31m\" \"\e[0m).map { \e[36mv\e[0m => m.updated(v,\
    \ m.getOrElse(v, \e[31m0l\e[0m) + \e[31m1\e[0m) }\n\e[31m\e[31m   |\e[0m     \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                Found:    (v : String)\n\e[31m   |\e[0m     \
    \                                        Required: Nothing\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpan10_1is.scala:20:60 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        test.split(\e[31m\" \"\e[0m).map { \e[36mv\e\
    [0m => m.updated(v, m.getOrElse(v, \e[31m0l\e[0m) + \e[31m1\e[0m) }\n\e[31m\e\
    [31m   |\e[0m                                                            ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (v\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpan10_1is.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counts = mutable.Map[String,Long]()\n  \
    \      test.toList.filter(_.isLetter).foreach(letter => {\n            counts.put(letter,\
    \ counts.getOrElse(letter, 0L) + 1)\n        })\n        counts.toMap\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcl4xblxs.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def recurse(i : Int) : Map[String,Long] = {\n\
    \            if (i == test.length) {\n                return Map.empty[String,Long]\n\
    \            }\n            var count : Long = 0\n            var letter : String\
    \ = test.charAt(i)\n            var currentMap : Map[String,Long] = Map.empty[String,Long]\n\
    \            for (x <- test(i+1 until test.length)) {\n                if (x ==\
    \ letter) {\n                    count += 1\n                }\n             \
    \   currentMap += letter -> count\n            }\n            recurse(i + 1)\n\
    \        }\n        recurse(0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgdgxvji9.scala:24:45\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mvar\e[0m \e\
    [36mletter\e[0m : \e[35mString\e[0m = test.charAt(i)\n\e[31m\e[31m   |\e[0m  \
    \                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                          Found:    Char\n\e[31m   |\e[0m                   \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgdgxvji9.scala:26:27 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            \e[33mfor\e[0m (x <- test(i+\e[31m1\e[0m until test.length))\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Range\n\e[31m   |\e[0m   \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").groupBy(x => x).mapValues(_.size).maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0hnuidgk.scala:19:70\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(\e[36mx\e[0m => x).mapValues(_.size).maxBy(_._2)._1\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val chars = test.toList\n        val charMap\
    \ = chars.groupBy(identity).mapValues(_.size)\n        charMap.filter(_._2 > 1).mapValues(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbp1qqnxp.scala:21:45 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        charMap.filter(_._2 > \e[31m1\e[0m).mapValues(_._1)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^\e[0m\n\e\
    [31m   |\e[0m                                         value _1 is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      val counter = scala.collection.mutable.Map[String,Long]()\n\
    \      var count = 0\n      test.split(' ').foreach( x => {\n        if ( counter.contains(x)\
    \ ) {\n          count = counter(x) + 1\n        } else {\n          counter(x)\
    \ = 1l\n        }\n      })\n      counter.filter( x => x._2 > 1 ).map( x => (x._1,\
    \ x._2) ).sortByKey( ascending )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpanaai6td.scala:23:18\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m          count = counter(x)\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m             \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpanaai6td.scala:28:63\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m      counter.filter( \e\
    [36mx\e[0m => x._2 > \e[31m1\e[0m ).map( \e[36mx\e[0m => (x._1, x._2) ).sortByKey(\
    \ ascending )\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sortByKey is not a member of scala.collection.mutable.Map[String,\
    \ Long]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpanaai6td.scala:28:74 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m      counter.filter( \e[36mx\e[0m => x._2 > \e[31m1\e\
    [0m ).map( \e[36mx\e[0m => (x._1, x._2) ).sortByKey( ascending )\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \              Not found: ascending\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(' ').toList\n     \
    \   val map = new mutable.HashMap[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = map.getOrElseUpdate(letter,0L)\n            map.put(letter,count+(1L))\n\
    \        }\n        map.toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp42hvq10l.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val words = test.split(\" \").toList\n     \
    \   val map = new mutable.HashMap[String,Long]\n        for (word <- words) {\n\
    \            map.put(word, map.getOrElse(word, 0)+1)\n        }\n        map.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2jwmztx.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toList.foldLeft(Map[String,Long]())((m,\
    \ c) => { \n            c split ' ' match {\n                case Array(l,_) =>\
    \ (l -> 1l) :: m\n                case _ => (c -> 1l) :: m \n            }\n \
    \       })\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv_btyk_4.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            c split \e[31m' '\e[0m \e[33mmatch\e[0m {\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ split is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv_btyk_4.scala:21:45\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e\
    [0m Array(l,_) => (l -> \e[31m1l\e[0m) :: m\n\e[31m\e[31m   |\e[0m           \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0mvalue :: is not a\
    \ member of scala.collection.mutable.Map[String, Long] - did you mean m./:?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_btyk_4.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m Array(l,_) => (l -> \e\
    [31m1l\e[0m) :: m\n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: l\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv_btyk_4.scala:22:36 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m _ => (c -> \e[31m1l\e\
    [0m) :: m \n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\
    \e[31m   |\e[0mvalue :: is not a member of scala.collection.mutable.Map[String,\
    \ Long] - did you mean m./:?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val list = test.split(' ')\n        val map\
    \ = new collection.mutable.HashMap[String,Long]()\n        list.foreach {\n  \
    \          letter =>\n                val count = map.getOrElse(letter, 0L)\n\
    \                map.put(letter, count + 1L)\n        }\n        map.toMap\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9gde8abl.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.HashMap.empty[String,Long]\n\
    \        test.split().map { x =>\n            val l = map.getOrElse(x,0) + 1\n\
    \            map.put(x,l)\n        }\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpup62b7r8.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmpup62b7r8.scala:20:13 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        test.split().map { \e[36mx\e[0m =>\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\e[31m   |\e[0m (x$0:\
    \ String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch arguments ()\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val s = test.split(' ')\n        val counts\
    \ = new mutable.HashMap[String,Long]()\n        for (x <- s){\n            if\
    \ (counts.containsKey(x)) {\n                counts(x) += 1\n            } else\
    \ {\n                counts.put(x, 1)\n            }\n        }\n        counts.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj2nza991.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     var occurrences = mutable.Map[String,Long]()\n        for (letter <- letters)\n\
    \        {\n            val count = occurrences.get(letter) match {\n        \
    \        case None => 0\n                case Some(count) => count + 1\n     \
    \       }\n            occurrences = occurrences + (letter -> count)\n       \
    \ }\n        occurrences.toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1gzkn2s.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36moccurrences\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd1gzkn2s.scala:25:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e\
    [0m Some(count) => count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \    Recursive \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").toList.map { letter =>\n \
    \           letter -> test.split(\" \").toList.count(_ == letter)\n        }.foldLeft(Map[String,Long]()){\
    \ \n            case(newMap, element) =>\n                val currentCount = newMap.get(element.key)\n\
    \                if (currentCount > element.value) { newMap.updated(element.key,\
    \ element.value) }\n                newMap \n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx6014cy1.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mcurrentCount\e[0m\
    \ = newMap.get(element.key)\n\e[31m\e[31m   |\e[0m                           \
    \                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      value key is not a member of (String, Int)\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpx6014cy1.scala:24:33 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                \e[33mif\e[0m (currentCount > element.value) { newMap.updated(element.key,\
    \ element.value) }\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue > is not a member of Option[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx6014cy1.scala:24:43\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e\
    [0m (currentCount > element.value) { newMap.updated(element.key, element.value)\
    \ }\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue value is not a member of (String, Int) - did you mean element.take?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx6014cy1.scala:24:75 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (currentCount > element.value)\
    \ { newMap.updated(element.key, element.value) }\n\e[31m\e[31m   |\e[0m      \
    \                                                             ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              value key is not a member of (String,\
    \ Int)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx6014cy1.scala:24:88 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (currentCount > element.value)\
    \ { newMap.updated(element.key, element.value) }\n\e[31m\e[31m   |\e[0m      \
    \                                                                  "
  stdout: ''
  timestamp: 1660029043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = new mutable.HashMap[String,Long]\n\
    \        var currentCount = 0L\n        test.split(\" \").foreach(\n         \
    \   x => map.getOrElseUpdate(x, currentCount+=1))\n        map map map map\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmvst4nmc.scala:23:23 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        map map map map\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmvst4nmc.scala:19:22 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e\
    [0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def countMap[A](test : String, start : A) :\
    \ Map[String, Long] = {\n            val countMap = Map[String, Long]()\n    \
    \        test.split(\" \").foreach(word => {\n                if (word == null\
    \ || word.isEmpty) {\n                    return\n                }\n        \
    \        val value = start.get(word.toLowerCase)\n                if (value ==\
    \ null) {\n                    countMap += (word.toLowerCase -> 1L)\n        \
    \        } else {\n                    countMap += (word.toLowerCase -> value.toLong)\n\
    \                }\n            })\n            countMap\n        }\n        val\
    \ mapBuilder = mutable.Map[String, Long]()\n        var maxCount = 0L\n      \
    \  for (letter <- test.toCharArray) {\n            val count = mapBuilder + (letter\
    \ -> (mapBuilder + (letter -> 1L)).map(x => (x._1 -> x._2)).getOrElse((letter\
    \ -> 1L)))\n            maxCount = math.max(maxCount, count)\n        }\n    \
    \    return maxCount == 0L ? countMap(test, \"\") : (countMap(test, \"\") + (maxCount\
    \ -> maxCount))\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkcrhllvg.scala:40:62 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mreturn\e[0m maxCount == \e[31m0L\e[0m ?\
    \ countMap(test, \e[31m\"\"\e[0m) : (\e[35mcountMap\e[0m(test, \e[31m\"\"\e[0m)\
    \ + (maxCount -> maxCount))\n\e[31m\e[31m   |\e[0m                           \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                           ')' expected, but '(' found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkcrhllvg.scala:23:20 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                    \e[33mreturn\e[0m\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    Unit\n\e[31m   |\e[0m                    Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkcrhllvg.scala:25:34\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m \e[36mvalue\e[0m = start.get(word.toLowerCase)\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \       value get is not a member of A\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkcrhllvg.scala:34:25 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m        \e[33mval\e[0m \e[36mmapBuilder\e[0m = mutable.Map[\e[35mString\e[0m,\
    \ \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkcrhllvg.scala:40:30 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mreturn\e[0m maxCount == \e[31m0L\e[0m ?\
    \ countMap(test, \e[31m\"\"\e[0m) : (\e[35mcountMap\e[0m(test, \e[31m\"\"\e[0m)\
    \ + (maxCount -> maxCount))\n\e[31m\e[31m   |\e[0m                           ^^^^\e\
    [0m\n\e[31m   |\e[0m                           value ? is not a member of Long\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660029043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // Split test in characters to lower case.\n\
    \        val chars: List[String] = test.toLowerCase.split(\" \").map(_.toLowerCase)\n\
    \        // Create a hash map with the letters as the keys and a count of each\
    \ letter as the value.\n        val letters: Map[String,Long] = chars.groupBy(c\
    \ => c).mapValues(_.size)\n        // Return the map with the letters with the\
    \ highest occurences.\n        letters.maxBy(letterCount => letterCount._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wz_48ya.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mchars\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = test.toLowerCase.split(\e[31m\" \"\e\
    [0m).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                               \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m\
    \   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wz_48ya.scala:22:71\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mletters\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mLong\e[0m] = chars.groupBy(\e[36mc\e\
    [0m => c).mapValues(_.size)\n\e[31m\e[31m   |\e[0m                           \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Found:    scala.collection.MapView[String, Int]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wz_48ya.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        letters.maxBy(\e[36mletterCount\e\
    [0m => letterCount._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (String, Long)\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val m = test.split(\" \").map(_.toLower)\n \
    \       val ls = test.split(\" \").toList.groupBy(x => x).map { case (k,v) =>\
    \ k -> v.size }.toMap\n        if (ls.size > 0) ls.max else ls\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rfeegag.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = test.split(\e[31m\"\
    \ \"\e[0m).map(_.toLower)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ toLower is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmp3rfeegag.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mm\e[0m = test.split(\e[31m\" \"\e[0m).map(_.toLower)\n\e\
    [31m\e[31m   |\e[0m                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3rfeegag.scala:21:25 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mif\e[0m (ls.size > \e[31m0\e[0m) ls.max \e[33melse\e[0m ls\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    Found:    (String, Int)\n\e[31m   |\e[0m                \
    \         Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3rfeegag.scala:21:37 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (ls.size > \e[31m0\e[0m) ls.max\
    \ \e[33melse\e[0m ls\n\e[31m\e[31m   |\e[0m                                  \
    \   ^^\e[0m\n\e[31m   |\e[0m                          Found:    (ls : Map[String,\
    \ Int])\n\e[31m   |\e[0m                          Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var m = Map[String,Long]()\n        test.toList.sliding(2).foreach\
    \ { x =>\n            val str = x.head\n            val count = x.last\n     \
    \       m.get(str) match {\n                case Some(i) => m += (str -> i.toLong)\n\
    \                case None => m += (str -> count.toLong)\n            }\n    \
    \    }\n        m match {\n            case m if m.isEmpty() => m\n          \
    \  case _ => m.maxBy(_._2)._1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2lymozcs.scala:23:18\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            m.get(str) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m      \
    \            Found:    (str : Char)\n\e[31m   |\e[0m                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2lymozcs.scala:24:38\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e\
    [0m Some(i) => m += (str -> i.toLong)\n\e[31m\e[31m   |\e[0m                 \
    \                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    Found:    (\e[1m\e[31mChar\e[0m, Long)\n\e[31m   |\e[0m \
    \                                     Required: (\e[1m\e[32mString\e[0m, Long)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2lymozcs.scala:25:35\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e\
    [0m None => m += (str -> count.toLong)\n\e[31m\e[31m   |\e[0m                \
    \                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                   Found:    (\e[1m\e[31mChar\e[0m, Long)\n\e[31m   |\e[0m  \
    \                                 Required: (\e[1m\e[32mString\e[0m, Long)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2lymozcs.scala:29:24 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e[0m m \e[33mif\e[0m m.isEmpty()\
    \ => m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2lymozcs.scala:30:36 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[33mcase\e[0m _ => m.maxBy(_._2)._1\n\e[31m\e[31m   |\e\
    [0m                      ^"
  stdout: ''
  timestamp: 1660029045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val testWord = test.split(\" \").toList\n  \
    \      val map = testWord.foldLeft(Map[String,Long]())((map, word) => map + (word\
    \ -> (map.getOrElse(word, 0l) + 1)))\n        map += (testWord.last -> (testWord.size))\n\
    \        map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k4v730w.scala:25)\n\tat Problem.main(tmp3k4v730w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").map(x => (x, test.count(x))).maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf1rfwqbq.scala:19:48\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).map(\e[36mx\e[0m => (x, test.count(x))).maxBy(_._2)._1\n\e[31m\e[31m  \
    \ |\e[0m                                                ^\e[0m\n\e[31m   |\e[0m\
    \                                               Found:    (x : String)\n\e[31m\
    \   |\e[0m                                               Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if (test.isEmpty) Map.empty[String,Long]\n \
    \       else {\n            var count : Long = 1\n            var letter = test.head\n\
    \            test.tail.foreach( x => if (letter == x) { count += 1 })\n      \
    \      Map(letter -> count) \n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw7d4ai0e.scala:24:16\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            Map(letter -> count)\
    \ \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Found:    (\e[1m\e[31mChar\e[0m, Long)\n\e[31m   |\e[0m     \
    \           Required: (\e[1m\e[32mString\e[0m, Long)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var hm = scala.collection.mutable.Map[String,Long]()\n\
    \        var split = test.split(\" \")\n        for ( i <- split.indices if !split.exists(_\
    \ == \"\") ) hm+= split(i) -> 1\n        return hm\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73mj32_p.scala:25)\n\tat Problem.main(tmp73mj32_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val tokens = test.split(\" \").toArray\n   \
    \     val freqs = mutable.Map.empty[String,Long]\n        for (token <- tokens)\
    \ {\n            freqs += (token -> freqs.getOrElse(token, 0L))\n        }\n \
    \       freqs.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbppefhjw.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfreqs\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val result = mutable.Map[String,Long]()\n  \
    \      test.toLowerCase map {c =>\n            val c = c.toUpper\n           \
    \ val count = result getOrElseUpdate (c, 1L)\n            result + (c -> (count\
    \ + 1))\n        }\n        result.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_v1c1f83.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_v1c1f83.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = c.toUpper\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val histogram = mutable.Map[String,Long]()\n\
    \        var counter = 0\n        test.foreach{\n            letter =>\n     \
    \       histogram(letter) = (histogram(letter).getOrElse(counter, 0L)+1L, counter)\n\
    \            counter += 1\n        }\n        histogram.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp0bcai52.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhistogram\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(' ').groupBy(_.toLower).mapValues(_.length).maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdpvkfb_q.scala:19:34 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m' '\e[0m).groupBy(_.toLower).mapValues(_.length).maxBy(_._2)._1\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                value toLower is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val split = test.toList.map (_.toLower)\n  \
    \      val histogram = split.groupBy(x => x).mapValues(x => x.size)\n        histogram.maxBy(_._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3skxzq2h.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        histogram.maxBy(_._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    (Char, Int)\n\e[31m   |\e[0m        Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = (test.replace(\"\\\"\",\"\").replace(\"\
    \\\\\",\"\").split(\" \")).toSet\n        letters.map((_, 1)).reduceByKey(_ +\
    \ _).map{ case (k, v) => k -> v.asInstanceOf[Long] }.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8cr35j7e.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        letters.map((_, \e[31m1\e[0m)).reduceByKey(_\
    \ + _).map{ \e[33mcase\e[0m (k, v) => k -> v.asInstanceOf[\e[35mLong\e[0m] }.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value reduceByKey is not a member of Set[(String, Int)]\n1 error found\n"
  stdout: ''
  timestamp: 1660029049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val testSet = test.split(\" \")\n        val\
    \ mapResult = mutable.Map.empty[String,Long]\n        testSet.foreach{ word =>\n\
    \            if(mapResult.contains(word))\n                mapResult(word) +=\
    \ 1\n            else\n                mapResult(word) = 1\n        }\n      \
    \  mapResult.map{ case (word, count) =>\n            (word, count)\n        }.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeyx6qquk.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmapResult\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      var counts = mutable.Map[String,Long]();\n   \
    \   var currentLetter = test.charAt(0);\n      var currentCount = 0;\n      for(i\
    \ <- 1 to test.length)\n      {\n        if(test.charAt(i) == currentLetter)\n\
    \        {\n          currentCount = currentCount + 1;\n        }\n        else\n\
    \        {\n          counts += ((currentLetter -> currentCount));\n         \
    \ currentCount = 1;\n          currentLetter = test.charAt(i);\n        }\n  \
    \    }\n      counts += ((currentLetter -> currentCount));\n      counts\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbz4mgdj9.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mvar\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]();\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def histogramHelper(s:String,c:Map[String,Long],t:Long)\
    \ = {\n            val splitted = s.split(\" \").filter(x=>x.length>0).map(_.toLowerCase).toList\n\
    \            if (splitted.isEmpty) c\n            else {\n                val\
    \ count = splitted.foldLeft(0l)((x,y)=>x+(y.toLong))\n                if (count\
    \ > t) histogramHelper(splitted.head,c,count)\n                else histogramHelper(splitted.tail,Map(s->count,splitted.head->t),count)\n\
    \            }\n        }\n        histogramHelper(test,Map(),0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmp1q7hmk0m.scala:24:31 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (count > t) histogramHelper(splitted.head,c,count)\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \      Overloaded or recursive \e[33mmethod\e[0m \e[35mhistogramHelper\e[0m needs\
    \ return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmp1q7hmk0m.scala:25:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33melse\e\
    [0m histogramHelper(splitted.tail,Map(s->count,splitted.head->t),count)\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m        Overloaded or\
    \ recursive \e[33mmethod\e[0m \e[35mhistogramHelper\e[0m needs return type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val m = test.toList.map(e => e.split(\" \").map(_.toLowerCase).toSet).flatten.toMap\n\
    \        val m2 = m.map(x => (x,1))\n        val m3 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._1\n\
    \        val m4 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._1\n\
    \        val m5 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._1\n\
    \        val m6 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._1._1\n\
    \        val m7 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._1._2\n\
    \        val m8 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._1\n\
    \        val m9 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._2\n\
    \        val m10 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._3\n\
    \        val m11 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._4\n\
    \        val m12 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._5\n\
    \        val m13 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._6\n\
    \        val m14 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._7\n\
    \        val m15 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._8\n\
    \        val m16 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._9\n\
    \        val m17 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._2._10\n\
    \        val m18 = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpane5etew.scala:36:66 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mm18\e[0m = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpane5etew.scala:19:39 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mm\e[0m = test.toList.map(\e[36me\e[0m => e.split(\e\
    [31m\" \"\e[0m).map(_.toLowerCase).toSet).flatten.toMap\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           value split is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpane5etew.scala:22:74 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm4\e[0m = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._1\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value _1 is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpane5etew.scala:23:74 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mm5\e[0m = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._1\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value _2 is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpane5etew.scala:24:74 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mm6\e[0m = m2.groupBy(_._1).mapValues(_.size.toLong).maxBy(_._2)._2._2._1._1\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value _2 is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpane5etew.scala:25:74 -----"
  stdout: ''
  timestamp: 1660029054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            map.updated(letter, map.getOrElse(letter, 0L) + 1L)\n\
    \        }\n        map.toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfg0qsg8.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        if (test.length == 0) return Map()\n       \
    \ val counts = mutable.HashMap.empty[String,Long]\n        for (word <- test.split('\
    \ ')) {\n            val count = counts.getOrElse(word, 0L)\n            counts\
    \ += (word -> count + 1)\n        }\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ufmqsyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = test.toLowerCase.toList.grouped(1).toList\n\
    \        val map = map.map(k => (k(0) -> (k.length))).toMap\n        return map\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph85yc_pb.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = map.map(\e[36mk\e\
    [0m => (k(\e[31m0\e[0m) -> (k.length))).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmap is already defined as \e[33mvalue\e[0m \e[35mmap\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmph85yc_pb.scala:21:15 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mreturn\e[0m map\n\e[31m\e[31m   |\e[0m               ^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    (map : List[List[Char]])\n\e[31m\
    \   |\e[0m               Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = new mutable.HashSet[Char]()\n\
    \        val letterCounts = new mutable.HashMap[String,Long]()\n\n        for\
    \ (letter <- test.toLowerCase()) {\n            if (letters.contains(letter))\n\
    \                letterCounts(letter) += 1\n            else\n               \
    \ letters.add(letter)\n        }\n\n        val result = letterCounts.toMap\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pv9r_lr.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pv9r_lr.scala:20:31\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mletterCounts\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.toUpperCase.split(\" \").map(_.toUpperCase).toList\n\
    \        val letterCounts = letters.map(letter => letter -> letters.count(_ ==\
    \ letter)).toMap\n        letterCounts.filter(_._2 > 1).map{ case (k,v) => k ->\
    \ v }.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4j_w07rb.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        letterCounts.filter(_._2\
    \ > \e[31m1\e[0m).map{ \e[33mcase\e[0m (k,v) => k -> v }.toMap\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var h : Map[String,Long] = Map()\n        var\
    \ c : Int = 0\n        var rep : Long = 1\n        val testList = test.split(\"\
    \ \").map(x => x.toLowerCase).toList\n        for (x <- testList) {\n        \
    \    if (h.get(x) == null) {\n                h(x) = rep\n            }\n    \
    \        else {\n                h(x) = h(x) + rep\n            }\n          \
    \  if (h(x) > rep) {\n                rep = h(x)\n            }\n            c\
    \ = c + 1\n        }\n        return h\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: a\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.histogram$$anonfun$1(tmpipju5btq.scala:28)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.histogram(tmpipju5btq.scala:34)\n\
    \tat Problem$.main(tmpipju5btq.scala:38)\n\tat Problem.main(tmpipju5btq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").map(letter => (letter, test.split(letter).length)).toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5_9d9zu.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\"\
    \ \"\e[0m).map(\e[36mletter\e[0m => (letter, test.split(letter).length)).toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").map(s => s -> test.count(_\
    \ == s)).groupBy(_._1).mapValues(_.length).toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph8q76y9h.scala:19:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\" \"\e[0m).map(\e[36ms\e[0m\
    \ => s -> test.count(_ == s)).groupBy(_._1).mapValues(_.length).toMap\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var map: mutable.Map[String,Long] = mutable.HashMap.empty\n\
    \        var splitArray = test.split(\" \").toList\n        splitArray.foreach(e\
    \ => {\n            var currentLetter = e.head\n            var currentCount =\
    \ e.length\n            map.get(currentLetter) match {\n                case None\
    \ =>\n                    map.put(currentLetter,currentCount)\n              \
    \  case Some(entry) => currentCount += entry.getOrElse(0l)\n            }\n  \
    \      })\n        map.toMap\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhp0fh31.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mmap\e[0m: mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m] = mutable.HashMap.empty\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhp0fh31.scala:19:44\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mmap\e[0m: mutable.Map[\e[35mString\e[0m,\e[35mLong\e[0m] = mutable.HashMap.empty\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprhp0fh31.scala:27:49\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e\
    [0m Some(entry) => currentCount += entry.getOrElse(\e[31m0l\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhp0fh31.scala:27:52 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e[0m Some(entry) => currentCount\
    \ += entry.getOrElse(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                    Not found: entry\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val chars = new mutable.HashSet[Char]()\n  \
    \      var count : Long = 0\n        test.toList foreach { c => chars += c }\n\
    \        chars.toList foreach { c => count = chars.count(c ==) ++ count }\n  \
    \      chars.toList map { c => c -> count } toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_exr8kcw.scala:22:60 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        chars.toList foreach { \e[36mc\e[0m => count\
    \ = chars.count(c ==) ++ count }\n\e[31m\e[31m   |\e[0m                      \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                        expression expected but \e[31m')'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_exr8kcw.scala:23:50 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        chars.toList map { \e[36mc\e[0m => c -> count\
    \ } toMap\n\e[31m\e[31m   |\e[0m                                             \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_exr8kcw.scala:19:24 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mchars\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n       val map = test.grouped(1)\n            .map(s\
    \ => (s, 1))\n            .toMap\n           .sortWith((s1, s2) => s1._2 > s2._2)\n\
    \           .map(t => (t._1, t._2))\n           .groupBy(_._1)\n           .mapValues(_.size.toLong)\n\
    \           .toMap\n       if(map.isEmpty) map\n       else {\n           val\
    \ keys = map.keySet.toSeq.sortWith((s1, s2) => s1 < s2)\n           map.filter(_._2\
    \ > keys.head)\n           .filter(_._2 == keys.head._2)\n           .map(_._1)\n\
    \           .toMap\n       }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3efcl5cl.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m       \e[33mval\e[0m \e[36mmap\e[0m = test.grouped(\e\
    [31m1\e[0m)\n\e[31m20 |\e[0m            .map(\e[36ms\e[0m => (s, \e[31m1\e[0m))\n\
    \e[31m21 |\e[0m            .toMap\n\e[31m22 |\e[0m           .sortWith((\e[36ms1\e\
    [0m, \e[36ms2\e[0m) => s1._2 > s2._2)\n\e[31m\e[31m   |\e[0m                 ^\e\
    [0m\n\e[31m   |\e[0m                 value sortWith is not a member of Map[String,\
    \ Int]\n1 error found\n"
  stdout: ''
  timestamp: 1660029056
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val chars = test.toCharArray\n        var map\
    \ = new HashMap[String,Long]()\n        for(i <- 0 until chars.length) {\n   \
    \         val key = chars(i).toString.toLowerCase\n            val count = map.get(key)\
    \ match {\n                case None => 0\n                case Some(value) =>\
    \ (value + 1) / 2\n            }\n            map.put(key, count)\n        }\n\
    \        return map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm9v8md8q.scala:32)\n\tat Problem.main(tmpm9v8md8q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val res = test.toCharArray.groupBy(identity).mapValues(_.length)\n\
    \        if(res.size == 0) res.put(\"*\", 1L)\n        else res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_gq4ozy.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(res.size == \e[31m0\e[0m) res.put(\e\
    [31m\"*\"\e[0m, \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue put is not a member of scala.collection.MapView[Char,\
    \ Int] - did you mean res.get?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc_gq4ozy.scala:21:13\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m res\n\
    \e[31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (res : scala.collection.MapView[Char, Int])\n\e[31m   |\e[0m            \
    \ Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val arr = test.split(\" \").toList\n       \
    \ val m = mutable.Map.empty[String, Long]\n        arr.foreach(x => {\n      \
    \      val count = (m filter { x => (x -> 1) }).length\n            m += (x ->\
    \ (count + 1))\n        })\n        m.map(_._1 -> _._2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5bi_qv7.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toLowerCase.split(\" \").map(letter =>\
    \ (letter, 1)).toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5vey1wpl.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.toLowerCase.split(\e\
    [31m\" \"\e[0m).map(\e[36mletter\e[0m => (letter, \e[31m1\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def countLetters ( test : String) : Map[String,Long]\
    \ = test match {\n                case letter :: \"\" => (letter -> 1L)\n    \
    \            case letter :: tail => {\n                    val countLetters =\
    \ countLetters(tail)\n                    countLetters + (letter -> (countLetters(letter)\
    \ + 1))\n                }\n            }\n        val letterMap : Map[String,Long]\
    \ = countLetters(test)\n        letterMap.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuxcfofw3.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e\
    [0m letter :: \e[31m\"\"\e[0m => (letter -> \e[31m1L\e[0m)\n\e[31m\e[31m   |\e\
    [0m                               ^^\e[0m\n\e[31m   |\e[0m                   \
    \      Found:    (\e[32m\"\"\e[0m : String)\n\e[31m   |\e[0m                 \
    \        Required: List[Any]\n\e[31m   |\e[0m                         pattern\
    \ type is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuxcfofw3.scala:20:38 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m letter :: \e[31m\"\"\e[0m\
    \ => (letter -> \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    (Any, Long)\n\e[31m   |\e[0m                          Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuxcfofw3.scala:22:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    \e\
    [33mval\e[0m \e[36mcountLetters\e[0m = countLetters(tail)\n\e[31m\e[31m   |\e\
    [0m                                       ^\e[0m\n\e[31m   |\e[0m            \
    \                     Recursive \e[33mvalue\e[0m \e[35mcountLetters\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuxcfofw3.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        letterMap.toMap\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Map[String, Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e\
    [0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\"\\\\s\").foldLeft(Map.empty[String,Long])\
    \ { (m, c) =>\n            val m = m + (c -> (m.getOrElse(c,0L) + 1))\n      \
    \      m\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsjdojkor.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = m + (c -> (m.getOrElse(c,\e\
    [31m0L\e[0m) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\
    \e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val testString = test.split(\" \").map(_.toLowerCase).toSet\n\
    \        val map = mutable.Map[String,Long]()\n        for (letter <- testString)\n\
    \            map += (letter -> (map.get(letter).getOrElse(0) + 1))\n        map\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7saycb5.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      var map = new mutable.HashMap[String,Long]()\n\
    \      test.split(' ').foreach {\n         word => {\n           var count = 1\n\
    \           map.get(word) match {\n            case None => {\n              \
    \ map.put(word, count)\n            }\n            case Some(count) => {\n   \
    \            map.put(word, count + 1)\n            }\n         }\n       }\n \
    \    }\n     map\n  }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=scala |>\nThis\
    \ is probably what you're looking for. As it says there, it's pretty much the\
    \ same as your code, but with a slightly more functional style.\n<code>\ndef histogram\
    \ (s: String) = {\n    val m = s.split(\" \").toList.groupBy(identity)\n    val\
    \ maxCount = m.map(_.size).max.toInt\n    m mapValues ( _ /: maxCount ){\n   \
    \      case (n, x) => n.ceiling(x).toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpywo3hw4h.scala:36:0 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpywo3hw4h.scala:19:20 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m      \e[33mvar\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e\
    [0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpywo3hw4h.scala:44:18 -----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    m mapValues ( _ /: maxCount ){\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2 /: maxCount.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpywo3hw4h.scala:44:20 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    m mapValues ( _ /: maxCount ){\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ /: is not a member of Int\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpywo3hw4h.scala:45:9\
    \ ------------------------------\e[0m\e[0m\n\e[31m45 |\e[0m         \e[33mcase\e\
    [0m (n, x) => n.ceiling(x).toInt\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter x$1 of expanded function:\n\e[31m   |\e\
    [0m   x$1 => \n\e[31m   |\e[0m     x$1\e[33m match \e[0m\n\e[31m   |\e[0m    \
    \   {\n\e[31m   |\e[0m         \e[33mcase \e[0m(n, x) => \n\e[31m   |\e[0m   \
    \        n.ceiling(x).toInt\n\e[31m   |\e[0m       }.\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpywo3hw4h.scala:45:24 ------------------------\e[0m\e[0m\n\
    \e[31m45 |\e[0m         \e[33mcase\e[0m (n, x) => n.ceiling(x).toInt\n\e[31m\e\
    [31m   |\e[0m                  "
  stdout: ''
  timestamp: 1660029060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def letterCount(test : String) : Map[String,Long]\
    \ = {\n            test.split(\" \").map(_.toLowerCase).groupBy(_).mapValues(_.size).toMap\n\
    \        }\n        letterCount(test).maxBy(_._2)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmplhon63do.scala:20:55 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            test.split(\e[31m\" \"\e[0m).map(_.toLowerCase).groupBy(_).mapValues(_.size).toMap\n\
    \e[31m\e[31m   |\e[0m                                                       ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   _$2 => \n\e[31m   |\e[0m     test.split(\e[32m\" \"\e[0m).map(_$1\
    \ => _$1.toLowerCase).groupBy(_$2).mapValues(\n\e[31m   |\e[0m       _$3 => _$3.size\n\
    \e[31m   |\e[0m     ).toMap.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplhon63do.scala:22:38\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        letterCount(test).maxBy(_._2)._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    String\n\e[31m   |\e[0m        Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def histogramRec(test : String) : Map[String,Long]\
    \ = {\n            test.toList.foldRight(Map[String,Long]())(\n              \
    \  (xs, c) => (xs.get(c.toLowerCase) match {\n                    case Some(v)\
    \ => Some(v + c)\n                    case None => Some(c)\n                })\n\
    \            ) match {\n                case Some(cs) => cs.foldLeft(Map[String,Long]())(\n\
    \                    (x, c) => (x.get(c.toLowerCase) match {\n               \
    \         case Some(v) => Some(c.toLong + v)\n                        case None\
    \ => Some(c.toLong)\n                    }))\n                case None => Map[String,Long]()\n\
    \            }\n        }\n        histogramRec(test)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2bexl6p.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                (\e[36mxs\e[0m, \e[36mc\e[0m) => (xs.get(c.toLowerCase)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value get is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2bexl6p.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                (\e[36mxs\e[0m, \e[36mc\e[0m) => (xs.get(c.toLowerCase)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLowerCase is not a member of scala.collection.mutable.Map[String,\
    \ Long]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps2bexl6p.scala:22:41 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m Some(v) => Some(v\
    \ + c)\n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                         Not found: v\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps2bexl6p.scala:23:37 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m None => Some(c)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mscala.collection.mutable.Map[String,\
    \ Long\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m              Required: scala.collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2bexl6p.scala:26:36\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e\
    [0m Some(cs) => cs.foldLeft(Map[String,Long]())(\n\e[31m\e[31m   |\e[0m      \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 value foldLeft is not a member of Any\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps2bexl6p.scala:31:21 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m "
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toLower.toList.distinct.map(x => (x,test.count(x)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4hirp_mt.scala:19:13 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.toLower.toList.distinct.map(\e[36mx\e[0m\
    \ => (x,test.count(x)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value toLower is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var result = Map[String,Long]();\n        var\
    \ splits = test.split(\" \")\n        splits.foreach(x => {\n            if (result.containsKey(x)){\n\
    \                result(x) = result(x) + 1l\n            }else {\n           \
    \     result(x) = 1l\n            }\n        })\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb4aa6bp4.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (result.containsKey(x)){\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ containsKey is not a member of scala.collection.mutable.Map[String, Long] -\
    \ did you mean scala.collection.mutable.Map[String, Long].contains?\n1 error found\n"
  stdout: ''
  timestamp: 1660029061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toLowerCase.split(\" \").groupBy(identity).mapValues(_.length).toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz6cbj4pn.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.toLowerCase.split(\e\
    [31m\" \"\e[0m).groupBy(identity).mapValues(_.length).toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toLowerCase split \" \" map (word => (word,\
    \ 1 +: word.split(\"\\\\s\".toList).map(_.toLowerCase).countBy { _ => 1 }.values.toList))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprctrj72f.scala:19:77\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.toLowerCase split\
    \ \e[31m\" \"\e[0m map (\e[36mword\e[0m => (word, \e[31m1\e[0m +: word.split(\e\
    [31m\"\\\\s\"\e[0m.toList).map(_.toLowerCase).countBy { _ => \e[31m1\e[0m }.values.toList))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                         Found:    List[Char]\n\e[31m   |\e[0m              \
    \                                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.HashMap.empty[String,Long]\n\
    \        test.split(' ').foreach(item => map += (item -> 1))\n        map.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzjhnmky.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val pattern = \"\\\\W+\"\n        val matcher\
    \ = pattern.r.findFirstIn(test)\n        val matches = pattern.r.findAllIn(test)\n\
    \        val chars = test.split(pattern)\n        val m = mutable.Map.empty[String,Long]\n\
    \        for (i <- 0 until matches.size) {\n            val key = matches.apply(i).replaceAll(pattern,\"\
    \")\n            val charCount = chars.distinct.count(_.equals(key))\n       \
    \     m.update(key,charCount)\n        }\n        m.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5_tzquo.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpi5_tzquo.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mkey\e[0m = matches.apply(i).replaceAll(pattern,\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m  value apply is not a member of scala.util.matching.Regex.MatchIterator\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var counts = mutable.HashMap[String,Long]();\n\
    \        var count = 1;\n        var currentLetter = \"\";\n        var currentCount\
    \ = 0;\n        for (x <- test.split(\" \")) {\n            if (x.equals(currentLetter))\
    \ {\n                count+=1;\n            } else {\n                count =\
    \ 1;\n                currentCount = 1;\n                currentLetter = x;\n\
    \            }\n            counts += (x -> count);\n        }\n        return\
    \ counts;\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5a9mbp39.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m,\e[35mLong\e[0m]();\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.map(_.toLowerCase => test.count(_ == _.toLowerCase)).maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmrtftiow.scala:19:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.map(_.toLowerCase => test.count(_ == _.toLowerCase)).maxBy(_._2)._1\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \             not a legal formal parameter\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpmrtftiow.scala:19:45 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        test.map(_.toLowerCase => test.count(_ == _.toLowerCase)).maxBy(_._2)._1\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660029064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val result = mutable.Map.empty[String,Long]\n\
    \        for (x <- test.split(\" \")) {\n            val count = result.getOrElse(x,0L)\n\
    \            result(x) = count + 1\n        }\n        result.toMap\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8sas228n.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def count[A](s : Seq[A]) : Map[A,Long] = {\n\
    \            s.foldLeft(Map[A,Long]())((h,e) => h += (e -> 1L))\n        }\n \
    \       def merge[A](s : Map[A,Long], m : Map[A,Long]) : Map[A,Long] = {\n   \
    \         val m1 = s.toMap\n            val m2 = m.toMap\n            val m3 =\
    \ m2.filterKeys { case (k,v) => m1.contains(k) && m1.getOrElse(k,0L) > v }\n \
    \           m3.mapValues(v => v + m1.getOrElse(k,0L))\n        }\n        val\
    \ m = test.split(\" \").foldLeft(Map[String,Long]())((m,s) => merge[String](count[String](m.toSeq\
    \ ++ Seq(s)) ,m))\n        m.toMap\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpql72yof6.scala:25:63\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e\
    [36mm3\e[0m = m2.filterKeys { \e[33mcase\e[0m (k,v) => m1.contains(k) && m1.getOrElse(k,\e\
    [31m0L\e[0m) > v }\n\e[31m\e[31m   |\e[0m                                    \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                           Found:    (k : Any)\n\e[31m   |\e[0m             \
    \                                        Required: A\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpql72yof6.scala:25:82 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mm3\e[0m = m2.filterKeys\
    \ { \e[33mcase\e[0m (k,v) => m1.contains(k) && m1.getOrElse(k,\e[31m0L\e[0m) >\
    \ v }\n\e[31m\e[31m   |\e[0m                                                 \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                                 Found:    (k : Any)\n\e[31m   |\e[0m       \
    \                                              Required: A\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpql72yof6.scala:26:47 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            m3.mapValues(\e[36mv\e[0m => v + m1.getOrElse(k,\e\
    [31m0L\e[0m))\n\e[31m\e[31m   |\e[0m                                         \
    \      ^\e[0m\n\e[31m   |\e[0m                                               Not\
    \ found: k\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpql72yof6.scala:28:98\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = test.split(\e[31m\" \"\e[0m).foldLeft(Map[\e[35mString\e[0m,\e[35mLong\e\
    [0m]())((\e[36mm\e[0m,\e[36ms\e[0m) => merge[\e[35mString\e[0m](count[\e[35mString\e\
    [0m](m.toSeq ++ Seq(s)) ,m))\n\e[31m\e[31m   |\e[0m                          \
    \                                                                        ^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val histogram = mutable.Map[String,Long]()\n\
    \        test.split(\" \").foreach { letter =>\n            val count = histogram.getOrElseUpdate(letter,0)\
    \ + 1\n            histogram += (letter -> count)\n        }\n        histogram.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzoxdkmzr.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhistogram\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").toList.groupBy(x => x).map(x\
    \ => (x._1, x._2.size)).toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ew0wngz.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\"\
    \ \"\e[0m).toList.groupBy(\e[36mx\e[0m => x).map(\e[36mx\e[0m => (x._1, x._2.size)).toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // split string into array of strings delimited\
    \ by ' '\n        var chars = test.split(\" \")\n        // init empty map\n \
    \       var histogram = new mutable.HashMap[String,Long]()\n\n        for (i <-\
    \ 0 until chars.length) {\n            // for each char, increment the count and\
    \ add it to the histogram\n            histogram(chars(i)) += 1\n        }\n\n\
    \        // return the map of chars with their count\n        histogram\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuj_d5mc9.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mhistogram\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val splitted = test.split(\" \").toList\n  \
    \      splitted.groupBy(x => x).map(x => (x._1,x._2.length)).toMap\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko0206p3.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        splitted.groupBy(\e\
    [36mx\e[0m => x).map(\e[36mx\e[0m => (x._1,x._2.length)).toMap\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val testSet = test.split(\" \").toSet\n    \
    \    var maxCount = 0L\n        var maxLetter = \"\"\n        val countMap = new\
    \ mutable.HashMap[String,Long]\n        test.split(\" \").foreach {\n        \
    \    if (testSet.contains(it)) {\n                countMap(it) += 1L\n       \
    \     }\n        }\n        val mapCount = countMap.sortWith((x,y) => y._2 > x._2)\n\
    \        mapCount.foreach { case (letter, count) =>\n            if (count > maxCount)\
    \ {\n                maxCount = count\n                maxLetter = letter\n  \
    \          }\n        }\n        (maxLetter -> maxCount)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphlng1rdd.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphlng1rdd.scala:24:33 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            \e[33mif\e[0m (testSet.contains(it)) {\n\e[31m\e[31m   |\e[0m \
    \                                ^^\e[0m\n\e[31m   |\e[0m                    \
    \             Not found: it\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphlng1rdd.scala:35:9 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        (maxLetter -> maxCount)\n\e[31m\e[31m   |\e[0m         ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Found:    (String, Long)\n\e[31m   |\e[0m       \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      val freqs = test.split(\" \").map(c => c -> 1).foldLeft(Map.empty[String,Long]){\n\
    \        case (map, c) =>\n          val count = map.getOrElse(c, 0)\n       \
    \   map + (c -> (count + 1))\n      }\n\n      freqs.map{ case (letter, count)\
    \ => letter -> count }.filter(_._2 > 1).toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaavvga6_.scala:21:36\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m          \e[33mval\e[0m \e[36mcount\e\
    [0m = map.getOrElse(c, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \ Found:    (c : (String, Int))\n\e[31m   |\e[0m                             \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpaavvga6_.scala:22:29 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m          map + (c -> (count + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpaavvga6_.scala:25:6 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m      freqs.map{ \e[33mcase\e[0m (letter, count) => letter\
    \ -> count }.filter(_._2 > \e[31m1\e[0m).toMap\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    Map[String, Long]\n\e[31m   |\e[0m      Required:\
    \ \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e\
    [0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // Convert input to list for easy manipulation\n\
    \        var words = test.toLowerCase().split(\" \").toList\n\n        // Initialize\
    \ a map to store counts\n        var counts = Map[String,Long]()\n\n        //\
    \ Initialize a map to store max counts\n        var maxCounts = Map[String,Long]()\n\
    \n        // Use a loop to iterate through the input words\n        for (word\
    \ <- words) {\n            // Check if the word has already been seen\n      \
    \      if (counts.contains(word)) {\n                // Increment the count\n\
    \                counts(word) = counts(word) + 1\n                // If the count\
    \ is greater than the current max count so far, update it\n                if\
    \ (counts(word) > maxCounts(word))\n                    maxCounts(word) = counts(word)\n\
    \            } else {\n                // Otherwise, initialize a new count\n\
    \                counts(word) = 1\n                // If this is the first time\
    \ we've seen this word, update max counts\n                if (counts.contains(word))\n\
    \                    maxCounts(word) = counts(word)\n            }\n        }\n\
    \n        // Return the final map with all counts\n        return maxCounts\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpazisbdoa.scala:51)\n\tat Problem.main(tmpazisbdoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      var counts : mutable.Map[String,Long] = Map.empty\n\
    \      var letters : List[String] = test.split(\" \").map(_.toLowerCase).toList\n\
    \      val letterMap : Map[String,Long] = letters.map(letter => (letter, 1l)).groupBy(_._1).mapValues(_.size).mapValues(_.max)\n\
    \      for (letter <- letters) counts += letter -> letterMap(letter)\n      counts\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x9jxm08.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mvar\e[0m \e[36mcounts\e[0m : mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m] = Map.empty\n\e[31m\e[31m   |\e[0m          \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3x9jxm08.scala:21:118\
    \ -------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mletterMap\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mLong\e[0m] = letters.map(\e[36mletter\e\
    [0m => (letter, \e[31m1l\e[0m)).groupBy(_._1).mapValues(_.size).mapValues(_.max)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    scala.collection.MapView[String,\
    \ Int => Int]\n\e[31m   |\e[0m                  Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val chars = test.split(\" \").toSeq\n      \
    \  val charCount = chars.map(c => (c, 1))\n        val freq = charCount.groupBy(c\
    \ => c._1).map(c => (c._1, c._2.length)).toMap\n        freq.foreach { case (c,\
    \ freq) =>\n            val count = freq.max\n            charCount += (c->count)\n\
    \        }\n        charCount.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxdwuvw74.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            charCount += (c->count)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of Seq[(String,\
    \ Int)] - did you mean charCount.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxdwuvw74.scala:26:8 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        charCount.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.toLowerCase.split(\" \").toList\n\
    \        val histogram = mutable.HashMap[String, Long]()\n\n        for (letter\
    \ <- letters) {\n            histogram(letter) += letter.length.toLong\n     \
    \   }\n        histogram.toMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2199ut_n.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhistogram\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // TODO: complete this method\n        val map\
    \ = new mutable.HashMap[String,Long]()\n        val words = test.split(' ')\n\
    \        for( x <- words) {\n            if(map.get(x) eq null)\n            \
    \    map += x -> 1\n            else\n                map += x -> map.get(x) +\
    \ 1\n        }\n        return map\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jpmmtbi.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counts = mutable.Map[String,Long]()\n  \
    \      val list = test.split(\" \").toList\n        for (word <- list) {\n   \
    \         if (counts.contains(word)) {\n                counts(word) = counts(word)\
    \ + 1\n            } else {\n                counts.put(word, 1L)\n          \
    \  }\n        }\n        counts.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqvzq4ac.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val words = test.split(\" \").map(_.trim).filter(_.nonEmpty)\n\
    \        val map = Map[String,Long]()\n        for(w <- words) {\n           \
    \ val c = map.get(w)\n            val n = if (c == None) 1L else c.getOrElse(0L)\n\
    \            map += (w -> n+1)\n        }\n        map\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpysj1nu7g.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            map += (w -> n+\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of (String, Long), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val test = test.toLowerCase \n        val map\
    \ = mutable.HashMap[String,Long]()\n        test.split (\"\\\\s+\").foreach{x=>map.update(x.toLowerCase\
    \ , 1L) }\n        val sortedMap = (map sortWith ((Map(_,x) => x)>(_,x=>x)))\n\
    \        val sorted = sortedMap.toSeq.sortWith((Map(_,x) => x)>(_,x=>x))\n   \
    \     val result = sorted.takeWhile(Map(_,x) => x<sortedMap.getOrElse(_,0l)).filterKeys(_>1).filterKeys(_<sortedMap.get(_,_)).map{case\
    \ (k,v)=> k -> v.toLong}\n        result + Map(\"Other\" -> map.getOrElse(\"other\"\
    ,0l))\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3n0awfp_.scala:22:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msortedMap\e[0m = (map sortWith\
    \ ((Map(_,x) => x)>(_,\e[36mx\e[0m=>x)))\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                    not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmp3n0awfp_.scala:23:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36msorted\e[0m = sortedMap.toSeq.sortWith((Map(_,x) => x)>(_,\e\
    [36mx\e[0m=>x))\n\e[31m\e[31m   |\e[0m                                       \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \      not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmp3n0awfp_.scala:24:41\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36mresult\e[0m = sorted.takeWhile(Map(_,x) => x<sortedMap.getOrElse(_,\e\
    [31m0l\e[0m)).filterKeys(_>\e[31m1\e[0m).filterKeys(_<sortedMap.get(_,_)).map{\e\
    [33mcase\e[0m (k,v)=> k -> v.toLong}\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \            not a legal formal parameter\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp3n0awfp_.scala:19:19 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mtest\e[0m = test.toLowerCase \n\e[31m\e[31m\
    \   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Recursive\
    \ \e[33mvalue\e[0m \e[35mtest\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3n0awfp_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        def countLetters(letters:List[String],count:Int)\
    \ : Map[String,Long] = {\n            letters match {\n                case Nil\
    \ => (Map[String,Long](),0)\n                case head :: tail => {\n        \
    \            val m = countLetters(tail,1)\n                    val count = m.getOrElse(head,0)\
    \ + 1l\n                    (m + (head -> (count)),count)\n                }\n\
    \            }\n        }\n        val letters = test.split(\"\\\\s+\").map(_.toLowerCase).toList\n\
    \        val maxLetter = letters.maxBy(_.length)\n        val map = countLetters(letters,letters.length)\n\
    \        map + (maxLetter -> map.get(maxLetter).getOrElse(0l))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpepeczdrv.scala:21:28\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e\
    [0m Nil => (Map[String,Long](),\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    \e[1m\e[31m(\e[0m\e[1m\e[31mscala\e[0m\e[1m\e[31m.\e[0mcollection.mutable.Map[String,\
    \ Long]\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m\n\
    \e[31m   |\e[0m             Required: collection.mutable.Map[String, Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpepeczdrv.scala:24:52\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    \e[33mval\e\
    [0m \e[36mcount\e[0m = m.getOrElse(head,\e[31m0\e[0m) + \e[31m1l\e[0m\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of AnyVal, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpepeczdrv.scala:25:20\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    (m + (head\
    \ -> (count)),count)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mscala\e[0m\e\
    [1m\e[31m.\e[0mcollection.mutable.Map[String, Long]\e[1m\e[31m,\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31mNothing\e[0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m         Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n      val map = scala.collection.mutable.Map.empty[String,Long]\n\
    \      test.split(\" \").foreach {\n        str =>\n          val count = getCount(str)\n\
    \          if(map.contains(str))\n            map(str) += count\n          else\n\
    \            map += (str -> count)\n      }\n      map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4qohkvdc.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m          \e[33mval\e[0m \e[36mcount\e[0m = getCount(str)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  Not found: getCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4qohkvdc.scala:28:6 ---------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m      map.toMap\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      Found:    Map[String, Long]\n\e[31m   |\e[0m      Required:\
    \ \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e\
    [0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        // Parse string into an array of letters\n \
    \       val letters = test.split(\" \").toList.map(_.toLowerCase)\n        val\
    \ counts = letters.foldLeft(Map[String,Long]())((counts, letter) => \n       \
    \     val count = counts.getOrElse(letter,0) + 1\n            counts.updated(letter,\
    \ count)\n        )\n        counts.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpahjvbag3.scala:22:51 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = counts.getOrElse(letter,\e\
    [31m0\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpahjvbag3.scala:25:8 ---------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        counts.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toList.map(x => (x, test.count(x => x ==\
    \ x)).toMap).maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi710j0e3.scala:19:58 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.toList.map(\e[36mx\e[0m => (x, test.count(\e\
    [36mx\e[0m => x == x)).toMap).maxBy(_._2)._1\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toMap is not a member of (Char, Int) - did you mean (Char, Int).swap?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpi710j0e3.scala:19:73 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.toList.map(\e[36mx\e[0m => (x, test.count(\e\
    [36mx\e[0m => x == x)).toMap).maxBy(_._2)._1\n\e[31m\e[31m   |\e[0m          \
    \                                                             ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     value _2 is not a member of Nothing\n\
    \e[31m\e[31m-- Error: /tmp/tmpi710j0e3.scala:19:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.toList.map(\e[36mx\e[0m => (x, test.count(\e\
    [36mx\e[0m => x == x)).toMap).maxBy(_._2)._1\n\e[31m\e[31m   |\e[0m          \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val counts = mutable.Map.empty[String,Long]\n\
    \        test.split(\" \").foreach(letter => counts +=+= (letter -> (counts(letter)\
    \ + 1l)))\n        counts\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpal7s06o_.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var histogram = Map[String,Long]()\n       \
    \ for (nd <- test.toList) {\n            var count = histogram.getOrElse(nd.toLowerCase(),0L)\n\
    \            histogram.updated(nd.toLowerCase(),count+1)\n        }\n        histogram.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg5ne85_5.scala:21:47 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mvar\e[0m \e[36mcount\e[0m = histogram.getOrElse(nd.toLowerCase(),\e\
    [31m0L\e[0m)\n\e[31m\e[31m   |\e[0m                                          \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value toLowerCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg5ne85_5.scala:22:33\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            histogram.updated(nd.toLowerCase(),count+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5ne85_5.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        histogram.toMap\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Map[String, Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e\
    [0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(' ').foldLeft(Map[String,Long]())((h,c)\
    \ => (h.getOrElse(c,0L)+1L,h))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprvl810gp.scala:19:62\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m' '\e\
    [0m).foldLeft(Map[\e[35mString\e[0m,\e[35mLong\e[0m]())((\e[36mh\e[0m,\e[36mc\e\
    [0m) => (h.getOrElse(c,\e[31m0L\e[0m)+\e[31m1L\e[0m,h))\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mLong\e[0m\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0mscala.collection.mutable.Map[String, Long]\e[1m\e\
    [31m)\e[0m\n\e[31m   |\e[0m            Required: scala.collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        var map = scala.collection.mutable.Map.empty[String,\
    \ Long]\n        var counts = scala.collection.mutable.Map.empty[String, Long]\n\
    \        test.toList.foreach( x => {\n            map += (x->map.getOrElse(x,\
    \ 0l)+1l)\n            counts += (x->map.getOrElse(x, 0l))\n        })\n     \
    \   map += (\"empty\" -> 0l)\n        map = map.toMap\n        counts = counts.toMap\n\
    \        map + (\"empty\" -> 0l)\n        map ++= counts\n        map\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4v74iui.scala:22:37\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            map += (x->map.getOrElse(x,\
    \ \e[31m0l\e[0m)+\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \              ^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (x : Char)\n\e[31m   |\e[0m                                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4v74iui.scala:23:40\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            counts += (x->map.getOrElse(x,\
    \ \e[31m0l\e[0m))\n\e[31m\e[31m   |\e[0m                                     \
    \   ^\e[0m\n\e[31m   |\e[0m                                        Found:    (x\
    \ : Char)\n\e[31m   |\e[0m                                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4v74iui.scala:26:14\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        map = map.toMap\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:\
    \    Map[String, Long]\n\e[31m   |\e[0m              Required: \e[1m\e[32mscala\e\
    [0m\e[1m\e[32m.\e[0m\e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpv4v74iui.scala:27:17 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        counts = counts.toMap\n\e[31m\e[31m   |\e[0m     \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m                 Required: \e[1m\e[32mscala\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e\
    [1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.split(\" \").groupBy(x => x).maxBy(_._2.length).map(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpf37luqzd.scala:19:63 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        test.split(\e[31m\" \"\e[0m).groupBy(\e[36mx\e\
    [0m => x).maxBy(_._2.length).map(_._1)\n\e[31m\e[31m   |\e[0m                \
    \                                               ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2._1.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        test.toList.foldLeft(Map.empty[String, Long])\
    \ { (count, word) => word match {\n            case \"\" => count\n          \
    \  case letter => letter match {\n                case letter if (letter in count.keySet)\
    \ => count.update(letter, count.getOrElse(letter) + 1)\n                case letter\
    \ => count + (letter -> (count.getOrElse(letter) + 1))\n            }\n      \
    \  }}\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppb37c3c3.scala:20:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m \e[31m\"\"\e[0m => count\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmppb37c3c3.scala:22:39 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m (letter\
    \ in count.keySet) => count.update(letter, count.getOrElse(letter) + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                value in is not a member of Char\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb37c3c3.scala:22:72 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ (letter in count.keySet) => count.update(letter, count.getOrElse(letter) + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                             ^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                            Found:    (letter : Char)\n\e[31m   |\e[0m      \
    \                                         Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb37c3c3.scala:22:96 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ (letter in count.keySet) => count.update(letter, count.getOrElse(letter) + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                                                     ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (letter : Char)\n\e\
    [31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb37c3c3.scala:23:67\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e\
    [0m lette"
  stdout: ''
  timestamp: 1660029076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a map\n    // of the letter with the most repetition and containing the corresponding\
    \ count.\n    // If several letters have the same occurrence, return all of them.\n\
    \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toSet\n    \
    \    val letterOccurrences = letters.foldLeft(Map[String,Long]()){\n         \
    \   (m,c) => m.updated(c, m.getOrElse(c, 0L) + 1)\n        }\n        letterOccurrences.filter(_._2\
    \ > 1).map(x => (x._1, x._2)).toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf90iepkq.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        letterOccurrences.filter(_._2\
    \ > \e[31m1\e[0m).map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e\
    [0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029076
