language: scala
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var i = 0\n        val radix = base.toRadix()\n        while\
    \ (i < x.toString.length) {\n            val rem = x % radix\n            result\
    \ += (if (rem > 9) rem.toString else (rem.toInt + \"\"))\n            x /= radix\n\
    \            i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3tou8k08.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mradix\e[0m = base.toRadix()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  value toRadix is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3tou8k08.scala:20:14 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            x /= radix\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def toBase(n:\
    \ Long): String = {\n            if (n <= 0) \"\"\n            else n % base +\
    \ toBase(n / base)\n        }\n        val ans = toBase(x)\n        ans.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = x.toString(base)\n        var remain = x.toString.length % base\n        while\
    \ (remain > 0) {\n            remain--\n            result = x.toString + result\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr9rufiaf.scala:18:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result = x.toString + result\n\e[31m\e[31m\
    \   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   end of\
    \ statement expected but '=' found\n\e[31m\e[31m-- Error: /tmp/tmpr9rufiaf.scala:14:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mvar\e[0m \e[36mresult\e[0m = x.toString(base)\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^\e[0m\n\e[31m   |\e[0m         too many arguments\
    \ for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m:\
    \ (): String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr9rufiaf.scala:17:18\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            remain--\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -- is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ throw new ArithmeticException(\"Error base: value must be < base\")\n      \
    \  var res = \"\"\n        while (x > 0) {\n            res = Integer.toHexString(x%base)\
    \ + res\n            x /= base\n        }\n        if (res.isEmpty) res = \"0\"\
    \n        res\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzyhihjke.scala:17:38\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            res = Integer.toHexString(x%base)\
    \ + res\n\e[31m\e[31m   |\e[0m                                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    Long\n\e[31m  \
    \ |\e[0m                                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzyhihjke.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            x /= base\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long -\
    \ did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = x\n        val remainder = x / base\n        while (result >= base) {\n  \
    \          result -= base\n            result *= base\n        }\n        val\
    \ lastDigit = remainder % base\n        result + lastDigit.toString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiysdgwe1.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result -= base\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiysdgwe1.scala:18:19\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            result *= base\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ : String =  \"\"\n        var base = base.toInt\n        var x = x.toInt\n \
    \       // Loop until we can't change any more digits.\n        while (x < 10)\
    \ {\n            // Remove last digit from original number.\n            x = x\
    \ / base\n            base = base.toInt\n            // Add this digit to the\
    \ result.\n            result = result + x.toString + base.toString\n        }\n\
    \        // Add leftover last digit.\n        result = result + x.toString + base.toString\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq42rlwe6.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mbase\e[0m = base.toInt\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvariable\e[0m \e[35mbase\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq42rlwe6.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result:\
    \ String = \"\"\n        var baseStr = base.toString()\n        var temp = 0\n\
    \        while (temp < (x.toString.length)) {\n            if (x.toString.charAt(temp)\
    \ == baseStr.charAt(temp)) {\n                result += (x.toString.charAt(temp))\n\
    \            }\n            temp = temp + 1\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjt8aiaty.scala:26)\n\tat Problem.main(tmpjt8aiaty.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var xString\
    \ = \"\"\n        var baseString = base.toString()\n        var remainder = x\
    \ % base\n\n        // Convert the remainder to string and then append it to xString.\n\
    \        while(x != 0) {\n            xString = if (remainder < base) {\n    \
    \                xString = remainder + xString\n                } else {\n   \
    \                 xString += (remainder - base) + xString\n                }\n\
    \            remainder = x % base\n            x /= base\n        }\n        xString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjadm0xf2.scala:21:28\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    xString =\
    \ remainder + xString\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Unit\n\e[31m   |\e[0m      \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjadm0xf2.scala:23:20 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                    xString += (remainder - base) + xString\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Found:    Unit\n\e[31m   |\e[0m           \
    \         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjadm0xf2.scala:26:14 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            x /= base\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m \
    \  |\e[0m            value /= is not a member of Long - did you mean x.!=?\n3\
    \ errors found\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (base <\
    \ 10 || base > 36) {\n            throw new IllegalArgumentException(s\"Base should\
    \ be between 10 and 36.\")\n        }\n        var outStr = \"\"\n        for\
    \ (i <- 0 until x.toString.length()) {\n            var value = x.toString.charAt(i)\
    \ - '0';\n            val baseNum = value / base;\n            outStr += (baseNum\
    \ % 10) + x.toString.charAt(i)\n        }\n        outStr\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: Base should be between 10 and 36.\n\
    \tat Problem$.changeBase(tmpav9zlrxa.scala:15)\n\tat Problem$.main(tmpav9zlrxa.scala:26)\n\
    \tat Problem.main(tmpav9zlrxa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = x.toString(base);\n        // If the result is zero, we return the original\
    \ number.\n        if (result.length == 0){\n            result = x.toString();\n\
    \        }\n        result += \"\";\n        return result;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqgq_1pj2.scala:14:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = x.toString(base);\n\
    \e[31m\e[31m   |\e[0m                                ^^^^\e[0m\n\e[31m   |\e[0m\
    \         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e\
    [0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqgq_1pj2.scala:17:19\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            result =\
    \ x.toString();\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Reassignment to val result\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val numStr\
    \ = x.toString.toLong\n        val binStr = numStr.toBinary(base).reverse\n  \
    \      val binStr2 = binStr.substring(binStr.length - 1).reverse\n        return\
    \ binStr2\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpln6it2t1.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbinStr\e[0m = numStr.toBinary(base).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     value toBinary is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = x.toString\n\
    \        val len = str.length\n        val newStr = \"\"\n        if(len < base\
    \ * 2)\n            \"\"\n        else if(len < base * 3)\n            changeBase(x\
    \ % base, base)\n        else if(len < base * 4)\n            changeBase(x % base,\
    \ base * 2)\n        else {\n            var cur = 0\n            var newX = 0l\n\
    \            for(i <- 0 until len) {\n                val digit = str.charAt(i)\n\
    \                val newDigit = (digit.toLong / base).toInt\n                cur\
    \ += newDigit\n                newX = cur\n                newStr += digit.toString(newDigit)\n\
    \            }\n            newStr\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptl70huxx.scala:31:23 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                newStr += digit.toString(newDigit)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value += is not a member of String - did you mean newStr.!=?\n\e[31m\e[31m--\
    \ Error: /tmp/tmptl70huxx.scala:31:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                newStr += digit.toString(newDigit)\n\e\
    [31m\e[31m   |\e[0m                                         ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e\
    [0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = x.toString\n\
    \        val len = s.length\n        var i = 0\n        while (i < len) {\n  \
    \          if (s(i) >= '0' && s(i) <= '9') {\n                var p = s.charAt(i)\
    \ - 48\n                while (p >= base) {\n                    p = p / base\n\
    \                }\n                s = s + new Integer(p).toString\n        \
    \        i = i + 1\n            } else {\n                s = s + \"0\"\n    \
    \            i = i + 1\n            }\n        }\n        return s\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1d7mvisb.scala:21:24\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    p = p / base\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x % base\
    \ == 0) x / (base - 1) + \"\"\n        else changeBase(x / base, base)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsybsrnfn.scala:18)\n\tat Problem.main(tmpsybsrnfn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n    val rem = x / base\n\
    \    val newBase = base + ((rem % base) == 0 ? 0 : 1)\n    val newX = rem / newBase\n\
    \    (newX.toString.reverse).reverse.toString + newBase.toString + (if (newX <\
    \ 10) \"0\" else \"\") + x.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0o_nd15y.scala:15:44 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    \e[33mval\e[0m \e[36mnewBase\e[0m = base + ((rem\
    \ % base) == \e[31m0\e[0m ? \e[31m0\e[0m : \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                          ^^^\e[0m\n\e[31m   |\e[0m         \
    \                                 value ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      var result =\
    \ \"\"\n      val tmp = x.toInt / base\n      var i = 0\n      while (tmp > 0)\
    \ {\n        result += (i % base).toChar\n        tmp -= (base / base * base)\n\
    \        i += 1\n      }\n      result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppcqs72ut.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        tmp -= (base / base * base)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        value -= is not a member of Long\
    \ - did you mean tmp.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var numStr\
    \ : String = x.toString()\n        var res : String = \"\"\n        var digits\
    \ = 0\n        var rem = 0\n        var pow = 0\n        while (digits < base)\
    \ {\n            pow = numStr.charAt(digits).toLong\n            rem = numStr.charAt(digits\
    \ + 1).toLong\n            val newNum : Long = rem / pow\n            res = res\
    \ + newNum.toString()\n            digits += 1\n        }\n        return res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0sgddnq8.scala:20:40\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            pow = numStr.charAt(digits).toLong\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0sgddnq8.scala:21:44\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            rem = numStr.charAt(digits\
    \ + \e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // Change numerical\
    \ base of input number x to base.\n        // return string representation after\
    \ the conversion.\n        // base numbers are less than 10.\n        // >>> changeBase((8l),\
    \ (3l))\n        // (\"22\")\n        // >>> changeBase((8l), (2l))\n        //\
    \ (\"1000\")\n        // >>> changeBase((7l), (2l))\n        // (\"111\")\n  \
    \      val b : List[String] = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\")\n        val result : String = \"\"\n        val temp\
    \ : Long = x\n        val num : Long = 0\n        while (temp > 0) {\n       \
    \     if (num >= base) {\n                result += b((num % base))\n        \
    \    }\n            num += 1\n            temp /= base\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpamoj0ka9.scala:29:23 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                result += b((num % base))\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of String - did you mean result.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpamoj0ka9.scala:29:29 --------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m                result += b((num % base))\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \              Found:    Long\n\e[31m   |\e[0m                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpamoj0ka9.scala:31:16\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            num += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value += is not a member of Long - did you mean num.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpamoj0ka9.scala:32:17 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            temp /= base\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long -\
    \ did you mean temp.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var str = x.toString.toLong\n\
    \        var x = str.toInt\n        var res = \"\"\n        while (x > 0){\n \
    \           res = res + x.toString.charAt(0)\n            x = x - (x.toString.charAt(0).toInt)\n\
    \        }\n        val bases = Array(\"1\",\"10\",\"100\",\"1000\",\"10000\"\
    )\n        var newBase = bases.indexOf(\"base\") + 1\n        if(newBase < bases.length)\n\
    \            res = res + bases.apply(newBase)\n        return res\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2errip72.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = str.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mstr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val xString\
    \ = (x.toString.reverse).dropRight(1)\n        val baseString = (base.toString.reverse).dropRight(1)\n\
    \        var baseNum = baseString.toInt\n        var xNum = xString.toInt\n  \
    \      while (xNum != 0) {\n            if (xNum % baseNum == 0) {\n         \
    \       xNum = xNum / baseNum\n            } else {\n                xNum = xNum\
    \ * (baseNum / xNum)\n            }\n        }\n        xString.toString + baseString.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.changeBase(tmpmghhmlz7.scala:16)\n\
    \tat Problem$.main(tmpmghhmlz7.scala:28)\n\tat Problem.main(tmpmghhmlz7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val num = x.toString.reverse.foldLeft(\"\
    0\") {\n            case (acc, digit) => acc * base + digit.toInt\n        }\n\
    \        s\"$num\"\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeojrwxn8.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m (acc,\
    \ digit) => acc * base + digit.toInt\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \          Found:    (base : Long)\n\e[31m   |\e[0m                          \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var remaining = x\n        var remainder = x\n        while\
    \ (remainder > 0) {\n            val div = math.pow(remainder, base)\n       \
    \     val remainderToKeep = math.pow(remainder, base)\n            result += (div\
    \ % 10).asInstanceOf[String]\n            remainderToKeep = (div - remainderToKeep).asInstanceOf[Long]\n\
    \            remainder = remainderToKeep\n        }\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpimysnlxt.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            remainderToKeep = (div - remainderToKeep).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val remainderToKeep\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpimysnlxt.scala:22:24 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            remainder = remainderToKeep\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Found:    (remainderToKeep : Double)\n\e[31m   |\e[0m     \
    \                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var base =\
    \ base\n        var x = x\n        var result = \"\"\n        var quotient = 0\n\
    \        while (quotient != 0) {\n            quotient = x / (base.toLong)\n \
    \           result = result.+(quotient.toString.toLong)\n            x %= base.toLong\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp78blbt7h.scala:14:19 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mbase\e[0m = base\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Recursive\
    \ \e[33mvariable\e[0m \e[35mbase\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp78blbt7h.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var digits\
    \ = \"\"\n        x % base match {\n            case 0 => digits\n           \
    \ case _ =>\n                val tmp = x / base\n                (digits + changeBase(tmp,\
    \ base)).toString + changeBase(x, base)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.StringBuilder.<init>(StringBuilder.java:119)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.scala:19)\n\
    \tat Problem$.changeBase(tmpql2qled8.scala:19)\n\tat Problem$.changeBase(tmpql2qled8.s"
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val m = x.toString.toLong\n\
    \        val bm = base.toString.toLong\n        val bn = bm.substring(0, bm.length\
    \ - 1)\n        val m = m.toString.toLong\n        val bases = (1l to bn).toList\n\
    \        val res = \"\"\n        for (i <- bases ) {\n            val m = m %\
    \ i\n            res = i + m + res\n        }\n        if (m > 0) res.substring(0,1)\
    \ + m\n        else res\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm22y0njl.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toString.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm22y0njl.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mbn\e[0m = bm.substring(\e[31m0\e[0m, bm.length - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \ value substring is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpm22y0njl.scala:16:36 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mbn\e[0m = bm.substring(\e[31m0\e[0m, bm.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Long\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpm22y0njl.scala:22:16 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            res = i + m + res\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val res\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x % (base.toLong).toInt\n        val res = if (digits < base.toInt) \"\" else\
    \ changeBase(x / (base.toLong), base)\n        res +: Integer.toString((x % base.toLong).toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu8r9u4t0.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        res +: Integer.toString((x\
    \ % base.toLong).toInt)\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    (res : String)\n\e[31m   |\e[0m        Required: Char\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val s = x.toString.reverse\n\
    \        val digits = s.dropRight(s.length.toLong * base)\n        digits.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprhw_iyu6.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = s.dropRight(s.length.toLong * base)\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      var digits =\
    \ Array.ofDim[Char](10)\n      var power = 0\n      var result = \"0\"\n     \
    \ var currentValue = x\n      while(currentValue > 0) {\n        digits += currentValue.toCharArray.toList.map(_.toString()).reverse\n\
    \        power = 10 - digits.takeWhile(_.isDigit).length\n        if(power >=\
    \ base) {\n          result = digits ++ Array(digits(power).asInstanceOf[Int].toString)\n\
    \          break\n        }\n        currentValue /= base\n      }\n      result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqpjajv4.scala:19:15 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        digits += currentValue.toCharArray.toList.map(_.toString()).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value += is not\
    \ a member of Array[Char] - did you mean Array[Char].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdqpjajv4.scala:19:31 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        digits += currentValue.toCharArray.toList.map(_.toString()).reverse\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  value toCharArray is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdqpjajv4.scala:22:19 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m          result = digits ++ Array(digits(power).asInstanceOf[\e\
    [35mInt\e[0m].toString)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Array[Matchable]\n\e[31m   |\e\
    [0m                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdqpjajv4.scala:23:10 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m          break\n\e[31m\e[31m   |\e[0m          ^^^^^\e[0m\n\
    \e[31m   |\e[0m          Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val y = x.toString.toInt\n\
    \        val z = (y.toString * base).toInt\n        val r = ((z.toString - z %\
    \ base).toString + z).toCharArray\n        val z2 = (z.toString / base).toInt\n\
    \        val r2 = ((z2.toString - z2.toString % base).toString + z2.toString).toCharArray\n\
    \        new String(r, r.length + r2.length).concat(new String(r2, r2.length))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiaqev1_k.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mz\e\
    [0m = (y.toString * base).toInt\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                              Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaqev1_k.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = ((z.toString -\
    \ z % base).toString + z).toCharArray\n\e[31m\e[31m   |\e[0m                 \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaqev1_k.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mz2\e[0m = (z.toString /\
    \ base).toInt\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue / is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val x = x.toInt\n\
    \        val baseToInt = base.toInt\n        val newValue = x\n        newValue.toString\
    \ + new Array(baseToInt - newValue.toString.length + 1){\n            val zeros\
    \ = baseToInt % base\n            if(zeros == 0) \"0\"\n            else zeros\
    \ + new Array[Char](1)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl87y8g6e.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val b : Int\
    \ = base.toInt\n        val num : Long = x.toLong\n\n        def g(x: Long, base:\
    \ Long) : Long = {\n            val i = x.toInt\n            val b = base.toInt\n\
    \            val num1 = num / b\n            val num2 = num - num1 * b\n     \
    \       return num1.toLong + num2.toLong\n        }\n\n        def h(x: Long,\
    \ base: Long) : Long = {\n            val i = x.toInt\n            val b = base.toInt\n\
    \            val num1 = num * b\n            val num2 = num - num1\n         \
    \   return num1.toLong + num2.toLong\n        }\n\n        def j(x: Long, base:\
    \ Long) : Long = {\n            val i = x.toInt\n            val b = base.toInt\n\
    \            val num1 = num.toInt\n            val num2 = num - num1 * b\n   \
    \         return num1.toLong + num2.toLong\n        }\n\n        def t(x : Long,\
    \ base: Long) : Long = {\n            val i = x.toInt\n            val b = base.toInt\n\
    \            val num1 = num\n            val num2 = num * b\n            val num3\
    \ = num2 * b\n            return num3.toLong + num1.toLong\n        }\n\n    \
    \    def u(x : Long, base: Long) : Long = {\n            val i = x.toInt\n   \
    \         val b = base.toInt\n            val num1 = num.toInt\n            val\
    \ num2 = num * b\n            val num3 = num2 * b\n            return num3.toLong\
    \ + num2.toLong\n        }\n\n        def f(x : Long, base: Long) : Long = {\n\
    \            val i = x.toInt\n            val b = base.toInt\n            val\
    \ num1 = num.toInt\n            val num2 = num * b\n            val num3 = num2\
    \ * b\n            return num3.toLong + num1.toLong\n        }\n\n        def\
    \ z(x : Long, base: Long) : Long = {\n            val i = x.toInt\n          \
    \  val b = base.toInt\n            val num1 = num\n            val num2 = num\
    \ * b\n            val num3 = num2 * b\n            return num3.toLong + num2.toLong\n\
    \        }\n\n        def gt(x : Long, base: Long) : Long = {\n            val\
    \ i = x.toInt\n            val b = base.toInt\n            val num1 = num.toInt\n\
    \            val num2 = num * b\n            val num3 = num2 * b\n           \
    \ val num4 = num3 * b\n            return num4.toLong + num1.toLong\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp91uenxly.scala:102:0 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp91uenxly.scala:101:1\
    \ --------------------\e[0m\e[0m\n\e[31m101 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: String\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp91uenxly.scala:86:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m86 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val num = x.toInt\n\
    \        val den = base.toInt\n        val rem = num % den\n        val num =\
    \ num / den\n        var baseString = base.toString.toLong\n        if (rem !=\
    \ 0) baseString = baseString.dropRight(1)\n        if (baseString == 0) baseString\
    \ = \"0\"\n        return num.toString.toLong + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpue5h6_li.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = num / den\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnum is already\
    \ defined as \e[33mvalue\e[0m \e[35mnum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpue5h6_li.scala:19:46 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (rem != \e[31m0\e[0m) baseString\
    \ = baseString.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                  value dropRight is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpue5h6_li.scala:20:42 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (baseString == \e[31m0\e[0m) baseString\
    \ = \e[31m\"0\"\e[0m\n\e[31m\e[31m   |\e[0m                                  \
    \        ^^^\e[0m\n\e[31m   |\e[0m                                          Found:\
    \    (\e[32m\"0\"\e[0m : String)\n\e[31m   |\e[0m                            \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpue5h6_li.scala:21:37 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mreturn\e[0m num.toString.toLong + baseString\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Found:    (baseString : Long)\n\e[31m  \
    \ |\e[0m                                     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val num = scala.math.BigInt(x)\n\
    \        val ten = num.pow(base)\n        val str = ten.toString\n        val\
    \ len = (str.length + 1 - str.length % 10).abs\n        val ans = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until len) {\n            ans.append(str(len - i - 1))\n\
    \        }\n        ans.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpboo6rjwy.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mten\e\
    [0m = num.pow(base)\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (base : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmpboo6rjwy.scala:20:16 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            ans.append(str(len - i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e\
    [0m with types\n\e[31m   |\e[0m (elems: String*): (ans : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (ans : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments (Char)\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpboo6rjwy.scala:22:12 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        ans.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    scala.collection.mutable.ListBuffer[String]\n\e[31m\
    \   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = java.lang.Integer.toBinaryString(x)\n\
    \        var pos = str.length\n        var bin = str\n        var i = 0\n    \
    \    while (pos > 1) {\n            pos = pos / base\n            bin = bin.substring(i,\
    \ i + pos + 1).toString + bin.substring(i + pos + 1)\n            i = i + 1\n\
    \        }\n        if (i == 0) \"\"\n        else bin.substring(i, bin.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo033jvcz.scala:14:51\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mstr\e\
    [0m = java.lang.Integer.toBinaryString(x)\n\e[31m\e[31m   |\e[0m             \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                    Found:    (x : Long)\n\e[31m   |\e[0m   \
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo033jvcz.scala:19:18 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            pos = pos / base\n\e[31m\e[31m   |\e[0m \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:   \
    \ Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n       val str = x.toString\n\
    \       val rep : mutable.MutableList[Char] =  new mutable.MutableList[Char]\n\
    \       val res : StringBuilder = new StringBuilder\n       var i = 0\n      \
    \ while (i < str.length) {\n           if (str.charAt(i) != '0') {\n         \
    \     rep.append(str.charAt(i))\n           } else {\n               val digit\
    \ = str.charAt(i)\n               val d = digit.asDigit\n               val newBase\
    \ = base.toInt\n               val pow = digit.asDigit\n\n               if (d\
    \ < 10)\n                   res.append((newBase / pow).toInt*d+pow)\n        \
    \       else\n                   res.append((newBase%pow).toInt+pow)\n       \
    \    }\n           i += 1\n       }\n       rep.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcem6km0z.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m       \e[33mval\e[0m \e[36mrep\e[0m : mutable.MutableList[\e\
    [35mChar\e[0m] =  \e[33mnew\e[0m mutable.MutableList[\e[35mChar\e[0m]\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcem6km0z.scala:15:50\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \e[33mval\e[0m \e\
    [36mrep\e[0m : mutable.MutableList[\e[35mChar\e[0m] =  \e[33mnew\e[0m mutable.MutableList[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = x.toString;\n        var remainder = x % base\n        while (x > 0) {\n \
    \           result += (remainder / base).toString\n            remainder = remainder\
    \ % base\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val bases :\
    \ List[Int] = base.intValue match {\n            case 1    => List(2,3)\n    \
    \        case 2    => List(3,4)\n            case 3    => List(4,5)\n        \
    \    case 4    => List(5,6)\n            case 5    => List(6,7)\n            case\
    \ 6    => List(7,8)\n            case 7    => List(8,9)\n            case 8  \
    \  => List(9,10)\n            case 9    => List(10,11)\n            case 10  \
    \ => List(11,12)\n            case 11   => List(12,13)\n            case 12  \
    \ => List(13,14)\n            case 13   => List(14,15)\n            case 14  \
    \ => List(15,16)\n            case 15   => List(16,17)\n            case 16  \
    \ => List(17,18)\n            case 17   => List(18,19)\n            case 18  \
    \ => List(19,20)\n            case 19   => List(20,21)\n            case 20  \
    \ => List(21,22)\n            case 21   => List(22,23)\n            case 22  \
    \ => List(23,24)\n            case 23   => List(24,25)\n            case 24  \
    \ => List(25,26)\n            case 25   => List(26,27)\n            case 26  \
    \ => List(27,28)\n            case 27   => List(28,29)\n            case 28  \
    \ => List(29,30)\n            case 29   => List(30,31)\n            case 30  \
    \ => List(31,32)\n            case 31   => List(32,33)\n            case 32  \
    \ => List(33,34)\n            case 33   => List(34,35)\n            case 34  \
    \ => List(35,36)\n            case 35   => List(36,37)\n            case 36  \
    \ => List(37,38)\n            case 37   => List(38,39)\n            case 38  \
    \ => List(39,40)\n            case 39   => List(40,41)\n            case 40  \
    \ => List(41,42)\n            case 41   => List(42,43)\n            case 42  \
    \ => List(43,44)\n            case 43   => List(44,45)\n            case 44  \
    \ => List(45,46)\n            case 45   => List(46,47)\n            case 46  \
    \ => List(47,48)\n            case 47   => List(48,49)\n            case 48  \
    \ => List(49,50)\n            case 49   => List(50,51)\n            case 50  \
    \ => List(51,52)\n            case 51   => List(52,53)\n            case 52  \
    \ => List(53,54)\n            case 53   => List(54,55)\n            case 54  \
    \ => List(55,56)\n            case 55   => List(56,57)\n            case 56  \
    \ => List(57,58)\n            case 57   \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgcp4das8.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgcp4das8.scala:89:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m89 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpgcp4das8.scala:71:19 --------------------\e[0m\e[0m\n\
    \e[31m71 |\e[0m            \e[33mcase\e[0m \e[31m57\e[0m   \n\e[31m\e[31m   |\e\
    [0m                   ^\e[0m\n\e[31m   |\e[0m                   Found:    Unit\n\
    \e[31m   |\e[0m                   Required: List[Int]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpgcp4das8.scala:88:1 ---------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpgcp4das8.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val r = x %\
    \ base\n        val str = r.toString()\n        changeBase(x, base)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      val xDigits =\
    \ List(x/base, x%base)\n      val result = xDigits.map(x => if(x > 9) x else ('0'+x)).mkString\n\
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_vt1cmfp.scala:19)\n\tat Problem.main(tmp_vt1cmfp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res : String\
    \ = \"\"\n        if(x >= base) {\n            res = changeBase(x / base, base).concat(String.valueOf((x\
    \ % base)))\n        }\n        else {\n            res = changeBase(x / base,\
    \ base).concat(String.valueOf(x))\n        }\n        return res;\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\tat Problem$.changeBase(tmphxp02q7m.scala:19)\n\
    \tat Problem$.c"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ {\n            x % base + changeBase(x / base, base)\n        } else {\n   \
    \         (x / base) * base.toString\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpqu1gs7yp.scala:17:23 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            (x / base) * base.toString\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments (String)\n1 error found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val power =\
    \ x ** base\n        val result = power.toString\n        if (result.length <\
    \ 2) {\n            val length = 2 - result.length\n            if (result < 10)\
    \ {\n                result = result + new String(Array.fill(length)(0).asInstanceOf[Char])\n\
    \            } else {\n                result = result + new String(Array.fill(length)(1).asInstanceOf[Char])\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgw6a4mj8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mpower\e[0m = x ** base\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          value ** is not a member of Long\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpgw6a4mj8.scala:19:23 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                result = result + \e[33mnew\e[0m \e[35mString\e[0m(Array.fill(length)(\e\
    [31m0\e[0m).asInstanceOf[\e[35mChar\e[0m])\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val result\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpgw6a4mj8.scala:21:23 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result = result + \e[33mnew\e[0m \e[35mString\e\
    [0m(Array.fill(length)(\e[31m1\e[0m).asInstanceOf[\e[35mChar\e[0m])\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val result\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if(base < 10)\
    \ {\n            s\"${x.toString.take(base)}0\"\n        } else if(base > 10)\
    \ {\n            val base10 = x.toString.take(base)\n            val rest = x.toString.drop(base).take(10\
    \ - base).toString.reverse\n            s\"${base10}${rest.mkString.reverse}\"\
    \n        } else {\n            s\"${x.toString.take(base)}0\"\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_t8jm7f.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[31ms\"\e[0m${x.toString.take(base)}\e\
    [31m0\"\e[0m\n\e[31m\e[31m   |\e[0m                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                Found:    (base : Long)\n\e[31m\
    \   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx_t8jm7f.scala:17:41 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbase10\e[0m = x.toString.take(base)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                         Found:    (base : Long)\n\e\
    [31m   |\e[0m                                         Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_t8jm7f.scala:18:39 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = x.toString.drop(base).take(\e\
    [31m10\e[0m - base).toString.reverse\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \          Found:    (base : Long)\n\e[31m   |\e[0m                          \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx_t8jm7f.scala:18:50 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = x.toString.drop(base).take(\e\
    [31m10\e[0m - base).toString.reverse\n\e[31m\e[31m   |\e[0m                  \
    \                                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                     Found:    Long\n\e[31m   |\e[0m        \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_t8jm7f.scala:21:3"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // initialize\
    \ a list to collect digits in result\n        var digits = ListBuffer.empty[Long]\n\
    \        // calculate sum\n        val sum = x.toInt * (base.toLong)\n       \
    \ while(sum.asInstanceOf[Long] > 0){\n            digits += sum.asInstanceOf[Long]\n\
    \            sum -= digits(0)\n        }\n        // convert digits into a string\
    \ with base base\n        var s = \"\"\n        digits.reverse.foreach( x => s\
    \ += x.toString.toChar)\n        s\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbn3_w9q0.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum -= digits(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not\
    \ a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbn3_w9q0.scala:24:39 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        digits.reverse.foreach( \e[36mx\e[0m => s += x.toString.toChar)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of String - did you mean String.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbn3_w9q0.scala:24:53 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        digits.reverse.foreach( \e[36mx\e[0m => s +=\
    \ x.toString.toChar)\n\e[31m\e[31m   |\e[0m                                  \
    \        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \     value toChar is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        //Base less\
    \ than 10\n        if(base < 10) {\n            return \"Invalid Input\"\n   \
    \     }\n        //Base greater than or equal to 10\n        if(base >= 10) {\n\
    \            val pow = x.toInt / base.toInt\n            val digits = x.toString.dropWhile(_\
    \ < base)\n            //Handle edge case where pow = 1 and digits = x\n     \
    \       if(pow == 1L && digits.isEmpty) {\n                return digits.reverse.mkString\n\
    \            }\n            val remainder = x%base\n            val res = digits(0)\
    \ + changeBase(pow, base*base) + remainder\n            return res\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp48b3qnsk.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(base >=\
    \ \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m \
    \       Maybe you are missing an else part for the conditional?\n\e[31m20 |\e\
    [0m            \e[33mval\e[0m \e[36mpow\e[0m = x.toInt / base.toInt\n\e[31m21\
    \ |\e[0m            \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.dropWhile(_\
    \ < base)\n\e[31m22 |\e[0m            \e[34m//Handle edge case where pow = 1 and\
    \ digits = x\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(pow == \e[31m1L\e\
    [0m && digits.isEmpty) {\n\e[31m24 |\e[0m                \e[33mreturn\e[0m digits.reverse.mkString\n\
    \e[31m25 |\e[0m            }\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mremainder\e\
    [0m = x%base\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mres\e[0m = digits(\e\
    [31m0\e[0m) + changeBase(pow, base*base) + remainder\n\e[31m28 |\e[0m        \
    \    \e[33mreturn\e[0m res\n\e[31m29 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var digits\
    \ = \"\"\n        var remainder = 0\n        var tensBase = base.pow(10)\n   \
    \     while(x >= tensBase) {\n            digits = x.mod(tensBase).toString()\
    \ + digits\n            remainder = x.mod(tensBase).toLong\n            x = x.div(tensBase).toLong\n\
    \        }\n        digits = x.toString() + digits\n        if(remainder > 0)\
    \ {\n            digits = remainder.toString() + digits\n        }\n        digits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph50wuepb.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mtensBase\e[0m = base.pow(\e\
    [31m10\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue pow is not a member of Long, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph50wuepb.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            digits = x.mod(tensBase).toString() + digits\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod\
    \ is not a member of Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph50wuepb.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            remainder = x.mod(tensBase).toLong\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not\
    \ a member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph50wuepb.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            x = x.div(tensBase).toLong\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m                value div\
    \ is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      val s = x.toString.toInt\n\
    \      val t = s * (base - 1)\n      val res = (t.toString + \"\").substring(0,\
    \ base)\n      res\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponnisz8t.scala:16:47\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mres\e\
    [0m = (t.toString + \e[31m\"\"\e[0m).substring(\e[31m0\e[0m, base)\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (base : Long)\n\e\
    [31m   |\e[0m                                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (base <\
    \ 10)\n            return x.toString.changebase(base);\n        else\n       \
    \     return null\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx1hmusk6.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mreturn\e[0m x.toString.changebase(base);\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   value changebase is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x.toString.length\
    \ != base.toString.length) throw new RuntimeException(\"Base should always be\
    \ less than \" + base.toString)\n        var result : String = x.toString\n  \
    \      var remainder : Long = 0\n        var digit = 0\n        while(digit<base.toString.length)\
    \ {\n            if(digit==base.toString.length-1){\n                result =\
    \ result.substring(0, digit) + x.toString.substring(digit, base.toString.length)\n\
    \                remainder = remainder + x.toString.substring(digit, base.toString.length)\n\
    \                break\n            }\n            if(digit==0){\n           \
    \     result = x.toString.substring(0, digit) + result.substring(digit, base.toString.length)\n\
    \                remainder = remainder + x.toString.substring(digit, base.toString.length)\n\
    \                break\n            }\n            result = result.substring(0,\
    \ digit-1) + result.substring(digit-1, digit) + x.toString.substring(digit, base.toString.length)\n\
    \            remainder = remainder + x.toString.substring(digit, base.toString.length)\n\
    \            digit = digit+1\n        }\n        if (remainder > 0) result = result\
    \ + remainder.toString\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjeosiyk_.scala:21:28\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                remainder = remainder\
    \ + x.toString.substring(digit, base.toString.length)\n\e[31m\e[31m   |\e[0m \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    String\n\e[31m   |\e\
    [0m                            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjeosiyk_.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjeosiyk_.scala:26:28 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                remainder = remainder + x.toString.substring(digit,\
    \ base.toString.length)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    String\n\e[31m   |\e\
    [0m                            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjeosiyk_.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjeosiyk_.scala:30:24 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            remainder = remainder + x.toString.substring(digit,\
    \ base.toString.length)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    String\n\e[31m   |\e[0m\
    \                   "
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseString\
    \ = java.lang.Integer.toBinaryString(x)\n        var result = \"\"\n        var\
    \ baseDigit = baseString.length\n        for(i <- 0 to baseDigit - 1) {\n    \
    \        if(base(i) == \"1\") {\n                result = result + \"0\"\n   \
    \         } else {\n                result = result + \"1\"\n            }\n \
    \       }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpntw1i8j0.scala:14:58\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbaseString\e\
    [0m = java.lang.Integer.toBinaryString(x)\n\e[31m\e[31m   |\e[0m             \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                            Found:    (x : Long)\n\e[31m   |\e\
    [0m                                                    Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpntw1i8j0.scala:18:15 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(base(i) == \e[31m\"1\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m          \
    \     \e[33mparameter\e[0m \e[35mbase\e[0m does not take parameters\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // Convert\
    \ number to string and remove all non-digits from it\n        var strNum = x.toString\n\
    \        strNum = strNum.replaceAll(\"[^0-9]\", \"\")\n        // Split strNum\
    \ into array of base digits\n        var intArrNum = strNum.split(\"\").map(x\
    \ => x.toInt)\n        // Convert all digits into binary and add them all together\n\
    \        var sumBInt = intArrNum.map(x => x & base).sum\n        // Convert decimal\
    \ back to a number from base 10\n        var result = sumBInt.toInt\n        //\
    \ Convert the result to the base\n        return Integer.toBinaryString(result).toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz30o2zmf.scala:27)\n\tat Problem.main(tmpz30o2zmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str : String\
    \ = x.toString.reverse\n        val baseMap : mutable.Map[Long, String] = mutable.HashMap()\n\
    \        for (i <- 0 until str.length) {\n            baseMap put (str.toCharArray.apply(i).toLong,\
    \ (i+1).toString)\n        }\n        if (base.abs() < 10) {\n            baseMap\
    \ put (base.abs.toLong, base.toString.reverse)\n        }\n        else {\n  \
    \          baseMap put (base.abs.toLong, (base.toString.reverse+\"0\"))\n    \
    \    }\n        val num : String = (x.toString.reverse.toCharArray.toList).map(x\
    \ => baseMap get x.toLong).mkString\n        (num.reverse).reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwqgqlb5o.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbaseMap\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mString\e[0m] = mutable.HashMap()\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwqgqlb5o.scala:15:50\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mbaseMap\e[0m : mutable.Map[\e[35mLong\e[0m, \e[35mString\e[0m] = mutable.HashMap()\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpwqgqlb5o.scala:19:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m\
    \ (base.abs() < \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mclass\e\
    [0m \e[35mRichLong\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n        val newBase = digits.length\n\
    \        val remainder = x % newBase\n        val quotient = x / newBase\n   \
    \     // reverse the base\n        val reversedBase = digits.reverse.mkString\n\
    \        (reversedBase + digits\n                // convert to string\n      \
    \          .reverse.dropWhile(_ == digits(remainder))\n                // convert\
    \ to string\n                .reverse.takeWhile(_ == digits(quotient))).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1vfgzaj.scala:22:47\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                .reverse.dropWhile(_\
    \ == digits(remainder))\n\e[31m\e[31m   |\e[0m                               \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \               Found:    (remainder : Long)\n\e[31m   |\e[0m                \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmph1vfgzaj.scala:24:47 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                .reverse.takeWhile(_ == digits(quotient))).mkString\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (quotient\
    \ : Long)\n\e[31m   |\e[0m                                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val newBase\
    \ = base * 8\n        val newNumber = x / newBase\n        // check whether the\
    \ result is integer or not\n        if (newNumber - newBase < 0)\n           \
    \ // convert decimal to octal\n            changeBase(newNumber, newBase).toString\
    \ + \".0\" + changeBase(x % newBase, base)\n        else\n            // convert\
    \ decimal to binary\n            changeBase(newNumber, newBase).toString + changeBase(x\
    \ % newBase, base)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:15)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\
    \tat Problem$.changeBase(tmp8dgx1qz1.scala:19)\n\tat Problem$.main(tmp8dgx1qz1.scala:25)\n\
    \tat Problem.main(tmp8dgx1qz1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:4"
  stdout: ''
  timestamp: 1660009630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x.toString.reverse.grouped(base)\n        val output = new collection.mutable.ListBuffer[String]()\n\
    \        for((digit, factor) <- digits) output.append((digit * factor).toString)\n\
    \        output.toList.reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk4wt0qmg.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base)\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                              Found:    (base : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4wt0qmg.scala:16:60 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m((digit, factor) <- digits) output.append((digit\
    \ * factor).toString)\n\e[31m\e[31m   |\e[0m                                 \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member of\
    \ Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      val str = x.toString.reverse\n\
    \      val digits = (0 until str.length).map { i => (str take i).reverse }.toBuffer\n\
    \      val baseDigits =\n        for (i <- 0 until base.toString.length) yield\
    \ {\n          val digit = str take i\n          digit.contains(base.toString.charAt(i))\n\
    \        }.toList\n\n      val ans = digits\n        .zip(baseDigits)\n      \
    \  .map { case (digit, baseDigit) =>\n          digit match {\n            case\
    \ \"0\" => digit\n            case _ => baseDigit + digit\n          }\n     \
    \   }\n        .mkString\n      ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpucivj5su.scala:20:10 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until base.toString.length)\
    \ \e[33myield\e[0m {\n\e[31m18 |\e[0m          \e[33mval\e[0m \e[36mdigit\e[0m\
    \ = str take i\n\e[31m19 |\e[0m          digit.contains(base.toString.charAt(i))\n\
    \e[31m20 |\e[0m        }.toList\n\e[31m\e[31m   |\e[0m                       \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \           value toList is not a member of Boolean\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpucivj5su.scala:27:32 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m            \e[33mcase\e[0m _ => baseDigit + digit\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseString\
    \ = x.toString(base)\n        var result = \"\"\n        var power = base\n  \
    \      while (power > 0) {\n            if (power % 2 != 0) result = result +\
    \ power(power) + \" \";\n            power = (power / 2)\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgtpsmc76.scala:14:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbaseString\e[0m = x.toString(base)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e[31m   |\e\
    [0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e\
    [33mclass\e[0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpgtpsmc76.scala:18:50\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e\
    [0m (power % \e[31m2\e[0m != \e[31m0\e[0m) result = result + power(power) + \e\
    [31m\" \"\e[0m;\n\e[31m\e[31m   |\e[0m                                       \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                                 \e[33mvariable\e\
    [0m \e[35mpower\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseNumber\
    \ = x\n        val remainder = x%base\n        var string = \"\"\n        var\
    \ counter = remainder\n        while (counter > 0) {\n            string += counter%baseNumber\n\
    \            counter += 1\n            counter /= base\n        }\n        string\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb3eps8px.scala:26)\n\tat Problem.main(tmpb3eps8px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // base numbers\
    \ are less than 10.\n        if (base < 10) {\n            throw new RuntimeException(\"\
    Base must be less than 10\")\n        }\n        var res = \"\"\n        var b\
    \ = base\n        while (x >= b) {\n            res = res + x.toString.toLong\n\
    \            x = (x / b).toLong\n            b = b * base\n        }\n       \
    \ res = res + x.toString.toLong\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpk24evz5j.scala:22:14 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            x = (x / b).toLong\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = x.toString(base);\n\
    \        val l = res.length();\n        while(l > 1){\n            res = res.drop(l\
    \ - 1) + res.take(l - 1).toString(base);\n            l -= 1;\n        }\n   \
    \     res = res.drop(l - 1).toString(base);\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv__04rl1.scala:14:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = x.toString(base);\n\
    \e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e[0m \
    \        too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e\
    [0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv__04rl1.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        res = res.drop(l - \e\
    [31m1\e[0m).toString(base);\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x % base\n        if (digits < 10)\n            return x.toString + digits.toString\n\
    \        else\n            return changeBase(x / base, base) + digits.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm56fvo4_.scala:21)\n\tat Problem.main(tmpm56fvo4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val bases =\
    \ mutable.ArrayBuffer.empty[String]\n        var res = \"\"\n        var i = 0\n\
    \        var temp = 0\n        while(i < x) {\n            temp = (x / (base +\
    \ 1))\n            if(temp < base)\n                bases += ((temp + 1).toString\
    \ + \".\")\n            else\n                bases += ((temp.toString + \"0\"\
    ))\n            x -= temp * base\n            i += 1\n        }\n        res =\
    \ bases.mkString(\"\")\n        if(x > 0) {\n            res += \".\"\n      \
    \  }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzy992bol.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbases\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzy992bol.scala:19:20 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            temp = (x / (base + \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Found:    Long\n\e[31m   |\e[0m                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzy992bol.scala:24:14\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            x -= temp * base\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -=\
    \ is not a member of Long - did you mean x.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val xs = x.toString.toInt\n\
    \        val bases = base.toString.toInt\n        if(xs % bases == 0){\n     \
    \       return (xs / bases) * base.toString\n        }\n        else{\n      \
    \      var tmp = xs / bases\n            var carry = 0\n            while( (tmp\
    \ % bases) != 0){\n                tmp = tmp / bases\n                carry +=1\n\
    \            }\n            tmp += carry\n            while(tmp > base){\n   \
    \             tmp = tmp / base\n                carry +=1\n            }\n   \
    \         return (xs / bases) * base.toString + (carry > 0 ? carry.toString :\
    \ \"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmppoyg22kf.scala:17:32 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mreturn\e[0m (xs / bases) * base.toString\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m  \
    \ |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m\
    \  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short):\
    \ Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments (String)\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppoyg22kf.scala:28:22 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                tmp = tmp / base\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \  Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmppoyg22kf.scala:31:32 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mreturn\e[0m (xs / bases) * base.toString\
    \ + (carry > \e[31m0\e[0m ? carry.toString : \e[31m\"\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float):\
    \ Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e\
    [31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e\
    [0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments (String)\n3 errors found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseNum\
    \ = x.toString.reverse.foldLeft(base)((num, digit) => num * base + digit.toLong)\n\
    \        x.toString.reverse.foldLeft(baseNum)((num, digit) => num % base + digit.toChar)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpodgjia81.scala:15:44\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        x.toString.reverse.foldLeft(baseNum)((\e\
    [36mnum\e[0m, \e[36mdigit\e[0m) => num % base + digit.toChar)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseStr\
    \ = Integer.toString(base, 10)\n        if (baseStr.length <= base.toString().length)\
    \ {\n            val str1 = Integer.toString(x, base)\n            val str2 =\
    \ str1.substring(baseStr.length)\n            str2\n        } else {\n       \
    \     val str1 = Integer.toString(x, base)\n            val str2 = Integer.toString(base,\
    \ str1.length - baseStr.length)\n            str1 +  str2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvgnr5a29.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbaseStr\e\
    [0m = Integer.toString(base, \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                            ^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                 Found:    (base : Long)\n\e[31m   |\e[0m                   \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvgnr5a29.scala:16:40 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mstr1\e[0m = Integer.toString(x, base)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                        Found:    (x : Long)\n\e[31m \
    \  |\e[0m                                        Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvgnr5a29.scala:16:43 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mstr1\e[0m = Integer.toString(x,\
    \ base)\n\e[31m\e[31m   |\e[0m                                           ^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvgnr5a29.scala:20:40\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e\
    [36mstr1\e[0m = Integer.toString(x, base)\n\e[31m\e[31m   |\e[0m             \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \              Found:    (x : Long)\n\e[31m   |\e[0m                         \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvgnr5a29.scala:20:43 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mval\e"
  stdout: ''
  timestamp: 1660009635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = x.toString.reverse.takeWhile(_\
    \ != '0').mkString\n        var x = str.toLong\n        x = base.toLong * x\n\
    \        return x.toString.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpea51qokf.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = str.toLong\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mstr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var i = 0\n\
    \        var res : String = \"\"\n        while (x > 0) {\n            res = res\
    \ + Integer.toString(x % base) + if (i < base) \"\" else \", \"\n            i\
    \ = i + 1\n            x /= base\n        }\n        if (base < 2) res = \"(\"\
    \ + res + \")\"\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvzf9i6kl.scala:17:53 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            res = res + Integer.toString(x % base) +\
    \ \e[33mif\e[0m (i < base) \e[31m\"\"\e[0m \e[33melse\e[0m \e[31m\", \"\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                     ^^\e\
    [0m\n\e[31m   |\e[0m                                        expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvzf9i6kl.scala:17:41 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            res = res + Integer.toString(x % base) + \e[33mif\e[0m (i\
    \ < base) \e[31m\"\"\e[0m \e[33melse\e[0m \e[31m\", \"\e[0m\n\e[31m\e[31m   |\e\
    [0m                                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    Long\n\e[31m   |\e[0m       \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvzf9i6kl.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            x /= base\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long -\
    \ did you mean x.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // return x\n\
    \        val xstr = x.toString.reverse;\n        var xstrlen = xstr.length;\n\
    \        // var y = 0;\n        val basestr = base.toString.reverse;\n       \
    \ var basestrlen = basestr.length;\n        // int basenum = (int)base;\n    \
    \    // int xnum = (int)x;\n        var resstr = xstr;\n        var resstrlen\
    \ = resstr.length;\n        // while(y < resstrlen) {\n        // if(resstr[y]\
    \ == basestr[y]) {\n        //     // if(basenum == xnum) {\n        //     resstr[y]\
    \ = 0;\n        //     resstr[y + 1] = 0;\n        //     resstr[y + 2] = 0;\n\
    \        //     // resstr[y + 3] = 0;\n        //     // y = y + 4;\n        //\
    \     // }\n        //     resstrlen = resstrlen + 1;\n        // } else {\n \
    \       // y = y + 1;\n        // }\n        // }\n        var res = \"\";\n \
    \       // int basenum = (int)base;\n        // int xnum = (int)x;\n        while(x\
    \ < resstrlen) {\n            if(resstr[x] == basestr[x]) {\n                //\
    \ if(basenum == xnum) {\n                res = resstr.substring(0, x) + \"0\"\
    \ + res;\n                resstrlen = resstrlen - 1;\n                // } else\
    \ {\n                // x = x + 1;\n                // }\n            } else {\n\
    \                // x = x + 1;\n            }\n        }\n        // return res;\n\
    \        // return res.length == 1 ? \"0\" + res : res;\n        // return res.length\
    \ == 1 ? \"0\" + res : res;\n        return res;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp1nar_98.scala:42:22 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            \e[33mif\e[0m(resstr[\e[35mx\e[0m] == basestr[\e\
    [35mx\e[0m]) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e\
    [0m                      Not found: type x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp1nar_98.scala:44:42 --------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m                res = resstr.substring(\e[31m0\e[0m, x) +\
    \ \e[31m\"0\"\e[0m + res;\n\e[31m\e[31m   |\e[0m                             \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \  Found:    (x : Long)\n\e[31m   |\e[0m                                     \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // Initialize\
    \ result array.\n        var arr = Array.fill[Long](base)(0l)\n        // Convert\
    \ the whole number x to string from right to left.\n        var x = x.toString\n\
    \        // Get first character in string x\n        var first = x(0)\n      \
    \  // Get last character in string x\n        var last = x.slice(-1)\n       \
    \ // Store the value of the first character in result array\n        arr(0) =\
    \ base - first.toInt\n        // Loop through the rest of string x\n        for\
    \ (i <- 1 to x.length - 1){\n            // If last character in string x is same\
    \ as current character of string x\n            if(last.toInt == x(x.length -i)){\n\
    \                // Add value of current character in string x to the result array\n\
    \                arr(i) = arr(i) + last.toInt\n            } else {\n        \
    \        // If last character in string x is not same as current character of\
    \ string x\n                // then change the last character in result array\
    \ to current character in string x\n                arr(i) = arr(i) + last.toInt\n\
    \                arr(i) = arr(i) + first.toInt\n            }\n        }\n   \
    \     // Convert the result array back to string and return it.\n        return\
    \ x.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdswtjdy.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36marr\e\
    [0m = Array.fill[\e[35mLong\e[0m](base)(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    Found:    (base : Long)\n\e[31m   |\e[0m                \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpzdswtjdy.scala:17:16 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x.toString\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvariable\e\
    [0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // Use mutable\
    \ collection to hold converted numbers in base and return.\n        // Use recursive\
    \ function to solve the problem.\n        var numStr = \"\"\n        def go(baseNum\
    \ : Long, numStr : String) : String = {\n            if (baseNum == 0) numStr\n\
    \            else {\n                // If baseNum is odd, then use its digit\
    \ to divide and append the recursive result.\n                // This digit divides\
    \ x with base and recursively calls the function again to solve the problem.\n\
    \                if (baseNum % 2 == 0) go(baseNum / 2, numStr + x.toString.charAt(0))\n\
    \                // If baseNum is even, then append the remainder of x divided\
    \ with\n                // the base and recursively calls the function again to\
    \ solve the problem.\n                else go(baseNum, numStr + x.toString.charAt(1))\n\
    \            }\n        }\n        go(base, numStr)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.go$1(tmps9z8e_fv.scala:25)\n\tat Problem$.changeBase(tmps9z8e_fv.scala:28)\n\
    \tat Problem$.main(tmps9z8e_fv.scala:31)\n\tat Problem.main(tmps9z8e_fv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val len = x.toString.length\n\
    \        val power = len / base\n        if (power == 0) \"0\"\n        else {\n\
    \            val zeros = (power - 1) * base\n            val zeroIndex = x.toString.lastIndexOf('0')\n\
    \            val result = if (zeroIndex > 0) x.toString.substring(zeroIndex, zeroIndex+zeros+1).reverse\n\
    \            else x.toString.substring(0, zeros).reverse\n            result +\
    \ changeBase(result.toInt, base)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vocgkq3.scala:20:76\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mif\e[0m (zeroIndex > \e[31m0\e[0m) x.toString.substring(zeroIndex,\
    \ zeroIndex+zeros+\e[31m1\e[0m).reverse\n\e[31m\e[31m   |\e[0m               \
    \                                                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_vocgkq3.scala:21:41 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33melse\e[0m x.toString.substring(\e[31m0\e[0m, zeros).reverse\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                         Found:    (zeros : Long)\n\e\
    [31m   |\e[0m                                         Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var str : String\
    \ = \"\"\n        var temp : Long = 0\n        var remainder : Long = 1\n    \
    \    while(x < base) {\n            temp = x % base\n            str = str + temp.toString()\
    \ + \"+\"\n            x = x / base\n        }\n        while(temp != 0) {\n \
    \           remainder = temp % base\n            str = str + remainder.toString()\n\
    \            temp = temp / base\n        }\n        str = str.substring(0, str.length\
    \ - 1)\n        return str\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfbslidn7.scala:20:14 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            x = x / base\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // Get the\
    \ digit array and count of the array.\n        // Get the remainder after dividing\
    \ the whole number x by base.\n        // Update the digit array with the remainder.\n\
    \        // Convert the digit array to string and return.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljdihtoi.scala:13:53\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mchangeBase\e\
    [0m(\e[36mx\e[0m : \e[35mLong\e[0m, \e[36mbase\e[0m : \e[35mLong\e[0m) : \e[35mString\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \              Required: String\n\e[31m14 |\e[0m        \e[34m// Get the digit\
    \ array and count of the array.\e[0m\n\e[31m15 |\e[0m        \e[34m// Get the\
    \ remainder after dividing the whole number x by base.\e[0m\n\e[31m16 |\e[0m \
    \       \e[34m// Update the digit array with the remainder.\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// Convert the digit array to string and return.\e[0m\n\e[31m18\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ {\n            changeBase(x / base, base)\n        } else {\n            changeBase(x\
    \ % base, base)\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def isPower(base\
    \ : Long, x : Long) : Boolean =\n            ((base <= 1) && (base > 0)) ||\n\
    \                ((base >= 10) && (base < 100));\n\n        def isMultiple(base\
    \ : Long, x : Long) : Boolean =\n            ((base > 1) && (base < 100)) &&\n\
    \                (((x % base) == 0) && (x != 0));\n\n        def getNumStr(base\
    \ : Long, x : Long) : String = {\n            def isNegation(x : Long) : Boolean\
    \ =\n                ((x < 0) || (x > 0));\n\n            def isPositive(x : Long)\
    \ : Boolean =\n                ((x >= 0));\n\n            def isZero(x : Long)\
    \ : Boolean =\n                ((x == 0));\n\n            def isEven(x : Long)\
    \ : Boolean =\n                ((x % 2) == 0);\n\n            def isOdd(x : Long)\
    \ : Boolean =\n                ((x % 2) != 0);\n\n            val isNegative =\
    \ isNegation(x);\n            val isPositive = isPositive(x);\n            val\
    \ isZero = isZero(x);\n            val isEven = isEven(x);\n            val isOdd\
    \ = isOdd(x);\n\n            if (base > 10) {\n                if (isMultiple(base,\
    \ x)) {\n                    return x.toString.toLong.toString.multiply(base).toString\n\
    \                }\n                else if (isEven(x)) {\n                  \
    \  if (isNegative) return \"-\" + getNumStr(base, -x);\n                    else\
    \ if (isPositive) return \"0\" + getNumStr(base, x);\n                    else\
    \ if (isZero) return \"0\";\n                    else if (isEven) return \"even\"\
    ;\n                    else if (isOdd) return \"odd\";\n                }\n  \
    \              else if (isOdd(x)) {\n                    if (isNegative) return\
    \ \"-\" + getNumStr(base, -x);\n                    else if (isPositive) return\
    \ \"1\" + getNumStr(base, x);\n                    else if (isZero) return \"\
    1\";\n                    else if (isEven) return \"odd\";\n                 \
    \   else if (isOdd) return \"even\";\n                }\n                else\
    \ if (isPositive) {\n                    return x.toString.toLong.toString() +\
    \ getNumStr(base, x);\n                }\n                else if (isNegative)\
    \ {\n                    return \"-\" + getNumStr(base, x);\n                }\n\
    \                else if (isZero) return \"0\";\n            }\n            else\
    \ return x.toString.toLong.toString() + getNumStr(base, x);\n        }\n     \
    \   return getNumStr(base, x);\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp97fxmkur.scala:39:16 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36misPositive\e[0m = isPositive(x);\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0misPositive is already defined as \e[33mmethod\e[0m \e[35misPositive\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp97fxmkur.scala:40:16 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m            \e[33mval\e[0m \e[36misZero\e[0m = isZero(x);\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misZero is\
    \ already defined as \e[33mmethod\e[0m \e[35misZero\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp97fxmkur.scala:41:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e\
    [0m \e[36misEven\e[0m = isEven(x);\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misEven is already defined as \e[33mmethod\e[0m \e[35misEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp97fxmkur.scala:42:16 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m            \e[33mval\e[0m \e[36misOdd\e[0m = isOdd(x);\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misOdd is already\
    \ defined as \e[33mmethod\e[0m \e[35misOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp97fxmkur.scala:46:54\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m                    \e[33mreturn\e\
    [0m x.toString.toLong.toString.multiply(base).toString\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           value multiply is not a member of String\n\
    \e[31m"
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var xDigits\
    \ = x.toString\n        var baseDigits = base.toString\n        if (xDigits ==\
    \ baseDigits) {\n            return \"0\"\n        } else {\n            var quotient\
    \ = BigInt(xDigits) \\ base\n            var remainder = BigInt(xDigits) - (quotient\
    \ * base)\n            var resultDigits = BigInt(quotient).toString\n        \
    \    if (resultDigits == baseDigits) {\n                return \"0\"\n       \
    \     } else {\n                return resultDigits\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqra2bsmn.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mvar\e[0m \e[36mquotient\e[0m = BigInt(xDigits)\
    \ \\ base\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value \\ is not a member of BigInt\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = scala.util.control.Breaks._\n        val digitList = scala.collection.mutable.ListBuffer[Long]()\n\
    \        while(x >= base) {\n            digitList += digits(x)\n            x\
    \ = x / base\n        }\n        digitList += digits(x)\n        digitList.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7jzvc7qg.scala:14:47 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = scala.util.control.Breaks._\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                   an identifier expected, but '_'\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7jzvc7qg.scala:18:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            x = x /\
    \ base\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          Reassignment to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def pow(x:\
    \ Long, exponent: Long) : Long = {\n            val result = 1\n            exponent\
    \ match {\n                case 1 => result\n                case x => result\
    \ * x % base\n            }\n        }\n        val digits = new mutable.ArrayBuilder[String]\n\
    \        val remainder = x % base\n        digits += remainder.toString.reverse\n\
    \        val quotient = x / base\n        digits += quotient.toString.reverse\n\
    \        digits.result()\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq40sasis.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuilder[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var rep : String\
    \ = \"\"\n        while(x > 0) {\n            rep = (x.toString / base).toString\
    \ + rep\n            x = x % base\n        }\n        rep\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb34eecfa.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            rep = (x.toString / base).toString + rep\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ / is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpb34eecfa.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            x = x % base\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        while(x > 0) {\n            result += java.lang.Integer.toString(x\
    \ / base)\n            x = x % base\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxnkwpre1.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result += java.lang.Integer.toString(x /\
    \ base)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        value += is not a member of String - did you mean String.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxnkwpre1.scala:16:49 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result += java.lang.Integer.toString(x /\
    \ base)\n\e[31m\e[31m   |\e[0m                                               \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \     Found:    Long\n\e[31m   |\e[0m                                        \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxnkwpre1.scala:17:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            x = x %\
    \ base\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          Reassignment to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = x.toString\n\
    \        var res = 0\n        var i = 0\n        while(i < str.length) {\n   \
    \         res = (res * (base.toInt)) + str.charAt(i)\n            i += 1\n   \
    \     }\n        return res.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2ynt0oa.scala:24)\n\tat Problem.main(tmpa2ynt0oa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var num = x\n\
    \        var res = \"\"\n        var remainder = num % base\n        while(num\
    \ > base){\n            num /= base\n            res = num % base.toString + res.toString\
    \ + remainder.toString\n            remainder = num % base\n        }\n      \
    \  res += remainder.toString\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp73ndrfsw.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            res = num % base.toString + res.toString\
    \ + remainder.toString\n\e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m%\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ (String)\n1 error found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val num = new\
    \ Array[Double](base.toInt)\n        val s = x.toString.toDouble / base.toDouble\n\
    \        for (i <- 0 until num.length)\n            num(i) = s * i\n        val\
    \ res = num.map(_.toInt).sum\n        val res = res * base\n        val str =\
    \ res.toString.padLeft(base.toInt, '0')\n        // return string after conversion\n\
    \        val res = str.reverse.dropWhile(_ == '0').mkString\n        res + \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxyt8fu4y.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = res * base\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mres is already\
    \ defined as \e[33mvalue\e[0m \e[35mres\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxyt8fu4y.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = str.reverse.dropWhile(_\
    \ == \e[31m'0'\e[0m).mkString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mres is already defined as \e[33mvalue\e[0m \e[35mres\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxyt8fu4y.scala:20:31 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mstr\e[0m = res.toString.padLeft(base.toInt, \e\
    [31m'0'\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value padLeft is not a member of String\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x.toString.reverse.grouped(base)\n        val base = digits.reverse\n    \
    \    val result = \"\"\n        for (i <- 0 until digits.length) {\n         \
    \   result += digits(i).mkString(\"\")\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb0epipns.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbase\e[0m = digits.reverse\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35mdigits\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb0epipns.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result += digits(i).mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     value += is not a member of String - did you mean result.!=?\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpb0epipns.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result += digits(i).mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var xString\
    \ = \"\"\n        var base = base.toInt\n        var xLen = x.toInt\n        var\
    \ quotient = xLen / base\n        var remainder = xLen % base\n        var quotientString\
    \ = \"\"\n        var remainderString = \"\"\n        while (quotient != 0) {\n\
    \            quotientString = quotientString + quotient.toString(base)\n     \
    \       quotient = quotient - remainder\n            remainder = remainder + base\n\
    \        }\n        while (quotient != 0) {\n            remainderString = remainderString\
    \ + remainder.toString(base)\n            quotient = quotient - remainder\n  \
    \          remainder = remainder + base\n        }\n        if (remainderString.length\
    \ < x.length) {\n            remainderString = remainderString + remainder.toString(base)\n\
    \        }\n        xString = quotientString + remainderString\n        xString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkxgt05e4.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mbase\e[0m = base.toInt\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvariable\e[0m \e[35mbase\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkxgt05e4.scala:31:39 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m (remainderString.length < x.length)\
    \ {\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value length is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var sum = 0\n\
    \        while(x != 0) {\n            sum = sum + x % base\n            x = x\
    \ / base\n        }\n        val str = sum.toString\n        if(sum < base) {\n\
    \            str = \"0\" * (base-sum) + str\n        }\n        str\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7uaznvsf.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum = sum + x % base\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7uaznvsf.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            x = x / base\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7uaznvsf.scala:21:25\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            str = \e[31m\"0\"\
    \e[0m * (base-sum) + str\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var str = x.toString.reverse\n\
    \        var rev = \"\"\n        for(i <- 1 to str.length){\n            rev +=\
    \ str(i) swappedBase(rev(str(i)).toInt, base(i))\n        }\n        return rev\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26u95dox.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            rev += str(i) swappedBase(rev(str(i)).toInt,\
    \ base(i))\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        value += is not a member of String - did you mean String.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp26u95dox.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            rev += str(i) swappedBase(rev(str(i)).toInt,\
    \ base(i))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   value swappedBase is not a member of Char\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp26u95dox.scala:17:57 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            rev += str(i) swappedBase(rev(str(i)).toInt,\
    \ base(i))\n\e[31m\e[31m   |\e[0m                                            \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                 \e[33mparameter\e\
    [0m \e[35mbase\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val power =\
    \ scala.math.pow(base, x.length).toInt\n        var newBase = base\n        var\
    \ newX = 0\n        while(power > 0) {\n            newX = newX * base + (x.toInt\
    \ / power).toInt\n            power = power - 1\n        }\n        if(newX >\
    \ 0) {\n            newBase = newX\n            newX = x.toInt\n        }\n  \
    \      return newX.toString + newBase.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphr4jolbe.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mpower\e[0m = scala.math.pow(base,\
    \ x.length).toInt\n\e[31m\e[31m   |\e[0m                                     \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    value length\
    \ is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphr4jolbe.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            newX = newX * base\
    \ + (x.toInt / power).toInt\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Long\n\e[31m   |\e[0m       \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmphr4jolbe.scala:19:18 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            power = power - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ power\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = (x.toString.reverse).takeWhile(char=>base\
    \ < str.length || base < char.toString.length).reverse\n        (str.repeat(base\
    \ - str.length) ++ str) ++ (x.toString ++ \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbf4rvmd5.scala:14:62 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mstr\e[0m = (x.toString.reverse).takeWhile(\e\
    [36mchar\e[0m=>base < str.length || base < char.toString.length).reverse\n\e[31m\e\
    [31m   |\e[0m                                                              ^\e\
    [0m\n\e[31m   |\e[0m                                          Recursive \e[33mvalue\e\
    [0m \e[35mstr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbf4rvmd5.scala:15:20 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        (str.repeat(base - str.length) ++ str) ++ (x.toString ++ \e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Found:    Long\n\e[31m   |\e[0m             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val r = scala.util.matching.Regex(\"\
    ^-?0*\").findFirstIn(x.toString)\n        if(r != null)\n            x.toString\n\
    \        else\n            val temp = scala.math.BigDecimal(x).toString(base)\n\
    \            changeBase(new BigDecimal(temp), base)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg69jescm.scala:18:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = scala.math.BigDecimal(x).toString(base)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^\e[0m\n\e[31m   |\e[0m  too many arguments for \e[33mmethod\e[0m \e[35mtoString\e\
    [0m in \e[33mclass\e[0m \e[35mBigDecimal\e[0m: (): String\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg69jescm.scala:19:23 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            changeBase(\e[33mnew\e[0m \e[35mBigDecimal\e[0m(temp),\
    \ base)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    BigDecimal\n\e[31m   |\e[0m  \
    \                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base\
    \ ) throw new IllegalArgumentException(\"Invalid number\")\n        if (base <\
    \ 2) throw new IllegalArgumentException(\"Invalid base\")\n        if (base ==\
    \ 2){\n            if (x==0) return \"0\"\n            else if(x is Long && x\
    \ is Int && x >= 10) return(x+\"\")\n            else return x\n        }\n  \
    \      var s = x.toString(base)\n        if(s.length == 0) s = x.toString(2)\n\
    \        else if(s.length < 2) s = x.toString(1)\n        else s = x.toString(0,\
    \ s.length)\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2d8y3jt.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(x is Long &&\
    \ x is Int && x >= \e[31m10\e[0m) \e[33mreturn\e[0m(x+\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  value is is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2d8y3jt.scala:18:30\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m(x is Long && x is Int && x >= \e[31m10\e[0m) \e[33mreturn\e\
    [0m(x+\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value && is not a member of object\
    \ Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm2d8y3jt.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e[0m \e\
    [33mreturn\e[0m x\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    (x : Long)\n\e[31m   |\e[0m      \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpm2d8y3jt.scala:21:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mvar\e[0m \e[36ms\e[0m = x.toString(base)\n\e[31m\e[31m   |\e[0m      \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m         too many arguments for\
    \ \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m: ():\
    \ String\n\e[31m\e[31m-- Error: /tmp/tmpm2d8y3jt.scala:22:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m(s.length == \e[31m0\e[0m) s = x.toString(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                         ^\e\
    [0m\n\e[31m   |\e[0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e\
    [0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- Error: /tmp/tmpm2d8y3jt.scala:23:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33melse\e[0m \e[33mif\e[0m(s.length < \e[31m2\e[0m) s = x.toString(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                           "
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val s = x /\
    \ base\n        val i = s.toInt\n        val base = s.toDouble\n        var str\
    \ = \"\"\n        while (i > 0){\n            str += i.toString.charAt(0)\n  \
    \          i -= 1\n        }\n        str = str.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppol63ezr.scala:16:19 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbase\e[0m = s.toDouble\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppol63ezr.scala:22:12 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        str = str.reverse\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e\
    [0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res: String\
    \ = \"\"\n        // The algorithm works fine for base less than 10 and base 10.\n\
    \        // It is not suitable for base greater than 10.\n        // for base\
    \ greater than 10, the result would be \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgs53rsw9.scala:18:5\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str1 =\
    \ x.toString\n        val str2 = str1.reverse\n        val len = str2.length\n\
    \        var temp = x\n        var res = \"\"\n        var carry = 0L\n      \
    \  var digit = 0\n        while(true){\n            digit = str2.charAt(len -\
    \ 1 - digit)\n            res = res + digit.asInstanceOf[Int]\n            if\
    \ (temp < base * 10){\n                temp = temp + carry\n                carry\
    \ = 0\n            } else {\n                temp = temp - carry\n           \
    \     carry = 1\n            }\n            if(carry == 0){\n                break\n\
    \            }\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6jne339u.scala:32:16 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val res = x.toString(base).replace('0','.')\n\
    \        if (res.indexOf('.') == -1) {\n            res +='0'\n        }\n   \
    \     res\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp58x87r8i.scala:14:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = x.toString(base).replace(\e\
    [31m'0'\e[0m,\e[31m'.'\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \   ^^^^\e[0m\n\e[31m   |\e[0m         too many arguments for \e[33mmethod\e[0m\
    \ \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = 0\n        var i = 1\n        while (x > 0){\n            result += x * base.toLong\n\
    \            x = x / base.toLong\n            i += 1\n        }\n        result\
    \ /= i.toString\n        return result.toString() + i.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3cwf_dd.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += x * base.toLong\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpo3cwf_dd.scala:18:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            x = x /\
    \ base.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpo3cwf_dd.scala:21:15 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        result /= i.toString\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value /= is not a member of Int\
    \ - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val numbers\
    \ = new mutable.ArrayBuffer[Long]()\n        val baseString = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        var base = base\n        var x = x.toLong\n        while (x > 0)\n \
    \       {\n            numbers ++= baseString.zipWithIndex.map { case (digit,\
    \ i) => if (digit == base) x mod base else 0 }\n            x /= base\n      \
    \  }\n        (0 until numbers.last).map(numbers.drop(_)).takeWhile(_ > 0).map(NumberFormat.getIntegerInstance).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_l0f4bvg.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_l0f4bvg.scala:16:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mbase\e[0m = base\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m\
    \   |\e[0m                   Recursive \e[33mvariable\e[0m \e[35mbase\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_l0f4bvg.scala:17:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mx\e[0m = x.toLong\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvariable\e[0m \e[35mx\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l0f4bvg.scala:23:64\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        (\e[31m0\e[0m until\
    \ numbers.last).map(numbers.drop(_)).takeWhile(_ > \e[31m0\e[0m).map(NumberFormat.getIntegerInstance).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Nothing, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m\
    \   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m\
    \   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.RoundingM"
  stdout: ''
  timestamp: 1660009653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var x = x.toString.toLong\n\
    \        var base = base.toString.toLong\n        var result = (x / base).toInt\n\
    \        var temp = x % base\n        var res = \"\"\n        while (temp != 0)\
    \ {\n            res = res + temp\n            temp = temp / base\n        }\n\
    \        return res.reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpomt30b50.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x.toString.toLong\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpomt30b50.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mbase\e[0m = base.toString.toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvariable\e[0m \e[35mbase\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var base :\
    \ Int = 0\n        val digits = x%base\n        x /= base\n        for (i <- digits\
    \ to 0 by -1){\n            base *= base\n        }\n        val digitString =\
    \ digits(0).toString + digits\n        digitString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeuaen8wu.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        x /= base\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0m        value /= is not a member of Long - did you mean x.!=?\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpeuaen8wu.scala:20:26 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdigitString\e[0m = digits(\e\
    [31m0\e[0m).toString + digits\n\e[31m\e[31m   |\e[0m                         \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                          \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = scala.math.pow(base, x)\n        val digitList = digits.toString.split(\"\
    0\")\n        val result = digitList.take(digitList.length - 1).toString.reverse\
    \ + digitList.last\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow6inmz_.scala:20)\n\tat Problem.main(tmpow6inmz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = x.toString.reverse\n\
    \        var x = 0\n        var n = 0\n        var b = 0\n        val base = base.toString.toInt\n\
    \        var chars = \"\"\n        var ret = \"\"\n        var i = 0\n\n     \
    \   while(i < str.length){\n            x += 1\n            n += x\n         \
    \   while(n < base){\n                x += 1\n                n += x\n       \
    \     }\n            b = x - 1\n            chars += str.charAt(i)\n         \
    \   ret += chars.reverse.charAt(b)\n            chars = \"\"\n            i +=\
    \ 1 \n        }\n        ret += chars.reverse.charAt(0)\n        ret.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp86nc8d5p.scala:18:19 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbase\e[0m = base.toString.toInt\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35mbase\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var outStr\
    \ = \"\"\n        var incr = 1\n        var digits = x.toInt\n        while (digits\
    \ > base) {\n            incr *= base\n            digits /= base\n        }\n\
    \        while (digits > 0) {\n            outStr += ((digits % base).toString)\
    \ + \" * \" + incr\n            digits /= base\n        }\n        outStr += \"\
    \ \" + incr\n        return outStr\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuhr5avxc.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            incr *= base\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuhr5avxc.scala:19:19\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            digits /= base\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpuhr5avxc.scala:23:19 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m            digits /= base\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Int - did you mean\
    \ Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def toBase(x:\
    \ Long, base: Long) = {\n            val n = new BigDecimal(x)\n            val\
    \ t = new BigDecimal(base)\n            n.divide(t, BigDecimal.ROUND_HALF_UP)\n\
    \        }\n\n        if(x < base) {\n            throw new IllegalArgumentException(\"\
    x must be greater than base number!\")\n        }\n        // convert to base\
    \ from base\n        val x = toBase(x, base)\n        // remove any 0s in front\
    \ of base\n        val baseStr = x.toString.filter(_ != '0')\n        // add any\
    \ leading 0s to match base\n        val padded = padToBase(baseStr, base);\n \
    \       // reverse the string and convert to base 10\n        padded.reverse.toInt.toString(base)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps5o0ooq2.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36mn\e[0m = \e[33mnew\e[0m \e[35mBigDecimal\e[0m(x)\n\e[31m\e[31m   |\e[0m  \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \               Found:    (x : Long)\n\e[31m   |\e[0m                        \
    \           Required: java.math.BigDecimal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps5o0ooq2.scala:16:35 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mt\e[0m = \e[33mnew\e[0m \e\
    [35mBigDecimal\e[0m(base)\n\e[31m\e[31m   |\e[0m                             \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ (base : Long)\n\e[31m   |\e[0m                                   Required: java.math.BigDecimal\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps5o0ooq2.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n.divide(t, BigDecimal.ROUND_HALF_UP)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ divide is not a member of BigDecimal\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps5o0ooq2.scala:17:35 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            n.divide(t, BigDecimal.ROUND_HALF_UP)\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value\
    \ ROUND_HALF_UP is not a member of object scala.math.BigDecimal\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmps5o0ooq2.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = toBase(x, base)\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps5o0ooq2.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m2"
  stdout: ''
  timestamp: 1660009659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val tmp = x\
    \ / (base * base)\n        val result = (tmp.toInt + 1) * base\n        return\
    \ x.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpninv67.scala:19)\n\tat Problem.main(tmprpninv67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = x.toString.trim\n\
    \        var n = s.length\n        var res = 0\n        var i = 0\n        //\
    \ convert base to integer if base is larger than 10.\n        if(base > 10) {\n\
    \            s = s.toInt\n            base = base - 10\n        }\n        while(i<n)\
    \ {\n            var c = s.charAt(i)\n            if(c=='0') {\n             \
    \   if(res==0) {\n                    res = 10\n                }\n          \
    \      res = res * 10\n                res = res + c\n            } else {\n \
    \               res = res * base + Character.getNumericValue(c)\n            }\n\
    \            i += 1\n        }\n        res.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptltdhmrw.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            s = s.toInt\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Int\n\e[31m   |\e[0m                Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmptltdhmrw.scala:21:17 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            base = base - \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val base\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptltdhmrw.scala:32:22\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                res = res * base\
    \ + Character.getNumericValue(c)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      val numberWithBase\
    \ = x\n      val numberBaseWithBase = numberWithBase / base\n      val numberBase\
    \ = (numberBaseWithBase % base).toLong\n      val baseString = (1L to (base-1L)).map(x\
    \ => base.toString.charAt(x)).mkString(\"\")\n      baseString + numberBase.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwslai72r.scala:17:71\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mbaseString\e\
    [0m = (\e[31m1L\e[0m to (base-\e[31m1L\e[0m)).map(\e[36mx\e[0m => base.toString.charAt(x)).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                              Found:    (x : Long)\n\e[31m   |\e[0m         \
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val res = x.toString.reverse\n\
    \        if (res.length < base.pow(2).length) {\n            val rem = base.pow(2).length\
    \ - res.length\n            val rem = rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqwtorirs.scala:17:1941 -------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mrem\e[0m = rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem "
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpqwtorirs.scala

    '
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // Get decimal\
    \ part of input number x, convert base to base 10, and then add decimal part to\
    \ return string.\n        val x = x.toString.reverse.tail.dropWhile(_ >= '0').drop(1)\n\
    \        (for (i <- 1 to Math.ceil(x.length / base)) yield {\n            val\
    \ y = x.slice(i * base, 0, base).reverse\n            Integer.toString(y.getOrElse(0)\
    \ + y.getOrElse(1), 10)\n        }).reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp58lp7udj.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x.toString.reverse.tail.dropWhile(_\
    \ >= \e[31m'0'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \ ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mx\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58lp7udj.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (\e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to Math.ceil(x.length / base)) \e[33myield\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Found:    Double\n\e[31m   |\e[0m                 \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val n = x.toInt\
    \ / base.toInt\n        val p = x.toInt % base.toInt\n        val str = \"\"\n\
    \        while(p > 0) {\n            str += (p % base).toInt\n            p =\
    \ p / base.toInt\n        }\n        while(n > 0) {\n            str += n.toInt\n\
    \            n = n / base.toInt\n        }\n        str\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnp6lrm7g.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            str += (p % base).toInt\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of String - did you mean str.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnp6lrm7g.scala:19:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            p = p /\
    \ base.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val p\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpnp6lrm7g.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            str += n.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ String - did you mean str.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnp6lrm7g.scala:23:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            n = n /\
    \ base.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val bases =\
    \ (\"1\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\"\
    , \"100000000\").map(_.toLong)\n        val digits = x.toString.toDouble\n   \
    \     val divisor = bases.reverse.drop(bases.size - base.toInt).foldLeft(digits){(a,\
    \ b) => a / b }\n        (x.toString.toInt * divisor).toString + digits.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnz0djv4h.scala:14:106 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbases\e[0m = (\e[31m\"1\"\
    \e[0m, \e[31m\"10\"\e[0m, \e[31m\"100\"\e[0m, \e[31m\"1000\"\e[0m, \e[31m\"10000\"\
    \e[0m, \e[31m\"100000\"\e[0m, \e[31m\"1000000\"\e[0m, \e[31m\"10000000\"\e[0m,\
    \ \e[31m\"100000000\"\e[0m).map(_.toLong)\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded\
    \ function:\n\e[31m   |\e[0m   _$1 => _$1.toLong.\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnz0djv4h.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mdivisor\e[0m = bases.reverse.drop(bases.size\
    \ - base.toInt).foldLeft(digits){(\e[36ma\e[0m, \e[36mb\e[0m) => a / b }\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of (Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing,\
    \ Nothing, Nothing\n\e[31m   |\e[0m  )\n2 errors found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val y = x.toString\
    \ % base\n        if (y == 0) changeBase(x.toInt / base, base)\n        else changeBase(x.toInt\
    \ / base, base) + y + base.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_bgv6o5.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = x.toString % base\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue %\
    \ is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def strDigits(x:\
    \ Long): String = {\n            // Get a string representation of digits of x.\n\
    \            val str = x.toString.reverse\n            val chars = s.chars.toList\n\
    \            val digits = chars.filter(_.isDigit)\n            // Remove all characters\
    \ that are not digits.\n            val rest = str.filter(!_ == '0').reverse\n\
    \            val out = rest.mkString(\"\") + digits.mkString(\"\")\n         \
    \   out\n        }\n        val digits = strDigits(x)\n        // Calculate base\
    \ number of x.\n        val baseNum = digits.toString.map(c => math.pow(base.toInt,\
    \ c.toString.toInt))\n        // Convert string representation of digits to number.\n\
    \        val convertedNum = baseNum.sum.toLong\n        // Convert x to the new\
    \ base.\n        val newx = convertedNum * x\n        // Convert x to string representation.\n\
    \        val digitString = strDigits(newx)\n        // Convert number back to\
    \ string representation.\n        val out = digitString.reverse.mkString(\"\"\
    )\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1bzfknvg.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mchars\e[0m = s.chars.toList\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Not found: s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1bzfknvg.scala:20:34 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[33mval\e[0m \e[36mrest\e[0m = str.filter(!_ == \e[31m'0'\e[0m).reverse\n\
    \e[31m\e[31m   |\e[0m                                  ^^\e[0m\n\e[31m   |\e[0m\
    \       value unary_! is not a member of Char - did you mean _$2.unary_+?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val y = BigInt(x.toString\
    \ * (base.toDouble / 10))\n        val z = x.toString / base.toDouble\n      \
    \  (z * base.toDouble).toString + y.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5fzhu97m.scala:14:37\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36my\e\
    [0m = BigInt(x.toString * (base.toDouble / \e[31m10\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    Double\n\e[31m   |\e[0m    \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5fzhu97m.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = x.toString / base.toDouble\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue /\
    \ is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val y = x.toString(base)\n\
    \        val i = y.indexOf(\".\")\n        if (i < 0)\n            \"\"\n    \
    \    else {\n            var result = \"\"\n            while (y.length > 0) {\n\
    \                if (y(i) == 0 && y(i - 1) != 0)\n                    result +=\
    \ \"0\"\n                else\n                    result += y(i)\n          \
    \      y -= 1\n            }\n            result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa65md2f4.scala:14:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = x.toString(base)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \      too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e\
    [0m \e[35mAny\e[0m: (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val rem = x\
    \ % base\n        val rem = rem + (if (rem < base) 0 else base)\n        x.toString.substring(1)\
    \ + rem + x\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0mc3i7yv.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mrem\e[0m = rem + (\e[33mif\e\
    [0m (rem < base) \e[31m0\e[0m \e[33melse\e[0m base)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrem is\
    \ already defined as \e[33mvalue\e[0m \e[35mrem\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val r = x %\
    \ base\n        val r0 = r / base\n        val r1 = r % base\n        val s =\
    \ x\n        val t = base\n        val r = x % base\n        val r0 = r / base\n\
    \        val r1 = r % base\n        val s = x\n        val t = base\n        val\
    \ r = x % base\n        val r0 = r / base\n        val r1 = r % base\n       \
    \ val s = x\n        val t = base\n        val r = x % base\n        val r0 =\
    \ r / base\n        val r1 = r % base\n        val s = x\n        val t = base\n\
    \        val r = x % base\n        val r0 = r / base\n        val r1 = r % base\n\
    \        val s = x\n        val t = base\n        val r = x % base\n        val\
    \ r0 = r / base\n        val r1 = r % base\n        val s = x\n        val t =\
    \ base\n        val r = x % base\n        val r0 = r / base\n        val r1 =\
    \ r % base\n        val s = x\n        val t = base\n        val r = x % base\n\
    \        val r0 = r / base\n        val r1 = r % base\n        val s = x\n   \
    \     val t = base\n        val r = x % base\n        val r0 = r / base\n    \
    \    val r1 = r % base\n        val s = x\n        val t = base\n        val r\
    \ = x % base\n        val r0 = r / base\n        val r1 = r % base\n        val\
    \ s = x\n        val t = base\n        val r = x % base\n        val r0 = r /\
    \ base\n        val r1 = r % base\n        val s = x\n        val t = base\n \
    \       val r = x % base\n        val r0 = r / base\n        val r1 = r % base\n\
    \        val s = x\n        val t = base\n        val r = x % base\n        val\
    \ r0 = r / base\n        val r1 = r % base\n        val s = x\n        val t =\
    \ base\n        val r = x % base\n        val r0 = r / base\n        val r1 =\
    \ r % base\n        val s = x\n        val t = base\n        val r = x % base\n\
    \        val r0 = r / base\n        val r1 = r % base\n        val s = x\n   \
    \     val t = base\n        val r = x % base\n        val r0 = r / base\n    \
    \    val \n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmps17i9mmx.scala:91:11 ---------------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmps17i9mmx.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = x % base\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps17i9mmx.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr0\e[0m = r / base\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr0 is already defined\
    \ as \e[33mvalue\e[0m \e[35mr0\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps17i9mmx.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr1\e[0m = r % base\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr1 is already defined\
    \ as \e[33mvalue\e[0m \e[35mr1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps17i9mmx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e\
    [0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmps17i9mmx.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = base\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mt is already defi"
  stdout: ''
  timestamp: 1660009662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x.toString.length\
    \ == 1) {\n            changeBase(x.toString.toLong, base.toString)\n        }\n\
    \        else {\n            val sx = x.toString.substring(0, 1)\n           \
    \ val bx = x.toString.substring(1, x.toString.length)\n            if (bx.equals(\"\
    \")) {\n                changeBase(sx, base.toString)\n            }\n       \
    \     else {\n                val sbx = sx + bx\n                val bsbx = bx\
    \ + sbx\n                if (sbx.toString.length == 1) {\n                   \
    \ changeBase(sbx.toString.toLong, base.toString)\n                }\n        \
    \        else {\n                    val x = sbx.toString.substring(0, 1)\n  \
    \                  val bx = sbx.toString.substring(1, sbx.toString.length)\n \
    \                   val sbx = sx + bx\n                    val bsbx = bx + sbx\n\
    \                    if (sbx.toString.length == 1) {\n                       \
    \ changeBase(sbx.toString.toLong, base.toString)\n                    }\n    \
    \                else {\n                        val sx = sbx.toString.substring(0,\
    \ 1)\n                        val bx = sbx.toString.substring(1, sbx.toString.length)\n\
    \                        val sbx = sx + bx\n                        val bsbx =\
    \ bx + sbx\n                        if (sbx.toString.length == 1) {\n        \
    \                    changeBase(sbx.toString.toLong, base.toString)\n        \
    \                }\n                        else {\n                         \
    \   val x = sbx.toString.substring(0, 1)\n                            val bx =\
    \ sbx.toString.substring(1, sbx.toString.length)\n                           \
    \ val sbx = sx + bx\n                            val bsbx = bx + sbx\n       \
    \                     if (sbx.toString.length == 1) {\n                      \
    \          changeBase(sbx.toString.toLong, base.toString)\n                  \
    \          }\n                            else {\n                           \
    \     val x = sbx.toString.substring(0, 1)\n                                val\
    \ bx = sbx.toString.substring(1, sbx.toString.length)\n                      \
    \          val sbx = sx + bx\n                                val bsbx = bx +\
    \ sbx\n                                if (sbx.toString.length == 1) {\n     \
    \                               changeBase(sbx.toString.toLong, base.toString)\n\
    \                                }\n                                else {\n \
    \                                   val x = sbx.toString.substring(0, 1)\n   \
    \                                 val bx = sbx.toString.substring(1, sbx.toString.length)\n\
    \                                    val sbx = sx + bx\n                     \
    \               val bsbx = bx + sbx\n                                    if (sbx.toString.length\
    \ == 1) {\n                                        changeBase(sbx.toString.toLong,\
    \ base.toString)\n                                    }\n                    \
    \                else {\n                                        val x = sbx.toString.substring(0,\
    \ 1)\n                                        val bx = sbx.toString.substring(1,\
    \ sbx.toString.length)\n                                        val sbx = s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdxy_e8b8.scala:90:0 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdxy_e8b8.scala:15:42\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            changeBase(x.toString.toLong,\
    \ base.toString)\n\e[31m\e[31m   |\e[0m                                      \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \     Found:    String\n\e[31m   |\e[0m                                      \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdxy_e8b8.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                changeBase(sx,\
    \ base.toString)\n\e[31m\e[31m   |\e[0m                           ^^\e[0m\n\e\
    [31m   |\e[0m                           Found:    (sx : String)\n\e[31m   |\e\
    [0m                           Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdxy_e8b8.scala:21:31 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                changeBase(sx, base.toString)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    String\n\e[31m   |\e[0m            \
    \                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdxy_e8b8.scala:27:52 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                    changeBase(sbx.toString.toLong, base.toString)\n\e\
    [31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic"
  stdout: ''
  timestamp: 1660009663
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ {\n            val r = x / base\n            val f = x - r * base\n        \
    \    changeBase(f, base)\n        } else {\n            val r = x % base\n   \
    \         changeBase(r, base)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if(base<10)\
    \ return x.toString(base)\n        val temp : String = \"\"\n        if(base>0)\
    \ {\n            val digits = x.toString.reverse.map(x => if (x<10) '0' else x).toArray\n\
    \            val baseDigits = digits.slice(1, digits.length)\n            for(i\
    \ <- 0 until base) {\n                temp += digits(i).reverse\n            }\n\
    \        }\n        temp\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt4p6hqcv.scala:14:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(base<\e[31m10\e[0m) \e[33mreturn\e\
    [0m x.toString(base)\n\e[31m\e[31m   |\e[0m                                  \
    \    ^^^^\e[0m\n\e[31m   |\e[0m         too many arguments for \e[33mmethod\e\
    [0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt4p6hqcv.scala:19:29 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m(i <- \e[31m0\e[0m until base)\
    \ {\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e\
    [0m                             Found:    (base : Long)\n\e[31m   |\e[0m     \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpt4p6hqcv.scala:20:21 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                temp += digits(i).reverse\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m              value += is\
    \ not a member of String - did you mean temp.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpt4p6hqcv.scala:20:34 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                temp += digits(i).reverse\n\e[31m\e[31m   |\e[0m     \
    \                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \      value reverse is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1660009663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseStr\
    \ = if (base < 10) \"0\" + base.toString else base.toString\n        val x = x.toInt\n\
    \        val res = baseStr * (Math.pow(base.toLong, x)).toLong\n        if (res\
    \ < Integer.MAX_VALUE)\n            Integer.toString(res)\n        else\n    \
    \        Long.toString(res)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf948bwq6.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf948bwq6.scala:16:55 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = baseStr * (Math.pow(base.toLong,\
    \ x)).toLong\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf948bwq6.scala:17:26 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (res < Integer.MAX_VALUE)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \           Found:    (Integer.MAX_VALUE : (\e[31m2147483647\e[0m : Int))\n\e\
    [31m   |\e[0m                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf948bwq6.scala:18:29 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Integer.toString(res)\n\e[31m\e[31m   |\e\
    [0m                             ^^^\e[0m\n\e[31m   |\e[0m                    \
    \         Found:    (res : String)\n\e[31m   |\e[0m                          \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpf948bwq6.scala:20:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \     Long.toString(res)\n\e[31m\e[31m   |\e[0m                          ^^^\e\
    [0m\n\e[31m   |\e[0m       too many arguments for \e[33mmethod\e[0m \e[35mtoString\e\
    [0m in \e[33mobject\e[0m \e[35mLong\e[0m: (): String\n5 errors found\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val m = x.toString.toLong\n\
    \        var s = \"\"\n        for(i <- 1 until m) {\n            val q = math.pow(x,\
    \ base)\n            val x = math.floor(q)\n            val r = math.mod(q, x)\n\
    \            s = s + r.toString\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog6zz7m6.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m until m) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (m : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpog6zz7m6.scala:18:31 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = math.floor(q)\n\e\
    [31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m    \
    \                           Recursive \e[33mvalue\e[0m \e[35mq\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpog6zz7m6.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mr\e[0m = math.mod(q, x)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value mod is not a member of math\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      val digits =\
    \ new mutable.HashSet[Long]()\n      while (x >= base) digits = digits + x.mod(base).toLong\n\
    \      digits.toList.sorted.map(_.toString).reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpulfh1uhj.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mdigits\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpulfh1uhj.scala:15:31 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mwhile\e[0m (x >= base) digits = digits +\
    \ x.mod(base).toLong\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Reassignment to val digits\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var str : String\
    \ = \"\"\n        var nstr : String = \"\"\n        var result : String = \"\"\
    \n        for(i in x.toString.toInt by base) {\n            var temp : Long =\
    \ x.toString.toLong / Math.pow(base,i);\n            temp = temp * Math.pow(base,i).toInt\n\
    \            nstr = nstr + temp.toString\n        }\n        str = str.dropRight(nstr.length)\n\
    \        return str\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj55b4374.scala:17:43 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i in x.toString.toInt by base)\
    \ {\n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e\
    [31m   |\e[0m                                           '<-' expected, but '{'\
    \ found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpj55b4374.scala:22:40 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        str = str.dropRight(nstr.length)\n\e[31m\e[31m\
    \   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m    \
    \                                    pattern expected\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpj55b4374.scala:21:9 -------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseDigit\
    \ = base / 10\n        var resultStr = \"\"\n        var currentDigit = 0\n  \
    \      while (x < base) {\n            currentDigit = x / base\n            x\
    \ = x - currentDigit * base\n            resultStr = currentDigit + resultStr\n\
    \        }\n        return resultStr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpse_dwl9x.scala:18:27\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            currentDigit = x\
    \ / base\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           Found:    Long\n\e[31m   |\e[0m         \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpse_dwl9x.scala:19:14 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            x = x - currentDigit * base\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (base ==\
    \ 10) x match {\n            case 0l => \"\"\n            case 1l => \"0\"\n \
    \           case _ => {\n                val z = x.toString \n               \
    \ val y = z.replaceFirst(\"^0\", \"\").replaceFirst(\"^-\", \"\")\n          \
    \      val y = y.padTo(base, \"0\").substring(0, base-1)\n                y +\
    \ z.replaceFirst(\"^-\", \"\")\n            }\n        }\n        else if (base\
    \ < 10) x match {\n            case 0l => \"\"\n            case _ => x.toString.replaceFirst(\"\
    ^0\", \"\").replaceFirst(\"^-\", \"\")\n        }\n        else x match {\n  \
    \          case 0l => \"\"\n            case _ => x.toString.replaceFirst(\"^-\"\
    , \"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpadffu3mk.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36my\e[0m = y.padTo(base,\
    \ \e[31m\"0\"\e[0m).substring(\e[31m0\e[0m, base-\e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0my is already defined as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = x.toString.reverse\n        val digits = result.substring( 0, result.length\
    \ ).toList\n        val baseDigits = digits.map(c => base.toString.indexOf(c))\n\
    \        val newBase = baseDigits.reduce((x, y) => x * base + y)\n        val\
    \ result = digits.map(c=> newBase - base.toString.indexOf(c))\n        result.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjg77rmx9.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.map(\e\
    [36mc\e[0m=> newBase - base.toString.indexOf(c))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjg77rmx9.scala:17:50 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewBase\e[0m = baseDigits.reduce((\e[36mx\e\
    [0m, \e[36my\e[0m) => x * base + y)\n\e[31m\e[31m   |\e[0m                   \
    \                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                       Found:    Long\n\e[31m   |\e[0m      \
    \                                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val xStr =\
    \ x.toString(10)\n        val yStr = xStr.substring(0, xStr.length - base)\n \
    \       val y = Long(yStr)\n        y.toString(base)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqw3a081b.scala:14:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mxStr\e[0m = x.toString(\e\
    [31m10\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^\e[0m\n\e[31m\
    \   |\e[0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m\
    \ in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpqw3a081b.scala:16:16 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36my\e[0m = Long(yStr)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^\e[0m\n\e[31m   |\e[0m                \e[33mobject\e[0m \e\
    [35mLong\e[0m in \e[33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if(x.toString.length\
    \ < base.toString.length) \n            throw new Exception(\"Invalid Base for\
    \ Long\")\n        val baseMap : mutable.Map[Long, String] = mutable.Map[(Long,\
    \ Long), String]().withDefaultValue(\"0\")\n        baseMap.getOrElse(base, (base.toString.reverse))\n\
    \        val baseMap2 : mutable.Map[Long, String] = mutable.Map[(Long, Long),\
    \ String]().withDefaultValue(\"0\")\n        baseMap2.getOrElse(base, (base.toString.reverse))\n\
    \        val sum : Long = 0\n        (x.toString.split(' ').toArray.map(_.toLong)).foreach(x\
    \ => {\n            val result = x.toString.reverse.dropWhile(y => y != '0').reverse.takeWhile(y\
    \ => y != '0').toString.reverse\n            sum =  sum + result.charAt(0)*baseMap.getOrElse(base,\
    \ result.charAt(0))\n        })\n        val result = \"\"\n        if(sum >=\
    \ base.toString.length) \n            result += baseMap2.getOrElse(base, base.toString.reverse)\n\
    \        else\n            result += sum.toString + baseMap2.getOrElse(base, base.toString.reverse)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74l5xb_d.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbaseMap\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mString\e[0m] = mutable.Map[(\e[35mLong\e[0m, \e[35mLong\e\
    [0m), \e[35mString\e[0m]().withDefaultValue(\e[31m\"0\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74l5xb_d.scala:16:50\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mbaseMap\e[0m : mutable.Map[\e[35mLong\e[0m, \e[35mString\e[0m] = mutable.Map[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m), \e[35mString\e[0m]().withDefaultValue(\e[31m\"\
    0\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp74l5xb_d.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mbaseMap2\e[0m : mutable.Map[\e[35mLong\e[0m, \e\
    [35mString\e[0m] = mutable.Map[(\e[35mLong\e[0m, \e[35mLong\e[0m), \e[35mString\e\
    [0m]().withDefaultValue(\e[31m\"0\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74l5xb_d.scala:18:51\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mbaseMap2\e[0m : mutable.Map[\e[35mLong\e[0m, \e[35mString\e[0m] = mutable.Map[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m), \e[35mString\e[0m]().withDefaultValue(\e[31m\"\
    0\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling wi"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var remainder = x % base\n        while (remainder > 0) {\n\
    \            result = (reminder % base) + result\n            reminder = (reminder\
    \ / base).toLong\n        }\n        if (remainder > 0)\n            result =\
    \ (remainder % base) + result\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjiuj1jr9.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result = (reminder % base) + result\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \          Not found: reminder\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjiuj1jr9.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            reminder = (reminder / base).toLong\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: reminder\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjiuj1jr9.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            reminder = (reminder / base).toLong\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \              Not found: reminder\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ : String = \"\"\n        val digits = (BigInt(x) / BigInt(base)).pow(BigInt(base)).abs\n\
    \        var remainder = BigInt(x) % BigInt(base)\n        while(digits > 0) {\n\
    \            result += (BigInt(base).toChar).charAt(remainder)\n            remainder\
    \ = remainder / BigInt(base)\n            digits -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2zgp521c.scala:15:58\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = (BigInt(x) / BigInt(base)).pow(BigInt(base)).abs\n\e[31m\e[31m   |\e[0m\
    \                                                    ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    BigInt\n\
    \e[31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2zgp521c.scala:18:19\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            result += (BigInt(base).toChar).charAt(remainder)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2zgp521c.scala:18:44 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            result += (BigInt(base).toChar).charAt(remainder)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value charAt is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2zgp521c.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            digits -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of BigInt - did you mean digits.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var str = x\n\
    \        val temp = str / (base.toDouble)\n        str %= base.toDouble\n    \
    \    val temp = temp.toInt\n        val temp = temp.toString.reverse.takeRight(2).reverse\n\
    \        val temp = temp.dropWhile(_ != '.').mkString\n        val temp = temp.replace(\"\
    .\", \"\")\n        return temp\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy0opy0af.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mtemp\e[0m = temp.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtemp is\
    \ already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy0opy0af.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtemp\e[0m = temp.toString.reverse.takeRight(\e[31m2\e[0m).reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtemp is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpy0opy0af.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mtemp\e[0m = temp.dropWhile(_ != \e[31m'.'\e\
    [0m).mkString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtemp is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpy0opy0af.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtemp\e[0m = temp.replace(\e[31m\".\"\e[0m,\
    \ \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtemp is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpy0opy0af.scala:16:12 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        str %= base.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value %= is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E007] Type Mis"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (base <\
    \ 10)\n            x.toString\n        else {\n            val str = x.toString.reverse\n\
    \            val base = if (str.length < base) 0 else base\n            val digits\
    \ = new Array[String](str.length - base)\n            for (i <- 0 until digits.length)\n\
    \                digits(i) = str.substring(i, i + base)\n            digits.mkString(\"\
    \")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjrwsj35c.scala:18:40 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mbase\e[0m = \e[33mif\e\
    [0m (str.length < base) \e[31m0\e[0m \e[33melse\e[0m base\n\e[31m\e[31m   |\e\
    [0m                                        ^\e[0m\n\e[31m   |\e[0m           \
    \                             Recursive \e[33mvalue\e[0m \e[35mbase\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjrwsj35c.scala:18:53\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mbase\e[0m = \e[33mif\e[0m (str.length < base) \e[31m0\e[0m \e[33melse\e\
    [0m base\n\e[31m\e[31m   |\e[0m                                              \
    \       ^\e[0m\n\e[31m   |\e[0m                                         Recursive\
    \ \e[33mvalue\e[0m \e[35mbase\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseString\
    \ = \"0123456789ABCDEF\"\n        val x = x.toLong\n        val base = baseString.toLong\n\
    \        val temp = x / (base.toDouble).toLong\n        val r = temp % base.toLong\n\
    \        val result = baseString(r).toString\n        if (result.length < base.toLong)\
    \ {\n            result + (if (x > base.toLong) \"\" else 0)\n        }\n    \
    \    else {\n            result\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph7n8spgo.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009668
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val s = Math.abs(x).toString.toInt;\n\
    \        if (s < base) {\n            return x + \"\";\n        }\n        if\
    \ (s > base) {\n            return changeBase(x / base, base) + \"\";\n      \
    \  }\n        if (s == 0) {\n            return x + \"\";\n        }\n       \
    \ if (s > 0) {\n            return changeBase(x % base, base) + \"\";\n      \
    \  } else {\n            val modRem = x % base;\n            return changeBase(modRem,\
    \ base) + \"\";\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp34rh5u0d.scala:32)\n\tat Problem.main(tmp34rh5u0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val xStr :\
    \ String = x.toString\n        val baseStr : String = base.toString\n\n      \
    \  if (xStr.length > baseStr.length)\n        { println(xStr);\n          println(\"\
    ERROR - String has more digits than base.\");\n          xStr\n        }\n\n \
    \       if (baseStr.length < 1l)\n        { println(xStr);\n          println(\"\
    ERROR - Base should be longer than 0.\");\n          xStr\n        }\n\n     \
    \   val xStrArray = xStr.toCharArray.map(_.toInt)\n        val baseStrArray =\
    \ baseStr.toCharArray.map(_.toInt)\n\n        var str = \"\"\n        var power\
    \ = 0\n        for (i <- 0 until xStrArray.length)\n        {\n            if\
    \ (xStrArray(i) > baseStrArray(0))\n            {\n                power = 1l\n\
    \            }\n            else power *= baseStrArray(0)\n            str +=\
    \ \"0\"\n            for (j <- 1 until xStrArray.length)\n            {\n    \
    \            str += Integer.toString((xStrArray(i) % baseStrArray(j) + power)\
    \ % baseStrArray(j))\n            }\n        }\n        str\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpen0dn0i5.scala:38:24\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m                power = \e[31m1l\e\
    [0m\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m   \
    \                     Found:    (\e[31m1L\e[0m : Long)\n\e[31m   |\e[0m      \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpen0dn0i5.scala:20:10 ----------------\e[0m\e[0m\n\e[33m20 |\e\
    [0m          xStr\n\e[33m\e[33m   |\e[0m          ^^^^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpen0dn0i5.scala:26:10\
    \ ----------------\e[0m\e[0m\n\e[33m26 |\e[0m          xStr\n\e[33m\e[33m   |\e\
    [0m          ^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 warnings\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val n = x.toString.toInt\n\
    \        val b = base.toString.toInt\n        if (n >= b) x.toString.toString\
    \ + changeBase(n, b)\n        else if (n == b) x.toString.toString + changeBase(n\
    \ - b, b)\n        else changeBase(n - b, b) + x.toString.toString + changeBase(n,\
    \ b)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:14)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\
    \tat Problem$.changeBase(tmpx9u2m7t0.scala:16)\n\tat Problem$.changeBase(tmpx9u2m7t0.scala:1"
  stdout: ''
  timestamp: 1660009673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (base >\
    \ 10) return \"\"\n        val d = base.toLong\n        val x = x.toLong\n   \
    \     val b = x.toInt\n        val r = b / d\n        val q = r.toDouble\n   \
    \     val rr = r - q\n        val x = x.toInt\n        val xx = x + 1\n      \
    \  var result = 0\n        var pow = 0\n        val res = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .toCharArray\n        while (pow<d){\n            result = result + res(math.floor(math.pow(xx,\
    \ pow)))\n            pow+=1\n        }\n        result += res(math.floor(xx))\n\
    \        val a = xx.toLong\n        var b = a\n        var i = 0\n        while\
    \ (i < base){\n            b = b.toInt * 10\n            i += 1\n        }\n \
    \       val r = b / d\n        val q = r.toDouble\n        val rr = r - q\n  \
    \      val a = xx.toLong\n        var b = a\n        var i = 1\n        while\
    \ (i < base){\n            b = b.toInt / 10\n            i += 1\n        }\n \
    \       val r = b / d\n        val q = r.toDouble\n        val rr = r - q\n  \
    \      val a = xx.toLong\n        var b = a\n        var i = 1\n        while\
    \ (i < base){\n            b = b.toInt\n            i += 1\n        }\n      \
    \  val r = b / d\n        val q = r.toDouble\n        val rr = r - q\n       \
    \ val a = xx.toLong\n        var b = a\n        var i = 1\n        while (i <\
    \ base){\n            b = b.toInt\n            i += 1\n        }\n        val\
    \ r = b / d\n        val q = r.toDouble\n        val rr = r - q\n        val a\
    \ = xx.toLong\n        var b = a\n        var i = 1\n        while (i < base){\n\
    \            b = b.toInt\n            i += 1\n        }\n        val r = b / d\n\
    \        val q = r.toDouble\n        val rr = r - q\n        val a = xx.toLong\n\
    \        var b = a\n        var i = 1\n        while (i < base){\n           \
    \ b = b.toInt\n            i += 1\n        }\n        val r = b / d\n        val\
    \ q = r.toDouble\n        val rr = r - q\n        val a = xx.toLong\n        var\
    \ b = a\n        var i = 1\n        while (i < base){\n            b = b.toInt\n\
    \            i += 1\n        }\n        val r = b / d\n        val q = r.toDouble\n\
    \        val rr = r - q\n        val a = xx.toLong\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6nyoupf8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined\
    \ as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6nyoupf8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m = a\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already defined as \e[33mvalue\e\
    [0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp6nyoupf8.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = b / d\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6nyoupf8.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mq\e[0m = r.toDouble\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mq is already\
    \ defined as \e[33mvalue\e[0m \e[35mq\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6nyoupf8.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mrr\e[0m = r - q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrr is already defined\
    \ as \e[33mvalue\e[0m \e[35mrr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6nyoupf8.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = xx.toLo"
  stdout: ''
  timestamp: 1660009675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = x.toString.toCharArray.toArray.map(c\
    \ => c.toString.toInt * base).toList\n        val n = str.length - 1\n       \
    \ val r = new Array[String](n)\n        var i = 0\n        while (i < n) {\n \
    \           r(i) = str(i + 1).toString\n            i += 1\n        }\n      \
    \  r(n) = str(0).toString\n        r.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length\
    \ 0\n\tat Problem$.changeBase(tmpywcswz2n.scala:22)\n\tat Problem$.main(tmpywcswz2n.scala:26)\n\
    \tat Problem.main(tmpywcswz2n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // base numbers\
    \ are less than 10.\n        if (x < 10) x else changeBase((x/base).toInt*base,base)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr12e_wxa.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (x < \e\
    [31m10\e[0m) x \e[33melse\e[0m changeBase((x/base).toInt*base,base)\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (x : Long)\n\e[31m   |\e[0m                    Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val x = x.toInt\n\
    \        val base = base.toInt\n        val res = base.toString.reverse.foldLeft(x)((temp,\
    \ count) => temp * base + count)\n        (base.toString.reverse.mkString, base.toString.reverse.filter(x\
    \ => x != res).mkString)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd9b4scbq.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpd9b4scbq.scala:15:19 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbase\e[0m = base.toInt\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Recursive\
    \ \e[33mvalue\e[0m \e[35mbase\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd9b4scbq.scala:17:8 ---------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (base.toString.reverse.mkString, base.toString.reverse.filter(\e\
    [36mx\e[0m => x != res).mkString)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (Nothing, Nothing)\n\e[31m   |\e[0m    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var newBase\
    \ = base;\n        var lastZero = x;\n        var result = \"\";\n        while\
    \ (lastZero > 0){\n            val lastDigit = lastZero % newBase;\n         \
    \   if (lastDigit == 0){\n                lastZero = lastZero / newBase;\n   \
    \             result += \"0\";\n            } else {\n                result +=\
    \ \"\" + lastDigit;\n            }\n            newBase = newBase * 10;\n    \
    \    }\n        if (newBase == base){\n            return result;\n        } else\
    \ {\n            val remainingDigits = (x-lastZero) / newBase;\n            return\
    \ changeBase(remainingDigits, base) + result;\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.changeBase(tmpnglc7lu9.scala:18)\n\
    \tat Problem$.main(tmpnglc7lu9.scala:35)\n\tat Problem.main(tmpnglc7lu9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val b = x.toString.reverse.toInt\n\
    \        val o = b.toInt\n        val n = base.toInt\n        val p = o.toInt\n\
    \        val q = n.toInt\n        val r = p.toInt\n        val s = r.toInt\n \
    \       val t = (b * q).toInt\n        if (t > 1) {\n            val h = (t -\
    \ 1).toInt\n            val g = (t * base).toInt\n            val y = (h * g).toInt\n\
    \            val x = y * base\n            val z = x.toString.reverse\n      \
    \  } else {\n            val z = t.toString.reverse\n        }\n        z.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2fj9ba_8.scala:31:8 -------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        z.toString\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Not found: z\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = \"\
    \"\n        val i = x / base\n        val j = i % base\n        res = res + j.toString\n\
    \        x = x - j * base\n        return changeBase(x, base)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8s4qervm.scala:18:10 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        x = x - j * base\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val x\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var numStr\
    \ : String = x.toString.replaceFirst(\"^0*\", \"\")\n        var result : String\
    \ = null\n        val base : Int = math.floor(math.log(base, 10))\n        val\
    \ zeros : Int = math.min(numStr.length, base)\n        for ( i <- 0 to zeros )\
    \ {\n            var pow = math.pow(base,i)\n            var mul = math.floor(x\
    \ / pow)\n            var num = x % pow\n            x = mul\n            val\
    \ remainder = num % base\n            numStr += \"\"+remainder\n        }\n  \
    \      val numsBeforeBase = numStr.split(\"\").filter(x => x != \"0\")\n     \
    \   var newNumStr = \"\"\n        for ( i <- 0 to numsBeforeBase.length ) {\n\
    \            newNumStr += (if (numsBeforeBase(i) != 0) numsBeforeBase(i) else\
    \ 0)\n        }\n        result = newNumStr\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf8j8kn2i.scala:16:45\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbase\e\
    [0m : \e[35mInt\e[0m = math.floor(math.log(base, \e[31m10\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                             Found:    (Int, Int)\n\e\
    [31m   |\e[0m                                             Required: Double\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf8j8kn2i.scala:22:16\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            x = mul\n\e[31m\e\
    [31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                Found: \
    \   (mul : Double)\n\e[31m   |\e[0m                Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf8j8kn2i.scala:29:22 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            newNumStr += (\e[33mif\e[0m (numsBeforeBase(i)\
    \ != \e[31m0\e[0m) numsBeforeBase(i) \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of String - did you mean String.!=?\n\e[31m\e[31m-- Error: /tmp/tmpf8j8kn2i.scala:29:30\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \     newNumStr += (\e[33mif\e[0m (numsBeforeBase(i) != \e[31m0\e[0m) numsBeforeBase(i)\
    \ \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String\
    \ and Int cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660009679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val temp =\
    \ x / base\n        var res = x.toString\n        var index = x.length - 1\n \
    \       while (temp != 0) {\n            res = res + temp.mod(base).toString.reverse\n\
    \            temp /= base\n            index = index - 1\n        }\n        res.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk9bqqgrn.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mindex\e[0m = x.length -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value length is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpk9bqqgrn.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            res = res + temp.mod(base).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mod is not a member of Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk9bqqgrn.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            temp /= base\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long\
    \ - did you mean temp.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val convert\
    \ = x * (base / (10l)) // Multiply the input number by base and divide by base\
    \ (10 divided by base)\n        val result = (convert.toInt)\n        (result\
    \ + \"\").toCharArray().map(x => x.toChar).mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_f1xzd1p.scala:19)\n\tat Problem.main(tmp_f1xzd1p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        (x / (base.toDouble)).toString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo9us7s7m.scala:17)\n\tat Problem.main(tmpo9us7s7m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x.toString.toInt\n        val base10 = digits / base\n        val base2  =\
    \ digits % base\n        val baseRes = base10 + base2\n        val resStr = baseRes.toString\n\
    \        val res = new Array[Char](resStr.length)\n        for (i<-0 to resStr.length-1)\
    \ {\n            res(i) = resStr(i).toChar\n        }\n        new String(res)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2n9akxd4.scala:26)\n\tat Problem.main(tmp2n9akxd4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009681
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var numAsStr\
    \ = x.toString\n        var baseAsStr = base.toString\n        while (numAsStr.length\
    \ >= baseAsStr.length) {\n            val tmp = numAsStr.substring(baseAsStr.length,\
    \ numAsStr.length)\n            numAsStr = numAsStr.substring(0, baseAsStr.length)\
    \ + tmp\n        }\n        numAsStr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = List(x)\n        val reversedDigits = List(x)\n        while (digits contains\
    \ 0) digits -= digit(0)\n        while (digits contains base) digits -= 1\n  \
    \      while (digits contains 0) reversedDigits -= reversedDigit(0)\n        while\
    \ (digits contains base) reversedDigits -= 1\n        var result: String = \"\"\
    \n        for (i <- 0 to digits.size) {\n            result += (digits(i).asInstanceOf[Int]\
    \ * base.toInt) + reversedDigits(i).asInstanceOf[Int]\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfrmku3qm.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m (digits contains \e[31m0\e[0m)\
    \ digits -= digit(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value -= is not a member of\
    \ List[Long] - did you mean digits.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfrmku3qm.scala:16:44 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mwhile\e[0m (digits contains \e[31m0\e[0m) digits -= digit(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                                            Not found:\
    \ digit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfrmku3qm.scala:17:44\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m\
    \ (digits contains base) digits -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value -=\
    \ is not a member of List[Long] - did you mean digits.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfrmku3qm.scala:18:49 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (digits contains \e[31m0\e[0m) reversedDigits\
    \ -= reversedDigit(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue -= is not a member of\
    \ List[Long] - did you mean reversedDigits.!=?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfrmku3qm.scala:18:52 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mwhile\e[0m (digits contains \e[31m0\e[0m) reversedDigits\
    \ -= reversedDigit(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Not found: reversedDigit\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpfrmku3qm.scala:19:52 ------------------------\e\
    [0m\e[0m\n\e[31m19"
  stdout: ''
  timestamp: 1660009681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val xstr =\
    \ x.toString\n        val basestr = base.toString\n        var xx = Long.parseLong(xstr)\n\
    \        var bb = Long.parseLong(basestr)\n        while(xx < 0) {\n         \
    \   xx = xx + Long.parseInt(\"10\") * base\n            bb = bb * base\n     \
    \   }\n        var result = \"\"\n        while(x > 0) {\n            result =\
    \ result + Integer.toString((x%base))\n            x = x/base\n        }\n   \
    \     return result + Integer.toString(bb)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc11d0cji.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mxx\e[0m = Long.parseLong(xstr)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \              value parseLong is not a member of object Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpc11d0cji.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mbb\e[0m = Long.parseLong(basestr)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \              value parseLong is not a member of object Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpc11d0cji.scala:24:48 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            result = result + Integer.toString((x%base))\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ Long\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpc11d0cji.scala:25:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            x = x/base\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = x.toString.reverse;\n\
    \        val result = str.reverse take base reverse;\n        result += str.reverse\
    \ drop base reverse;\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpveqdqjsk.scala:15:50 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = str.reverse\
    \ take base reverse;\n\e[31m\e[31m   |\e[0m                                  \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmpveqdqjsk.scala:16:47 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result += str.reverse drop base reverse;\n\e\
    [31m\e[31m   |\e[0m                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m';'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpveqdqjsk.scala:15:38\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = str.reverse take base reverse;\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \        Found:    (base : Long)\n\e[31m   |\e[0m                            \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpveqdqjsk.scala:16:15 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        result += str.reverse drop base reverse;\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of Char\
    \ - did you mean result.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpveqdqjsk.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        result += str.reverse\
    \ drop base reverse;\n\e[31m\e[31m   |\e[0m                                  \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                                   Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                   Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-ex"
  stdout: ''
  timestamp: 1660009681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        if(x.toString.toInt == x)\n        {\n            result = x.toString.toInt.toString(base)\n\
    \        }\n        else\n        {\n            var temp = x\n            while(temp.toString.toInt\
    \ != x)\n            {\n                var a = temp.toString.toInt\n        \
    \        temp = temp / base\n                result = result + a.toString(base)\n\
    \            }\n        }\n        return result \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplx36sqgi.scala:17:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result = x.toString.toInt.toString(base)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^\e[0m\n\
    \e[31m   |\e[0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e\
    [0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n\e[31m\e[31m-- Error: /tmp/tmplx36sqgi.scala:26:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \         result = result + a.toString(base)\n\e[31m\e[31m   |\e[0m          \
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m         too many\
    \ arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e\
    [0m: (): String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var baseStr\
    \ = \"\"\n        var i = 0\n        while (i < base - 1) {\n            baseStr\
    \ = \"0\" + baseStr\n            i = i + 1\n        }\n        while (x < base)\
    \ {\n            baseStr = ((x.toString.toLong * base).toInt) + baseStr\n    \
    \        x = x / base\n            i = i + 1\n        }\n        baseStr = (x.toString.toLong\
    \ + baseStr).toString + baseStr\n        baseStr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpep36hcvk.scala:22:14 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            x = x / base\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def convertBase(x:\
    \ Long, base: Long): String = {\n            val xs = x.toString.reverse\n   \
    \         def divide(x: Long, base: Long): Long = {\n                if (x.toString.length\
    \ >= base.toString.length) x / (base * base) else x / base\n            }\n  \
    \          def convertBase(x: Long, base: Long, divide: Long): String = {\n  \
    \              val xs = x.toString.reverse\n                val newx = xs.map(x\
    \ => if (x > 0) (x / divide) else (x / divide).toString)\n                StringBuffer(newx.takeWhile(x\
    \ => x != 0)).mkString(\"\")\n            }\n            convertBase(xs, base,\
    \ divide)\n        }\n        convertBase(x, base)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpn9uy8_un.scala:22:16 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                StringBuffer(newx.takeWhile(\e[36mx\e\
    [0m => x != \e[31m0\e[0m)).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e[0m \e[35mStringBuffer\e\
    [0m with types\n\e[31m   |\e[0m (x$0: CharSequence): StringBuffer\n\e[31m   |\e\
    [0m (x$0: String): StringBuffer\n\e[31m   |\e[0m (x$0: Int): StringBuffer\n\e\
    [31m   |\e[0m (): StringBuffer\n\e[31m   |\e[0mmatch arguments (IndexedSeq[Matchable])\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn9uy8_un.scala:24:24 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            convertBase(xs, base, divide)\n\e[31m\e[31m\
    \   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                   \
    \     Found:    (xs : String)\n\e[31m   |\e[0m                        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn9uy8_un.scala:24:34\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            convertBase(xs, base,\
    \ divide)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    (Long, Long) => Long\n\
    \e[31m   |\e[0m                                  Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val temp =\
    \ x.toString + base.toString\n        val digits = temp.split(\"\").map(_.toInt)\n\
    \        val baseDigits = digits.dropRight(1)\n        val result = baseDigits.map(x\
    \ => x.toString + base.map(_.toString)(x))\n        val result = result.drop(1).mkString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvg717hln.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.drop(\e\
    [31m1\e[0m).mkString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpvg717hln.scala:17:59 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = baseDigits.map(\e[36mx\e\
    [0m => x.toString + base.map(_.toString)(x))\n\e[31m\e[31m   |\e[0m          \
    \                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                     value map is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvg717hln.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[String])\n\e[31m   |\e[0m\
    \        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val num : String\
    \ = x.toString // converting from long to String\n        val base = num.length\
    \ // length of String base\n        val res = num.toCharArray.map(x => if(x.toInt\
    \ == base-1) x.toString else x.toString + x.toString.toInt)\n        val result\
    \ = res.mkString(\"\")\n        return result;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp946kbx0m.scala:21)\n\tat Problem.main(tmp946kbx0m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var baseStr\
    \ = \"\"\n        var n = x\n        while(n > base) {\n            n /= base\n\
    \            baseStr += x.toString.charAt(n-base).toString\n        }\n      \
    \  return baseStr + x.toString.charAt(x-n).toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpntdnzyvu.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            baseStr += x.toString.charAt(n-base).toString\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpntdnzyvu.scala:18:41 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            baseStr += x.toString.charAt(n-base).toString\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Found:    Long\n\e[31m \
    \  |\e[0m                                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpntdnzyvu.scala:20:43 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mreturn\e[0m baseStr + x.toString.charAt(x-n).toString\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Found:    Long\n\e[31m  \
    \ |\e[0m                                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val tmp = x.toString.reverse\n\
    \        val digits = tmp.split(\"\")\n        val newBase = base.toString.reverse\n\
    \        val newDigits = (digits.length * base).toString.reverse\n        val\
    \ newString = (newBase ++ newDigits).reverse\n        newString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tctxsmj.scala:22)\n\tat Problem.main(tmp0tctxsmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ x\n        else if (x >= base) x % base\n        else\n            if (x % base\
    \ < base)\n                changeBase(x / base, base)\n            else {\n  \
    \              val result = changeBase(x / base, base)\n                val remainder\
    \ = x - base * result\n                result + result.toString + (if (remainder\
    \ != 0) \"*\" + remainder else \"\")\n            }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvllcjpwa.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (x < base)\
    \ x\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    (x : Long)\n\e[31m   |\e[0m                      Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvllcjpwa.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (x >= base) x % base\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpvllcjpwa.scala:21:41 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mremainder\e[0m =\
    \ x - base * result\n\e[31m\e[31m   |\e[0m                                   \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e\
    [0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\
    \e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e\
    [0mmatch arguments ((result : String))\n3 errors found\n"
  stdout: ''
  timestamp: 1660009687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = x.toString\n\
    \        while(s.length>base){\n            s=s.substring(0,s.length-base)+s.substring(s.length-base,s.length)\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplbnhryai.scala:16:28\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            s=s.substring(\e\
    [31m0\e[0m,s.length-base)+s.substring(s.length-base,s.length)\n\e[31m\e[31m  \
    \ |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplbnhryai.scala:16:55\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            s=s.substring(\e\
    [31m0\e[0m,s.length-base)+s.substring(s.length-base,s.length)\n\e[31m\e[31m  \
    \ |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val bin = x.toBinary.length\n\
    \        val baseBin = base.toBinary.length\n        // Reversing base to convert\
    \ it into numeral system.\n        var reversedBase = reverseBaseToNumber(base)\n\
    \        // Reversing x to convert it into numeral system.\n        var reversedX\
    \ = x.toBinary().reverse\n        var result = \"\"\n        // converting numbers\
    \ into string format \n        // and reversing it.\n        var reversedResult\
    \ = reversedX.reverse\n        // calculating number of places to left shift \n\
    \        // when converting into base 10 \n        var shift = 0\n        // converting\
    \ base 10 to decimal system\n        for(i <- 0 until bin){\n            val temp\
    \ = reversedResult(i).toInt\n            result += (temp.toString.reverse * baseBin).toChar\n\
    \            shift += baseBin\n        }\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps25zzqkq.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = x.toBinary.length\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            value toBinary is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmps25zzqkq.scala:15:27 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbaseBin\e[0m = base.toBinary.length\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      value toBinary is not a member of Long\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps25zzqkq.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mreversedBase\e[0m = reverseBaseToNumber(base)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           Not found: reverseBaseToNumber\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps25zzqkq.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mreversedX\e[0m = x.toBinary().reverse\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value toBinary is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val xStr =\
    \ x.toString(10)\n        val base = base.toString(10)\n        val baseStr =\n\
    \            if (base.length < baseStr.length) base +\n            else if (base.length\
    \ > baseStr.length) baseStr +\n            else baseStr\n        val base = base.toInt\n\
    \        val baseStr = baseStr.toInt\n        val baseStr = baseStr.dropWhile(_\
    \ < 0).dropWhile(_ > 9).mkString(\"\")\n        val n = xStr.length - baseStr.length\n\
    \        val digit = baseStr.substring(0, n)\n        val digitStr = baseStr.substring(n\
    \ - 1)\n        val newBase = xStr.length.toLong / digit.length\n        val newBaseStr\
    \ = baseStr.substring(newBase * digit.length)\n        val newBaseStr = if (newBaseStr.length\
    \ == digit.length) \"0\" else newBaseStr\n        newBaseStr +\n            digitStr\
    \ +\n            xStr.substring(newBaseStr.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0pqou1e9.scala:17:52 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (base.length < baseStr.length)\
    \ base +\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                      expression\
    \ expected but \e[31melse\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp0pqou1e9.scala:20:12 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbase\e[0m = base.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbase is already\
    \ defined as \e[33mvalue\e[0m \e[35mbase\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pqou1e9.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbaseStr\e[0m = baseStr.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbaseStr\
    \ is already defined as \e[33mvalue\e[0m \e[35mbaseStr\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pqou1e9.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbaseStr\e[0m = baseStr.dropWhile(_ < \e[31m0\e[0m).dropWhile(_ > \e[31m9\e\
    [0m).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbaseStr is already defined as \e[33mvalue\e[0m \e[35mbaseStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pqou1e9.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnewBaseStr\e[0m = \e[33mif\e[0m (newBaseStr.length\
    \ == digit.length) \e[31m\"0\"\e[0m \e[33melse\e[0m newBaseStr\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val nums =\
    \ x toString reverse\n        val digits = nums substringTo 1 toList\n       \
    \ val remain = digits reverse\n        val result = (base to 0) * (remain map\
    \ toInt)\n        result takeWhile (x => x != 0) mkString \"\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgvxdpra9.scala:15:46 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = nums substringTo\
    \ \e[31m1\e[0m toList\n\e[31m\e[31m   |\e[0m                                 \
    \             ^\e[0m\n\e[31m   |\e[0m                          expression expected\
    \ but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E018]\
    \ Syntax Error: /tmp/tmpgvxdpra9.scala:16:35 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mremain\e[0m = digits reverse\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                          expression expected but \e[31mend of statement\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvxdpra9.scala:14:30\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = x toString reverse\n\e[31m\e[31m   |\e[0m                    \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgvxdpra9.scala:17:33\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = (base to \e[31m0\e[0m) * (remain map toInt)\n\e[31m\e[31m  \
    \ |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not\
    \ a member of scala.collection.immutable.NumericRange.Inclusive[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var number\
    \ = 0\n        var digit = 1\n        var str = \"\"\n        while (number <\
    \ x) {\n            str = str + digit.toString\n            digit = digit*base\n\
    \            number = number*base\n        }\n        return str\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp34w6tcmw.scala:19:20\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            digit = digit*base\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp34w6tcmw.scala:20:21\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            number = number*base\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   Found:    Long\n\e[31m   |\e[0m                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val y = x.toString.toInt\n\
    \        val str = Integer.toString(y)\n        if(str.length == base.toString().length)\n\
    \            return str\n        else\n            return changeBase(Integer.parseInt(str),\
    \ base)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvcfa2w3w.scala:22)\n\tat Problem.main(tmpvcfa2w3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ {\n            throw new IllegalArgumentException(\"Invalid input: Base can't\
    \ be less than base\");\n        }\n        var str = \"\"\n        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        var remaining = base\n  \
    \      for (digit <- digits) {\n            val digitStr = digit.mkString\n  \
    \          val digitCount = digitStr.length\n            var num = 0\n       \
    \     for (c <- digitStr) {\n                val digitValue = getDigitValue(digitCount,\
    \ c)\n                num |= digitValue << remaining\n                remaining\
    \ -= digitValue\n            }\n            str += num.toString.reverse.mkString\n\
    \        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ann2quu.scala:18:48\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ann2quu.scala:25:33 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mdigitValue\e[0m\
    \ = getDigitValue(digitCount, c)\n\e[31m\e[31m   |\e[0m                      \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   Not found: getDigitValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val len = x.length\n\
    \        val bits = len - base\n        val result = new Array[String](bits)\n\
    \        val b = 0\n        val resultArray = Array(\"\")\n        while(x >=\
    \ base) {\n            x /= base\n            b += 1\n            resultArray(b)\
    \ = x.toString.charAt(0)\n        }\n        for(i <- 0 until bits) {\n      \
    \      result(i) = resultArray(i) + resultArray(b-bits)\n        }\n        result.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnfobhr5h.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlen\e[0m = x.length\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \        value length is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnfobhr5h.scala:20:14 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            x /= base\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e\
    [31m   |\e[0m            value /= is not a member of Long - did you mean x.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnfobhr5h.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            b += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean b.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnfobhr5h.scala:22:46\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            resultArray(b) =\
    \ x.toString.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \   Found:    Char\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val r = BigInt(x.toInt)\
    \ / BigInt(base.toInt).toInt\n        val s = r.toString.reverse\n        (s\"\
    $s${r.toString.takeWhile(x => x <= 9).mkString(\"\")}\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvod3dko.scala:19)\n\tat Problem.main(tmpmvod3dko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val remainder\
    \ = x % base\n        val quotient = x / base\n        val digitString = \"0\"\
    \ * (base-remainder) + digitString\n        val rem = remainder % base\n     \
    \   val quo = quotient / base\n        if(rem == 0 && quo == 0)\n            digitString\n\
    \        else {\n            changeBase(rem, base)\n            digitString +\
    \ changeBase(quo, base)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm_t1qdmz.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdigitString\e\
    [0m = \e[31m\"0\"\e[0m * (base-remainder) + digitString\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          Found:    Long\n\e[31m   |\e[0m                   \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpm_t1qdmz.scala:16:51 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigitString\e[0m = \e[31m\"0\"\e[0m * (base-remainder)\
    \ + digitString\n\e[31m\e[31m   |\e[0m                                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                  Recursive\
    \ \e[33mvalue\e[0m \e[35mdigitString\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x.toString.length\n        val tmp = if (digits < base) x else x.divide(base).multiply(base).toInt\n\
    \        val x = tmp.toString.drop(digits)\n        val result = if (digits <\
    \ base) x else x.multiply(base).toString.drop(digits)\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw14jzuuh.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtmp\e[0m = \e[33mif\e[0m\
    \ (digits < base) x \e[33melse\e[0m x.divide(base).multiply(base).toInt\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Recursive \e[33mvalue\e[0m \e[35mdigits\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw14jzuuh.scala:15:37 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtmp\e[0m = \e[33mif\e[0m\
    \ (digits < base) x \e[33melse\e[0m x.divide(base).multiply(base).toInt\n\e[31m\e\
    [31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m    \
    \                                 Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw14jzuuh.scala:15:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtmp\e[0m = \e[33mif\e[0m (digits < base) x \e[33melse\e[0m x.divide(base).multiply(base).toInt\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                            Recursive \e[33mvalue\e\
    [0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\n\
    \            throw new IllegalArgumentException(\"Base number should be less than\
    \ the target number\")\n        var result : String = \"\"\n        var i = x\n\
    \        val n = math.pow(base, x)\n        while(n > 1) {\n            result\
    \ = Integer.toString(i) + result\n            n /= base\n            i /= base\n\
    \        }\n        result = Integer.toString(i) + result\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphsql11b1.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result = Integer.toString(i)\
    \ + result\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    (i : Long)\n\e\
    [31m   |\e[0m                                      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphsql11b1.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            n /= base\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Double\
    \ - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphsql11b1.scala:24:34\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        result = Integer.toString(i)\
    \ + result\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    (i : Long)\n\e[31m  \
    \ |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = x.toString\n        var quotient = x / base\n        if (quotient > 0){\n\
    \            while (quotient > 1){\n                result = quotient.toString\
    \ + result\n                quotient = quotient / base\n            }\n      \
    \      result = quotient.toString + result\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpu5ejfr.scala:26)\n\tat Problem.main(tmphpu5ejfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val temp =\
    \ x.toString.reverse.dropWhile(_.isDigit).reverse\n        var str = \"\"\n  \
    \      var i = 0\n        while (i < temp.length) {\n            if (i % base\
    \ == 0) {\n                str = str.dropRight(1)\n            }\n           \
    \ str += temp(i)\n            i += 1\n        }\n        str\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfze0p91b.scala:27)\n\tat Problem.main(tmpfze0p91b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if(x == 0)\
    \ {\n            return \"0\"\n        }\n        if(base < 10) {\n          \
    \  val rem = x % base\n            if(rem == 0) {\n                return x +\
    \ changeBase(x / base, base)\n            } else {\n                return x +\
    \ changeBase(rem, base) + changeBase(x / base, base)\n            }\n        }\n\
    \        if(base % 2 == 0) {\n            val rem = x % base\n            if(rem\
    \ == 0) {\n                return changeBase((x / (base * base)), base) + changeBase((x\
    \ / (base * base)), base)\n            } else {\n                return changeBase(rem,\
    \ base) + changeBase((x / (base * base)), base)\n            }\n        } else\
    \ {\n            val rem = x % base\n            if(rem == 0) {\n            \
    \    return changeBase((x / base), base) + changeBase((x / base), base)\n    \
    \        } else {\n                return changeBase(rem, base) + changeBase((x\
    \ / base), base)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.StringBuilder.<init>(StringBuilder.java:119)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\
    \tat Problem$.changeBase(tmpgt8rlmge.scala:22)\n\tat Problem$.changeBase(tmpgt8rlmge.s"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = \"\
    \"\n        val n = scala.math.BigInt(x)\n        val bn = scala.math.BigInt(base)\n\
    \        while(n > 0) {\n            res = scala.math.BigInt(res) + (n - bn)\n\
    \            n = n / bn.toBigInt\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsoy3hei4.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            res = scala.math.BigInt(res)\
    \ + (n - bn)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    BigInt\n\e[31m   |\e[0m      \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsoy3hei4.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            n = n / bn.toBigInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       value toBigInt is not a member of BigInt - did you\
    \ mean bn.toInt?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var temp :\
    \ String = \"\"\n        var temp1 : String = \"\"\n        var base = base.pow(10)\n\
    \        var result = x.div(base)\n        var value = x.modf(base)\n        while\
    \ (value != 0) {\n            temp1 = value.toString\n            temp = temp\
    \ + temp1\n            value = value.div(base)\n        }\n        temp1 = x.toString\n\
    \        temp = temp + temp1\n        temp\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy_u1veu9.scala:16:19 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mbase\e[0m = base.pow(\e\
    [31m10\e[0m)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m\
    \                   Recursive \e[33mvariable\e[0m \e[35mbase\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy_u1veu9.scala:17:23\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mresult\e[0m = x.div(base)\n\e[31m\e[31m   |\e[0m                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value div is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpy_u1veu9.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvalue\e[0m = x.modf(base)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \            value modf is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val n = (x\
    \ / (base.pow(2))).toInt\n        val res = x.toString.substring(base.toInt)\n\
    \        if (res.length < base.toInt) res + res.reverse\n        else res\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2n9czdp5.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = (x / (base.pow(\e\
    [31m2\e[0m))).toInt\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue pow is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      val xMod = x\
    \ % base\n      if (xMod == 0) return x.toString.toLong.toString\n      val result\
    \ = changeBase(xMod + (base/2), base)\n      if (xMod < base) result + result.last\n\
    \      else result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp51azh5_.scala:21)\n\tat Problem.main(tmpp51azh5_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // We are converting\
    \ to a number in base base\n        var str = x.toString\n        if (base < 2)\n\
    \            return str\n        val tempBase = base\n        // Remove the leading\
    \ 1\n        if (str.startsWith(\"1\")) {\n            str = str.substring(1)\n\
    \        }\n        // If the base is greater than or equal to 10, then just convert\
    \ to base\n        if (tempBase >= 10) {\n            while (str.length >= tempBase)\
    \ {\n                str = changeBaseLong(str, tempBase)\n                tempBase\
    \ /= 10\n            }\n        }\n        // Convert from base to base using\
    \ long number representation\n        var result: Long = 0\n        for (i <-\
    \ 0 until str.length.toInt) {\n            result += (10L * str.charAt(i) - '0')\
    \ * tempBase\n            tempBase /= 10\n        }\n        return String.valueOf((result.toLong).toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf3o1b48t.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                str = changeBaseLong(str, tempBase)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: changeBaseLong\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpf3o1b48t.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                tempBase /= \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /=\
    \ is not a member of Long - did you mean tempBase.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpf3o1b48t.scala:34:21 ------------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m            tempBase /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean tempBase.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var str = x.toString\n\
    \        var baseString = base.toString\n        while (!(str.length < base.length))\
    \ {\n            str = Integer.toString(baseString * Integer.parseInt(str), base.toString)\n\
    \        }\n        return str\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2scdt86.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m (!(str.length < base.length))\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps2scdt86.scala:17:35 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            str = Integer.toString(baseString * Integer.parseInt(str),\
    \ base.toString)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    String\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps2scdt86.scala:17:71 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            str = Integer.toString(baseString * Integer.parseInt(str),\
    \ base.toString)\n\e[31m\e[31m   |\e[0m                                      \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                                Found:    String\n\e[31m   |\e\
    [0m                                                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // Initialize\
    \ result array for length of x\n        var res : Array[String] = new Array[String](x.length);\n\
    \        \n        // Convert the number to base 10\n        val xRes = Integer.parseInt(x.toString,\
    \ base);\n        \n        // Add the converted number to the result array\n\
    \        res :+ xRes.toString();\n        \n        // Return the result array\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg7clrptv.scala:15:54 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m : \e[35mArray\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mString\e[0m](x.length);\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg7clrptv.scala:18:48\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mxRes\e\
    [0m = Integer.parseInt(x.toString, base);\n\e[31m\e[31m   |\e[0m             \
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                 Found:    (base : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg7clrptv.scala:24:8 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (res : Array[String])\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val str = new\
    \ StringBuilder\n        val res = x.toString % base.toInt\n        while (x.toString.length\
    \ < base.toInt) {\n            str.append(\"0\")\n        }\n        str.append(res)\n\
    \        str.substring(0, base.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn7defx9f.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = x.toString %\
    \ base.toInt\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x % (base.toLong*base).toLong\n        val base = base.toLong\n        var\
    \ res = \"\"\n        var remainder\n        while(digits > 0) {\n           \
    \ remainder = digits%base\n            res = res + remainder.toString\n      \
    \      digits = digits/base\n        }\n        if(res.length == 0)\n        \
    \    res = \"\"\n        res.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ao_ho3e.scala:18:0 ----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m(digits > \e[31m0\e[0m) {\n\e\
    [31m\e[31m   |\e[0m^^^^^\e[0m\n\e[31m   |\e[0m'=' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6ao_ho3e.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbase\e[0m = base.toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35mbase\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp6ao_ho3e.scala:21:19 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            digits = digits/base\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val digits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = \"\"\
    \n        var tmp = Long.divide(x, base)\n        while(!(tmp == 0l)){\n     \
    \       s = tmp.toString + s\n            tmp = Long.divide(tmp, base)\n     \
    \   }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7id_b9fr.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mtmp\e[0m = Long.divide(x,\
    \ base)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value divide is not a member of object Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp7id_b9fr.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            tmp = Long.divide(tmp, base)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \  value divide is not a member of object Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ : String = \"\"\n        for(i <- 1 to base) {\n            result += (x % base).toString.toUpperCase\n\
    \            x = x / base\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51qjo6jw.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to base) {\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e\
    [31m   |\e[0m                      Found:    (base : Long)\n\e[31m   |\e[0m  \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp51qjo6jw.scala:17:14 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            x = x / base\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digit =\
    \ BigDecimal.divide(x, BigDecimal.ONE, base)\n        val result = digit.toString\n\
    \        val tail = digit.minus(BigDecimal.ONE)\n        val reminder = tail.toString.length\n\
    \        tail + if (reminder == 0) \"0\" else tail.substring(0, reminder - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpscjwvoc6.scala:18:15 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        tail + \e[33mif\e[0m (reminder == \e[31m0\e[0m)\
    \ \e[31m\"0\"\e[0m \e[33melse\e[0m tail.substring(\e[31m0\e[0m, reminder - \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m               ^^\e[0m\n\e[31m   |\e[0m    \
    \           expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpscjwvoc6.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = BigDecimal.divide(x,\
    \ BigDecimal.ONE, base)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value divide is not a member of object scala.math.BigDecimal\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpscjwvoc6.scala:14:52 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = BigDecimal.divide(x,\
    \ BigDecimal.ONE, base)\n\e[31m\e[31m   |\e[0m                               \
    \          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value ONE is not\
    \ a member of object scala.math.BigDecimal\n3 errors found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val newNum\
    \ = x.toInt / base.toInt\n        val quotient = x.toInt % base.toInt\n      \
    \  val num = new Number(newNum)\n        val ret = new String(num.digits)\n  \
    \      val baseDigits = ret.toCharArray\n        if (quotient != 0) {\n      \
    \      baseDigits(quotient.toInt) <- '1'\n        }\n        new String(baseDigits)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpf1s9e6lh.scala:20:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            baseDigits(quotient.toInt) <- \e[31m'1'\e\
    [0m\n\e[31m\e[31m   |\e[0m                                       ^^\e[0m\n\e[31m\
    \   |\e[0m                                end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpf1s9e6lh.scala:16:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = \e[33mnew\e[0m\
    \ \e[35mNumber\e[0m(newNum)\n\e[31m\e[31m   |\e[0m                           \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m   too many arguments for \e[33mconstructor\e[0m\
    \ \e[35mNumber\e[0m in \e[33mclass\e[0m \e[35mNumber\e[0m: (): Number\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val baseConverted\
    \ : Int = (x).toInt\n        var temp = 0\n        while(baseConverted > 0) {\n\
    \            temp = (baseConverted % base).toInt\n            baseConverted =\
    \ baseConverted.toInt\n        }\n        if(temp == 0) return \"0\"\n       \
    \ else return x.toString + temp.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp77yvrj2d.scala:18:26 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            baseConverted = baseConverted.toInt\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val baseConverted\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = x.toString(base)\n\
    \        while (res.length < base)\n            res = \"0\" + res\n        return\
    \ res\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbir8pf81.scala:14:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = x.toString(base)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e[0m \
    \        too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e\
    [0m \e[35mAny\e[0m: (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x.toString.reverse.grouped(base).map(x => x.reverse).mkString\n        (digits\
    \ * base).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq2eus84e.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).map(\e[36mx\e[0m => x.reverse).mkString\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq2eus84e.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        (digits * base).reverse\n\
    \e[31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Found:    (base : Long)\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = \"\
    \"\n        var i = x\n        while (i > 0) {\n            res = res + i%base\n\
    \            i = i / base\n        }\n        return res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpizmcit04.scala:24)\n\tat Problem.main(tmpizmcit04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (base <=\
    \ 0) \"0\";\n        else if (x < base) changeBase(x / base, base) + changeBase(x%base,\
    \ base).toLong.toString\n        else x.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr4ff5vi8.scala:19)\n\tat Problem.main(tmpr4ff5vi8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = scala.math.pow(base.toDouble, x.toDouble)\n        val result = digits.toString.reverse.foldLeft(\"\
    \"){ (result, digit) =>\n            val x = result.length\n            var digit\
    \ = digit.toString.reverse + digit\n            if (x < base) digit + digit.drop(base)\n\
    \            else digit\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprslbj5ls.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mvar\e[0m \e[36mdigit\e[0m = digit.toString.reverse\
    \ + digit\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m\
    \                        Recursive \e[33mvariable\e[0m \e[35mdigit\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = x.toString.reverse.grouped(base.toInt)\n        val result = new StringBuilder\n\
    \        for (d <- digits) {\n            result += d.map(digit => digit + base)\n\
    \        }\n        return result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt881vnl0.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            result += d.map(\e\
    [36mdigit\e[0m => digit + base)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    IndexedSeq[Long]\n\e[31m \
    \  |\e[0m                      Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def toBase(x:\
    \ Long, base: Long) : Long = {\n            val digits = BigInt(x)\n         \
    \   (digits / base).toInt\n        }\n\n        val digits = toBase(x, base)\n\
    \        val chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray\n  \
    \      chars(digits).toString() + digits(base).toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1lhw1e3v.scala:21:14\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        chars(digits).toString()\
    \ + digits(base).toString\n\e[31m\e[31m   |\e[0m              ^^^^^^\e[0m\n\e\
    [31m   |\e[0m              Found:    (digits : Long)\n\e[31m   |\e[0m        \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp1lhw1e3v.scala:21:35\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        chars(digits).toString()\
    \ + digits(base).toString\n\e[31m\e[31m   |\e[0m                             \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \e[33mvalue\e\
    [0m \e[35mdigits\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val power =\
    \ long2String(base).size\n\n        def calc(x: Long, base: Long, power: Long)\
    \ : Long = {\n            if (x == 0) 1\n            else (calc(x/base,base,power-1).toLong*base).toLong\n\
    \        }\n\n        // If x is greater than power of base, then x is converted\
    \ to a power of base by multiplication.\n        // Example: 10^5 is equal to\
    \ 1000*10*10*10*10*10.\n        val x = calc(x,base,power)\n        // Change\
    \ x to a power of base by multiplication.\n        val res = long2String(power.toDouble/base.toDouble)\n\
    \        x + res.substring(0, res.length-1) + x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rk1upbx.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mpower\e[0m = long2String(base).size\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Not found: long2String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp1rk1upbx.scala:23:21 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = calc(x,base,power)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rk1upbx.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = long2String(power.toDouble/base.toDouble)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Not found: long2String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val num = scala.math.BigInt(x)\n\
    \        val div = scala.math.BigInt(base).divide(num)\n        val result = (div.toInt\
    \ / num).toString + (div % num).toString\n        \n        val baseStr = \"0123456789ABCDEF\"\
    \n        val temp = Integer.parseInt(result)\n        val res = baseStr.charAt(temp\
    \ - 1)\n        \n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5wlji9vt.scala:15:42 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdiv\e[0m = scala.math.BigInt(base).divide(num)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value divide is not a member of BigInt\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5wlji9vt.scala:22:8 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (res : Char)\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        (x / (base.toLong\
    \ * base)) % base.toString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8f8gtcwd.scala:14:35 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (x / (base.toLong * base)) % base.toString\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m%\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments (String)\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (base ==\
    \ 1) {\n            // 1L \u2192 \"1\"\n            val one = x.toInt\n      \
    \      val ones = (one * 10).toInt\n            val result = ones == 1 ? one :\
    \ ones + \"1\";\n            return(result.toString)\n        } else if (base\
    \ == 10) {\n            // 10L \u2192 \"0\"\n            val ten = x.toInt\n \
    \           val tens = (ten * 10).toInt\n            val result = tens == 0 ?\
    \ ten : tens + \"0\";\n            return(result.toString)\n        } else {\n\
    \            val ten = x / base.toInt\n            val ten =  ten * base.toInt\n\
    \            val result = changeBase(ten, base-1) + changeBase(x % base, base).toChar\n\
    \            return(result.toString)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpso7e0w67.scala:18:48 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = ones ==\
    \ \e[31m1\e[0m ? one : \e[35mones\e[0m \e[35m+\e[0m \e[31m\"1\"\e[0m;\n\e[31m\e\
    [31m   |\e[0m                                                ^\e[0m\n\e[31m  \
    \ |\e[0m                                                Not found: type +\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpso7e0w67.scala:18:35\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36mresult\e[0m = ones == \e[31m1\e[0m ? one : \e[35mones\e[0m \e[35m+\e[0m\
    \ \e[31m\"1\"\e[0m;\n\e[31m\e[31m   |\e[0m                                 ^^^\e\
    [0m\n\e[31m   |\e[0m                                 value ? is not a member of\
    \ Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpso7e0w67.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = tens ==\
    \ \e[31m0\e[0m ? ten : \e[35mtens\e[0m \e[35m+\e[0m \e[31m\"0\"\e[0m;\n\e[31m\e\
    [31m   |\e[0m                                                ^\e[0m\n\e[31m  \
    \ |\e[0m                                                Not found: type +\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpso7e0w67.scala:24:35\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mresult\e[0m = tens == \e[31m0\e[0m ? ten : \e[35mtens\e[0m \e[35m+\e[0m\
    \ \e[31m\"0\"\e[0m;\n\e[31m\e[31m   |\e[0m                                 ^^^\e\
    [0m\n\e[31m   |\e[0m                                 value ? is not a member of\
    \ Int\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpso7e0w67.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mten\e[0m =  ten * base.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mten is already defined as \e[33mvalue\e[0m \e[35mten\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitio"
  stdout: ''
  timestamp: 1660009705
