language: scala
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        var counter = 1L\n        for(i<-1\
    \ to k)\n        {\n            if(arr(i).compareTo(BigDecimal(10)*counter)<0)\n\
    \                sum+=arr(i)\n            counter+=1\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkysiwf28.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m1\e[0m to k)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Found:    (k : Long)\n\e[31m   |\e[0m                 \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkysiwf28.scala:17:32\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(arr(i).compareTo(BigDecimal(\e\
    [31m10\e[0m)*counter)<\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \             ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    BigDecimal\n\e[31m   |\e[0m                          \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // base case\n        if(arr.isEmpty)\n            return\
    \ 0\n\n        // first k digits\n        var firstK = arr\n        for(i <- 0\
    \ until k)\n            firstK = firstK._1 + firstK._2\n\n        // get max two\
    \ digit number from firstK elements\n        var maxTwoDigitSum = firstK.maxBy(_\
    \ % 10)._2 / 10\n        if(maxTwoDigitSum < 0)\n            maxTwoDigitSum =\
    \ maxTwoDigitSum + 9\n        \n        // add rest\n        var rest = arr.drop(k)\n\
    \        val sum = rest sum maxTwoDigitSum\n        \n        // return max two\
    \ digit sum + sum\n        return maxTwoDigitSum + sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo36wuysg.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpo36wuysg.scala:20:28 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            firstK = firstK._1 + firstK._2\n\e[31m\e[31m \
    \  |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \     value _1 is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpo36wuysg.scala:23:50 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mvar\e[0m \e[36mmaxTwoDigitSum\e[0m = firstK.maxBy(_ % \e\
    [31m10\e[0m)._2 / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \    value _2 is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpo36wuysg.scala:28:28 --------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \        \e[33mvar\e[0m \e[36mrest\e[0m = arr.drop(k)\n\e[31m\e[31m   |\e[0m \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \  Found:    (k : Long)\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // This solution works in O(n^2) time \n        // as we\
    \ take 2 numbers out in each iteration \n        val arr = arr ++ arr filterNot\
    \ (x => x % 10 == 0) filterNot (x => x % 10 == 1)\n        val result = arr filter\
    \ { x => x%10 == 0 }.reduce((x,y) => x+y)\n        if (arr.length < k) return\
    \ result \n        else addElements(arr filter (x => x % 10 == 1), k)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1o77r5m0.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr ++ arr filterNot\
    \ (\e[36mx\e[0m => x % \e[31m10\e[0m == \e[31m0\e[0m) filterNot (\e[36mx\e[0m\
    \ => x % \e[31m10\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \   ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        val arr = arr.toList\n        val tail\
    \ = arr.drop(k).toList\n        val first = arr.take(k).toList\n        for (i\
    \ <- tail) {\n            sum = sum + i\n        }\n        for (i <- first) {\n\
    \            sum = sum + i\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy9p0i3px.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        for (elem <- arr)\n            result ::= (elem % 10) + elem / 10\n \
    \       result.slice(0, k).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp40z69kl7.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result ::= (elem % \e[31m10\e[0m) + elem\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue ::= is not a member of scala.collection.mutable.ListBuffer[Long]\
    \ - did you mean result.++=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp40z69kl7.scala:16:24\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        result.slice(\e[31m0\e\
    [0m, k).sum\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e\
    [0m                        Found:    (k : Long)\n\e[31m   |\e[0m             \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty)\n            return 0\n        if (k ==\
    \ 0)\n            return arr(0)\n        if (k == 1)\n            return arr(0)\n\
    \        var sum = 0L\n        for (i<-k to arr.length-1){\n            sum +=\
    \ arr(i)\n        }\n        sum += arr(arr.length)\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuma8ezcr.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuma8ezcr.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum += arr(i)\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (i : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val n = arr.size\n        val result = new Array[Long](n)\n\
    \        var i : Long = 1\n        var sum : Long = 0l\n        while (i<n) {\n\
    \            sum = arr(i) + sum\n            if (sum.toString.length < 2) { i\
    \ += 1; sum = 0l }\n        }\n        if (k < n) { sum -= arr(k) }\n        result(0)\
    \ = sum\n        result.foreach(println)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm5665ye.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum = arr(i) + sum\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (i : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkm5665ye.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (k\
    \ < n) { sum -= arr(k) }\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value -= is not a member of Long - did you mean\
    \ Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm5665ye.scala:21:32\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (k < n)\
    \ { sum -= arr(k) }\n\e[31m\e[31m   |\e[0m                                ^\e\
    [0m\n\e[31m   |\e[0m                                Found:    (k : Long)\n\e[31m\
    \   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkm5665ye.scala:24:8 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.dropRight(k)\n        val sum = 0\n      \
    \  for(i <- 0 until arr.length) {\n            sum += arr(i)\n        }\n    \
    \    sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphy58b3vu.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.dropRight(k)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphy58b3vu.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val counts = arr.map(_ % 10).take(k).toArray\n        val\
    \ sum = arr.foldLeft((0L, 0L))((acc, cur) => {\n            val currentSum = acc.get._1\
    \ + cur % 10\n            val currentCount = acc.get._2 + 1\n            val updatedCount\
    \ = currentCount match {\n                case 0 => currentCount\n           \
    \     case 1 => currentCount + 1\n                case _ => currentCount - 1\n\
    \            }\n            (updatedSum, updatedCount)\n        }).get._1 + arr.take(k).map(_\
    \ % 10).sum\n        val carryOver = sum % 10\n        sum + (10 - carryOver)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilp1jdkr.scala:13:42\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e\
    [0m = arr.map(_ % \e[31m10\e[0m).take(k).toArray\n\e[31m\e[31m   |\e[0m      \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                         Found:    (k : Long)\n\e[31m   |\e[0m              \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpilp1jdkr.scala:15:33 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcurrentSum\e[0m = acc.get._1\
    \ + cur % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value get is not a member of\
    \ (Long, Long)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpilp1jdkr.scala:16:35\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcurrentCount\e[0m = acc.get._2 + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value get is not a member of (Long, Long)\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpilp1jdkr.scala:22:13 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            (updatedSum, updatedCount)\n\e[31m\e[31m   |\e\
    [0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found: updatedSum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var max = 0\n        for(i <- 0 until arr.length) {\n  \
    \          if(arr.length > (i+k)) {\n                max += arr(i).floor.toLong\n\
    \            }\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt35jb0ca.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max += arr(i).floor.toLong\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpt35jb0ca.scala:16:30 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m                max += arr(i).floor.toLong\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value floor\
    \ is not a member of Long.\n\e[31m   |\e[0m      An extension method was tried,\
    \ but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \    doubleWrapper(arr.apply(i))\n2 errors found\n"
  stdout: ''
  timestamp: 1659979784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.head\n        val n = arr.last\n        val\
    \ a = arr.take(k)\n        val b = arr.drop(k).dropRight(1)\n        val c = a\
    \ + b\n        val z = k - 1\n        val s = c + z\n        val m = m + k\n \
    \       val z = z * 10\n        val s = s + z\n        val z = k * 10\n      \
    \  val s = s + z\n        val z = k * 100\n        val s = s + z\n        val\
    \ s = s + m\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaok75jg5.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m + k\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaok75jg5.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = z * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already\
    \ defined as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaok75jg5.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = s + z\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is already defined as\
    \ \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaok75jg5.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = k * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already\
    \ defined as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaok75jg5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = s + z\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is already defined as\
    \ \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaok75jg5.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mz\e["
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val len = arr.size\n        if (len < 1) return 0\n    \
    \    if (len == 1) return arr(0)\n        val start = arr.take(k)\n        val\
    \ end   = arr.drop(k - 1)\n        val map   = mutable.HashMap[Long, Long]()\n\
    \        var sum = 0\n        for ( i <- start.drop(k) ; j <- end ) {\n      \
    \      if (!map.contains(i)) {\n                sum += i\n                map\
    \ += i -> i\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdc0metz.scala:16:29\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstart\e\
    [0m = arr.take(k)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (k : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprdc0metz.scala:17:29 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mend\e[0m   = arr.drop(k\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Found:    Long\n\e[31m   |\e[0m  \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprdc0metz.scala:18:20 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m   = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdc0metz.scala:20:30 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m ( i <- start.drop(k) ; j <- end\
    \ ) {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e\
    [0m                              Found:    (k : Long)\n\e[31m   |\e[0m       \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmprdc0metz.scala:22:20 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        arr.take(k).foldLeft(0l) {\n            (acc, val) => acc\
    \ + (val % (10 * 10) + 1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9hlj3wto.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (\e[36macc\e[0m, \e[33mval\e[0m) => acc +\
    \ (\e[33mval\e[0m % (\e[31m10\e[0m * \e[31m10\e[0m) + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp9hlj3wto.scala:14:33 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            (\e[36macc\e[0m, \e[33mval\e[0m) => acc + (\e[33mval\e[0m\
    \ % (\e[31m10\e[0m * \e[31m10\e[0m) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \            expression expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hlj3wto.scala:13:17 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        arr.take(k).foldLeft(\e[31m0l\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Found: \
    \   (k : Long)\n\e[31m   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty || arr.size <= k) {\n            return\
    \ 0\n        }\n\n        var s = 0.0\n        var i = k\n        while (i >=\
    \ 0) {\n            s += arr(i)\n            i -= 1\n        }\n        val tmp\
    \ = s - math.min(arr(k), arr(k-1))\n        var t = 0\n        for (i = k; i <\
    \ arr.length; ++i) {\n            t += arr(i) - tmp\n        }\n        return\
    \ t\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4pmt3bq.scala:25:15 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (i = k; i < arr.length; ++i) {\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4pmt3bq.scala:25:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m\
    \ (i = k; i < arr.length; ++i) {\n\e[31m\e[31m   |\e[0m                      \
    \            ^\e[0m\n\e[31m   |\e[0m                                  '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpi4pmt3bq.scala:25:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m\
    \ (i = k; i < arr.length; ++i) {\n\e[31m\e[31m   |\e[0m                      \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi4pmt3bq.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            s += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Double - did you mean Double.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpi4pmt3bq.scala:20:21 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            s += arr(i)\n\e[31m\e[31m   |\e[0m                \
    \     ^\e[0m\n\e[31m   |\e[0m                     Found:    (i : Long)\n\e[31m\
    \   |\e[0m                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpi4pmt3bq.scala:23:35 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mtmp\e[0m = s - math.min(arr(k),\
    \ arr(k-\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                \
    \   ^\e[0m\n\e[31m   |\e[0m                                   Found:    (k : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[3"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        val arr = arr.sorted\n        for (i\
    \ <- 0 until arr.length && arr.length - i >= k) sum += arr(i)\n        sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_x48cihj.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sorted\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var max = 0L\n        var num = 0\n        var i = 0\n \
    \       while (i < k) {\n            num = max % 10 + arr(i).toInt % 10\n    \
    \        max = Math.max(1, max / 10)\n            i = i + 1\n        }\n     \
    \   return max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzxu_l2_6.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            num = max % \e[31m10\e\
    [0m + arr(i).toInt % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val l1 = arr.take(k.toInt)\n        val l2 = arr.drop(k.toInt)\n\
    \        l1.foldLeft(0l) { (s, e) =>\n            val l = if (s % 10 < e) s +\
    \ 1 else s\n            l * 10 + e\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42qqly4w.scala:21)\n\tat Problem.main(tmp42qqly4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var result : Long = 0\n        var lastElements : List[Long]\
    \ = Nil\n        for( x <- arr ) {\n            if( lastElements.size <= k ) {\n\
    \                lastElements = lastElements :+ x\n            } else {\n    \
    \            if( math.pow(x, 2).sum % 10 == 0 ) {\n                    result\
    \ += x\n                }\n            }\n        }\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_tyyk29t.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m( math.pow(x, \e[31m2\e\
    [0m).sum % \e[31m10\e[0m == \e[31m0\e[0m ) {\n\e[31m\e[31m   |\e[0m          \
    \          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value sum\
    \ is not a member of Double\n1 error found\n"
  stdout: ''
  timestamp: 1659979783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty)\n            return 0\n\n        val arr\
    \ = arr.take(k).toArray\n        val maxLength = Math.max(arr.take(k).length,\
    \ k)\n\n        val sums = arr.map {x => x + x.toString.substring(0,maxLength)}\n\
    \            .foldLeft(ListBuffer.empty[Long]) { (acc: mutable.ListBuffer[Long],\
    \ elem: Long) =>\n                acc += elem\n                acc += elem.substring(0,maxLength)\n\
    \                acc += elem.substring(0,maxLength-1)\n                acc +=\
    \ elem.substring(0,maxLength-2)\n            }\n            .map(x => x.toString.toLong).toList\n\
    \n        val sumsLong = sums.map(x => x.toLong).toList\n        var total = 0L\n\
    \        for ( l <- sumsLong) {\n            total += l\n        }\n        return\
    \ total\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp766_u9fp.scala:16:18 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.take(k).toArray\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp766_u9fp.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            .foldLeft(ListBuffer.empty[Long]) { (acc:\
    \ mutable.ListBuffer[Long], elem: Long) =>\n\e[31m\e[31m   |\e[0m            \
    \                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                 Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val l1 = arr.take(k).toList\n        val l2 = arr.drop(k).toList\n\
    \        val l3 = l2.zip(l1).map{ case (x,y) => x.toLong + y.toLong }.toList\n\
    \        l3.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwyjh4oq.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml1\e\
    [0m = arr.take(k).toList\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmprwyjh4oq.scala:14:26 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = arr.drop(k).toList\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (k : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val map1 = arr.take(k).toMap\n        var sum = 0\n    \
    \    for(i <- 0 until k){\n            sum += map1(i)\n            val tmp = sum%10\n\
    \            sum += tmp\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzz0lqkt3.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmap1\e\
    [0m = arr.take(k).toMap\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (k : Long)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpzz0lqkt3.scala:13:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmap1\e[0m = arr.take(k).toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Long <:< (K, V)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                    where:    K is\
    \ a type variable\n\e[31m   |\e[0m                                           \
    \   V is a type variable\n\e[31m   |\e[0m                                    .\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzz0lqkt3.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (k : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if(k > arr.size)\n            throw new IllegalArgumentException(\"\
    k must be <= length of arr\")\n        var count = 0\n        var sum = 0L\n \
    \       for(elem <- arr[0..k]) {\n            var temp = 0L\n            for(i\
    \ <- 0 until elem) {\n                temp += arr(i).toLong\n            }\n \
    \           sum += temp\n            count += 1\n        }\n        sum += arr(k).toLong\n\
    \        if(count > 1)\n            sum += arr(k+1).toLong\n        sum.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp13uav3qo.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(elem <- arr[\e[31m0\e[0m..k])\
    \ {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m   \
    \                      ']' expected, but '.' found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp13uav3qo.scala:25:12 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        sum += arr(k).toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp13uav3qo.scala:25:19 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        sum += arr(k).toLong\n\e[31m\e[31m   |\e[0m \
    \                  ^\e[0m\n\e[31m   |\e[0m                   Found:    (k : Long)\n\
    \e[31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp13uav3qo.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            sum += arr(k+\e[31m1\e[0m).toLong\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp13uav3qo.scala:27:23 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            sum += arr(k+\e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m \
    \                      ^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659979784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val ls = arr.take(k).toList\n        val result = 0\n  \
    \      ls.foreach{x => result += x}\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzpxw2v36.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mls\e\
    [0m = arr.take(k).toList\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzpxw2v36.scala:15:31 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        ls.foreach{\e[36mx\e[0m => result += x}\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      value += is not a member of Int - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val sumM: mutable.Long = mutable.Long(0)\n        var total\
    \ = 0\n        for(i <- 0 to arr.size - k + 1){\n            total += arr(i)\n\
    \        }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjrzchkr.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumM\e[0m: mutable.Long\
    \ = mutable.Long(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjrzchkr.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumM\e[0m: mutable.Long\
    \ = mutable.Long(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbjrzchkr.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m to arr.size - k + \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbjrzchkr.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            total += arr(i)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val firstK = arr.take(k).toList\n        val firstKSet =\
    \ firstK.toSet\n        val arr = arr.drop(k).toList\n        val finalSum = arr.reduceLeft((x,\
    \ y) => (firstKSet.contains(x) || firstKSet.contains(y))\n            ? (x + y)\
    \ :\n            (x + y) * (firstKSet.contains(x) ? 2 : 1))\n        arr.head\
    \ + finalSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpifek2syx.scala:18:41 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            (x + y) * (firstKSet.contains(x) ? \e[31m2\e\
    [0m : \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                  \
    \       ^\e[0m\n\e[31m   |\e[0m                                         ')' expected,\
    \ but '(' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpifek2syx.scala:15:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.drop(k).toList\n\e[31m\e[31m   |\e[0m                 \
    \ ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if(arr.length < 2)\n            return 0l\n\n        val\
    \ newArr: List[Long] = arr.take(k).reverse.drop(k).reverse\n\n        if(arr.length\
    \ > k)\n            newArr += arr.drop(k).reverse\n\n        val sum : Long =\
    \ arr.sum\n\n        val result = newArr.foldLeft(sum)((sum, element) => sum +\
    \ element)\n\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9yo5z4af.scala:16:42\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewArr\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = arr.take(k).reverse.drop(k).reverse\n\e\
    [31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m  \
    \ |\e[0m                                          Found:    (k : Long)\n\e[31m\
    \   |\e[0m                                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9yo5z4af.scala:16:58 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewArr\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = arr.take(k).reverse.drop(k).reverse\n\e[31m\e[31m   |\e\
    [0m                                                          ^\e[0m\n\e[31m  \
    \ |\e[0m                                                    Found:    (k : Long)\n\
    \e[31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yo5z4af.scala:19:19\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            newArr += arr.drop(k).reverse\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ += is not a member of List[Long] - did you mean newArr.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9yo5z4af.scala:19:31 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            newArr += arr.drop(k).reverse\n\e[31m\e[31m  \
    \ |\e[0m                               ^\e[0m\n\e[31m   |\e[0m               \
    \                Found:    (k : Long)\n\e[31m   |\e[0m                       \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var index = 0\n        while(index\
    \ < k) {\n            if(index < (k-1)) {\n                sum += arr(index)\n\
    \                index += 1\n            } else {\n                sum = sum +\
    \ arr(index) + arr(index+1)\n                index += 1\n                index\
    \ += 2\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjxjf0mhx.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                sum += arr(index)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjxjf0mhx.scala:20:22 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                sum = sum + arr(index) + arr(index+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    Long\n\e[31m   |\e[0m              \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.reverse.take(k)\n        val arr = arr.sortBy(_.toString.toInt)\n\
    \        val sum = (arr.head + arr.last) % (10 - arr.last)\n        sum * 10 +\
    \ arr.last\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzfj9a0pw.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0marr is already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzfj9a0pw.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.reverse.take(k)\n\e[31m\e[31m   |\e[0m                \
    \  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var ans = 0\n        var i = 0\n        while (i < arr.size)\
    \ {\n            ans += arr(i)\n            val remainder = math.abs(arr(i) -\
    \ arr(i + 1))\n            i += 2\n            if ((remainder < 10) || (k == 0))\
    \ return ans\n        }\n        return ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnayff06j.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            ans += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val l = arr.length\n        val sums = mutable.ListBuffer.empty[Long]\n\
    \        var sum : Long = 0\n        for (i<- 0 until k) {\n            val n\
    \ = arr.drop(i).last\n            sum += n\n            sums += n\n        }\n\
    \        if (sums.size == k)\n            sums.sum\n        else\n           \
    \ sums.sum - sums.last\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjzn4f3v2.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjzn4f3v2.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (k == 0) 0\n        else {\n            var sum : Long\
    \ = 0\n            for (i <- 0 until k) {\n                sum += arr(i)\n   \
    \         }\n            return sum\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkis0xlyu.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (k : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        require(k <= arr.length, \"k exceeds length of arr\")\n\
    \        var sum = 0\n        arr.sortWith(_ < _)\n        for(i <- arr.indices)\
    \ {\n            sum = sum + arr(arr.length-(i+1))\n        }\n        return\
    \ sum + arr(k)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcxvb_yg5.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            sum = sum + arr(arr.length-(i+\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcxvb_yg5.scala:19:25 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mreturn\e[0m sum + arr(k)\n\e[31m\e[31m   |\e[0m        \
    \                 ^\e[0m\n\e[31m   |\e[0m                         Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val nums = arr.toIndexedSeq.sortBy(_.toInt).takeRight(k).toList\n\
    \        val sum = arr(k).toInt + arr(k - 1).toInt\n        nums zip nums.tail.filter(_\
    \ > sum) map { case (a,b) => a + b }.reduceLeft(_ + _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpatsg52op.scala:13:62\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = arr.toIndexedSeq.sortBy(_.toInt).takeRight(k).toList\n\e[31m\e[31m   |\e\
    [0m                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (k : Long)\n\
    \e[31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpatsg52op.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m = arr(k).toInt + arr(k - \e[31m1\e[0m).toInt\n\e[31m\e[31m   |\e[0m      \
    \                ^\e[0m\n\e[31m   |\e[0m                      Found:    (k : Long)\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpatsg52op.scala:14:37 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = arr(k).toInt\
    \ + arr(k - \e[31m1\e[0m).toInt\n\e[31m\e[31m   |\e[0m                       \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \  Found:    Long\n\e[31m   |\e[0m                                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpatsg52op.scala:15:49\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        nums zip nums.tail.filter(_\
    \ > sum) map { \e[33mcase\e[0m (a,b) => a + b }.reduceLeft(_ + _)\n\e[31m\e[31m\
    \   |\e[0m                                                 ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter x$1 of expanded function:\n\e[31m   |\e[0m   x$1 =>\
    \ \n\e[31m   |\e[0m     x$1\e[33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m\
    \   |\e[0m         \e[33mcase \e[0m(a, b) => \n\e[31m   |\e[0m           a + b\n\
    \e[31m   |\e[0m       }.\n\e["
  stdout: ''
  timestamp: 1659979797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var i : Long = 0\n    \
    \    var sum : Long = 0\n        for(x <- arr){\n            if(i == k){\n   \
    \             sum += x\n            }else if(i == k-1){\n                sum +=\
    \ x\n                sum -= (x/10l)*10\n            }else{\n                sum\
    \ += x\n            }\n            i+=1\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1rpnted6.scala:30)\n\tat Problem.main(tmp1rpnted6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Use scala.collection.mutable.ListBuffer to calculate\
    \ the sum.\n        // Use mutable list to calculate the index and keep track\
    \ of the last k elements.\n        var lastElement = arr.head\n        var index\
    \ = 0\n        var sum = 0\n        val buffer = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 0 until k) {\n            buffer.append(lastElement.drop(index).sum.toLong)\n\
    \            sum += lastElement.drop(index).sum\n            lastElement = lastElement.drop(index).last\n\
    \            index += 1\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfakq3b53.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfakq3b53.scala:20:38 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            buffer.append(lastElement.drop(index).sum.toLong)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value drop is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfakq3b53.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += lastElement.drop(index).sum\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfakq3b53.scala:21:31 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            sum += lastElement.drop(index).sum\n\e[31m\e[31m   |\e[0m     \
    \              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ drop is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfakq3b53.scala:22:38\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            lastElement =\
    \ lastElement.drop(index).last\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value drop\
    \ is not a member of Long\n5 errors found\n"
  stdout: ''
  timestamp: 1659979798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val first = arr.take(k).toList\n        val rest = arr.drop(k).toList\n\
    \        val first = first.sum\n        val rest = rest.reduce(_ addElem(_))\n\
    \        val first2 = first.toString.take(2).sum\n        val rest2 = rest.toString.drop(2).reduce(_\
    \ addElem(_))\n        val rest3 = rest2.toString.take(2).reduce(_ addElem(_))\n\
    \        val sum = first2 + rest3\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppocqp0eq.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfirst\e[0m = first.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfirst\
    \ is already defined as \e[33mvalue\e[0m \e[35mfirst\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppocqp0eq.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mrest\e[0m = rest.reduce(_ addElem(_))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppocqp0eq.scala:13:29 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mfirst\e[0m = arr.take(k).toList\n\e[31m\e\
    [31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m            \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppocqp0eq.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mrest\e\
    [0m = arr.drop(k).toList\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (k : Long)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmppocqp0eq.scala:18:51 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mrest2\e[0m = rest.toString.drop(\e\
    [31m2\e[0m).reduce(_ addElem(_))\n\e[31m\e[31m   |\e[0m                      \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                 value addElem is not a member of "
  stdout: ''
  timestamp: 1659979798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val len = arr.size\n        var sum = 0\n        var sum2\
    \ = 0\n        var i = 0\n        while(i < k){\n            if(arr(i).toString().length\
    \ < 2){\n                i += 1\n                continue\n            }\n   \
    \         sum += arr(i)\n            sum2 += arr(i).toLong * arr(i).toLong\n \
    \           i += 1\n        }\n        val twoSum = sum2 - sum * sum\n       \
    \ return sum + twoSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4007vj0.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz4007vj0.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpz4007vj0.scala:23:17 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m            sum2 += arr(i).toLong * arr(i).toLong\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList // not very performant\n        val\
    \ result = {\n            val res = arr.head\n            val newRes = res.take(k).toList\n\
    \            val oldRes = res.drop(k).toList\n            newRes +: oldRes.sum\n\
    \        }\n        require(k <= arr.length)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiyckvhwz.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList \e\
    [34m// not very performant\e[0m\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty) {\n            return 0\n        }\n  \
    \      var ans = 0.0\n        var i = k\n        for (elem <- arr until arr.last){\n\
    \            while (i >= 2 && (elem.toString.substring(0,i).reverse.charAt(0)-'0')%10\
    \ != 0){\n                ans += elem.toDouble\n                i -= 1\n     \
    \       }\n            i -= 1\n        }\n        return ans.toLong\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp20i2cil3.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (elem <- arr until arr.last){\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \ value until is not a member of List[Long] - did you mean arr.unzip?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        require(arr.nonEmpty, \"List can not be empty\")\n     \
    \   require(k <= arr.length, \"K cannot be more than the length of the array\"\
    )\n        val arr = arr.tail\n        var sum = 0l\n        val m = arr.head\n\
    \        var i = 0\n        var j = 1\n        while (i < arr.length) {\n    \
    \        if (j < arr.length && arr(i) == arr(j)) {\n                j+=1\n   \
    \         }\n            else {\n                sum+=m\n                if (j==k)\n\
    \                    break\n                j+=1\n            }\n            i+=1\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprqrvcieu.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.tail\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprqrvcieu.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      val s = scala.collection.mutable.Map[Int, Int]()\n      for\
    \ (i <- 0 to arr.size - k) {\n        val num = arr(i).toString.toLong\n     \
    \   val l = s.find(num).map(a => a + 1)\n        if (l.isEmpty) {\n          s(num)\
    \ = 1\n        } else {\n          val value = l(s).get\n          s(num) = (1\
    \ + value).toLong\n        }\n      }\n      s.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx5p4ot_1.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m      \e[33mfor\e[0m (i <- \e\
    [31m0\e[0m to arr.size - k) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Long\n\e[31m   |\e[0m     \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx5p4ot_1.scala:16:23 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = s.find(num).map(\e[36ma\e[0m =>\
    \ a + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (num : Long)\n\e[31m   |\e[0m  \
    \                     Required: ((Int, Int)) => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx5p4ot_1.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = s.find(num).map(\e\
    [36ma\e[0m => a + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \              ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Int, Int),\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx5p4ot_1.scala:18:12 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          s(num) = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^\e[0m\n\e[31m   |\e[0m            Found:    (num : Long)\n\e[31m\
    \   |\e[0m            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpx5p4ot_1.scala:20:22 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m          \e[33mval\e[0m \e[36mvalue"
  stdout: ''
  timestamp: 1659979797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var last = 0\n        for (i<-0 until\
    \ arr.length) {\n            if (last + 1 >= arr.length) last = i\n          \
    \  else {\n                val first = last + 1\n                if (first <=\
    \ i) sum = sum + arr(first) - arr(last)\n                else sum = sum + arr(last)\
    \ - arr(first)\n                last = i\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwe7zxd9t.scala:19:38\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m\
    \ (first <= i) sum = sum + arr(first) - arr(last)\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                      Found:    Long\n\e[31m   |\e[0m\
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpwe7zxd9t.scala:20:27 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33melse\e[0m sum = sum + arr(last)\
    \ - arr(first)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        def twoDigit(index : Long) : Boolean = index % 10 == index\
    \ % 100\n        def addTwoDigit(num : Long, index : Long) : Long = {\n      \
    \      val temp = index.toInt\n            if (twoDigit(index))\n            \
    \    num.toLong + temp.toLong\n            else\n                num.toLong *\
    \ 10 + temp.toLong\n        }\n        val res = arr.filter(_ <= k).toList.sorted\n\
    \        val res = res.takeWhile(_ < k).toList\n        val res = res.map(addTwoDigit(_,\
    \ 0))\n        val res = res.reduceLeft((a, b) => a + b)\n        res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjy4lnzs.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = res.takeWhile(_\
    \ < k).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mres is already defined as \e[33mvalue\e[0m \e[35mres\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcjy4lnzs.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = res.map(addTwoDigit(_, \e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mres is already defined as \e[33mvalue\e[0m \e[35mres\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcjy4lnzs.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = res.reduceLeft((\e[36ma\e[0m,\
    \ \e[36mb\e[0m) => a + b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mres is already defined as \e[33mvalue\e[0m \e[35mres\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcjy4lnzs.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    (res : List[Long])\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val n = arr.length\n        val arr = arr.sortWith(_ > _)\n\
    \        val res = 0\n        for (i<- 0 until k) {\n            res = res + arr(i)\n\
    \        }\n        return res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu1usvz5t.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ > _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu1usvz5t.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpu1usvz5t.scala:17:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            res = res\
    \ + arr(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Reassignment to val res\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        for ( x <- arr.slice(1, k) ) sum +=\
    \ x\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5vr11lp4.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m ( x <-\
    \ arr.slice(\e[31m1\e[0m, k) ) sum += x\n\e[31m\e[31m   |\e[0m               \
    \                 ^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty) return 0\n        val m = math.min(k, arr.length)\n\
    \        val sum = arr diff arr.drop(m)\n        val sum1 = arr.take(m)\n    \
    \    val sum2 = arr.drop(m)\n        val result = sum.zip(sum1).map(_ + _).zip(sum2).map(_\
    \ + _)\n        return result.foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66_0olu8.scala:15:36\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m = arr diff arr.drop(m)\n\e[31m\e[31m   |\e[0m                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                    Found:   \
    \ (m : Long)\n\e[31m   |\e[0m                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66_0olu8.scala:16:28\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msum1\e\
    [0m = arr.take(m)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Found:    (m : Long)\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp66_0olu8.scala:17:28 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msum2\e[0m = arr.drop(m)\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               Found:    (m : Long)\n\e[31m   |\e[0m                        \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.length\n        val max = arr.drop(k).foldRight(0)((a,\
    \ b) => if (b > a) b else a)\n        (max.toLong + arr.take(k).filter(_ % 10\
    \ == 0).sum).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbazbdr9k.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = arr.drop(k).foldRight(\e[31m0\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e\
    [0m (b > a) b \e[33melse\e[0m a)\n\e[31m\e[31m   |\e[0m                      \
    \     ^\e[0m\n\e[31m   |\e[0m                           Found:    (k : Long)\n\
    \e[31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbazbdr9k.scala:14:71 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = arr.drop(k).foldRight(\e\
    [31m0\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e[0m (b > a) b \e[33melse\e\
    [0m a)\n\e[31m\e[31m   |\e[0m                                                \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                      Found:    (a : Long)\n\e[31m   |\e[0m                 \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbazbdr9k.scala:15:31 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (max.toLong + arr.take(k).filter(_ % \e[31m10\e\
    [0m == \e[31m0\e[0m).sum).toLong\n\e[31m\e[31m   |\e[0m                      \
    \         ^\e[0m\n\e[31m   |\e[0m                               Found:    (k :\
    \ Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val sum = 0\n        val twoToK = math.max(0, k - arr.length)\n\
    \        arr.sliding(twoToK).\n                map { i => sum + i }.\n       \
    \         sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17deke8j.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        arr.sliding(twoToK).\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \            Found:    (twoToK : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp17deke8j.scala:16:31\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                map\
    \ { \e[36mi\e[0m => sum + i }.\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m  (x: String): String\n\e[31m   |\e[0m match arguments ((i : List[Long]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.map(_.toString.length).max\n        val m =\
    \ arr.take(k).map(_.toString.length).max\n        return arr.map(_.toString.substring(0,\
    \ m)).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk8prrze9.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = arr.take(k).map(_.toString.length).max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpk8prrze9.scala:15:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mreturn\e[0m arr.map(_.toString.substring(\e[31m0\e[0m, m)).sum\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                No implicit Ordering defined for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                where:    B is a type variable with constraint\
    \ >: String\n\e[31m   |\e[0m                .\n2 errors found\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = 0\n        val counter = new mutable.HashSet[Long]()\n\
    \        for (i <- 0 until arr.length) {\n            val value = arr(i)\n   \
    \         val remainder = value % 10\n            if (counter.size() > 0 && counter.contains(remainder))\
    \ {\n                result += value\n            } else {\n                if\
    \ (remainder >= k) {\n                    result += value\n                  \
    \  counter.add(remainder)\n                }\n            }\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1z_joy0v.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1z_joy0v.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                result +=\
    \ value\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value += is not a member of Int - did you mean result.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1z_joy0v.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    result += value\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value +=\
    \ is not a member of Int - did you mean result.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Your code here\n        val m = arr.length\n        val\
    \ n = k\n        val arr = arr.toList\n        val max = arr.take(n)\n       \
    \ var sum = 0L\n        var i = 0\n        var j = 1\n        while (i < n &&\
    \ j < m) {\n            if (arr(i) >= arr(j)) {\n                sum = sum + arr(i)\n\
    \                i += 1\n            }\n            else {\n                sum\
    \ = sum + arr(j)\n                j += 1\n            }\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfy4ka7su.scala:16:18 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val newArr  = arr.drop(k)\n        val oneDArr : List[Long]\
    \ = newArr.filter(_ % 10L == 0)\n        val twoDArr : List[Long] = newArr.filter(_\
    \ % 10L != 0)\n        val oneD : List[Long] = oneDArr.reverse.sliding(2).map(_.sum)\n\
    \        val twoD : List[Long] = twoDArr.reverse.sliding(2).map(_.sum)\n     \
    \   oneD.getOrElse(0) + twoD.getOrElse(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p9uy00w.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewArr\e\
    [0m  = arr.drop(k)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               Found:    (k : Long)\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_p9uy00w.scala:16:62 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36moneD\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = oneDArr.reverse.sliding(\e[31m2\e[0m).map(_.sum)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Iterator[Long]\n\
    \e[31m   |\e[0m                                Required: List[Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p9uy00w.scala:17:62 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mtwoD\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = twoDArr.reverse.sliding(\e[31m2\e[0m).map(_.sum)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Iterator[Long]\n\
    \e[31m   |\e[0m                                Required: List[Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_p9uy00w.scala:18:13 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        oneD.getOrElse(\e[31m0\e[0m) + twoD.getOrElse(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value getOrElse is not a member of List[Long]\n4 errors found\n"
  stdout: ''
  timestamp: 1659979807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val mins = arr.take(k).foldLeft((0l, 0l)) {\n          \
    \  case ((min, sum), (element, index)) =>\n                if (index >= k) (min._1\
    \ + element, min._2 + 1)\n                else if (element < min._1) (min._1,\
    \ element)\n                else (min._2, min._1 + element)\n        }\n\n   \
    \     val maxs = arr.takeRight(k).foldLeft((0l, 0l)) {\n            case ((max,\
    \ sum), (element, index)) =>\n                if (index >= k) ((max._1 - element,\
    \ max._2), max._1 + element)\n                else if (element > max._1) ((max._1,\
    \ element), max)\n                else ((max._2, max._1 - element), max._2)\n\
    \        }\n\n        val totalSum = mins._2 + maxs._2 + arr(k).toLong\n     \
    \   mins._1 + maxs._1 + totalSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ij99dtj.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmins\e\
    [0m = arr.take(k).foldLeft((\e[31m0l\e[0m, \e[31m0l\e[0m)) {\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ij99dtj.scala:15:26\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e\
    [0m (index >= k) (min._1 + element, min._2 + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue >= is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ij99dtj.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (index >= k) (min._1 +\
    \ element, min._2 + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ij99dtj.scala:15:55\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e\
    [0m (index >= k) (min._1 + element, min._2 + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        value _2 is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ij99dtj.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (element\
    \ < min._1) (min._1, element)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of Any, but could be ma"
  stdout: ''
  timestamp: 1659979812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill this in.\n        arr.sortWith(_ < (arr(1) %  1000000)\
    \ == -1) \n        var sum : Long = 0\n        for (i <- 0 until k) {\n      \
    \      sum = sum + arr(arr.length - i - 1)\n        }\n        return sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpb4ffbvdy.scala:14:21 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        arr.sortWith(_ < (arr(\e[31m1\e[0m) %  \e[31m1000000\e\
    [0m) == -\e[31m1\e[0m) \n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4ffbvdy.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (k : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        for (element <- arr.getRange(0, k))\
    \ {\n            sum += element.toLong\n        }\n        sum += arr(k)\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvfhgcrqi.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (element <- arr.getRange(\e[31m0\e\
    [0m, k)) {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value getRange is not a member of List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvfhgcrqi.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sum += arr(k)\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfhgcrqi.scala:17:19 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sum += arr(k)\n\e[31m\e[31m   |\e[0m        \
    \           ^\e[0m\n\e[31m   |\e[0m                   Found:    (k : Long)\n\e\
    [31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val hashSet = mutable.Set[Long]()\n        var sum = 0L\n\
    \        for(i<- k to arr.size){\n            val element = arr(i)\n         \
    \   val first = element.toString.substring(0, 1)\n            val second = element.toString.substring(1,\
    \ 2)\n            if(hashSet.contains(first + second)) sum+=element\n        \
    \    hashSet += (first + second)\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7dgdk67h.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7dgdk67h.scala:16:30 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36melement\e[0m = arr(i)\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Found:    (i : Long)\n\e[31m   |\e[0m            \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr1 = arr.take(k.toInt).toArray\n        val arr2 =\
    \ arr.drop(k.toInt).toArray\n        var sum = 0\n        for(i <- 0 until arr1.length){\n\
    \            val digit1 = arr1(i).toInt\n            val digit2 = arr2(i).toInt\n\
    \            sum += digit1 * digit2\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphbfotd9c.scala:24)\n\tat Problem.main(tmphbfotd9c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val len = arr.size\n        val arr = arr.sortWith(_ < _)\n\
    \        val sum = 0\n        var i = 0\n        for(j <- k to len - k){\n   \
    \         sum += arr(i).toLong\n            i += 1\n        }\n        sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8vjwr4rq.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vjwr4rq.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += arr(i).toLong\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val minPairs = arr.zip(arr.drop(k)).filter(_._2 < _._2).length\n\
    \        val sum = (arr min k).sum\n        minPairs * sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5sde1jf.scala:13:40\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminPairs\e\
    [0m = arr.zip(arr.drop(k)).filter(_._2 < _._2).length\n\e[31m\e[31m   |\e[0m \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                          Found:    (k : Long)\n\e[31m   |\e[0m             \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpw5sde1jf.scala:13:53 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminPairs\e[0m = arr.zip(arr.drop(k)).filter(_._2\
    \ < _._2).length\n\e[31m\e[31m   |\e[0m                                      \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \   value _2 is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw5sde1jf.scala:14:27 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mval\e[0m \e[36msum\e[0m = (arr min k).sum\n\e[31m\e[31m   |\e[0m\
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \ Found:    (k : Long)\n\e[31m   |\e[0m                           Required: Ordering[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val r = new mutable.ArrayBuffer(0)\n        var i = 0\n\
    \        for (x <- arr) {\n            if (i + 1 < k) {\n                r.append(x\
    \ + arr(i + 1))\n                i += 1\n            } else {\n              \
    \  if (r.nonEmpty) {\n                    r += x\n                }\n        \
    \    }\n        }\n        if (r.nonEmpty) {\n            r += arr(i)\n      \
    \  }\n        r.toList.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsep2l2ua.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var maxIndex = 0\n        for (i<-\
    \ arr.indices) {\n            if(i < k) sum += arr(i)\n            if(arr(i) >\
    \ arr(maxIndex)) maxIndex = i\n        }\n        return sum + arr(maxIndex)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb2bk_yz4.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(i < k) sum += arr(i)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.sortWith(_ < _) // sort descending\n     \
    \   val res = new mutable.LinkedList[Long]()\n        var sum = 0\n        for(i\
    \ <- 0 to arr.length - k){\n            val cur = arr(i)\n            if(i % 2\
    \ == 0){\n                sum += cur\n                val cur2 = arr(i - 1)\n\
    \                val cur3 = arr(i - 2)\n                val cur4 = arr(i - 3)\n\
    \                if(cur2 == 0 || cur3 == 0 || cur4 == 0){\n                  \
    \  val l = if (i == 0){ res(0) } else { res(res.size - 1) }\n                \
    \    l += cur\n                    res.add(cur)\n                }\n         \
    \       else{\n                    val l = if (i == 0){ res(0) } else { res(res.size\
    \ - 1) }\n                    l += cur\n                    l += cur2\n      \
    \              res.add(cur)\n                    l += cur3\n                 \
    \   l += cur4\n                }\n            }\n            else{\n         \
    \       sum += cur\n                res.add(cur)\n            }\n        }\n \
    \       val sum = res.mkString(\"\").trim().toLong\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpil06dl93.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = res.mkString(\e\
    [31m\"\"\e[0m).trim().toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvariable\e[0m \e[35msum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpil06dl93.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_ < _) \e[34m//\
    \ sort descending\e[0m\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m\
    \   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpil06dl93.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mres\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val digits = arr diff arr.take(k).toList\n        val result\
    \ = (digits\n            .groupBy(x => x.toString.toInt)\n            .mapValues(x\
    \ => x.size)\n            .foldLeft(0l) { (acc, element) => acc + (element._2\
    \ * Math.pow(10, element._1))})\n        result + arr.take(k).sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp54w7is7d.scala:13:39\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = arr diff arr.take(k).toList\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    Found:    (k : Long)\n\e[31m   |\e[0m                                   \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp54w7is7d.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            .foldLeft(\e[31m0l\e\
    [0m) { (acc, element) => acc + (element._2 * Math.pow(\e[31m10\e[0m, element._1))})\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    Double\n\
    \e[31m   |\e[0m                                              Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp54w7is7d.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        result + arr.take(k).sum\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (k : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var i = 0\n        for(i = k; i <=\
    \ arr.length && i < arr.length; i += k) {\n            sum += arr(i)\n       \
    \ }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5mj_mrc6.scala:15:14 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i = k; i <= arr.length && i <\
    \ arr.length; i += k) {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e\
    [0m              ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp5mj_mrc6.scala:15:52 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mfor\e[0m(i = k; i <= arr.length && i < arr.length; i +=\
    \ k) {\n\e[31m\e[31m   |\e[0m                                                \
    \    ^\e[0m\n\e[31m   |\e[0m                                            '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5mj_mrc6.scala:15:60\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i\
    \ = k; i <= arr.length && i < arr.length; i += k) {\n\e[31m\e[31m   |\e[0m   \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                            '<-' expected, but ')' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp5mj_mrc6.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i = k; i <= arr.length && i <\
    \ arr.length; i += k) {\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e"
  stdout: ''
  timestamp: 1659979811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val n = arr.size\n        val sum = 0\n        val lastDigits\
    \ = 0 // last two digits of the sum\n        val twoDigitSums = mutable.MutableListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            if (i < (k-1)) {\n              \
    \  sum += arr(i)\n                val cur = math.pow(10, math.ceil(math.log10(arr.head.toDouble/arr(i)).toDouble))\n\
    \                val digits = math.floor(cur.toDouble / 10)\n                lastDigits\
    \ += digits\n                twoDigitSums += digits\n            }\n         \
    \   else if (i == k) {\n                sum += arr.last\n                lastDigits\
    \ += math.ceil(math.log10(arr.last.toDouble).toDouble)\n            }\n      \
    \  }\n        val sumTwoDigits = twoDigitSums.sum\n        val twoDigitSum = lastDigits\
    \ + sumTwoDigits\n        val res = (sum + twoDigitSum).toLong\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2urmm8g.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mtwoDigitSums\e[0m = mutable.MutableListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpf2urmm8g.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += arr(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpf2urmm8g.scala:22:27 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                lastDigits += digits\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not a member of Int\
    \ - did you mean lastDigits.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf2urmm8g.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                sum += arr.last\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf2urmm8g.scala:27:27 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                lastDigits += math.ceil(math.log10(arr.last.toDouble).toDouble)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \      value += is not a member of Int - did you mean lastDigits.!=?\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.length < 1 || arr.length < k) return 0L\n      \
    \  var sum = 0L\n        var i = 0L\n        for (elem <- arr) {\n           \
    \ sum += elem\n            i += 1\n            if (i < k && elem.toString.length\
    \ < 3) sum -= 10L\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvh46jps2.scala:24)\n\tat Problem.main(tmpvh46jps2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        def kthMax(n : Long) : Long = {\n            val max = arr.take(k)\n\
    \            val maxIndex = arr.indexOf(max)\n            if (maxIndex < k) kthMax(maxIndex\
    \ + 1)\n            else max(0)\n        }\n        return arr.map(n => kthMax(n)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvk4ij_1v.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36mmax\e[0m = arr.take(k)\n\e[31m\e[31m   |\e[0m                            \
    \   ^\e[0m\n\e[31m   |\e[0m                               Found:    (k : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val sum = arr.foldLeft(0l) { (sum, e) => sum + e }\n   \
    \     if (arr.length > k) {\n            arr.take(k).foldLeft(sum) { (sum, e)\
    \ => sum + e.toString.substring(1, 2) }\n        } else {\n            sum\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp14gancgd.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            arr.take(k).foldLeft(sum)\
    \ { (\e[36msum\e[0m, \e[36me\e[0m) => sum + e.toString.substring(\e[31m1\e[0m,\
    \ \e[31m2\e[0m) }\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m  \
    \ |\e[0m                     Found:    (k : Long)\n\e[31m   |\e[0m           \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp14gancgd.scala:15:52 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            arr.take(k).foldLeft(sum) { (\e[36msum\e[0m, \e[36me\e[0m)\
    \ => sum + e.toString.substring(\e[31m1\e[0m, \e[31m2\e[0m) }\n\e[31m\e[31m  \
    \ |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = arr.sum\n        if (result.length > k) {\n\
    \            val numOfDigits = result.take(k).length\n            val remainder\
    \ = result.drop(numOfDigits)\n            val sum = remainder.sum\n          \
    \  val remainderWithTwoDigits = remainder.map(_.map(x => if (x < 10) 0l\n    \
    \        else if (x >= 10) 10l\n            else x).toLong)\n            val sumWithTwoDigits\
    \ = remainderWithTwoDigits.sum\n            val sumWithTwoDigitsString = sumWithTwoDigits.toString\n\
    \            val twoDigits = numOfDigits * \"0\" + sumWithTwoDigitsString\n  \
    \          result + twoDigits\n        }\n        else result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvryk8jtl.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (result.length > k) {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ length is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvryk8jtl.scala:15:37\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumOfDigits\e[0m = result.take(k).length\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           value take is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpvryk8jtl.scala:16:35 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mremainder\e[0m = result.drop(numOfDigits)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value drop is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659979812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if(arr.isEmpty)\n            return 0\n        var sum =\
    \ 0\n        var left = 0\n        val arr = arr.toList\n        for(i <- arr.drop(k))\n\
    \        {\n            if(i.toString.length < 2)\n                continue\n\
    \            left += 1\n            sum += i.toLong\n        }\n        return\
    \ sum + addElements(arr.take(k), left - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv37g28c6.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val maxNum = arr.filter(_ < 100).last\n        if (k > arr.length)\n\
    \            0\n        else {\n            var res = maxNum\n            var\
    \ idx = k\n            while (idx < arr.length) {\n                var next =\
    \ arr(idx+1) - 100\n                if (next > res)\n                    res =\
    \ next\n                idx += 1\n            }\n            res\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsh187xu5.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mvar\e[0m\
    \ \e[36mnext\e[0m = arr(idx+\e[31m1\e[0m) - \e[31m100\e[0m\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Found:    Long\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        def getSum (arr : List[Long], sum : Long, index : Long,\
    \ arrSize : Int) : Long = {\n            if (index == arrSize) {\n           \
    \     sum\n            } else {\n                getSum (arr, (sum + arr(index)),\
    \ index + 1, arrSize)\n            }\n        }\n        val arrSize = arr.length\n\
    \        val sum = 0L\n        getSum (arr, sum, 0, k)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4dfhkgcn.scala:17:40\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                getSum (arr,\
    \ (sum + arr(index)), index + \e[31m1\e[0m, arrSize)\n\e[31m\e[31m   |\e[0m  \
    \                                      ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                             Found:    (index : Long)\n\e[31m   |\e[0m      \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4dfhkgcn.scala:22:29 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        getSum (arr, sum, \e[31m0\e[0m, k)\n\e[31m\e\
    [31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m            \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr filter (_ > 0) sortWith ((_,b) => b) toList\n\
    \        var sum = 0L\n        var currentSum = 0L\n        var previousSum =\
    \ 0L\n        for( _ <- arr.drop(k) )\n        {\n            if (arr.length >\
    \ (k + 1))\n            {\n                currentSum += arr(arr.length - 1)\n\
    \                sum += 1\n                currentSum -= arr(k)\n            \
    \    sum += 1\n            }\n            else\n            {\n              \
    \  currentSum += arr(0)\n                sum += 1\n            }\n           \
    \ previousSum = currentSum\n        }\n        return sum * (previousSum / 10)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1zhjk0_x.scala:13:65 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr filter (_\
    \ > \e[31m0\e[0m) sortWith ((_,\e[36mb\e[0m) => b) toList\n\e[31m\e[31m   |\e\
    [0m                                                                 ^\e[0m\n\e\
    [31m   |\e[0m                          expression expected but \e[31mend of statement\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1zhjk0_x.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr filter (_ > \e[31m0\e[0m) sortWith ((_,\e[36mb\e[0m) =>\
    \ b) toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m  \
    \                Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Initialize sum \n        var sum = 0\n        // Count\
    \ number of digits in first k elements of arr\n        var cnt = 0\n        for\
    \ (i<- 0 until k ) {\n            cnt = (arr(i).asDigit().toString.length) \n\
    \        }\n        // Add elements with 2 digits from the first k elements of\
    \ arr\n        for (i<- 0 until k ) {\n            sum = sum + arr(i).asDigit().toString.substring(0,cnt)\n\
    \        }\n        // Return sum\n        sum.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvwaz_0kd.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m0\e[0m until k ) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m\
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvwaz_0kd.scala:18:26 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            cnt = (arr(i).asDigit().toString.length) \n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                value asDigit is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvwaz_0kd.scala:21:25 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m until k ) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (k : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvwaz_0kd.scala:22:31\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            sum = sum + arr(i).asDigit().toString.substring(\e\
    [31m0\e[0m,cnt)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value asDigit is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvwaz_0kd.scala:25:8 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        sum.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val sum = 0l\n        val digits = arr.take(k).toList\n\
    \        for(i <- 0 until digits.size) {\n            sum += digits(i)\n     \
    \   }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuca08q6b.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = arr.take(k).toList\n\e[31m\e[31m   |\e[0m                              ^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (k : Long)\n\e[31m\
    \   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpuca08q6b.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += digits(i)\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        require(k <= arr.length, \"k should be in range [1, len(arr)]\
    \ but k = \" + k);\n        val l = new mutable.ListBuffer[Long]();\n        for\
    \ (i <- 1 to arr.length){\n            val num = arr(i);\n            if (num\
    \ < 10){\n                l.append(num);\n            } else {\n             \
    \   l.append(num % 10);\n                l.append(num / 10);\n            }\n\
    \        }\n        val max = l.max\n        if (l.length < k){\n            return\
    \ max;\n        }\n        val i = l.length - k\n        for (j <- k to i by -1){\n\
    \            val sum = l.sum\n            val remainder = sum % (10 * j);\n  \
    \          val leftSum = l.sum\n            val rightSum = l.sum\n           \
    \ if (remainder < 10 - leftSum / 10 * j || remainder < 10 - rightSum / 10 * j){\n\
    \                return (left + right);\n            }\n            val a = leftSum\
    \ / 10 * j\n            val b = rightSum / 10 * j\n            if (remainder <\
    \ b - a){\n                return (left + right);\n            }\n        }\n\
    \        return max;\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzz9qbts8.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]();\n\e[31m\e[31m   |\e[0m              \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzz9qbts8.scala:35:24\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                \e[33mreturn\e\
    [0m (left + right);\n\e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: left\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzz9qbts8.scala:40:24 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                \e[33mreturn\e[0m (left + right);\n\e\
    [31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                Not found: left\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      val n = arr.size\n      var total = 0\n      for (i <- 1 to\
    \ k by 2)\n          if (arr.length >= i && arr(i).toString.length > 1)\n    \
    \          total += arr(i)\n      total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9yfwg4ac.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m      \e[33mfor\e[0m (i <- \e\
    [31m1\e[0m to k by \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^\e\
    [0m\n\e[31m   |\e[0m                     Found:    (k : Long)\n\e[31m   |\e[0m\
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9yfwg4ac.scala:17:20 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m              total += arr(i)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value += is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val counts = mutable.ListBuffer.empty[Int]\n        for\
    \ (elem <- arr.take(k)) counts += elem.digits\n        counts sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqxavkilj.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        counts sum\n\e[31m\e[31m   |\e[0m           \
    \       ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxavkilj.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxavkilj.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (elem\
    \ <- arr.take(k)) counts += elem.digits\n\e[31m\e[31m   |\e[0m               \
    \               ^\e[0m\n\e[31m   |\e[0m                              Found:  \
    \  (k : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.take(k).toList\n\
    \        if (k == n) {\n            (arr(0) + arr2(0)) + (arr(1) +arr2(1)) + (arr(2)\
    \ + arr2(2)) + (arr(3) +arr2(3)) + (arr(4) +arr2(4)) + (arr(5) +arr2(5)) + (arr(6)\
    \ +arr2(6)) + (arr(7) +arr2(7)) + (arr(8) +arr2(8)) + (arr(9) +arr2(9))\n    \
    \    } else {\n            var result : Long = 0\n            var j = 0\n    \
    \        for (i <- 0 until k) {\n                if (j == n-1) {\n           \
    \         result += arr(j)\n                }\n                else {\n      \
    \              result += arr2(j) + arr2(i+1)\n                }\n            \
    \    j += 1\n            }\n            result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppjrt3nxj.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr2\e\
    [0m = arr.take(k).toList\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (k : Long)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppjrt3nxj.scala:20:30 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m (i <- \e[31m0\e[0m until k)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              Found:    (k : Long)\n\e[31m   |\e[0m         \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.take(k)\n        val res = arr.map(x => math.pow(10,\
    \ math.max(0, math.abs(x - 1)))).sum\n        arr ++ Array(res)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpskac_o4p.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.take(k)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val res = arr.map(x => if (x % 10 == 0) x else x + 10).takeRight(k).sum\n\
    \        arr(k)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwaovitrb.scala:13:73\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m = arr.map(\e[36mx\e[0m => \e[33mif\e[0m (x % \e[31m10\e[0m == \e[31m0\e[0m)\
    \ x \e[33melse\e[0m x + \e[31m10\e[0m).takeRight(k).sum\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwaovitrb.scala:14:12\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        arr(k)\n\e[31m\e[31m\
    \   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    (k : Long)\n\
    \e[31m   |\e[0m            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        val size = arr.size\n \
    \       val resList = mutable.ArrayBuffer(k)\n        var sum = 0\n        while(resList.size\
    \ != size) {\n            sum += arr(resList(0))\n            resList -= 1\n \
    \       }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa11n2hgu.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresList\e[0m = mutable.ArrayBuffer(k)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpa11n2hgu.scala:18:16 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            sum += arr(resList(\e[31m0\e[0m))\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val ans = 0.toLong\n        val result = new mutable.PriorityQueue[Int]()\n\
    \        result.addAll(arr.getOrElse(Array.empty[Long], Array.empty[Long]).reverse.take(k))\n\
    \        while(result.nonEmpty) {\n            val value = result.poll()\n   \
    \         ans += value\n            result.filter { x => x <= value }.foldLeft(0l)\
    \ { (sum, v) => sum + v }\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2o45m0e8.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2o45m0e8.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            ans += value\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean ans.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val ans = arr(k-1).toLong + arr(k).toLong\n        for (i\
    \ <- k+1 until arr.size) {\n            val summ = arr(i-1).toLong + arr(i).toLong\n\
    \            if (summ > ans) ans = summ\n        }\n        ans\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6y72eqh7.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mans\e\
    [0m = arr(k-\e[31m1\e[0m).toLong + arr(k).toLong\n\e[31m\e[31m   |\e[0m      \
    \                ^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6y72eqh7.scala:13:40 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = arr(k-\e[31m1\e\
    [0m).toLong + arr(k).toLong\n\e[31m\e[31m   |\e[0m                           \
    \             ^\e[0m\n\e[31m   |\e[0m                                        Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6y72eqh7.scala:15:27\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36msumm\e[0m = arr(i-\e[31m1\e[0m).toLong + arr(i).toLong\n\e[31m\e[31m   |\e\
    [0m                           ^^^\e[0m\n\e[31m   |\e[0m                      \
    \     Found:    Long\n\e[31m   |\e[0m                           Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6y72eqh7.scala:15:45\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36msumm\e[0m = arr(i-\e[31m1\e[0m).toLong + arr(i).toLong\n\e[31m\e[31m   |\e\
    [0m                                             ^\e[0m\n\e[31m   |\e[0m      \
    \                                       Found:    (i : Long)\n\e[31m   |\e[0m\
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp6y72eqh7.scala:16:32 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (summ > ans) ans = summ\n\e\
    [31m\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        def partition(arr : List[Long], k : Long) : List[List[Long]]\
    \ = {\n            val leftArray = arr.filter(_ < k)\n            val rightArray\
    \ = arr.filter(_ >= k)\n            leftArray.partition(l => rightArray.contains(l))\n\
    \        }\n\n        val leftArray = arr.filter(_ < k)\n        val rightArray\
    \ = arr.filter(_ >= k)\n        leftArray.foldLeft(0l) { (sum, element) => sum\
    \ + (element % 10 + element / 10 * (10 - element % 10)) }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpevlp4k1m.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            leftArray.partition(\e\
    [36ml\e[0m => rightArray.contains(l))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31m(\e[0mList[\e[1m\e[31mLong\e\
    [0m\e[1m\e[31m]\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mList[Long]\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m            Required: List[List[Long]\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arrCopy = arr.slice(0,k)\n        val n = arrCopy.last\n\
    \        val max = arrCopy.max\n\n        val arr1 = arrCopy.slice(1, k - 1).map(_\
    \ * 10 + _)\n        val arr2 = arrCopy.slice(k - 1, 1)\n\n        if (n > max)\n\
    \            addElements(arr1, k - 1) + addElements(arr2, k - 1) + max - 1\n \
    \       else max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmhw4o06n.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marrCopy\e\
    [0m = arr.slice(\e[31m0\e[0m,k)\n\e[31m\e[31m   |\e[0m                       \
    \           ^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmhw4o06n.scala:17:36\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr1\e\
    [0m = arrCopy.slice(\e[31m1\e[0m, k - \e[31m1\e[0m).map(_ * \e[31m10\e[0m + _)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                    Found:    Long\n\e[31m   |\e[0m  \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpmhw4o06n.scala:17:47 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr1\e[0m = arrCopy.slice(\e\
    [31m1\e[0m, k - \e[31m1\e[0m).map(_ * \e[31m10\e[0m + _)\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmhw4o06n.scala:18:33 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36marr2\e[0m = arrCopy.slice(k\
    \ - \e[31m1\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    Long\n\e[31m   |\e[0m                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.sortWith(_ < (_ + 1l) == (_ + 1l))\n     \
    \   val first = arr.take(k)\n        val rest = arr.drop(k)\n        rest.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0c_p_di.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < (_ + \e[31m1l\e[0m) == (_ + \e[31m1l\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \           ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m\
    \ \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = arr(0).toLong\n        var digits : mutable.HashSet[Long]\
    \ = mutable.HashSet[Long](1l)\n        for (i <- 1 to k) {\n            val nextNum\
    \ = arr(i)\n            var currentDigit : Option[Long] = digits.get(nextNum.toLong)\n\
    \            currentDigit = currentDigit.flatMap(x => x % 10)\n            sum\
    \ = sum + nextNum * currentDigit.get\n            digits = digits + (nextNum *\
    \ currentDigit.flatMap(x => x % 10))\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwra5kaw_.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mdigits\e[0m : mutable.HashSet[\e\
    [35mLong\e[0m] = mutable.HashSet[\e[35mLong\e[0m](\e[31m1l\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwra5kaw_.scala:14:45\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e\
    [36mdigits\e[0m : mutable.HashSet[\e[35mLong\e[0m] = mutable.HashSet[\e[35mLong\e\
    [0m](\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwra5kaw_.scala:15:23 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to k) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (k : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwra5kaw_.scala:18:53 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            currentDigit = currentDigit.flatMap(\e[36mx\e\
    [0m => x % \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                             \
    \                        ^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                          Found:    Long\n\e[31m   |\e[0m                   \
    \                               Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var result : Long = 0\n        var sum : Long = 0\n    \
    \    var maxSum : Long = 0\n        var currentIndex : Long = 0\n        var currentSum\
    \ : Long = 0\n        var currentMaxSum : Long = 0\n        var minSum : Long\
    \ = 0\n        var maxIndex : Long = 0\n\n        while (currentIndex < arr.length)\
    \ {\n            val element = arr(currentIndex)\n            currentSum += element\n\
    \            if (currentIndex >= k) {\n                currentMaxSum = currentSum\n\
    \                currentIndex = k\n                currentMaxSum = element\n \
    \               currentSum = 0\n                currentMaxSum = element\n    \
    \        } else {\n                if (currentMaxSum < element) {\n          \
    \          currentMaxSum = element\n                    currentSum = element\n\
    \                }\n                currentIndex += 1\n            }\n       \
    \ }\n        sum = 0\n        arr.forall {\n            sum += it\n        }\n\
    \        minSum = math.min(sum, k.toLong)\n        maxSum = math.max(sum, k.toLong)\n\
    \        result = currentMaxSum + maxSum + minSum\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv3ldmomj.scala:23:30\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36melement\e[0m = arr(currentIndex)\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (currentIndex : Long)\n\e[31m   |\e[0m                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv3ldmomj.scala:41:16\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            sum += it\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpv3ldmomj.scala:41:19 ------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m            sum += it\n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\
    \e[31m   |\e[0m                   Not found: it\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sortWith( (x,y)\
    \ => x < y)\n        val twodigitsum = sorted.reduceLeft( (x,y) => x + y)\n  \
    \      val ktwodigitsum = k - twodigitsum\n        val result = ktwodigitsum *\
    \ ktwodigitsum / n\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvxzb2wph.scala:21)\n\tat Problem.main(tmpvxzb2wph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var currentElement: Long = 0\n    \
    \    for(element <- arr.take(k)) {\n            if(currentElement > 2999999999L)\
    \ {\n                sum += 1\n                currentElement = 0\n          \
    \  }\n            sum += element\n            currentElement += 1\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_x549ibh.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(element\
    \ <- arr.take(k)) {\n\e[31m\e[31m   |\e[0m                                ^\e\
    [0m\n\e[31m   |\e[0m                                Found:    (k : Long)\n\e[31m\
    \   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_x549ibh.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += element\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.take(k).length\n        val n = (arr.length\
    \ - k).abs.toInt\n        val result = arr.sliding(n + 1).flatten.map(_ * m).sum.toLong\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppox0n1gp.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = arr.take(k).length\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m\
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      var maxTwos = 0\n      var sum = 0\n      for (i <- 0 until\
    \ k) {\n        if (maxTwos == 0 && arr(i) <= 9l.toLong) {\n          sum += arr(i)\n\
    \        }\n        if (maxTwos != 0 && arr(i) <= 9l.toLong) {\n          sum\
    \ += arr(i) - 9l.toLong\n        }\n        if (maxTwos == 1 && arr(i) > 9l.toLong)\
    \ {\n          maxTwos = 0\n          sum += arr(i)\n        }\n        if (arr(i)\
    \ > 9l.toLong) {\n          maxTwos = 1\n          sum += arr(i) - 9l.toLong\n\
    \        }\n      }\n      return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfig70ax.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m      \e[33mfor\e[0m (i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (k : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpvfig70ax.scala:17:14 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m          sum += arr(i)\n\e[31m\e[31m   |\e[0m          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvfig70ax.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          sum += arr(i) - \e[31m9l\e[0m.toLong\n\e[31m\e\
    [31m   |\e[0m          ^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpvfig70ax.scala:24:14 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m          sum += arr(i)\n\e[31m\e[31m   |\e[0m          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvfig70ax.scala:28:14 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m          sum += arr(i) - \e[31m9l\e[0m.toLong\n\e[31m\e\
    [31m   |\e[0m          ^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a\
    \ member of Int - did you mean Int.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659979826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toArray\n        var sum = 0\n        var\
    \ max = 0\n        for(i <- 0 until k) {\n            if(arr(i) > max) max = arr(i)\n\
    \        }\n        for(i <- 0 until k) {\n            sum = (sum + arr(i)) %\
    \ 10\n        }\n        return sum + max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj1p5az5m.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toArray\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj1p5az5m.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj1p5az5m.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        var index = 0\n        while(index<k){\n\
    \            sum += arr(index)\n            index += 1\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4538w1ue.scala:23)\n\tat Problem.main(tmp4538w1ue.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val max = arr.take(k).last\n        val min = arr.drop(k).head\n\
    \        (max - min).max / 10\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdfmmu4w.scala:13:27\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = arr.take(k).last\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (k : Long)\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzdfmmu4w.scala:14:27 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = arr.drop(k).head\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (k : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzdfmmu4w.scala:15:24\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        (max - min).max /\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue / is not a member of Long => Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val digits = scala.math.ceil(math.log10(arr.last)).toInt\n\
    \        val results = (0 until k).map{i => addElements(arr.takeRight(i+1), k)}\n\
    \        return results.flatten.toLong + addElements(arr.takeRight(k), k-digits)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0sx5uhbg.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresults\e\
    [0m = (\e[31m0\e[0m until k).map{\e[36mi\e[0m => addElements(arr.takeRight(i+\e\
    [31m1\e[0m), k)}\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               Found:    (k : Long)\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp0sx5uhbg.scala:15:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mreturn\e[0m results.flatten.toLong + addElements(arr.takeRight(k),\
    \ k-digits)\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m\
    \   |\e[0mno given instance of type Long => IterableOnce[B] was found for parameter\
    \ asIterable of \e[33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mIterableOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]\n        var curSum\
    \ = 0\n        var curr = 0\n        var j = 0\n        var index = 0\n      \
    \  for(i <- 0 until k){\n            curr = 0\n            for(j => i < arr.length;\
    \ j++){\n                curr += arr(index)\n                index++\n       \
    \         i += 1\n            }\n            currSum += curr\n            i +=\
    \ 1\n        }\n        result.append(currSum)\n        result.toList.get(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuq41bebx.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m(j => i < arr.length; j++){\n\
    \e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m              \
    \    ')' expected, but '=>' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpuq41bebx.scala:20:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e\
    [0m(j => i < arr.length; j++){\n\e[31m\e[31m   |\e[0m                        \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \   pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq41bebx.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuq41bebx.scala:18:25 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k){\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuq41bebx.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m(j => i < arr.length; j++){\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0mvalue\
    \ foreach is not a member of Null, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[3"
  stdout: ''
  timestamp: 1659979830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val len = arr.size\n        if (k >= len) 0\n        else\
    \ {\n            val arr = arr.toList\n            var sum = 0\n            var\
    \ j = 0\n            while (j < k) {\n                val curr = arr(j)\n    \
    \            val next = (j + 1 < arr.size) ? arr(j + 1).toLong : 0\n         \
    \       val curChar = curr.toString.charAt(0)\n                val nextChar =\
    \ next.toString.charAt(0)\n                val tmp = (curChar - nextChar)\n  \
    \              if (tmp < 0) tmp else if (tmp == 0) sum += next\n             \
    \   j += 1\n            }\n            sum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplb9riogm.scala:16:22 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toStream\n        var sum = 0L\n        var\
    \ lastDigit = 0L\n        var lastDigitsSinceLast = 0L\n        var isOdd = 0L\n\
    \        arr.take(k).foreach(x => {\n            if (x % 2L != 0L) {\n       \
    \         sum += x\n                lastDigit = 0L\n                lastDigitsSinceLast\
    \ = 0L\n                isOdd = 1L\n            } else {\n                if ((lastDigit\
    \ + 1L) % 2L == 0L && !isOdd) {\n                    lastDigitsSinceLast += 1L\n\
    \                }\n                if ((lastDigit + 1L) % 2L != 0L && !isOdd)\
    \ {\n                    sum += x\n                    lastDigit = 0L\n      \
    \              lastDigitsSinceLast = 0L\n                    isOdd = 1L\n    \
    \            } else if ((lastDigit + 1L) % 2L == 0L && isOdd) {\n            \
    \        lastDigitsSinceLast += 1L\n                }\n            }\n       \
    \ })\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg_caizz4.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toStream\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val result = mutable.Buffer.empty[Long]\n\
    \        var sum = 0\n        var i = 0\n        while (i < arr.length && sum\
    \ + arr(i) < k) {\n            sum = sum + arr(i)\n            i += 1\n      \
    \  }\n        i = arr.size - 1\n        while i >= 0 && sum + arr(i) > k) {\n\
    \            sum = sum - arr(i)\n            i -= 1\n        }\n        if (i\
    \ < 0) {\n            i = 0\n        }\n        while (i < arr.length && sum +\
    \ arr(i) > k) {\n            sum = sum - arr(i)\n            i += 1\n        }\n\
    \        result = sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps2b0r7el.scala:22:40 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mwhile\e[0m i >= \e[31m0\e[0m && sum + arr(i)\
    \ > k) {\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\
    \e[31m   |\e[0m                                        'do' expected, but ')'\
    \ found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps2b0r7el.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps2b0r7el.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Buffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmps2b0r7el.scala:33:15 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        result = sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val result\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty) return 0\n        if (arr.size == k) {\n\
    \            var sum = 0l\n            for (i<- 0 until (arr(k) div 100)) {\n\
    \                sum = sum + arr(i).asInstanceOf[Long]\n            }\n      \
    \      return sum\n        }\n\n        var maxSum = 0L\n        val maxSumIdx\
    \ = 0\n        for (i <- 0 until (arr(k) div 100)) {\n            val tempSum\
    \ = arr(i).asInstanceOf[Long]\n            if (tempSum > maxSum) {\n         \
    \       maxSum = tempSum\n                maxSumIdx = i\n            }\n     \
    \   }\n        val tempSum = arr(maxSumIdx).asInstanceOf[Long]\n        val maxSumIdx\
    \ = k\n        tempSum + maxSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ajcccmr.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxSumIdx\e[0m = k\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxSumIdx is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxSumIdx\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ajcccmr.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (i<-\
    \ \e[31m0\e[0m until (arr(k) div \e[31m100\e[0m)) {\n\e[31m\e[31m   |\e[0m   \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \            Found:    (k : Long)\n\e[31m   |\e[0m                           \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ajcccmr.scala:24:31\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until (arr(k) div \e[31m100\e[0m)) {\n\e[31m\e[31m   |\e[0m   \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \      Found:    (k : Long)\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2ajcccmr.scala:28:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                maxSumIdx\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxSumIdx\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val indexMap = mutable.Map[Long, Int]()\n        val res\
    \ = mutable.ArrayBuffer(0)\n        for (i <- arr){\n            if(indexMap.contains(i)){\n\
    \                indexMap(i) += 1\n            } else {\n                indexMap(i)\
    \ = arr.indexOf(i) + 1\n            }\n        }\n        val lastMax = arr.size\
    \ - k\n        for (i <- 0 until lastMax) {\n            var max = 0\n       \
    \     var j = k\n            while (j < arr.size) {\n                if (j + indexMap(i)\
    \ < arr.size) {\n                    max += arr(j)\n                    j += 1\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n            val tmpRes = (res.last + max).toLong\n            res\
    \ += tmpRes\n        }\n        res.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2oiupydx.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mindexMap\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2oiupydx.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2oiupydx.scala:23:26 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until lastMax) {\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                         Found:    (lastMax : Long)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2oiupydx.scala:28:24 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                    max += arr(j)\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2oiupydx.scala:28:31\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                    max += arr(j)\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    (j : Long)\n\e[31m   |\e[0m          \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2oiupydx.scala:31:20 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m                    break\n\e[31m\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1659979833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val maxLength = arr.take(k).foldRight(0l)(_ + _.length).toLong\n\
    \        val maxLength2 = maxLength * maxLength\n        val sum = 0l\n      \
    \  var index = 0\n        val size = arr.length\n        for (i <- 0 until size)\
    \ {\n            val elem = arr(i)\n            if (elem.toString.length < maxLength)\n\
    \                sum = sum + elem\n            else if (elem.toString.length <\
    \ maxLength2) {\n                sum = sum + elem\n                index = i\n\
    \            }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpavig70yy.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).foldRight(\e[31m0l\e[0m)(_ + _.length).toLong\n\e[31m\e[31m\
    \   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m           \
    \                      Found:    (k : Long)\n\e[31m   |\e[0m                 \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpavig70yy.scala:13:56 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = arr.take(k).foldRight(\e[31m0l\e\
    [0m)(_ + _.length).toLong\n\e[31m\e[31m   |\e[0m                             \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \               value length is not a member of Long\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpavig70yy.scala:21:20 -----------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m                sum = sum + elem\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpavig70yy.scala:23:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                sum\
    \ = sum + elem\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val res = arr.foldRight(0l) { (acc, val) => acc + val.toString.substring(k).length\
    \ }\n        val sum = arr.foldRight(0l) { (acc, val) => acc + val.toString.substring(k).length\
    \ }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb4bjg8jg.scala:13:44 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = arr.foldRight(\e\
    [31m0l\e[0m) { (\e[36macc\e[0m, \e[33mval\e[0m) => acc + \e[33mval\e[0m.toString.substring(k).length\
    \ }\n\e[31m\e[31m   |\e[0m                                            ^^^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb4bjg8jg.scala:13:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mres\e[0m = arr.foldRight(\e[31m0l\e[0m) { (\e[36macc\e[0m, \e[33mval\e\
    [0m) => acc + \e[33mval\e[0m.toString.substring(k).length }\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31mval\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb4bjg8jg.scala:14:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36msum\e[0m = arr.foldRight(\e[31m0l\e[0m) { (\e[36macc\e[0m, \e[33mval\e\
    [0m) => acc + \e[33mval\e[0m.toString.substring(k).length }\n\e[31m\e[31m   |\e\
    [0m                                            ^^^\e[0m\n\e[31m   |\e[0m     \
    \                                  expression expected but \e[31mval\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb4bjg8jg.scala:14:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36msum\e[0m = arr.foldRight(\e[31m0l\e[0m) { (\e[36macc\e[0m, \e[33mval\e\
    [0m) => acc + \e[33mval\e[0m.toString.substring(k).length }\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31mval\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available whe"
  stdout: ''
  timestamp: 1659979832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        var result = 0L\n\n        for(i <-\
    \ arr.take(k)) {\n            val str = i.toString\n            var j = 0\n  \
    \          for(x <- 0 until str.length) {\n                if(j > k) {\n     \
    \               break\n                }\n                if(str.charAt(x) ==\
    \ '0') {\n                    j++\n                } else {\n                \
    \    sum += str.length + x\n                    j = 0\n                }\n   \
    \         }\n            result += i\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpapj_u6wu.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpapj_u6wu.scala:16:26 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mfor\e[0m(i <- arr.take(k)) {\n\e[31m\e[31m   |\e[0m    \
    \                      ^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    (k : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpapj_u6wu.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val counts = arr.grouped(k).map(_.length)\n        val maxCount\
    \ = counts.max()\n        counts(0) + (counts(maxCount) - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplbt7k1qi.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e\
    [0m = arr.grouped(k).map(_.length)\n\e[31m\e[31m   |\e[0m                    \
    \             ^\e[0m\n\e[31m   |\e[0m                                 Found: \
    \   (k : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmplbt7k1qi.scala:14:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = counts.max()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter ord of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e[0mord: Ordering[B]): Int\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmplbt7k1qi.scala:15:8 ------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        counts(\e[31m0\e[0m) + (counts(maxCount) - \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ \e[33mvalue\e[0m \e[35mcounts\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // write your code in Scala without using Scala collections\n\
    \        var sum = 0\n        var num = 0\n        \n        for (i<- arr.reversed)\
    \ {\n            if (i % 100 == 0)\n                sum = sum + i\n          \
    \  \n            if (num == k)\n                break\n            \n        \
    \    num = num + 1\n        }\n        \n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqsgu_5ix.scala:17:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i<- arr.reversed) {\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e\
    [0m \e[35mreversed\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m cannot\
    \ be accessed as a member of (arr : List[Long]) from module class Problem$.\n\e\
    [31m   |\e[0m Access to protected \e[33mmethod\e[0m \e[35mreversed\e[0m not permitted\
    \ because enclosing \e[33mobject\e[0m \e[35mProblem\e[0m\n\e[31m   |\e[0m is not\
    \ a subclass of \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.collection\e[0m where target is defined\n1 error found\n"
  stdout: ''
  timestamp: 1659979832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        var sum = 0L\n        var\
    \ count = 0\n        var sumWithTwoDigits = 0\n        for (x <- arr) {\n    \
    \        sum += x\n            count += 1\n        }\n        while (count > 0)\
    \ {\n            sumWithTwoDigits += sum % 10\n            sum = (sum / 10).toLong\n\
    \            sum -= sumWithTwoDigits % 10\n            sumWithTwoDigits = (sumWithTwoDigits\
    \ / 10).toLong\n            count -= 1\n        }\n        sumWithTwoDigits +=\
    \ sum % 10\n        return sumWithTwoDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_jelp2vq.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_jelp2vq.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            sumWithTwoDigits += sum % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \         value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_jelp2vq.scala:25:55 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            sumWithTwoDigits = (sumWithTwoDigits / \e\
    [31m10\e[0m).toLong\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_jelp2vq.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        sumWithTwoDigits += sum % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value +=\
    \ is not a member of Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        var result = 0.0\n       \
    \ for (i <- k to arr.length) {\n            result += arr(i)\n        }\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqiqtpt_0.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqiqtpt_0.scala:18:8 ---------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Double)\n\e[31m   |\e[0m     \
    \   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val r = new TreeSet[Long]()\n        for (i <- 0 until k)\
    \ {\n            r += arr(i)\n        }\n        val l = arr.size / 2\n      \
    \  var sum = 0L\n        var lastSum = -1L\n        for (i <- 0 until l) {\n \
    \           if (r.contains(arr(i))) {\n                sum += arr(i)\n       \
    \     } else {\n                lastSum = sum\n                sum = arr(i)\n\
    \            }\n        }\n        lastSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqtdv56ri.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var index : Long = 0\n        val totalSum = arr.take(k).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        while (index<k) {\n           \
    \ val addElem = arr.take(index).foldLeft(0l) { (sum, element) => sum + element\
    \ }\n            if (addElem == 2 || addElem == 3)\n                totalSum =\
    \ totalSum + addElem\n            else {\n                val nextSum = arr.take(index+1)\n\
    \                if (nextSum.exists(_ == 2))\n                    totalSum = totalSum\
    \ + nextSum.head\n                else\n                    index++\n        \
    \    }\n        }\n        return totalSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprnkf8cdw.scala:24:27 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    index++\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmprnkf8cdw.scala:14:32 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mtotalSum\e[0m = arr.take(k).foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melement\e[0m) => sum + element }\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprnkf8cdw.scala:16:35 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36maddElem\e[0m = arr.take(index).foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melement\e[0m) => sum + element }\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                 Found:    (index : Long)\n\e[31m   |\e[0m  \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmprnkf8cdw.scala:18:25 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                totalSum = totalSum + addElem\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val totalSum\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprnkf8cdw.scala:20:39 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mnextSum\e[0m = arr.take(index+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.sortBy(_ * 10)\n        var sum = 0L\n   \
    \     var left = 0L\n        var i = 0\n        var current = 0L\n        while\
    \ (i < k) {\n            val val = arr(i).toInt\n            current += val\n\
    \            i += 1\n            if (current > 10) {\n                sum += current\
    \ / 10\n                current = current % 10\n            } else {\n       \
    \         sum += current\n            }\n        }\n        if (left > 0) {\n\
    \            sum += left\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpovexbk7l.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[33mval\e[0m = arr(i).toInt\n\
    \e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m               \
    \ pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpovexbk7l.scala:20:23\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            current +=\
    \ \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m\
    \   |\e[0m                       expression expected but \e[31mval\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpovexbk7l.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(_ * \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \            ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpovexbk7l.scala:20:20 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            current += \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ Long.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.size\n        val r = new Array[Long](k)\n \
    \       var s = 0\n        var index = 0\n        var flag = false\n        var\
    \ start = 0\n        var last = 0\n        for (i <- 0 to k-1) {\n           \
    \ if (index == k) {\n                val temp = 0\n                var sum = 0\n\
    \                for (j <- 0 to k-1) {\n                    temp += arr(j)\n \
    \                   if (temp % 10 == 0) {\n                        sum += arr(j)\n\
    \                        temp = 0\n                    }\n                }\n\
    \                if (sum >= last)\n                    s += sum - last\n     \
    \           last = 0\n                index = 0\n                flag = false\n\
    \                start = 0\n            }\n            val curr = arr(index).toInt\n\
    \            var sum = curr\n            if (start < curr && sum > last) {\n \
    \               sum += sum - last\n                last = sum\n              \
    \  index++\n            } else {\n                if (sum >= last)\n         \
    \           s += sum - last\n                last = 0\n                index =\
    \ 0\n            }\n            flag = !flag\n            start++\n        }\n\
    \        if (index > 0) {\n            val temp = 0\n            var sum = 0\n\
    \            for (j <- 0 to index-1) {\n                temp += arr(j)\n     \
    \           if (temp % 10 == 0) {\n                    sum += arr(j)\n       \
    \             temp = 0\n                }\n            }\n            if (sum\
    \ >= last)\n                s += sum - last\n            s += last - last - arr.last\n\
    \        }\n        s + arr.last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphi0q30bb.scala:43:23 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmphi0q30bb.scala:51:19 ---------------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m            start++\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphi0q30bb.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mr\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (k : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphi0q30bb.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to k-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphi0q30bb.scala:24:31 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mfor\e[0m (j <- \e[31m0\e[0m to\
    \ k-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphi0q30bb"
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        val maxLen = arr.length\n        for\
    \ (i<- 1L until (maxLen)) sum += arr(k)\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpubu5aw4j.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<- \e[31m1L\e[0m until (maxLen))\
    \ sum += arr(k)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpubu5aw4j.scala:15:47\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m1L\e[0m until (maxLen)) sum += arr(k)\n\e[31m\e[31m   |\e[0m             \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                            Found:    (k : Long)\n\e[31m   |\e[0m           \
    \                                    Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val sum : Long = arr(0) + (arr(1) + (arr(2) + (arr(3) +\
    \ arr(4))))\n        arr.grouped(4).filter(n => k.toLong <= n.toLong).take(3).foldLeft(sum)\
    \ {\n            ( acc, n ) =>\n            if( acc.toLong <= n.toLong) acc +\
    \ n.toLong\n            else acc + n.toLong + 10\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsvkboxa2.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        arr.grouped(\e[31m4\e[0m).filter(\e[36mn\e[0m\
    \ => k.toLong <= n.toLong).take(\e[31m3\e[0m).foldLeft(sum) {\n\e[31m\e[31m  \
    \ |\e[0m                                               ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue toLong is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsvkboxa2.scala:16:32 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mif\e[0m( acc.toLong <= n.toLong) acc + n.toLong\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toLong is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsvkboxa2.scala:16:48\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(\
    \ acc.toLong <= n.toLong) acc + n.toLong\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Impl"
  stdout: ''
  timestamp: 1659979841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val resultSet = mutable.HashSet[Long]()\n        val minSet\
    \ = mutable.HashSet[Long]()\n        val maxSet = mutable.HashSet[Long]()\n\n\
    \        for (element <- arr) {\n            val tempSet = minSet.union(maxSet)\n\
    \            if (tempSet.size <= 2) {\n                resultSet += element\n\
    \                minSet += element\n                maxSet += element\n      \
    \      } else {\n                if (tempSet.size == 3) {\n                  \
    \  if (element >= minSet.last) {\n                        minSet += element\n\
    \                    }\n                    if (element <= maxSet.last) {\n  \
    \                      maxSet += element\n                    }\n            \
    \    }\n            }\n        }\n        val maxSet2 = minSet.union(maxSet)\n\
    \        minSet.subsetOf(maxSet2)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpopftk6ug.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpopftk6ug.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpopftk6ug.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0l\n        for (i<- 0 until k) {\n          \
    \  sum = sum + arr(i)\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwp57thm.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        for(i<-0 to k-arr(0).toInt){\n   \
    \         sum += arr(i).toLong\n        }\n        for(i<-0 to k){\n         \
    \   if(arr(i).toInt % 10 != 0 && sum-arr(i).toLong != 0){\n                sum\
    \ -= arr(i).toLong\n            }\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt582dc7.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m to k-arr(\e[31m0\e[0m).toInt){\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:    Long\n\
    \e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkt582dc7.scala:17:20 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<-\e[31m0\e[0m to k){\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (k : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = mutable.LongAccumulator.zero\n        var i\
    \ = 0\n        while (i < arr.size) {\n            if (k > 0 && arr(i).toInt +\
    \ arr(i+k).toInt > 9) {\n                result.add(arr(i).toInt + arr(i+k).toInt.toLong)\n\
    \                i += k\n                k--\n            } else {\n         \
    \       result.add(arr(i).toInt)\n                i += 1\n            }\n    \
    \    }\n        result.toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplul_nvfq.scala:19:19 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                k--\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplul_nvfq.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.LongAccumulator.zero\n\e[31m\e[31m   |\e[0m        \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplul_nvfq.scala:16:44\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (k\
    \ > \e[31m0\e[0m && arr(i).toInt + arr(i+k).toInt > \e[31m9\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                                            ^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Long\n\e[31m   |\e[0m\
    \                                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmplul_nvfq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i += k\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val num = new mutable.Queue[Long](arr.slice(0, k).map(_.toLong))\n\
    \        var total = 0\n        while(num.nonEmpty) {\n            total += num.dequeue()\n\
    \        }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjw0ut9vc.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = \e[33mnew\e[0m\
    \ mutable.Queue[\e[35mLong\e[0m](arr.slice(\e[31m0\e[0m, k).map(_.toLong))\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty) 0\n        else {\n            val first\
    \ = arr.take(k).toList\n            val second = arr.drop(k).toList\n        \
    \    var sum = 0\n            second.foreach { x =>\n                if (x < 10)\
    \ sum += x\n            }\n            sum ++ first.sum\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq51glx95.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36mfirst\e[0m = arr.take(k).toList\n\e[31m\e[31m   |\e[0m                   \
    \              ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq51glx95.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e\
    [36msecond\e[0m = arr.drop(k).toList\n\e[31m\e[31m   |\e[0m                  \
    \                ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq51glx95.scala:19:32\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e\
    [0m (x < \e[31m10\e[0m) sum += x\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq51glx95.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum ++ first.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ ++ is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // write your code here\n        if(arr.size < k)\n    \
    \        return 0\n        var sum = 0\n        var arrLength = arr.size\n   \
    \     for(i<-0 to arrLength-1) {\n            val elementNumber = arr(i)\n   \
    \         if(elementNumber.toString.length < 2)\n                sum += elementNumber\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnm6hl5uy.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += elementNumber\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val len = arr.size\n        val m = 1l\n        var sum\
    \ = 0\n        var startIdx = 0\n        val twosCount = arr.count(l => l.toString.length\
    \ < 2)\n        var idx = 0\n        while (idx < twosCount) {\n            val\
    \ l = arr(idx)\n            val sum = sum + l\n            val currentLen = l.toString.length\n\
    \            if (sum > k) {\n                start = arr.take(startIdx + 1).toString.length\n\
    \                sum = k - sum\n            } else {\n                sum += m\n\
    \                m += 1\n            }\n            idx = idx + 1\n          \
    \  if (currentLen - start > 2) {\n                startIdx = idx\n           \
    \ }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoephsaah.scala:21:22 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = sum + l\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35msum\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoephsaah.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                start = arr.take(startIdx + \e[31m1\e\
    [0m).toString.length\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpoephsaah.scala:25:20 -----------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                sum = k - sum\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoephsaah.scala:28:18\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                m += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Long - did you mean m.!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoephsaah.scala:31:29 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e[0m (currentLen - start > \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             Not found: start\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        arr.length match {\n            case 0 => 0\n          \
    \  case 1 => arr(0)\n            case 2 => arr(0) + arr(1)\n            case 3\
    \ => arr(0) + arr(1) + arr(2)\n            case 4 => arr(0) + arr(1) + arr(2)\
    \ + arr(3)\n            case 5 => arr(0) + arr(1) + arr(2) + arr(3) + arr(4)\n\
    \            case 6 => arr(0) + arr(1) + arr(2) + arr(3) + arr(4) + arr(5)\n \
    \           case 7 => arr(0) + arr(1) + arr(2) + arr(3) + arr(4) + arr(5) + arr(6)\n\
    \            case 8 => arr(0) + arr(1) + arr(2) + arr(3) + arr(4) + arr(5) + arr(6)\
    \ + arr(7)\n            case 9 => arr(0) + arr(1) + arr(2) + arr(3) + arr(4) +\
    \ arr(5) + arr(6) + arr(7) + arr(8)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj4lqvti2.scala:27)\n\tat Problem.main(tmpj4lqvti2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var i = 0\n        var sum = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 2\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpidlfhump.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val size = arr.size\n        val result = (0l.toLong /:\
    \ arr.take(k)(_+_)) { (sum, element) => sum * 10 + (element.asInstanceOf[Long])\
    \ } + k * 10\n        if (result <= size) {\n            result\n        } else\
    \ {\n            addElements(arr, k + 1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcl5e4wng.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = (\e[31m0l\e[0m.toLong /: arr.take(k)(_+_)) { (\e[36msum\e[0m, \e[36melement\e\
    [0m) => sum * \e[31m10\e[0m + (element.asInstanceOf[\e[35mLong\e[0m]) } + k *\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                                       \
    \     ^\e[0m\n\e[31m   |\e[0m                                            Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpcl5e4wng.scala:14:47\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e\
    [0m \e[36mresult\e[0m = (\e[31m0l\e[0m.toLong /: arr.take(k)(_+_)) { (\e[36msum\e\
    [0m, \e[36melement\e[0m) => sum * \e[31m10\e[0m + (element.asInstanceOf[\e[35mLong\e\
    [0m]) } + k * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                           \
    \                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   (_$1, _$2) => _$1 + _$2.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpcl5e4wng.scala:14:49 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = (\e[31m0l\e\
    [0m.toLong /: arr.take(k)(_+_)) { (\e[36msum\e[0m, \e[36melement\e[0m) => sum\
    \ * \e[31m10\e[0m + (element.asInstanceOf[\e[35mLong\e[0m]) } + k * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   (_$1, _$2) => _$1 + _$2.\n3 errors found\n"
  stdout: ''
  timestamp: 1659979844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val digits = arr.drop(k).toList\n        val sum : Long\
    \ = 0\n        val sumOfDoubles = arr.take(k).foldLeft(0.0l)(_+_)\n        for\
    \ ( i <- 0 until k ) {\n            sum += arr(i)\n            if( digits(i).length\
    \ == 2 ) {\n                sum += sumOfDoubles\n            }\n        }\n  \
    \      return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe3u5n0b6.scala:15:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msumOfDoubles\e[0m = arr.take(k).foldLeft(0.0l)(_+_)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                                Invalid literal number\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3u5n0b6.scala:13:30 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = arr.drop(k).toList\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Found:    (k : Long)\n\e[31m   |\e[0m            \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe3u5n0b6.scala:15:36 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36msumOfDoubles\e[0m = arr.take(k).foldLeft(0.0l)(_+_)\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Found:    (k : Long)\n\e[31m   |\e[0m \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpe3u5n0b6.scala:15:55 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msumOfDoubles\e[0m = arr.take(k).foldLeft(0.0l)(_+_)\n\
    \e[31m\e[31m   |\e[0m                                                      ^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m "
  stdout: ''
  timestamp: 1659979849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty) return 0\n        if (arr.length >= k)\
    \ arr(k)\n        else arr(k)\n        val r = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until arr.length - k) {\n            val a = arr(i)\n   \
    \         val b = arr(i + k)\n            val c = arr(i + k + 1)\n           \
    \ val d = arr(i + k + 2)\n            r.add(a+b+c+d)\n        }\n        r.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcfdrcm8.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (arr.length\
    \ >= k) arr(k)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    (k : Long)\n\e[31m \
    \  |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprcfdrcm8.scala:15:17 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m arr(k)\n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 Found:    (k : Long)\n\
    \e[31m   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprcfdrcm8.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until arr.length\
    \ - k) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m     \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprcfdrcm8.scala:19:24 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36mb\e[0m = arr(i + k)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Found:    Long\n\e[31m   |\e[0m                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcfdrcm8.scala:20:24 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = arr(i + k +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m       \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explai"
  stdout: ''
  timestamp: 1659979847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.size <= k) return 0\n        val maxCount = arr.take(k)\n\
    \        val maxElements = arr.filter(x => maxCount.contains(x).length == 1)\n\
    \        val maxValues = maxCount.foldRight(0L) { case (sum, element) =>\n   \
    \         sum + element\n        }\n        val maxElement = maxElements.sum\n\
    \        return maxValue + maxElement\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0jpdal2.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e\
    [0m = arr.take(k)\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\
    \e[31m   |\e[0m                                Found:    (k : Long)\n\e[31m  \
    \ |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpz0jpdal2.scala:15:63 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxElements\e[0m = arr.filter(\e\
    [36mx\e[0m => maxCount.contains(x).length == \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value length is not a member of\
    \ Boolean\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz0jpdal2.scala:20:15\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mreturn\e[0m\
    \ maxValue + maxElement\n\e[31m\e[31m   |\e[0m               ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Not found: maxValue\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var acc : Long = 0L\n        var i : Int = 0\n        while\
    \ (i < k) {\n            val a = arr(i).toLong\n            val b = arr(i+1).toLong\n\
    \            val c = arr(i+2).toLong\n            if (a == b) acc += a\n     \
    \       if (a == c) acc += a\n            i += 3\n        }\n        acc\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpocdky9yt.scala:26)\n\tat Problem.main(tmpocdky9yt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr1 = arr.take(k)\n        val arr2 = arr.drop(k).toList.map(_\
    \ / 10)\n        var sum = 0L\n        for (x <- arr1) {\n            sum ++=\
    \ x\n        }\n        for (x <- arr2) {\n            sum ++= x\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22bd_kpr.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr1\e\
    [0m = arr.take(k)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Found:    (k : Long)\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22bd_kpr.scala:14:28 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr2\e[0m = arr.drop(k).toList.map(_\
    \ / \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Found:    (k : Long)\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp22bd_kpr.scala:17:16 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            sum ++= x\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value ++= is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp22bd_kpr.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum ++= x\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m            value ++= is not a member of Long\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var arrLen = arr.length\n        var result = 0.0\n    \
    \    // loop through first k elements of arr\n        for (j <- 1 to k) {\n  \
    \          result += arr.apply(j)\n        }\n        // loop through remaining\
    \ elements of arr\n        for (j <- k+1 to arrLen) {\n            result += arr.apply(j)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3uifzqvt.scala:16:23\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (j <-\
    \ \e[31m1\e[0m to k) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (k : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3uifzqvt.scala:21:19 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            result += arr.apply(j)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Double - did you mean\
    \ Double.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3uifzqvt.scala:21:32\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            result += arr.apply(j)\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               Found:    (j : Long)\n\e[31m   |\e[0m        \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3uifzqvt.scala:23:15 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m result\n\e[31m\e[31m   |\e[0m  \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (result : Double)\n\
    \e[31m   |\e[0m               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ index = 0\n        var temp = 0\n        while (index < k) {\n            temp\
    \ = arr.map(x => x % 10).sum\n            if (temp > 2) {\n                result\
    \ += 1\n            }\n            index += 1\n        }\n        result.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9q_qp_8i.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9q_qp_8i.scala:17:19\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            temp = arr.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:    Long\n\
    \e[31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var total = 0L\n        var i = 0L\n        var max = 0L\n\
    \        while(i < k && arr.nonEmpty) {\n            max += arr(i)\n         \
    \   i += 1\n        }\n        if(i < k) {\n            while(i < k) {\n     \
    \           max += arr(i++) max += arr(i)\n                i += 1\n          \
    \  }\n        }\n        if(arr.isEmpty) max += 0\n        total += max\n    \
    \    return total\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnkb0lflj.scala:22:30 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                max += arr(i++) max += arr(i)\n\e[31m\e\
    [31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m           \
    \                   expression expected but \e[31m')'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkb0lflj.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            max += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkb0lflj.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            max += arr(i)\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (i : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkb0lflj.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                max += arr(i++)\
    \ max += arr(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value += is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnkb0lflj.scala:22:36 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                max += arr(i++) max += arr(i)\n\e[31m\e\
    [31m   |\e[0m                                    ^^\e[0m\n\e[31m   |\e[0m    \
    \                                Not found: +=\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var maxSum : Long = 0\n        var maxCount = 0\n      \
    \  var maxElem = 0\n        var maxSumOfFirstK = 0\n        for (i<- 0 until k){\n\
    \            maxSumOfFirstK += arr(i)\n            maxCount = i\n            maxElem\
    \ = arr(i)\n        }\n        for (i<- 0 until k){\n            var firstKSumOfI\
    \ = 0\n            var firstKSum = 0\n            for (i<-0 until i){\n      \
    \          firstKSumOfI += arr(i)\n            }\n            firstKSum = firstKSumOfI\n\
    \            if (firstKSumOfI > maxSum){\n                maxSum = firstKSum\n\
    \                maxCount = i\n                maxElem = arr(i)\n            }\n\
    \        }\n        return maxSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd0218w0p.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m0\e[0m until k){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpd0218w0p.scala:18:27 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            maxSumOfFirstK += arr(i)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd0218w0p.scala:20:25 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            maxElem = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd0218w0p.scala:22:25 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m until k){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (k : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd0218w0p.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                firstKSumOfI\
    \ += arr(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd0218w0p.scala:32:29 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                maxElem = arr(i)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \      Found:    Long\n\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1659979850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // code here\n        val first = arr take k\n        val\
    \ sum = first reduce ((x, y) => x + y)\n        return sum.toLong\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20rztcxf.scala:14:29\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfirst\e\
    [0m = arr take k\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (k : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val countMap = new mutable.HashMap[Long, Int]()\n      \
    \  val sum = 0\n        for(i <- 0 to k-1){\n            val a = arr(i)\n    \
    \        if(countMap.contains(a)){\n                val count = countMap.get(a)\n\
    \                val oldCount = count - 1\n                countMap.put(a, oldCount)\n\
    \                sum += a\n            }else{\n                countMap.put(a,\
    \ 1)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnvcf_1pv.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnvcf_1pv.scala:15:22 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m to k-\e[31m1\e[0m){\n\e[31m\e\
    [31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnvcf_1pv.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += a\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        var ans = 0.0\n        var\
    \ last = 0\n        for(i <- 0 until arr.length)\n        {\n            val current\
    \ = arr(i)\n            if(i < k)\n            {\n                if(current >\
    \ last + 1) {\n                    ans += current - last\n                   \
    \ last = current\n                }\n            } else \n            {\n    \
    \            if(current < last + 1) {\n                    ans += last - current\n\
    \                    last = current\n                }\n            }\n      \
    \  }\n        if(k <= arr.length)\n            ans += last - arr(k)\n        ans\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdsd08w0q.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdsd08w0q.scala:35:8 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        ans\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (ans : Double)\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr\n        val arr = arr.toList\n        val\
    \ len = arr.size\n        val twoDigits = arr.filter(_ < 9l).size\n        if\
    \ (twoDigits < k)\n            throw new ArithmeticException(\"Incorrect sum,\
    \ sum of digits for k is less than size of k\")\n        val twoDigitsSum = arr.take(twoDigits).sum\n\
    \        return twoDigitsSum + twoDigits.toLong * k\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3vutiy59.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0marr is already\
    \ defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3vutiy59.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr\n\e[31m\e\
    [31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        arr.sortWith(_ < _) // sort\n        val res = arr.drop(k).takeWhile(_\
    \ < _ + 999)\n        val lc = arr.length - k\n        val maxCnt = arr.count(_\
    \ < _ + 999)\n        if(lc > maxCnt) res + (999l - res)(0)\n        else res(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmput2yx9mk.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m = arr.drop(k).takeWhile(_ < _ + \e[31m999\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                        ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (k : Long)\n\e[31m   |\e[0m                           Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmput2yx9mk.scala:14:40 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = arr.drop(k).takeWhile(_\
    \ < _ + \e[31m999\e[0m)\n\e[31m\e[31m   |\e[0m                               \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmput2yx9mk.scala:16:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCnt\e[0m = arr.count(_ < _ + \e[31m999\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmput2yx9mk.scala:17:28 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mif\e[0m(lc > maxCnt) res + (\e[31m999l\e[0m\
    \ - res)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmput2yx9mk.scala:17:36 -----------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mif\e[0m(lc > maxCnt) res + (\e[31m999l\e[0m\
    \ - res)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var k1 = k\n        var k2 = k\n  \
    \      for(i <- 0 until arr.length) \n        {\n            val j = (i + 1).toInt\n\
    \            if(i == 0 && j < k1)\n            {\n                k1 = j\n   \
    \         }\n            else if(j == arr.length-1 && i < k2)\n            {\n\
    \                k2 = i\n            }\n            val m = math.max(k1,k2)\n\
    \            if(i%m == 0)\n            {\n                sum = sum + arr(i)\n\
    \            }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8xjesaip.scala:30:22\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                sum = sum + arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // O(n)\n        var sum = 0l\n        // O(n)\n       \
    \ val maxElemsToConsider = arr.take(k)\n        // O(n+k)\n        for (elem <-\
    \ maxElemsToConsider) {\n            // O(1)\n            val firstDigit = elem.toString.substring(0,\
    \ 1)\n            // O(1)\n            val secondDigit = elem.toString.substring(1,\
    \ 2)\n            // O(1)\n            val sum = sum + (if (firstDigit < secondDigit)\
    \ 1 else 0)\n        }\n        // O(n)\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0jc39_l0.scala:16:42\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxElemsToConsider\e\
    [0m = arr.take(k)\n\e[31m\e[31m   |\e[0m                                     \
    \     ^\e[0m\n\e[31m   |\e[0m                                          Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val maxLength = arr.take(k).length\n        val twoDigitMaxLength\
    \ = (maxLength - 2) max 0 // for safety: at most k digits are used\n        val\
    \ twoDigitMax = maxLength * 10l.toLong // to ensure overflow in intermediate operations\n\
    \        val sum = 0l\n        for (elem <- arr; idx <- 0 until k)\n         \
    \   sum += (elem - arr(idx) mod twoDigitMax)\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8cvyz9za.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).length\n\e[31m\e[31m   |\e[0m                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                 Found:    (k : Long)\n\
    \e[31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8cvyz9za.scala:17:41 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (elem <- arr; idx <- \e[31m0\e\
    [0m until k)\n\e[31m\e[31m   |\e[0m                                         ^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (k : Long)\n\
    \e[31m   |\e[0m                                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8cvyz9za.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += (elem - arr(idx) mod twoDigitMax)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp8cvyz9za.scala:18:36 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            sum += (elem - arr(idx) mod twoDigitMax)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mod is not a member of Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val numOfElements = arr.size\n        val map = new mutable.HashMap[Long,Long]\n\
    \        for(i <- 0 until numOfElements) {\n            if(!map.containsKey(arr(i)\
    \ - k)) {\n                map.put(arr(i) - k, 0)\n            }\n           \
    \ map.put(arr(i) - k, map.get(arr(i) - k) + 1)\n        }\n        val maxValues\
    \ = map.groupBy(_._2).maxBy(_._1)\n        val result = maxValues.map(_._1).sum\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsydeknfl.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.sortWith(_ > _).take(k)\n        val map =\
    \ new mutable.HashMap[Long, Long]()\n        for (e <- arr) {\n            val\
    \ digits = digitsOf(e)\n            if(digits.length == 2) map.putIfAbsent(digits,\
    \ 0l) += e\n            else map.putIfAbsent(digits, e) += e\n        }\n    \
    \    val sum = map.values.reduce(_ + _)\n        sum.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1ztb71vr.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ > _).take(k)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m\
    \                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ztb71vr.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = 0.0;\n        var index = 0;\n        var sum\
    \ = 0;\n        while (index < k) {\n            sum += arr(index);\n        \
    \    index += 1;\n        }\n        result = sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprekiovau.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += arr(index);\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmprekiovau.scala:20:15\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result = sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      val max = arr.last\n      val max2 = arr.init\n      val sum\
    \ = 0\n      val max2Len = max2.length\n      val arrLen = arr.length\n      arr.foreach\
    \ {\n        case i : Long =>\n          if (i < 10L) {\n            sum = sum\
    \ + i\n          } else if (i < (max2 + 10L)) {\n            val nextDigit = i\
    \ / 10L\n            val nextDig2 = ((i % 10L) * 100L) % 10L\n            val\
    \ nextDigit3 = i - (nextDig * 10L) - (nextDig2 * 100L)\n            sum = sum\
    \ + nextDigit\n            if (nextDig2 > max2Len - 1) sum = sum + max2\n    \
    \        if (nextDigit3 > max2Len - 1) sum = sum + max2\n          } else {\n\
    \            val nextDigit4 = i / 100L\n            val nextDigit5 = ((i % 100L)\
    \ * 1000L) % 100L\n            val nextDigit6 = i - (nextDigit4 * 100L) - (nextDigit5\
    \ * 1000L)\n            sum = sum + nextDigit4\n            if (nextDigit5 > max2Len\
    \ - 1) sum = sum + max2\n            if (nextDigit6 > max2Len - 1) sum = sum +\
    \ max2\n          }\n      }\n      sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnpupaua5.scala:21:18\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum = sum + i\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpupaua5.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m          } \e[33melse\e[0m \e[33mif\e[0m (i < (max2\
    \ + \e[31m10L\e[0m)) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnpupaua5.scala:25:34 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mnextDigit3\e[0m = i - (nextDig\
    \ * \e[31m10L\e[0m) - (nextDig2 * \e[31m100L\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Not found: nextDig\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnpupaua5.scala:26:18 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            sum = sum + nextDigit\n\e[31m\e[31m   |\e[0m \
    \                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmpnpupaua5.scala:27:50 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (nextDig2 > max2Len - \e[31m1\e\
    [0m) sum = sum + max2\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Initialize result as sum of first k elements\n      \
    \  var result = arr.head\n\n        // For all elements except the first k add\
    \ their digits\n        for ( n <- arr.tail ) {\n            result += n\n   \
    \     }\n\n        // For the k first elements add their two digits\n        for\
    \ ( i <- 1 to k-1 ) {\n            result += arr(i)\n        }\n\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8dbz2_cg.scala:22:24\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m ( i <-\
    \ \e[31m1\e[0m to k-\e[31m1\e[0m ) {\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m\
    \   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var max = 2\n        var result = 0L\n        for (i <-\
    \ 0 until arr.size) {\n            val curr = arr(i)\n            if (max <= 2\
    \ || curr % 10 == 0)\n                result += curr\n            max += 2\n \
    \           if (max > k)\n                break\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcc7k0ndf.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // your code is here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf6hletha.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// your code is here\e[0m\n\e[31m14 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (k > arr.length) 0\n        else {\n            val maxIndex\
    \ = arr.lastIndex - k + 1 // max index from last k elements of arr\n         \
    \   val sums = arr.take(k) // first k elements of arr\n            val sum: Long\
    \ = 0\n            for (i <- 0 until k) sum += sums(i)\n            sum\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4h_bq9m9.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.lastIndex\
    \ - k + \e[31m1\e[0m \e[34m// max index from last k elements of arr\e[0m\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ lastIndex is not a member of List[Long] - did you mean arr.lastIndexOf?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4h_bq9m9.scala:16:32 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36msums\e[0m = arr.take(k)\
    \ \e[34m// first k elements of arr\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4h_bq9m9.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until k) sum += sums(i)\n\e[31m\e[31m   |\e[0m             \
    \                 ^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (k : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4h_bq9m9.scala:18:37\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m\
    \ (i <- \e[31m0\e[0m until k) sum += sums(i)\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0m                 value +=\
    \ is not a member of Long - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val twoDigitsMax = arr.take(k).filter(_ % 10 != 0).reduceLeft(_\
    \ max _)\n        val firstTwoMax = arr.filter(_ % 10 == 0).take(twoDigitsMax).map(_\
    \ / 10).reduceLeft(_ max _)\n        firstTwoMax.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwvtpisf2.scala:13:36\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mtwoDigitsMax\e\
    [0m = arr.take(k).filter(_ % \e[31m10\e[0m != \e[31m0\e[0m).reduceLeft(_ max _)\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Found:    (k : Long)\n\e[31m   |\e[0m \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwvtpisf2.scala:14:55 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfirstTwoMax\e[0m = arr.filter(_\
    \ % \e[31m10\e[0m == \e[31m0\e[0m).take(twoDigitsMax).map(_ / \e[31m10\e[0m).reduceLeft(_\
    \ max _)\n\e[31m\e[31m   |\e[0m                                              \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \        Found:    (twoDigitsMax : Long)\n\e[31m   |\e[0m                    \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwvtpisf2.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        firstTwoMax.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        value sum is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty) 0\n        else if(arr.head > k)\n    \
    \        addElements(arr.drop(1), k)\n        else\n            arr.foldLeft(0l)\
    \ { (a, e) => a + e.drop(1).sum.take(2) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt07k3rqo.scala:17:47 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            arr.foldLeft(\e[31m0l\e[0m) { (\e[36ma\e\
    [0m, \e[36me\e[0m) => a + e.drop(\e[31m1\e[0m).sum.take(\e[31m2\e[0m) }\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value drop is not a member of\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.drop(k).toList\n        val res = arr.takeWhile(_\
    \ < 10).reduceLeftOption(_ + _)\n        res.getOrElse(0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8dnor3y7.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.drop(k).toList\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        require(arr.nonEmpty)\n        require(k <= arr.length)\n\
    \        val twoDigits = arr.reverse.take(k).sum\n        val otherDigits = arr.reverse.drop(k).sum\n\
    \        (twoDigits + otherDigits)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfme4h81k.scala:15:41\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtwoDigits\e\
    [0m = arr.reverse.take(k).sum\n\e[31m\e[31m   |\e[0m                         \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \    Found:    (k : Long)\n\e[31m   |\e[0m                                   \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfme4h81k.scala:16:43\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36motherDigits\e\
    [0m = arr.reverse.drop(k).sum\n\e[31m\e[31m   |\e[0m                         \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \        Found:    (k : Long)\n\e[31m   |\e[0m                               \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var i = 0\n        var total = 0\n        while(i < arr.length)\
    \ {\n            var nextSum = arr(i) + arr(i+1)\n            var sum = (nextSum.toString.length\
    \ < k) ? nextSum : nextSum.substring(0,k)\n            total += sum.toLong\n \
    \           i += 2\n        }\n        total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppihytrfw.scala:17:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mvar\e[0m \e[36msum\e[0m = (nextSum.toString.length\
    \ < k) ? nextSum : nextSum.substring(\e[31m0\e[0m,k)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                 end of statement expected\
    \ but '(' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppihytrfw.scala:17:52\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mvar\e[0m\
    \ \e[36msum\e[0m = (nextSum.toString.length < k) ? nextSum : nextSum.substring(\e\
    [31m0\e[0m,k)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value ? is not a member of Boolean\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        val sortedArr = arr.sortWith((x, y)\
    \ => x < y)\n        var i = 0\n        while (i < k) {\n            sum += sortedArr(i)\n\
    \            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjd602fj.scala:24)\n\tat Problem.main(tmpbjd602fj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      var num : Long = 0\n      arr.foreach( i => num = num + i.toString.substring(0,k)+i.toString.substring(k)\
    \ )\n      num\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzvl2acqh.scala:14:59\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m      arr.foreach( \e[36mi\e\
    [0m => num = num + i.toString.substring(\e[31m0\e[0m,k)+i.toString.substring(k)\
    \ )\n\e[31m\e[31m   |\e[0m                                                   \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \       Found:    (k : Long)\n\e[31m   |\e[0m                                \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzvl2acqh.scala:14:83 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m      arr.foreach( \e[36mi\e[0m => num = num + i.toString.substring(\e\
    [31m0\e[0m,k)+i.toString.substring(k) )\n\e[31m\e[31m   |\e[0m               \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val maxSum = arr.take(k).reduceLeft(_ + _)\n        val\
    \ sum = (1l to k).filter(i => arr.take(i).sum <= maxSum)\n            .reduceLeft(_\
    \ + _)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6q3jv5v9.scala:13:30\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxSum\e\
    [0m = arr.take(k).reduceLeft(_ + _)\n\e[31m\e[31m   |\e[0m                   \
    \           ^\e[0m\n\e[31m   |\e[0m                              Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6q3jv5v9.scala:14:49 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = (\e[31m1l\e[0m\
    \ to k).filter(\e[36mi\e[0m => arr.take(i).sum <= maxSum)\n\e[31m\e[31m   |\e\
    [0m                                                 ^\e[0m\n\e[31m   |\e[0m  \
    \                                               Found:    (i : Long)\n\e[31m \
    \  |\e[0m                                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val map = mutable.HashMap[Long,Long]()\n        for (i<-0\
    \ until k) {\n            map += (i.toLong -> arr(i))\n        }\n        map.filterValues(\
    \ v => v.length > 1).map( v => v.last).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptnb1aiqs.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptnb1aiqs.scala:14:24 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m until k) {\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (k : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val map = mutable.HashMap.empty[Long,Long]\n        for\
    \ (i <- arr.take(k)) {\n            val value = map.getOrElse(i,0l) + i\n    \
    \        map += i -> value.toLong\n        }\n        val sum = map.values.sum\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo48tgqi.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeo48tgqi.scala:14:27 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- arr.take(k)) {\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             Found:    (k : Long)\n\e[31m   |\e[0m                          \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Brute-force approach\n        var ret = 0L\n        for(j\
    \ <- 1 to k) {\n            ret += arr.take(j).sum\n        }\n        return\
    \ ret\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeagfagoi.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(j <- \e\
    [31m1\e[0m to k) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (k : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.sortWith(_ > _)\n        val result = (0 until\
    \ arr.length).filter(_ => arr.dropRight(1).contains(arr(_)))\n        val sum\
    \ = result.reduce(_ + _)\n        return sum + arr(k).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe4v9_k8a.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ > _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val n = arr.size\n        var maxCount = 1\n        var\
    \ sum = 0\n        for (i <- 1 to n) {\n            var count = 0;\n         \
    \   var curr = arr(i)\n            var maxNum = 1\n            var flag = true;\n\
    \            while (curr != 0) {\n                if (curr % 10 == 0) {\n    \
    \                count++\n                }\n                if (count > maxCount)\
    \ {\n                    maxCount = count;\n                    maxNum = curr;\n\
    \                    flag = false;\n                }\n                curr =\
    \ curr.toInt\n            }\n            if (count == maxCount) {\n          \
    \      if (flag) {\n                    sum += maxNum\n                }\n   \
    \         }\n        }\n        return sum;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0ytt411_.scala:23:27 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    count++\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0ytt411_.scala:27:29 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                    maxNum = curr;\n\e[31m\e[31m   |\e[0m            \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (curr : Long)\n\e[31m   |\e[0m                             Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val n = arr.size\n        val res = 0L\n        val arr\
    \ = arr.toArray\n        for(i <- 0 until k) {\n            val j = (i + 1) %\
    \ n\n            res += arr(i)\n            res += arr(j)\n        }\n       \
    \ res\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6rh6bffm.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toArray\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6rh6bffm.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6rh6bffm.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            res += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean res.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6rh6bffm.scala:19:16 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            res += arr(j)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ res.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val ret = 0L\n        val n = arr.size\n        for (x<-n;x<k){\n\
    \            val cur = arr.get(x)\n            if(cur>10){\n                val\
    \ tmp = (cur.toInt*10).toLong + ret.toLong\n                ret = tmp\n      \
    \      }\n        }\n        ret\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn3siacut.scala:15:21 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (x<-n;x<k){\n\e[31m\e[31m   |\e\
    [0m                     ^\e[0m\n\e[31m   |\e[0m                     '<-' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn3siacut.scala:15:16\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (x<-n;x<k){\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value\
    \ foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        for (i <- 0 until arr.size) {\n   \
    \         var sum = sum + arr(i)\n            if (sum.toString.length <= k.toString.length)\
    \ {\n                return sum\n            }\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpprngsg54.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mvar\e[0m \e[36msum\e[0m = sum + arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvariable\e[0m \e[35msum\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val newList = arr.take(k) ++ (arr.drop(k))\n        val\
    \ maxLen = Math.max(newList.map(_ % 10).sum, 0).toLong\n        newList.zip(newList.tail).map\
    \ { case (x, y) => if (x._1 % 10 == y._1 % 10 && x._2 % 10 != y._2 % 10) return\
    \ x + y._2 else x + y._1 + 1 }.sum / maxLen\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt88m7n4y.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = arr.take(k) ++ (arr.drop(k))\n\e[31m\e[31m   |\e[0m                    \
    \           ^\e[0m\n\e[31m   |\e[0m                               Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt88m7n4y.scala:13:47 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = arr.take(k)\
    \ ++ (arr.drop(k))\n\e[31m\e[31m   |\e[0m                                    \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                                  \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt88m7n4y.scala:15:61 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        newList.zip(newList.tail).map { \e[33mcase\e[0m (x, y) => \e[33mif\e\
    [0m (x._1 % \e[31m10\e[0m == y._1 % \e[31m10\e[0m && x._2 % \e[31m10\e[0m != y._2\
    \ % \e[31m10\e[0m) \e[33mreturn\e[0m x + y._2 \e[33melse\e[0m x + y._1 + \e[31m1\e\
    [0m }.sum / maxLen\n\e[31m\e[31m   |\e[0m                                    \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \             value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpt88m7n4y.scala:15:122 -----------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        newList.zip(newList.tail).map { \e[33mcase\e[0m (x, y) => \e[33mif\e\
    [0m (x._1 % \e[31m10\e[0m == y._1 % \e[31m10\e[0m && x._2 % \e[31m10\e[0m != y._2\
    \ % \e[31m10\e[0m) \e[33mreturn\e[0m x + y._2 \e[33melse\e[0m x + y._1 + \e[31m1\e\
    [0m }.sum / maxLen\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _2 is not a member of Long"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val sum = 0\n        for (i<-0 until k) {\n            sum\
    \ += arr(i)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpku9qdupc.scala:14:24\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (k : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpku9qdupc.scala:15:16 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        var max2 : List[Long] = null\n\
    \        var maxSum : Long = 0\n        for (i <- arr.indices.reverse.toList if\
    \ arr.length > i) {\n            // get two max\n            val x = arr(i)\n\
    \            if (max2 == null || x > max2(1))\n                max2 = List(x,\
    \ arr(i))\n            else {\n                if (x > maxSum + max2(1))\n   \
    \                 maxSum = maxSum + max2(1)\n                max2 = List(arr(i),\
    \ x)\n            }\n        }\n        if (max2 != null)\n            maxSum\
    \ = maxSum + max2(1)\n        maxSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpavfs9p2g.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var result : Long = 0\n        for(i <- 0 until k) {\n \
    \           val tmp = (arr(i) - 1000l)\n            result += math.abs(tmp.toInt)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq7t86at0.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      var sum = 0\n      for(i <- 0 until k)\n      sum += arr(i)\n\
    \n      var i = k\n      while(i >= 0)\n      {\n        var sum = sum + (arr(i)\
    \ / 1000L)\n        i -= 1\n      }\n      return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9rsjpgjc.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m      \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (k : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9rsjpgjc.scala:15:10 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m      sum += arr(i)\n\e[31m\e[31m   |\e[0m      ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \      value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp9rsjpgjc.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36msum\e[0m = sum + (arr(i)\
    \ / \e[31m1000L\e[0m)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m \
    \  |\e[0m                  Recursive \e[33mvariable\e[0m \e[35msum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val n = new collection.mutable.Queue[Long]\n        for(i\
    \ <- 0 until arr.length) {\n            val s = arr(i)\n            val ns = n\n\
    \            for(j <- 0 until k) {\n                val m = s.toInt\n        \
    \        if(m < 100) {\n                    n.enqueue(s.toInt * 10)\n        \
    \        } else {\n                    val t = (s % 100).toInt\n             \
    \       n.enqueue(t)\n                    n.enqueue(s % 100)\n               \
    \ }\n            }\n            if(n.length == 1) n.enqueue(s)\n        }\n  \
    \      val result = n.dequeue\n        result * (100 + result)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxa_uolbw.scala:17:29\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (k : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arrSize = arr.size\n        var minDigits = 2\n    \
    \    var result = 0\n        var i = 0\n        while(i < k) {\n            val\
    \ sumDigits = arr.take(minDigits).sum\n            if (sumDigits < minDigits)\
    \ {\n                minDigits = sumDigits\n            }\n            else {\n\
    \                result += arr.take(minDigits).sum\n                minDigits\
    \ = 2\n                i = 0\n            }\n        }\n        result += arr.take(minDigits).sum\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0vf2rivy.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                minDigits = sumDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (sumDigits : Long)\n\e[31m   |\e[0m \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0vf2rivy.scala:23:23 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                result += arr.take(minDigits).sum\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0vf2rivy.scala:28:15 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        result += arr.take(minDigits).sum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of Int\
    \ - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      def f(i: Int, arr : List[Long]) : List[Long] = {\n       \
    \ if (i < arr.length && i <= k) {\n          val result = arr(i).toString.dropRight(1).dropRight(1).dropRight(1).dropRight(1)\n\
    \          val list = result.toInt\n          val newList: List[Long] = new mutable.ArrayList[Long]\n\
    \          newList(list) += arr(i)\n          f(i + 1, newList)\n        } else\
    \ {\n          arr\n        }\n      }\n      f(0,arr)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuyqxahkb.scala:17:40 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m          \e[33mval\e[0m \e[36mnewList\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyqxahkb.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          newList(list) += arr(i)\n\e[31m\e[31m   |\e\
    [0m          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a\
    \ member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuyqxahkb.scala:24:7 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m      f(\e[31m0\e[0m,arr)\n\e[31m\e[31m   |\e[0m      ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m      Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e\
    [31m]\e[0m\n\e[31m   |\e[0m      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        for (i <- 0 until k) {\n         \
    \   sum += arr.take(i).filter(i => i >= 10).sum\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93_p3egk.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        arr.take(math.min(k+1, arr.length)).foreach { i =>\n            arr.lastOption\
    \ match {\n                case None => result.append((i.toInt - arr.head).toLong)\n\
    \                case Some(last) =>\n                    if (i <= last - 2)\n\
    \                        result.append((i.toInt - last).toLong)\n            \
    \        else\n                        result.append((i-last).toLong)\n      \
    \      }\n        }\n        result.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1jnuko3.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        arr.take(math.min(k+\e\
    [31m1\e[0m, arr.length)).foreach { \e[36mi\e[0m =>\n\e[31m\e[31m   |\e[0m    \
    \                      ^^^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    Long\n\e[31m   |\e[0m                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val maxDigits = 2\n        val result = new mutable.MutableList[Long]()\n\
    \        val start = 1\n        val currentSum = arr(start)\n        for(i <-\
    \ 0 until k){\n            val newSum = currentSum + arr(i)\n            if((newSum\
    \ % 10).isPositive){\n                result.add(newSum)\n            }\n    \
    \        currentSum = newSum\n        }\n        val retSum = result.sum\n   \
    \     if(k > result.size){\n            val r = k - result.size\n            retSum\
    \ - r * (retSum / 100)\n        }\n        return retSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7l8xaae3.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7l8xaae3.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7l8xaae3.scala:19:29 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mif\e[0m((newSum % \e[31m10\e[0m).isPositive){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value isPositive is not a member of Long\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp7l8xaae3.scala:22:23 -----------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            currentSum = newSum\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val currentSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val res = arr.head + arr.last\n        val maxPos = arr.take(k).lastIndexWhere(x\
    \ => x > res).toInt // index of the largest number that fits in the first k elements\n\
    \        val minPos = arr.take(k).lastIndexWhere(x => x <= res).toInt // index\
    \ of the smallest number that fits in the first k elements\n        val rangePos\
    \ = Math.min(k, maxPos - minPos + 1) // number of elements with at most two digits\
    \ in the first k elements of arr\n        val maxTwoDigitsSum = res.toLong * 10\
    \ + arr[maxPos - rangePos]\n        val maxTwoDigitsSum2 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 1]\n        val maxTwoDigitsSum3 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 2]\n        val maxTwoDigitsSum4 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 3]\n        val maxTwoDigitsSum5 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 4]\n        val maxTwoDigitsSum6 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 5]\n        val maxTwoDigitsSum7 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 6]\n        val maxTwoDigitsSum8 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 7]\n        val maxTwoDigitsSum9 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 8]\n        val maxTwoDigitsSum10 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 9]\n        val maxTwoDigitsSum11 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 10]\n        val maxTwoDigitsSum12 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 11]\n        val maxTwoDigitsSum13 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 12]\n        val maxTwoDigitsSum14 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 13]\n        val maxTwoDigitsSum15 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 14]\n        val maxTwoDigitsSum16 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 15]\n        val maxTwoDigitsSum17 = res.toLong * 10 + arr[maxPos\
    \ - rangePos - 16]\n        val maxTwoDigitsSum18 = res.toLong * 10 + arr[maxPos\
    \ - range\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ca8hb3k.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8ca8hb3k.scala:14:30 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxPos\e[0m = arr.take(k).lastIndexWhere(\e[36mx\e\
    [0m => x > res).toInt \e[34m// index of the largest number that fits in the first\
    \ k elements\e[0m\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\
    \e[31m   |\e[0m                              Found:    (k : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8ca8hb3k.scala:15:30 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mminPos\e[0m = arr.take(k).lastIndexWhere(\e\
    [36mx\e[0m => x <= res).toInt \e[34m// index of the smallest number that fits\
    \ in the first k elements\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \      ^\e[0m\n\e[31m   |\e[0m                              Found:    (k : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ca8hb3k.scala:17:59 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSum\e[0m = res.toLong\
    \ * \e[31m10\e[0m + arr[\e[35mmaxPos\e[0m \e[35m-\e[0m \e[35mrangePos\e[0m]\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                                    \
    \   Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ca8hb3k.scala:18:71\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxTwoDigitsSum2\e[0m = res.toLong * \e[31m10\e[0m + arr[\e[35mmaxPos\e[0m\
    \ \e[35m-\e[0m \e[35mrangePos\e[0m \e[35m-\e[0m \e[31m1\e[0m]\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty)\n            return 0\n        var sum\
    \ = 0L\n        var i = k\n        for(elem <- arr) {\n            if (i < 2)\n\
    \                sum += elem\n            else if (i != arr.size && elem >= 10\
    \ * arr(i - 1))\n                sum += elem\n            i = i + 1\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdv2t3cn.scala:20:55\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (i != arr.size && elem >= \e[31m10\e[0m * arr(i - \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.size\n        val maxk = m + k - 1\n       \
    \ val twodigits = mutable.Map[Long, Long]()\n        var sum = 0l\n        //\
    \ first k-1 elements\n        for(i <- 0 until k) {\n            twodigits(arr(i))\
    \ += arr(i)\n        }\n        // second k-1 elements\n        for(i <- m until\
    \ maxk) {\n            twodigits(arr(i)) += arr(i)\n        }\n        for(i <-\
    \ 0 until m) {\n            sum = sum + (twodigits(arr(i)) / 1000 + twodigits(arr(i))\
    \ % 1000) * Math.pow(10, arr.size - 1 - i)\n        }\n        sum.toLong\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvnrvw5se.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtwodigits\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvnrvw5se.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvnrvw5se.scala:22:25 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- m until maxk) {\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (maxk : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        if (arr.isEmpty) {\n            return 0l\n        }\n \
    \       var sum = 0L\n        var kIndex = 0\n        val maxK = arr.size - 1\n\
    \        for(i <- 0 until k) {\n            sum += arr(if (i < (k - 1)) k else\
    \ i)\n        }\n        for(i <- 0 until k) {\n            sum += arr(if (i <\
    \ (kIndex + 1)) maxK else i)\n            kIndex += 1\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7iq5le4p.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7iq5le4p.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += arr(\e[33mif\e[0m (i < (k - \e[31m1\e[0m))\
    \ k \e[33melse\e[0m i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            value += is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7iq5le4p.scala:20:40 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += arr(\e[33mif\e[0m (i < (k - \e[31m1\e\
    [0m)) k \e[33melse\e[0m i)\n\e[31m\e[31m   |\e[0m                            \
    \            ^\e[0m\n\e[31m   |\e[0m                                        Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7iq5le4p.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = mutable.ArrayBuffer.empty[Long]\n        var\
    \ sum = 0\n        for (x <- arr.take(k)) {\n            sum += x\n        }\n\
    \        val rest = arr.drop(k)\n        val restSum = addElements(rest, 1)\n\
    \        val restSumToDigits = math.pow(restSum,9) / math.pow(10, arr.length.toDouble\
    \ - k)\n        result += sum * restSumToDigits\n        result.foldLeft(0l){case\
    \ (acc, x) => acc+x.toInt}\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp358vj_6n.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp358vj_6n.scala:15:27 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (x <- arr.take(k)) {\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             Found:    (k : Long)\n\e[31m   |\e[0m                          \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp358vj_6n.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp358vj_6n.scala:18:28 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mrest\e[0m = arr.drop(k)\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        arr.take(k).map(_ + arr(0)).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph37dc4d2.scala:13:17\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        arr.take(k).map(_ + arr(\e\
    [31m0\e[0m)).sum\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      \n        def sum(n: Long, arr: List[Long]): Long = {\n  \
    \        if (n < 2l) arr.headOption.getOrElse(0l) + sum(n + 2l, arr.tail)\n  \
    \        else sum(n + 2l, arr.tail)\n        }\n        \n        val n = arr.size\n\
    \        val arr = arr.toList\n        sum(n,arr)\n      }\n    \n      \n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport scala.math._\n\nobject Solution\
    \ {\n  def sumFirstKElements(arr: Array[Int], k: Int): Int = {\n    val sumFirstKElements\
    \ = arr zip arr take k reduce (_ + _)\n    arr.size - (sumFirstKElements zip arr.drop(k))\
    \ reduce (_ + _)\n  }\n}\n\n</code>\n<|/ a dscore=0 tags=scala |>\n<| c |>\nCan\
    \ you give an explanation for your code?\n<|/ c |>\n<| c |>\nThis is an example\
    \ of what i meant: https://stackoverflow.com/a/40733188/824743\n<|/ c |>\n<| a\
    \ tags=scala |>\n<code>\nscala> def sumFirstKElements(arr: Array[Int], k: Int):\
    \ Int = {\n     |     val sumFirstKElements = arr.zip(arr).take(k).map(_ + _)\n\
    \     |     arr.size - (sumFirstKElements.zip(arr.drop(k)).map(_ + _)) reduce\
    \ (_ + _)\n     | }\nsumFirstKElements: (arr: Array[Int], k: Int)Int\n\nscala>\
    \ sumFirstKElements(Array(1,2,3,4,5,6,7,8,9,10), 4)\nres0: Int = 10\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=scala dscore=0 |>\n<code>\ndef sumFirstKElements(arr:\
    \ Array[Int], k: Int): Int = {\n  var sumFirstKElements = 0\n  for(i <- 0 until\
    \ k) {\n    sumFirstKElements += arr(i)\n  }\n  arr.size - sumFirstKElements\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWhile this code snippet may solve the question,\
    \ [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpcagd4biu.scala:26:0 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpcagd4biu.scala:39:0 ----------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of\
    \ toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpcagd4biu.scala:68:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m</code>\n\e[31m\e[31m\
    \   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of toplevel definition\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcagd4biu.scala:81:0 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcagd4biu.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcagd4biu.scala:34:57\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mval\e[0m \e[36msumFirstKElements\e\
    [0m = arr zip arr take k reduce (_ + _)\n\e[31m\e[31m   |\e[0m               \
    \                                        ^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of (Int, Int), but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      var sum = 0\n      var i = 1 // we start with the first element\n\
    \      while (i < k) {\n        sum += arr(i)\n        i += 1\n      }\n     \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ohh3bkj.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        sum += arr(i)\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val nums = arr.take(k).toList \n        nums.reduce(_ +\
    \ _)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbl1zie6x.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = arr.take(k).toList \n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (k : Long)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = arr.foldLeft((0l, 0l))((acc, elem) => {\n \
    \           val acc1 = (acc(0), acc(1))\n            val acc2 = (acc1(0), acc1(1)\
    \ + elem)\n            val acc3 = (acc2(0), acc2(1) + acc1(0))\n            (acc3(0),\
    \ acc3(1))\n        })\n        val acc = (result(0), result(1))\n        if(k\
    \ > acc._1) result else acc\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0nokvz9x.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(k > acc._1)\
    \ result \e[33melse\e[0m acc\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (result : (Long, Long))\n\
    \e[31m   |\e[0m                       Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0nokvz9x.scala:20:35 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(k > acc._1) result \e[33melse\e\
    [0m acc\n\e[31m\e[31m   |\e[0m                                   ^^^\e[0m\n\e\
    [31m   |\e[0m                                   Found:    (acc : (Long, Long))\n\
    \e[31m   |\e[0m                                   Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new ListBuffer[Long]()\n        for (i <- 0\
    \ until k ) result += arr(i)\n        val maxCount = result.count(i => i.length\
    \ <= 2)\n        result.filter(_ <= maxCount).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplov_hoa0.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k ) result += arr(i)\n\e[31m\e[31m   |\e[0m             \
    \             ^\e[0m\n\e[31m   |\e[0m                          Found:    (k :\
    \ Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplov_hoa0.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = result.count(\e\
    [36mi\e[0m => i.length <= \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var count = 0\n        for (el <- arr.take(k))\
    \ {\n            if (math.floor(el*100) <= k) {\n                sum += el\n \
    \               count += 1\n            }\n        }\n        return sum * (math.pow(10,\
    \ count) / math.pow(10, k));\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiel3en9z.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (el <-\
    \ arr.take(k)) {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Found:    (k : Long)\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpiel3en9z.scala:17:20 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                sum += el\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiel3en9z.scala:21:15\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mreturn\e[0m sum\
    \ * (math.pow(\e[31m10\e[0m, count) / math.pow(\e[31m10\e[0m, k));\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    Double\n\e[31m   |\e[0m               Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n      val sorted = arr.sorted\n      val result = 0\n      for(\
    \ i <- 0 to k-1) result += sorted.apply(i)\n      result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphlfrt6t_.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m      \e[33mfor\e[0m( i <- \e\
    [31m0\e[0m to k-\e[31m1\e[0m) result += sorted.apply(i)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^\e[0m\n\e[31m   |\e[0m                     Found:   \
    \ Long\n\e[31m   |\e[0m                     Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphlfrt6t_.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mfor\e[0m( i <- \e[31m0\e[0m to k-\e[31m1\e\
    [0m) result += sorted.apply(i)\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member of Int\
    \ - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.take(k).toList\n        var res = 0l\n   \
    \     var i = 0\n        while (i < arr.length) {\n            val sum = arr(i)\
    \ + arr(i + 1)\n            res = sum if sum > res else res\n            i +=\
    \ 2\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq0odfki3.scala:18:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            res = sum \e[33mif\e[0m sum > res \e[33melse\e\
    [0m res\n\e[31m\e[31m   |\e[0m                      ^^\e[0m\n\e[31m   |\e[0m \
    \                     end of statement expected but 'if' found\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpq0odfki3.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.take(k).toList\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        var sum = 0\n        var i\
    \ = k\n        while(i >= 0 && i < arr.length) {\n            sum += arr(i).toLong\n\
    \            i -= 1\n        }\n        if (i < 0) {\n            return sum\n\
    \        }\n        if (sum < 10) {\n            return sum\n        }\n     \
    \   for(i = k; i < arr.length; i++){\n            val x = arr(i).toLong\n    \
    \        sum += (x / 10).toLong\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxocmca9e.scala:26:14 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m(i = k; i < arr.length; i++){\n\
    \e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxocmca9e.scala:26:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m(i\
    \ = k; i < arr.length; i++){\n\e[31m\e[31m   |\e[0m                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                 '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxocmca9e.scala:26:38\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m(i\
    \ = k; i < arr.length; i++){\n\e[31m\e[31m   |\e[0m                          \
    \            ^\e[0m\n\e[31m   |\e[0m                                      pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxocmca9e.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxocmca9e.scala:26:17\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m(i\
    \ = k; i < arr.length; i++){\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e\
    [31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.I"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val size = arr.size\n        val min = arr.head\n      \
    \  val max = arr.last\n        var currentSum = min.toLong\n        for (i <-\
    \ k to size by 2) {\n            currentSum = currentSum + arr(i).toLong\n   \
    \     }\n        if (currentSum < max) {\n            currentSum = currentSum\
    \ + max\n        }\n        if (currentSum > max) {\n            currentSum =\
    \ currentSum - max\n        }\n        currentSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa0tx2k9r.scala:18:42\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            currentSum = currentSum\
    \ + arr(i).toLong\n\e[31m\e[31m   |\e[0m                                     \
    \     ^\e[0m\n\e[31m   |\e[0m                                          Found:\
    \    (i : Long)\n\e[31m   |\e[0m                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var ans = 0\n        var count = 0\n        for (i <- 0\
    \ until arr.length) {\n            if (count > k) {\n                ans += arr(i)\n\
    \                count = 0\n            } else {\n                count += 1\n\
    \            }\n        }\n        return ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpevl3khde.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                ans += arr(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val sum = 0\n        val maxCount = arr.take(k).filter(_\
    \ > 9).length\n        var i = 0\n        var maxIndex = 0\n        var j = 0\n\
    \        while (i < k) {\n            while (j < maxCount && arr(i + j) < 9) {\n\
    \                j++\n            }\n            sum += arr(i + j)\n         \
    \   i += j + 1\n            maxIndex = j - maxCount\n            j = 0\n     \
    \   }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyhjcdq93.scala:20:19 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyhjcdq93.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e\
    [0m = arr.take(k).filter(_ > \e[31m9\e[0m).length\n\e[31m\e[31m   |\e[0m     \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \      Found:    (k : Long)\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyhjcdq93.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            sum += arr(i\
    \ + j)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    value += is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val ans = 0l\n        var l = arr.size\n        while(l\
    \ >= k){\n            val min = arr.take(l).min\n            val max = arr.take(l).max\n\
    \            ans += max\n            l -= 1\n        }\n        ans\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx0_utxhf.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            ans += max\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean ans.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        def toTwoDigits(n : Long) =\n            if(n>9) n else\
    \ (n%10 + 10*n%10)\n        val result = 0.until(arr.length).foldLeft(0l) { (res:\
    \ Long, i: Long) => res + toTwoDigits(arr(i)) + toTwoDigits(arr(i+1)) }\n    \
    \    if(result.length<=k) result else (result.take(k)).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd91k1ju_.scala:15:102\
    \ -------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[31m0\e[0m.until(arr.length).foldLeft(\e[31m0l\e[0m) { (\e[36mres\e[0m:\
    \ \e[35mLong\e[0m, \e[36mi\e[0m: \e[35mLong\e[0m) => res + toTwoDigits(arr(i))\
    \ + toTwoDigits(arr(i+\e[31m1\e[0m)) }\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \         Found:    (i : Long)\n\e[31m   |\e[0m                              \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpd91k1ju_.scala:15:124 -------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[31m0\e[0m.until(arr.length).foldLeft(\e\
    [31m0l\e[0m) { (\e[36mres\e[0m: \e[35mLong\e[0m, \e[36mi\e[0m: \e[35mLong\e[0m)\
    \ => res + toTwoDigits(arr(i)) + toTwoDigits(arr(i+\e[31m1\e[0m)) }\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                            ^^^\e[0m\n\e[31m\
    \   |\e[0m                                                          Found:   \
    \ Long\n\e[31m   |\e[0m                                                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd91k1ju_.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m(result.length<=k)\
    \ result \e[33melse\e[0m (result.take(k)).sum\n\e[31m\e[31m   |\e[0m         \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value length is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd91k1ju_.scala:16:49\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m(result.length<=k)\
    \ result \e[33melse\e[0m (result.take(k)).sum\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                   "
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = new mutable.ListBuffer[Long]()\n        for (i <- 0 until k)\
    \ {\n            sum += arr.take(i)\n        }\n        arr.length -= k\n    \
    \    for (i <- 0 until arr.length) {\n            if (sum(i) > 2) {\n        \
    \        result += sum(i)\n            } else {\n                result += arr(i)\n\
    \            }\n        }\n        arr.length -= result.length\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyue944kc.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyue944kc.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyue944kc.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36msum\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyue944kc.scala:16:26 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (k : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979881
