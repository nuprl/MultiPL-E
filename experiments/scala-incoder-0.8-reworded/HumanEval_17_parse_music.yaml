name: HumanEval_17_parse_music
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    // Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    // not last.\n    // Here is a\
  \ legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts\
  \ two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"\
  o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n\
  \    def parseMusic(music_string : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
  )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o\
  \ o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o|\
  \ o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        val music_list = music_string.split(\"\\\\|\".r).map(x => x.split(\"\
    o\".r)).toList\n        val music_list = music_list.map(x => x(0).length % 4 ==\
    \ 0 ? x.map(x => x.length / 4) : x.map(x => x.length / 4))\n        val music_list\
    \ = music_list.map(x => x.map(y => y.toLong)).flatten\n        val music_list\
    \ = music_list.map(x => x % 4 == 0 ? x.toLong : x.toLong*4).toList\n        val\
    \ music_list = music_list.map(x => x % 4 == 0 ? x.toLong : x.toLong*4).filter(x\
    \ => x % 4 == 0)\n        val music_list = music_list.filter(x => x % 4 == 0)\n\
    \        val music_list = music_list.filter(x => x > 0)\n        val music_list\
    \ = music_list.filter(x => x < music_list.length)\n        val music_list = music_list.filter(x\
    \ => x != 0)\n        val music_list = music_list.filter(x => x > 0)\n       \
    \ val music_list = music_list.filter(x => x < music_list.length)\n        val\
    \ music_list = music_list.filter(x => x != 0)\n        val music_list = music_list.filter(x\
    \ => x > 0)\n        val music_list = music_list.filter(x => x < music_list.length)\n\
    \        val music_list = music_list.filter(x => x != 0)\n        val music_list\
    \ = music_list.filter(x => x > 0)\n        val music_list = music_list.filter(x\
    \ => x < music_list.length)\n        val music_list = music_list.filter(x => x\
    \ != 0)\n        val music_list = music_list.filter(x => x > 0)\n        val music_list\
    \ = music_list.filter(x => x < music_list.length)\n        val music_list = music_list.filter(x\
    \ => x != 0)\n        val music_list = music_list.filter(x => x > 0)\n       \
    \ val music_list = music_list.filter(x => x < music_list.length)\n        val\
    \ music_list = music_list.filter(x => x != 0)\n        val music_list = music_list.filter(x\
    \ => x > 0)\n        val music_list = music_list.filter(x => x < music_list.length)\n\
    \        val music_list = music_list.filter(x => x != 0)\n        val music_list\
    \ = music_list.filter(x => x > 0)\n        val music_list = musi", "        //\
    \ Complete this function\n        var beats_per_bar : ListBuffer[Long] = ListBuffer()\n\
    \        var number_of_beats : Long = 0\n        var current_string : String =\
    \ \"\"\n        var beats_left : Long = 0\n        for(c <- music_string) {\n\
    \            // Complete this function\n        }\n        return beats_per_bar",
  "        //TODO: Implement the function\n        music_string.split(\" \").map(music_character\
    \ => music_character.toChar) match {\n            case Array(ch) => List(ch.toLong)\n\
    \            case _       => List()\n        }", "        val music_list = music_string.split(\"\
    \\\\|\")\n        var note_count : Int = 1\n        val music_beats = music_list.map(music_note\
    \ => {\n            if (music_note == \".\") {\n                note_count +=\
    \ 1\n                note_count = 1\n            } else {\n                note_count\
    \ -= 1\n            }\n            note_count\n        }).toList\n        val\
    \ music_beats_sorted = music_beats.sortBy(_).reverse\n        val music_beats_last\
    \ = music_beats_sorted.takeWhile(_ != 0).map(music_last => music_last*4).toList\n\
    \        val music_beats_last_sorted = music_beats_last.sortBy(_).reverse\n  \
    \      music_beats_last_sorted match {\n            case head :: Nil => head\n\
    \            case music_last :: tail =>\n                val music_beats_last_last_sorted\
    \ = tail.sortBy(_).reverse\n                if (music_last == \"o\") {\n     \
    \               if (music_beats_last_last_sorted == music_beats_last) {\n    \
    \                    music_beats_last_last_sorted\n                    } else\
    \ {\n                        music_beats_last_last_sorted.drop(music_beats_last.length)\n\
    \                    }\n                } else if (music_last == \"|\") {\n  \
    \                  if (music_beats_last_last_sorted == music_beats_last) {\n \
    \                       music_beats_last_last_sorted\n                    } else\
    \ {\n                        music_beats_last_last_sorted.drop(music_beats_last.length)\n\
    \                    }\n                }\n        }", "        var beats_per_note\
    \ : List[Long] = Nil\n        var rest = music_string.dropWhile(_ != 'o').dropWhile(_\
    \ != '|')\n        rest.foreach {\n            c =>\n            if (c == 'o')\
    \ {\n                if (beats_per_note.size == 4) {\n                    beats_per_note\
    \ = Nil\n                }\n                beats_per_note ::= 4l.toLong\n   \
    \         } else if (c == 'o|') {\n                if (beats_per_note.size ==\
    \ 2) {\n                    beats_per_note = Nil\n                }\n        \
    \        beats_per_note ::= 2l.toLong\n            } else if (c == '|') {\n  \
    \              if (beats_per_note.size == 1) {\n                    beats_per_note\
    \ = Nil\n                }\n                beats_per_note ::= 1l.toLong\n   \
    \         } else {\n                println(\"Unknown symbol: \" + c)\n      \
    \      }\n        }\n        if (beats_per_note.size == 0) return Nil\n      \
    \  if (beats_per_note.size == 4) beats_per_note = beats_per_note.init\n      \
    \  beats_per_note", "        // Your code goes here\n        var noteList = music_string.split('\
    \ ');\n        var noteList2 = noteList.dropRight(noteList.length-1);\n      \
    \  var noteList3 = noteList2.map(_.toChar).map(x => x.toInt).toList;\n       \
    \ var noteList4 = noteList3.zip(noteList3.tail).map{ case (l, r) => l }\n    \
    \    return noteList4.toList.map(x => (x.toDouble / 16).toInt)", "        var\
    \ output: List[Long] = Nil\n        music_string.split(\"\\\\|\").map(music_string\
    \ => {\n            val note_array = music_string.split(\"\\\\ \").map(music_string\
    \ => music_string.charAt(0) - 'a')\n            val note_count = note_array.length\n\
    \            val beat_number = note_count(3)\n            if (note_count(3) >\
    \ 0) note_count(3) * 4\n            else note_count(1) * 2\n        }).reduceRight(_\
    \ + _).scanLeft(0l) { (acc, x) => acc += x }\n        music_string.split(\"\\\\\
    \ \").map(music_string => music_string.charAt(0) - 'a').length.times(music_string.split(\"\
    \\\\ \").length).reduceLeft(_ + _).scanLeft(0l) { (acc, x) => acc += x }\n   \
    \     output", "        //Your code goes here\n        var noteList = music_string.split(\"\
    \ \").map(_.toChar).flatMap(x => x.toLong).toList\n        var last = 0\n    \
    \    var lastList : List[Long] = List()\n        \n        for (note <- 0 until\
    \ noteList.length) {\n            if (noteList(note) == '.') {\n             \
    \   if (last > 0) {\n                    lastList ::= last\n                 \
    \   last = lastList.head\n                    lastList = lastList.tail\n     \
    \           } else {\n                    lastList ::= 0\n                }\n\
    \            } else {\n                last = note\n            }\n        }\n\
    \n        if (last > 0) {\n            lastList ::= last\n            last = lastList.head\n\
    \            lastList = lastList.tail\n        } else {\n            lastList\
    \ ::= 0\n        }\n        \n        \n        \n        return lastList", " \
    \       val music_string_list = music_string.split(\"\\\\|\").toList\n       \
    \ val music_string_list_length = music_string_list.len\n        if (music_string_list_length\
    \ == 1) {\n            return List(1l.toLong)\n        } else if (music_string_list_length\
    \ == 2) {\n            val notes = music_string_list.head :: music_string_list.tail\n\
    \            val notes_length = notes.len\n            val notes_length_in_music_string_list\
    \ = (notes_length - 1).toLong\n            val notes_index_in_music_string_list\
    \ = 1 until notes_length_in_music_string_list\n            notes_index_in_music_string_list\
    \ match {\n                case Seq(1 until music_string_list.last.length) =>\n\
    \                    val notes_index_in_music_string_list_plus_1 = notes_index_in_music_string_list\
    \ + 1\n                    val notes_index_in_music_string_list_minus_1 = notes_index_in_music_string_list\
    \ - 1\n                    notes_index_in_music_string_list_plus_1 until notes_index_in_music_string_list_minus_1\
    \ map { notes_index_in_music_string_list =>\n                        val notes_index_in_music_string_list_plus_1_plus_1\
    \ = notes_index_in_music_string_list_plus_1 + 1\n                        val notes_index_in_music_string_list_minus_1_minus_1\
    \ = notes_index_in_music_string_list_minus_1 - 1\n                        notes_index_in_music_string_list_plus_1_plus_1\
    \ until notes_index_in_music_string_list_minus_1_minus_1 map { notes_index_in_music_string_list_plus_1_plus_1\
    \ =>\n                            val notes_index_in_music_string_list_plus_1_plus_1_plus_1\
    \ = notes_index_in_music_string_list_plus_1_plus_1 + 1\n                     \
    \       val notes_index_in_music_string_list_minus_1_minus_1_minus_1 = notes_index_in_music_string_list_minus_1_minus_1\
    \ - 1\n                            notes_index_in_music_string_list_plus_1_plus_1_plus_1\
    \ until notes_index_in_music_string_list_minus_1_minus_1_minus_1 map { notes_index_in_music_string_list_plus_1_plus_1_plus_1\
    \ =>\n                                notes_index_in_music_string_list_plus_1_plus_1_plus_1\
    \ :: notes\n                            }\n                        }\n       \
    \             }\n                case _ => throw new Exception(\"Invalid music\
    \ string list.\")\n            }\n        }\n        else if (music_string_list_length\
    \ == music_string_list.last) {\n            val notes = music_string_list.head\
    \ :: music_string_list.tail\n            val ", "        music_string.split('\
    \ ').map(music_string => {\n            val notes = music_string.split('|')\n\
    \            var lastNote = notes.head\n            var restNotes = notes.tail\n\
    \            val music = new mutable.Queue[Long]\n            var i = 1\n    \
    \        while (i < restNotes.length) {\n                val note = restNotes(i\
    \ - 1).toChar\n                if (note == 'o' || note == 'o|') {\n          \
    \          music.enqueue(lastNote.toLong + 4l.toLong)\n                    lastNote\
    \ = note\n                    restNotes = restNotes.drop(i + 1)\n            \
    \    } else {\n                    music.enqueue(lastNote.toLong + 2l.toLong)\n\
    \                    lastNote = note\n                    restNotes = restNotes.drop(i\
    \ + 1)\n                }\n                i += 1\n            }\n           \
    \ music.enqueue(lastNote.toLong + restNotes.last.toLong)\n            music.toList\n\
    \        }).reduceLeft((a, b) => a.zip(b)).takeWhile((music, note) => note <=\
    \ music && music <= note)", "        val music_list = music_string.split(' ');\n\
    \        val music_list2 = music_list.toList\n        var beats = 0\n\n      \
    \  music_list2.map(x => {\n            if (\"o\".equalsIgnoreCase(x)) {\n    \
    \            beats += 4\n            }\n            else if (\"o|\".equalsIgnoreCase(x))\
    \ {\n                beats += 2\n            }\n            else if (\".|\".equalsIgnoreCase(x))\
    \ {\n                beats += 1\n            }\n            else {\n         \
    \       throw new Exception(\"Invalid music string format\")\n            }\n\
    \        })\n\n        val result = beats.toList.map(x => x.toLong)\n\n      \
    \  return result ", "        music_string.replace(\" \", \"\").replace(\"|\",\
    \ \"\").toList.map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(music_string.indexOf(note)\
    \ + 1).length\n            val last = (music_string.lastIndexOf(note) == music_string.length\
    \ - 1)\n            (note -> beats * last.toLong).toList\n        })", "     \
    \   music_string.split('|').toList.tail.foldLeft(List[Long]())((accumulator, element)\
    \ => {\n            if(element == \".\") accumulator :+ 4l.toLong\n          \
    \  else if(element == \"|\") accumulator :+ 2l.toLong\n            else accumulator\
    \ :+ 1l.toLong\n        })", "        // Your code here\n        val music_list\
    \ = music_string.split(' ').toList\n        var beats_notes = List[Long](1l.toLong)\n\
    \        var total_beats = 0\n        val list_notes = music_list.map(music_element\
    \ => {\n            val music_note = music_element.charAt(0).toLowerCase\n   \
    \         val note_count = music_element.substring(1)\n            val music_note_count\
    \ = note_count.toInt\n            beats_notes = beats_notes :+ music_note_count\n\
    \            beats_notes match {\n                case music_note :: music_note_count\
    \ :: Nil => music_note_count\n                case _ => 0\n            }\n   \
    \     })\n        val music_notes_count = list_notes.reduce((count, music_note)\
    \ => music_note + count)\n        val music_notes_count_with_beats_notes = music_notes_count\
    \ + total_beats * 4\n        beats_notes = beats_notes.take(music_notes_count_with_beats_notes)\n\
    \        return beats_notes", "        val music_list = music_string.split(\"\\\
    \\|\")\n        val notes_count = music_list.size // how many notes does music\
    \ string have\n        val beats_count = music_list(0).toList.size // how many\
    \ beats does music string last\n        val notes_count_list: List[Int] = music_list.map\
    \ { a =>\n            a.split(\"\\\\|\").length\n        }\n        val notes_count_list_sum\
    \ = notes_count_list.sum\n        val notes_list: List[Long] = music_list.map\
    \ { a =>\n            a.split(\"\\\\|\").map(_.toLong)\n        }\n        val\
    \ notes_list_sum_len = notes_list.sum\n        val notes_list_without_last_beat\
    \ = notes_list.map(a => (a - notes_list.last).toList)\n        val notes_list_without_last_beat_length\
    \ = notes_list_without_last_beat.sum\n\n        // If music string have odd number\
    \ of beats\n        if (notes_list_sum_len % 2 == 0) {\n            // If music\
    \ string last two beats is the last note in music string\n            if (notes_list_sum_len\
    \ % 2 == 1) {\n                // If music string last beat is the last note in\
    \ music string\n                if (notes_list_length_sum % 2 == 1) {\n      \
    \              // if music string last beat is the last note in music string\n\
    \                    if (notes_list_without_last_beat_length == 0) {\n       \
    \                 // If music string has last note is note of last note\n    \
    \                    if (notes_list_sum_len == 1) {\n                        \
    \    // If music string has only one note\n                            if (notes_count\
    \ == 1) {\n                                // If music string has only one note\n\
    \                                return List(beats_count)\n                  \
    \          } else {\n                                // If music string has more\
    \ than one note\n                                return (notes_count_list_sum,\
    \ beats_count)\n                            }\n                        } else\
    \ {\n                            // If music string has more than one note but\
    \ the last beat is not a last note\n                            if (notes_list_sum_len\
    \ == 1) {\n                                // If music string has only one note\n\
    \                                return List(beats_count)\n                  \
    \          } else {\n                                // If music string has more\
    \ than one note\n                                return (notes_count_list_sum,\
    \ beats_count)\n                            }\n                        }\n   \
    \                 } else {\n                        // If music string has last\
    \ note is note of last note\n                        if (notes_list_sum_len ==\
    \ 1) {\n                            // If music string has only one note\n   \
    \                         if (notes_count == 1) {\n                          \
    \      // If music string has only one note\n                                return\
    \ List(beats_count)\n                            } else {\n                  \
    \              // If music string has more than one note", "        music_string\
    \ match {\n            case \"o o| .| o| o| .| .| .| .| o o\" => List(4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong)\n            case \"o o| o| .| o| .| .| .|\
    \ .| o o\" => List(2l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong)\n            case \"\
    o| .| o| o| .| .| .| .| o| o\" => List(1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong)\n        \
    \    case _ => List()\n        }", '        music_string.split("o|.|").map{ elem
    => elem.split("o").map{ elem => elem.split("|").map{ elem => elem.toLong.toInt}
    } }.flatten.flatten.toList', "        music_string.split(' ').map(music_char =>\
    \ {\n            if(music_char.equals(\"o\"))\n                4\n           \
    \ else if(music_char.equals(\"o|\"))\n                2\n            else if(music_char.equals(\"\
    .|\"))\n                1\n            else throw new Exception(\"Error parsing\
    \ music_char: \" + music_char)\n        }).sum", "        var output: List[Long]\
    \ = Nil\n        var prev: String = \"\"\n        for (x <- music_string.toCharArray())\
    \ {\n            if (x == 'o' || x == '|' || x == ' ') {\n                if (prev\
    \ == 'o' || prev == '|' || prev == ' ') {\n                    output ::= 4L\n\
    \                } else {\n                    output ::= 2L\n               \
    \ }\n            }\n            output ::= 1L\n            prev = x\n        }\n\
    \        return output.reverse", "        var note_beat = music_string.map(x =>\
    \ if(x.equals(\"o\")) 4 else 2).reduce(_ + _)\n        var last_beat = music_string.last.toLong\n\
    \        music_string.tail.dropRight(1).map(x => {\n            if(x.equals(\"\
    .\"))\n                note_beat = note_beat.toLong * 4\n            else if(x.equals(\"\
    o|\"))\n                note_beat = note_beat.toLong * 2\n            else if(x.equals(\"\
    o\"))\n                note_beat = note_beat.toLong\n            else\n      \
    \          note_beat = note_beat.toLong * 1\n            last_beat = note_beat\n\
    \            note_beat = note_beat.toLong\n        }).reverse.mkString.split(\"\
    \\\\s+\").map(x => x.toLong).distinct", "        val music_string = music_string.trim\n\
    \        if(music_string.trim.isEmpty) List()\n        else music_string.split(\"\
    \ \").map(music => {\n            if(music.startsWith(\"o\"))\n              \
    \  1L\n            else if(music.startsWith(\"o|\"))\n                2L\n   \
    \         else if(music.startsWith(\".|\"))\n                3L\n            else\n\
    \                -1L\n        }).toList", '        music_string.split("""\s+""").map(music_string
    => { val s = music_string.toUpperCase(); if (s.endsWith("O")) 4L else if (s.endsWith("|"))
    2L else if (s.endsWith(".|")) 1L else -1L }).filter(music_string => music_string
    != -1).sortBy(music_string => music_string).map(music_string => music_string %
    4).distinct().toList', "        // You need this list to store our results\n \
    \       var results : List[Long] = List()\n\n        // Iterate over all characters\
    \ in the music_string\n        for(c <- music_string) {\n            // If character\
    \ is \".\" or \"o\", add it to results list\n            if(c == '.' || c == 'o')\
    \ {\n                results = results ::: List(0)\n            } else if(c ==\
    \ 'o|') {\n                results = results ::: List(0)\n            } else if(c\
    \ == '|') {\n                results = results ::: List(4)\n            } else\
    \ {\n                // Otherwise add number of beats to last element in results\
    \ list\n                results = results ::: List((results.lastOption.getOrElse(0)\
    \ + 1) * 1)\n            }\n        }\n        return results", "        val notes_map\
    \ = music_string.split(\" \").map(x => x.split(\"|\")).map(x => (x.head, x(1))).map\
    \ { case (note, duration) => (note, duration.toLong) }\n        val notes = notes_map.map\
    \ { case (note, duration) => if (note == \".\") 4L else (duration * 2L).toLong\
    \ }\n        val notes_map = notes_map.map { case (note, duration) => if (note\
    \ == \"o\") duration * 4L else (duration * 2L).toLong }\n        notes ++ notes_map",
  "        val music_chars = music_string.grouped(4)\n            .map(s => s.toChar)\n\
    \            .filter(c => c != '.')\n            .map(c => (c == 'o') ? 1l : (c\
    \ == '|') ? 2l : (c == '.') ? 4l : (c == '~') ? 4l : 0)\n            .filter(c\
    \ => c != 0)\n            .iterator\n        val result: List[Long] = music_chars.takeWhile(_\
    \ != 4).map(_ * 2).toList\n        result.reverse.map(v => v.asInstanceOf[Long]).toList",
  "        var note_list : List[Long] = Nil\n        music_string.split(\"\\\\|\"\
    ).foreach(s => {\n            note_list = note_list ::: (0 until s.length)\n \
    \           for (i <- 0 until s.length - 1) {\n                if (s(i) == '.'\
    \ || s(i) == 'o') {\n                    note_list(s.length-i-1) = note_list(s.length-i-1)\
    \ - 4\n                }\n            }\n        })\n        return note_list",
  "        music_string.replace(\" \", \"\").toCharArray.filter(c => c != '|' && c\
    \ != 'o').toList.map(_.toLong)", "        val music_array = music_string.split(\"\
    \\\\|\\\\|\")\n        var list: List[Long] = Nil\n        var beats_so_far =\
    \ 0L\n        for (music_note <- music_array) {\n            if (music_note ==\
    \ \"o\") {\n                list = music_array.reverse.filter(x => x != \"o\"\
    ).foldRight(list)(beats => beats + 1L)\n                beats_so_far = 0L\n  \
    \          } else {\n                if (music_note != \"|\") {\n            \
    \        beats_so_far += 1L\n                }\n            }\n        }\n   \
    \     list.reverse", "        var lastsBeats : List[Long] = Nil\n        var strLen\
    \ = music_string.length\n        var notes = music_string.split(\"\").toList\n\
    \        var notesCount = notes.length\n\n        while(notesCount > 0) {\n  \
    \          strLen -= 1\n            if(!lastsBeats.isEmpty) {\n              \
    \  val lastsBeat = lastsBeats.last\n                val note = notes(0)\n    \
    \            lastsBeats.lastOption match {\n                    case Some(lastsBeat)\
    \ if(note == lastsBeat) =>\n                        notesCount -= 1\n        \
    \                lastsBeats.lastOption = None\n                    case Some(lastsBeat)\
    \ =>\n                        lastsBeats.last += 1\n                        lastsBeats.last\
    \ = None\n                    case None =>\n                        lastsBeats.append(note)\n\
    \                        lastsBeats.last = None\n                }\n         \
    \   } else {\n                lastsBeats.append(notes.last)\n                lastsBeats.last\
    \ = None\n            }\n            notes = notes.tail\n        }\n        return\
    \ lastsBeats", "        val notes = music_string\n            .split(\"\")\n \
    \           .filterNot(_ <= \"o\")\n            .map(n => n.toInt)\n         \
    \   .filter(_ > 0)\n            .map(n => n % 4)\n            .toList\n      \
    \  val beats = music_string.split(\"\").filterNot(_ <= \"o\").map(n => n.toInt).toList\n\
    \        notes.zip(beats).map(n => n._1 + n._2)", "        music_string.split('\
    \ ').map(musicalNote => {\n            var rest = musicalNote.slice(0,1)\n   \
    \         var lastNote = musicalNote.slice(1,2)\n            var restBeats = 0\n\
    \            var lastBeats = 0\n            if(rest == '.') {\n              \
    \  restBeats = 4\n                lastBeats = 4\n            }\n            if(rest\
    \ == 'o') {\n                restBeats = 2\n                lastBeats = 2\n  \
    \          }\n            if(rest == '|') {\n                restBeats = 1\n \
    \               lastBeats = 1\n            }\n            if(lastNote == 'o')\
    \ {\n                lastBeats = 4\n            }\n            if(lastNote ==\
    \ '|') {\n                lastBeats = 2\n            }\n            if(lastNote\
    \ == '.') {\n                lastBeats = 1\n            }\n            restBeats\
    \ * (lastBeats + 1)\n        }).toList", "        var music_notes = music_string.split(\"\
    \\\\|\").filter(s => !s.isEmpty).map(n => (n.head.toInt, n.tail.map(_.toInt))).toList\n\
    \        var beats : List[Long] = List[Long]()\n        var last_note : List[Int]\
    \ = List[Int]()\n        music_notes.foreach(note => {\n            if (note._1\
    \ == 0) return\n            if (note._1 == 1) beats.append(note._2)\n        \
    \    if (note._1 == 2) last_note.clear()\n            if (note._1 == 3) last_note.append(note._2)\n\
    \        })\n        if (last_note.isEmpty) {\n            val n = music_notes.find(_._1\
    \ == 4)._2\n            beats.append(n)\n            beats.append(n)\n       \
    \     beats.append(n)\n        } else {\n            beats.append(last_note.max)\n\
    \        }\n        return beats", "        music_string.split(\"\\\\|\").map(music_string\
    \ => {\n            // find each \"o\" or \"o|\" and add its length\n        \
    \    // \"o|\" -> 3 beats\n            // \"o\" -> 4 beats\n            val beat_length\
    \ = music_string.indexOf(\"o\") == -1 ? music_string.length : music_string.indexOf(\"\
    o\") + music_string.indexOf(\"|\")\n            music_string.indexOf(\"o\") ==\
    \ -1 ? 0L : (music_string.indexOf(\"o\") + music_string.indexOf(\"|\") + 4L)\n\
    \        }).sorted.toList.map(music_string => music_string.length.toLong)", '        //
    Your code goes here', "        if (music_string.isEmpty) {\n            List()\n\
    \        }\n        music_string.split(' ').toList.reverse.flatMap {\n       \
    \     case x: \"o\" => List(1l.toLong)\n            case x: \"o|\" => List(2l.toLong)\n\
    \            case x: \".|\" => List(1l.toLong)\n            case _ => List()\n\
    \        }.foldLeft(List[Long]()) {\n            case (acc, beats) => acc :+ beats\
    \ * 4\n        }", "        var last_note = \"\"\n        var last_beat = 0L\n\
    \        var last_count = -1\n\n        val notes_in_string = (music_string\n\
    \            .split(\" \")\n            .filter(_.length() > 0)\n            .map(_.charAt(0))\n\
    \        )\n\n        notes_in_string.toList.sortWith(_.compare(last_note) > 0).foreach\
    \ {\n            note => {\n                if (note == \".\") {\n           \
    \         if (last_count >= 0) {\n                        last_beat = last_count\
    \ * 4L\n                        last_count = 0\n                        last_note\
    \ = \"\"\n                    } else {\n                        last_beat = 0L\n\
    \                        last_count = 0\n                        last_note = note\n\
    \                    }\n                } else if (note == \"o\") {\n        \
    \            if (last_note == \"\") {\n                        last_beat = 0L\n\
    \                        last_count = 1\n                    } else {\n      \
    \                  last_beat = 0L\n                        last_count = 1\n  \
    \                      last_note = note\n                    }\n             \
    \   } else if (note == \"|\") {\n                    if (last_note == \"\") {\n\
    \                        last_beat = 0L\n                        last_count =\
    \ 2\n                    } else {\n                        last_beat = 0L\n  \
    \                      last_count = 2\n                        last_note = note\n\
    \                    }\n                } else {\n                    last_beat\
    \ = 0L\n                    last_count = -1\n                    last_note = note\n\
    \                }\n            }\n        }\n\n        if (last_note != \"\"\
    ) {\n            last_beat = 0L\n            last_count = -1\n            last_note\
    \ = \"\"\n        }\n\n        return (List(4L * last_beat, 2L * last_beat, 1L\
    \ * last_beat, 2L * last_beat, 2L * last_beat, 1L * last_beat, 1L * last_beat,\
    \ 1L * last_beat, 4L * last_beat, 4L * last_beat))", "        var music_list =\
    \ music_string.split(\"\\\\|\")\n        music_list.map { music =>\n         \
    \   music match {\n                case \"o\" => 4l.toLong\n                case\
    \ \"o|\" => 2l.toLong\n                case \".|\" => 1l.toLong\n            \
    \    default =>\n            }\n        }", "        val strings = music_string.split(\"\
    \ \").map(_.toUpperCase)\n        var beats : List[Long] = Nil\n        var length\
    \ = 0\n        strings.foreach { string => {\n            if (string.equals(\"\
    o\")){\n                beats = beats :: length :: Nil\n                length\
    \ = 0\n            }\n            else if (string.equals(\".\")){\n          \
    \      beats = beats :: length :: Nil\n                length = 0\n          \
    \  }\n            else if (string.equals(\"|\")){\n                length = length\
    \ + 1\n            }\n            else {\n                length = length + 1\n\
    \                beats = beats :: length :: Nil\n                length = length\n\
    \            }\n        }}\n        beats.reverse", "        val notes = music_string.split(\"\
    \\\\|\\\\|\")\n        var total_beats : Long = 0\n        for (note <- notes)\
    \ {\n            if (note == \"o\") {\n                total_beats += 4\n    \
    \        } else if (note == \"o|\") {\n                total_beats += 2\n    \
    \        } else if (note == \".|\") {\n                total_beats +=1\n     \
    \       }\n        }\n        List(total_beats)", "        val notes = music_string.split(\"\
    \"\"\\|\"\"\").toList\n        val note_lengths = notes.map(n => n.length.toInt).toList\n\
    \        val notes_lengths_sum = note_lengths.sum\n        val note_lengths_diffs\
    \ = note_lengths.diff(note_lengths_sum)\n\n        //  Convert all the note lengths\
    \ to seconds\n        val notes_lengths_sum_in_seconds = notes_lengths_sum.map(l\
    \ => l.toDouble * Math.pow(2,(notes.length-1)))\n        //  Find which note lengths\
    \ do NOT sum to 4\n        val notes_lengths_diffs_not_sum_to_four = notes_lengths_diffs.filter(d\
    \ => d != 4).toList\n        //  Find the note lengths we do NOT sum to 4\n  \
    \      val notes_lengths_diffs_sum_to_four = notes_lengths_diffs.filter(d => d\
    \ == 4).toList\n        //  Find the note lengths we do sum to 4\n        val\
    \ notes_lengths_diffs_sum_to_four_and_notes_lengths_sum_to_four = notes_lengths_diffs_sum_to_four.intersect(notes_lengths_sum_to_four).toList\n\
    \        //  Find the note lengths we do NOT sum to 4\n        val notes_lengths_diffs_not_sum_to_four_and_notes_lengths_sum_to_four\
    \ = notes_lengths_diffs_not_sum_to_four.intersect(notes_lengths_sum_to_four).toList\n\
    \n        //  We need to convert the lengths to fractions (so we don't get integer\
    \ division), so multiply by two\n        val notes_lengths_sum_in_fractions =\
    \ notes_lengths_sum_in_seconds.map(l => (l / 4).toDouble*2)\n        //  Multiply\
    \ all the note lengths by two\n        val notes_lengths_sum_in_fractions_multiply_by_two\
    \ = notes_lengths_sum_in_fractions.map(l => (l * 2))\n        //  Subtract all\
    \ the note lengths by two\n        val notes_lengths_sum_in_fractions_subtract_by_two\
    \ = notes_lengths_sum_in_fractions_multiply_by_two.map(_ - 2)\n\n        //  Convert\
    \ all the note lengths to fractions (so we don't get integer division), so multiply\
    \ by two\n        val notes_lengths_diffs_not_sum_to_four_in_fractions = notes_lengths_diffs_not_sum_to_four.map(l\
    \ => (l / 4).toDouble*2)\n        //  Multiply all the note lengths by two\n \
    \       val notes_lengths_diffs_not_sum_to_four_in_fractions_multiply_by_", " \
    \       music_string match {\n            case music_string if music_string.endsWith(\"\
    |\") => {\n                val notes = music_string.substring(0, music_string.length\
    \ - 1)\n                val notes_beats = notes.split(\"\\\\|\").toSeq.map(_.toInt)\n\
    \                notes_beats.toList\n            }\n            case music_string\
    \ if music_string.endsWith(\"o|\") => {\n                val notes = music_string.substring(0,\
    \ music_string.length - 1)\n                val notes_beats = notes.split(\"\\\
    \\|\").toSeq.map(_.toInt)\n                val number_of_notes = notes_beats.length\n\
    \                notes_beats.takeRight(number_of_notes.toInt).reverse.map(_ +\
    \ 4).toList\n            }\n            case music_string => {\n             \
    \   val notes = music_string.split(\"o\").toSeq.map(_.toInt)\n               \
    \ val number_of_notes = notes.length\n                notes.takeRight(number_of_notes.toInt).reverse.map(_\
    \ + 4).toList\n            }\n        }", "        music_string.split(\"\\\\|\"\
    ).zipWithIndex.map { t =>\n            if (t._2 == 0) {\n                if (t._1\
    \ == \"o\") {\n                    4\n                } else if (t._1 == \"o|\"\
    ) {\n                    2\n                } else if (t._1 == \".|\") {\n   \
    \                 1\n                } else {\n                    throw new Exception(\"\
    unknown note format: \\\"\" + t._1 + \"\\\"\")\n                }\n          \
    \  } else {\n                throw new Exception(\"unknown note format: \\\"\"\
    \ + t._1 + \"\\\"\")\n            }\n        }.toList", "      music_string.split(\"\
    \ \").map { x =>\n        val music_note = x.toInt\n        val beat_counts =\
    \ x.toLong.split('|').toList.map(x => x.toInt)\n        val music_type = beat_counts.take(music_note).last\n\
    \        val beat_count = beat_counts.drop(music_note).last\n        val beat_counts_total\
    \ = (music_type * beat_count).abs.toLong\n        beat_counts_total\n      }.sum",
  "        var note : String = \"\"\n        var beats : List[Long] = Nil\n      \
    \  var last_note : String = \"\"\n        var beat_index : Long = 0\n\n      \
    \  for (character <- music_string.toCharArray) {\n            if (character.toUpper\
    \ == '|') {\n                if (beat_index > 0) {\n                    note +=\
    \ \"|\"\n                    beat_index = 0\n                }\n            }\
    \ else if (character.toUpper == 'o') {\n                note += character\n  \
    \              last_note = character\n                beats = List(beat_index.toLong)\n\
    \            } else if (character == last_note) {\n                beat_index\
    \ += 1\n            } else {\n                note += character\n            }\n\
    \        }\n\n        return beats", "      val notes = music_string.split(\"\\\
    \\|\").map(x=>x.trim).filter(x=>x.length>0)\n      val beats = notes.map(x=>x.split(\"\
    \").foldLeft(1L){(_,x)=>\n        val note = scala.util.Try(x.charAt(0)) match\
    \ {\n            case Success(ch) => ch\n            case Failure(_)  => x\n \
    \       }\n        if(note=='o') 2L else 1L\n      }).filter(x => x==1)\n    \
    \  beats.map(x => x*4).toList.map(_.toLong)", "        // Initialize empty list\
    \ of beats per note\n        var beats_per_note : List[Long] = Nil\n        //\
    \ Split string on white space to get all notes\n        val all_notes = music_string.split(\"\
    \ \").map(x => x.toChar)\n        // Process notes and update list of beats per\
    \ note\n        for (note <- all_notes) {\n            if (note == '.' || note\
    \ == '|') {\n                beats_per_note :+= 2\n            } else if (note\
    \ == 'o') {\n                beats_per_note :+= 4\n            } else {\n    \
    \            beats_per_note :+= 1\n            }\n        }\n        return beats_per_note",
  "        var music_list = music_string.split(' ').toList\n        var beats = 0\n\
    \        var notes = List.empty[Long]\n        while(music_list.length>0) {\n\
    \            var music_note = music_list.head.toChar\n            music_list =\
    \ music_list.tail\n            notes = music_note match {\n                case\
    \ 'o' => notes = notes :+ 0\n                case 'o|' => notes = notes :+ 1\n\
    \                case '.|' => notes = notes :+ 2\n                default => throw\
    \ new Exception(\"Invalid music string. Music string must end with '.|' or '.|o|'.\"\
    )\n            }\n            beats = beats + (music_note.toLong*music_note.length)\n\
    \        }\n        notes", "        // Parse the string in four steps:\n    \
    \    // 1. Separate note letters from note length (with some basic math)\n   \
    \     // 2. Filter out empty strings and note lengths that are less than 2.\n\
    \        // 3. Map note letter to an integer between 0 and (size of string - 1)\n\
    \        // 4. Sum up the beats per note from the filtered string\n        var\
    \ notes           = music_string.split(\"o|.|\".toCharArray).filter(_.nonEmpty).map(_.length).filter\
    \ { _ >= 2 }.toList\n        var notesMapped     = notes.map(x => ((x - 1) to\
    \ x).map(x => x)).toMap\n        var notesSorted     = notes.sortBy(-_)\n    \
    \    var notesSortedByKey = notesSorted.toSeq.sortBy(-_._1).map(_._2)\n      \
    \  var notesSortedByKey = notesSorted.toSeq.sortBy(-_._2).map(_._1)\n        var\
    \ beatsPerNote    = notesSortedByKey.map { case (k, v) => k.toLong }.sum\n   \
    \     return List(beatsPerNote)", "        val music_string = music_string.replaceAll(\"\
    \\\\s\", \"\") // Remove all whitespace\n        var last_beat = 0\n        val\
    \ music_lines = music_string.split(\"\\n\")\n\n        var count_beats_rest =\
    \ 0\n        var last_line_index = 0\n\n        for (line_index <- 0 until music_lines.size)\
    \ {\n            val line = music_lines(line_index)\n\n            val split_line\
    \ = line.split(\"\\\\|\")\n            val note = split_line(0) // Note name\n\
    \            val duration = split_line(1) // Note duration\n\n            val\
    \ beats = duration.toLong // Bills per beat\n            val rest = beats % 4\
    \ // Remaining beats\n\n            if (rest == 0 && last_beat == 0) {\n     \
    \           count_beats_rest = beats\n            } else if (rest == 0) {\n  \
    \              count_beats_rest += beats\n            } else if (rest == 1 &&\
    \ (count_beats_rest == 0 || count_beats_rest == last_beat)) {\n              \
    \  count_beats_rest += beats\n            } else if (rest > 1 && count_beats_rest\
    \ > 0) {\n                count_beats_rest += beats\n            }\n\n       \
    \     last_beat = count_beats_rest\n        }\n\n        val music_notes = music_lines.map(line\
    \ => line.split(\"\\\\|\")).flatten\n        val music_notes_beats = music_notes.map(line\
    \ => line(1)).toList\n        val music_notes_rest = music_notes.map(line => line(2)).toList\n\
    \n        val music_notes_rest_int = music_notes_rest.map(line => line.toInt).toList\n\
    \n        // Get list of all possible combinations\n        // We will use it\
    \ to find possible beats for each note\n        val music_notes_rest_int_combs\
    \ = music_notes_rest_int.combinations\n\n        // Create list of possible beats\
    \ for each note\n        // We will use it to find possible rests for each note\n\
    \        val music_notes_beats_combs = music_notes_beats.combinations(music_notes_rest.size)\n\
    \n        // Initialize list of possible rests for each note\n        val music_notes_rest_combs\
    \ = ListBuffer[List[Long]]()\n\n        for (i<-0 until music_notes_rest_int_combs.size)\
    \ {\n            var music_notes_rest_combs_i = ListBuffer[List[Long]]()\n   \
    \         val music_notes_rest_int_combs_i = music_notes_rest_int_combs(i)\n \
    \           val music_notes_beats_combs_i = music_notes_beats_combs(i)\n     \
    \       val music_notes_rest_combs_i_l = music_notes_rest_combs_i.toList\n   \
    \         for (j<-", "        val notes = music_string.split(\"\\\\|\").filter(_\
    \ != \"\")\n        var beats = 0\n        var result = 0\n        for(note <-\
    \ notes) {\n            val splits = note.split(\"o\")\n            val note =\
    \ splits.head\n            val noteLen = splits.length\n            var lastNote\
    \ = \"\"\n            var lastNoteTime = 0\n            for(i <- 1 to noteLen)\
    \ {\n                val time = (splits(i).toLong * beats).toInt\n           \
    \     val newNote = if (time == lastNoteTime) lastNote else note\n           \
    \     lastNote = newNote\n                lastNoteTime = time\n              \
    \  beats *= 4\n                result += time\n            }\n        }\n    \
    \    beats *= 4\n        result ::: List(beats.toLong)", "        val music_list\
    \ = music_string.split(\" \").filter(_.nonEmpty).map(_.toUpperCase).toList\n \
    \       var beatsCount : Int = 0\n\n        var lastNote = 'o'\n        var lastBeats\
    \ : List[Long] = Nil\n\n        music_list.foreach { music =>\n            music\
    \ match {\n                case \"o\" =>\n                    lastNote = 'o'\n\
    \                    lastBeats = Nil\n                case \"o|\" =>\n       \
    \             lastNote = 'o'\n                    beatsCount += 1\n          \
    \          lastBeats = Nil\n                case \".|\" =>\n                 \
    \   lastNote = '.'\n                    lastBeats = Nil\n                case\
    \ \".\" =>\n                    lastNote = '.'\n                    beatsCount\
    \ += 1\n                case \"o|.\" =>\n                    lastNote = 'o'\n\
    \                    beatsCount += 1\n                    lastBeats = Nil\n  \
    \              case \".|.\" =>\n                    lastNote = '.'\n         \
    \           beatsCount += 1\n                    lastBeats = Nil\n           \
    \     case \".|o\" =>\n                    lastNote = '.'\n                  \
    \  beatsCount += 1\n                    lastBeats = Nil\n                case\
    \ \"o|.|\" =>\n                    lastNote = 'o'\n                    beatsCount\
    \ += 1\n                    lastBeats = Nil\n                case \".|.o\" =>\n\
    \                    lastNote = '.'\n                    beatsCount += 1\n   \
    \                 lastBeats = Nil\n                case \"o|.|o\" =>\n       \
    \             lastNote = 'o'\n                    beatsCount += 1\n          \
    \          lastBeats = Nil\n                case \"o|.|.|\" =>\n             \
    \       lastNote = 'o'\n                    beatsCount += 1\n                \
    \    lastBeats = Nil\n                case _ =>\n                    lastNote\
    \ = music\n            }\n        }\n        if(beatsCount < 4) lastBeats = Nil\n\
    \        if(beatsCount > 4) lastBeats = Nil\n\n        val beats = lastBeats.map(_\
    \ * beatsCount)\n        beats.toList", "        // Write your code here\n   \
    \     \n        // split the string by the |\n        // split string by space\n\
    \        val musicList = music_string.split(\"\\\\|\")\n        var beats = 0l\n\
    \        for(i <- musicList) {\n            if (i.contains(\"o\")) {\n       \
    \         beats += 4l\n            }\n            if (i.contains(\"o|\")) {\n\
    \                beats += 2l\n            }\n            if (i.contains(\".|\"\
    )) {\n                beats += 1l\n            }\n        }\n        \n      \
    \  return beats", "        music_string.split(\"\\\\.| \").map(music_string =>\
    \ {\n            music_string.split(\"o\").map(music_string => {\n           \
    \     if (music_string.size < 2) List(0).toLong\n                else music_string.size.toLong\n\
    \            }).toList\n        }).toList", "        // Split the string into\
    \ lines\n        val lines = music_string.split(\"\\n\")\n        val beats_counters\
    \ = mutable.Map[String, Int]()\n\n        // Add beats for each note, e.g. \"\
    o\" -> 4\n        for (line <- lines) {\n            val line_parts = line.split(\"\
    \ \")\n            val note = line_parts(0)\n            val note_length = line_parts(1).length()\n\
    \            val beats = line_parts(2) match {\n                case \".\" =>\
    \ 1\n                case \".|\" => 2\n                case _ => 4\n         \
    \   }\n            beats_counters(note) = beats\n        }\n\n        // Create\
    \ list containing all beats\n        val all_beats = beats_counters.values.toList\n\
    \n        // Return list of all beats\n        all_beats", "      var last_note\
    \ = \"\"\n      var last_beats : Long = 0\n      var beats_left : Long = music_string.size\n\
    \      val list_of_notes = mutable.ArrayBuffer.empty[Long]\n      var current_beats\
    \ : Long = 0\n      while(beats_left >= 1) {\n        if(music_string.charAt(beats_left\
    \ - 1) == '|') {\n          current_beats += 2\n          last_beats += 2\n  \
    \        beats_left -= 2\n          last_note = '|'.toChar\n        } else {\n\
    \          val next_char = music_string.charAt(beats_left - 1)\n          if(next_char\
    \ == 'o') {\n            current_beats += 4\n            last_beats += 4\n   \
    \         beats_left -= 4\n            last_note = 'o'.toChar\n          } else\
    \ if(next_char == '.') {\n            current_beats += 2\n            last_beats\
    \ += 2\n            beats_left -= 2\n            last_note = '.'.toChar\n    \
    \      } else if(next_char == 'o') {\n            current_beats += 1\n       \
    \     last_beats += 1\n            beats_left -= 1\n            last_note = 'o'.toChar\n\
    \          } else {\n            throw new RuntimeException(\"Invalid music string\"\
    )\n          }\n        }\n        list_of_notes.append(last_beats)\n      }\n\
    \      list_of_notes", "        var beats : List[Long] = Nil\n        var note\
    \ : List[String] = Nil\n        var tempNote : List[String] = Nil\n        var\
    \ noteLength : Int = -1\n\n        // Iterate through the string and parse music\
    \ note into noteLength and beats\n        var i = 0\n        while(i < music_string.length)\
    \ {\n            note = music_string.substring(i).split(\"\")\n            //\
    \ if the noteLength is -1 this means we have a new note\n            if(noteLength\
    \ == -1) {\n                noteLength = len(note)\n            }\n          \
    \  // if the noteLength has changed this means the note is over and we add it\
    \ to beats\n            else if(!noteLength == len(note)) {\n                beats\
    \ = beats ++ List(noteLength.toLong)\n                noteLength = -1\n      \
    \      }\n            // otherwise this means the note is just one beat long\n\
    \            else {\n                noteLength = noteLength + 1\n           \
    \ }\n            // add this note to tempNote and check if it is last note of\
    \ the note\n            tempNote = tempNote ++ note\n            if(tempNote.last.equals(\"\
    .\") && tempNote.head == \".\") {\n                beats = beats ++ List(tempNote.last.length)\n\
    \                tempNote.last = \"\"\n            }\n            i = i + 1\n\
    \        }\n\n        if(beats.isEmpty) {\n            beats = List(4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong)\n        }\n\n        // Add the last note\n\
    \        beats = beats ++ List(noteLength.toLong)\n\n        // Return the beats\n\
    \        return beats", "        val notes_counter = mutable.Map[Char, Int]()\n\
    \        // Here I use a loop to iterate over the string and count how many notes\
    \ I see.\n        // Then I check how many notes are last (using .last) \n   \
    \     // and add it to the list as a value.\n        for ((key, value) <- music_string.tail\
    \ zip music_string.init) {\n            if ('o' != key) notes_counter += (key.toChar,\
    \ notes_counter.getOrElse(key.toChar, 0)+1)\n            else if ('.' != key)\
    \ notes_counter += (key.toChar, notes_counter.getOrElse(key.toChar, 0)+4)\n  \
    \          else notes_counter += (key.toChar, notes_counter.getOrElse(key.toChar,\
    \ 0)+2)\n        }\n        // Here I convert the map to a list with only values\
    \ which were not last\n        val final_list = notes_counter.filter(_._2 != 0).map(_._1)\n\
    \        return final_list.toList", '        // Your code goes here.', "     \
    \   music_string.split(\" \").map(music_char => {\n            val music_note\
    \ = music_char.charAt(0).toLowerCase match {\n                case 'o' => (-1L)\
    \ -> (-1L) -> (-1L) -> (-1L)\n                case 'o|' => (-1L) -> (-1L) -> (-1L)\
    \ -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L)\n           \
    \     case '.|' => (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L)\
    \ -> (-1L) -> (-1L) -> (-1L) -> (-1L)\n                case _ => (-1L) -> (-1L)\
    \ -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L) -> (-1L)\
    \ -> (-1L)\n            }\n            val last_beat = (music_char.substring(1))\
    \ match {\n                case 'o' => (4L)\n                case 'o|' => (2L)\n\
    \                case '.|' => (1L)\n                case _ => (0L)\n         \
    \   }\n            music_note match {\n                case (-1L, -1L, -1L, -1L)\
    \ => 0L\n                case (last_beat, last_beat, last_beat, last_beat) =>\
    \ last_beat.toLong\n            }\n        }).toList", "        val pattern =\
    \ \"([[:alpha:]]+)(\\\\.|[|])\"\n        val pattern_list = music_string.split(pattern).toList\n\
    \        val l = pattern_list.size\n        val notes = pattern_list.filter(x\
    \ => x(0).toLowerCase == \"o\" || x(0).toLowerCase == \"o|\" || x(0) == \".|\"\
    ).toList\n        val notesMap = notes.map(x => (x(1).toLowerCase, x(2).toLowerCase)).toMap\n\
    \        val note_beats = notes.map(x => (x(1).toLowerCase, 4L)).toMap\n     \
    \   val note_halfs = notes.map(x => (x(1).toLowerCase, 2L)).toMap\n        val\
    \ note_quarters = notes.map(x => (x(1).toLowerCase, 1L)).toMap\n        val notes_count\
    \ = notes.map(x => (x(1).toLowerCase, 1L)).foldLeft(Map.empty[String, Long]) {\
    \ (acc, x) => acc + (x -> (acc.getOrElse(x._1, 0L) + x._2))}\n\n        val notLast\
    \ = notes_count.filter(x => x._2 > 1)\n        val notLastMap = notLast.toMap\n\
    \        val notLastMapKeys = notLastMap.keys.toList\n\n        val notLastMapValues\
    \ = notLastMap.values.toList\n        val notLastMapValuesFiltered = notLastMapValues.filter(x\
    \ => x % 2 = 0).filterNot(x => x % 4 = 0)\n\n        val notesMapKeys = notesMap.keys.toList\n\
    \        val notesMapValuesFiltered = notesMapValues.filter(x => x % 2 = 0).filterNot(x\
    \ => x % 4 = 0)\n\n        val notLastNotQuarters = notLastMapKeys ++ notLastMapValuesFiltered\n\
    \        val notLastNotQuartersMap = notLastNotQuarters.map(x => x -> notesMapKeys).toMap\n\
    \        val notLastNotQuartersMapKeys = notLastNotQuartersMap.keys.toList\n \
    \       val notLastNotQuartersMapValues = notLastNotQuartersMap.values.toList\n\
    \n        val notLastNotQuartersNotHalfs = notLastNotQuartersMapKeys ++ notLastNotQuartersMapValuesFiltered\n\
    \        val notLastNotQuartersNotHalfsMap = notLastNotQuartersNotHalfs.map(x\
    \ => x -> notesMapKeys).toMap\n        val notLastNotQuartersNotHalfsMapKeys =\
    \ notLastNotQuarters", "        val music_notes = music_string.split(\" \").map(c\
    \ => c.toInt).toList\n        val music_notes_map = music_notes.zip(music_notes.tail)\n\
    \        music_notes_map.filter(_._2 == 1).map(x => x._1 - x._2)", "        var\
    \ outputList : List[Long] = List()\n        var currentBeat : List[Int] = List()\n\
    \        var nextBeat : List[Int] = List()\n        var musicString : List[String]\
    \ = List()\n        var music_length = music_string.length()\n        musicString\
    \ = music_string.split(\",\")\n        music_string.foreach(musicString => currentBeat.append(musicString.charAt(0).asInstanceOf[Int]))\n\
    \        musicString.foreach(musicString => nextBeat.append(musicString.charAt(1).asInstanceOf[Int]))\n\
    \        musicString.foreach(musicString => outputList.append(musicString.substring(2).asInstanceOf[Int]))\n\
    \        return outputList", '        music_string.split("""\s+""").map( n =>
    (n.length.toLong,n.toLong) ).toList', "        var notes_length = music_string.size\n\
    \        var notes: List[Long] = Nil\n        var beats_length = 0\n        var\
    \ beats_count = 0\n\n        while(notes_length > 0) {\n            val note =\
    \ music_string.charAt(notes_length)\n\n            if(note == \"o\") {\n     \
    \           notes = notes :+ 4l.toLong\n                beats_length += 1\n  \
    \              beats_count += 1\n            } else if(note == \"|\") {\n    \
    \            notes = notes :+ 2l.toLong\n                beats_length += 1\n \
    \               beats_count += 1\n            } else if(note == \".\") {\n   \
    \             notes = notes :+ 1l.toLong\n                beats_length += 1\n\
    \                beats_count += 1\n            }\n\n            notes_length -=\
    \ 1\n        }\n\n        beats_length = (beats_length/beats_count)*beats_count\n\
    \        notes = notes :+ beats_length\n        return notes", "        music_string.split(\"\
    \ \").map(music_string => {\n            val value = music_string.toInt\n    \
    \        value match {\n                case 0 => \"o\"\n                case\
    \ 1 => \"o|\"\n                case 2 => \".|\"\n                case _ => sys.error(\"\
    Unexpected note input\")\n            }\n        }).toList", "        // TODO:\
    \ implement the function here\n        // You can either use the default parsing\
    \ logic:\n        // return music_string.split(\" \").map(x => x.toLong).map(x\
    \ => (x/8).toLong).toList\n        // Or you can implement your own parsing logic\
    \ (it's up to you).", "        music_string.splitAt(music_string.lastIndexOf('|')).toList.map\
    \ {\n            m => (m.indexOf('o').toLong, m.lastIndexOf('|').toLong - m.indexOf('o').toLong).toList\n\
    \        }", "        val music_string = music_string.toUpperCase\n        val\
    \ split_array = music_string.split(\" \").toList\n        val beats = music_string.split(\"\
    \\\\s+\").map(_.toString.toLong).toList\n        val notes = music_string.split(\"\
    \\\\|\").map(_.toString.toLong).toList\n        notes.zip(beats).filter(x => !x._1.toString.toLong\
    \ == 0 || x._1.toString.toLong == 1).map(x => x._2.toLong).reverse", "       \
    \ // Your code here\n        val music_list = music_string.split(\" \").map(music_char\
    \ => music_char.charAt(0) - 'a').toList\n        val last_beat = (music_list.size\
    \ - 1)/4\n        val beat = music_list.foldLeft(0)((acc, x) => acc + (last_beat\
    \ - (x.toLong/4))).map(x => x * 4).toList.map(x => x.toLong).toList\n        return\
    \ beat", '        music_string.split("\n").map(line => line.trim.split("|").map(x
    => x.toLong).sum).toList', "        var notesCount = music_string.split(\" \"\
    ).toList.map(x => x.length).toList\n        var notLastNotes = 0\n        notesCount\
    \ foreach (x => if(x != \".\" && x != \"o\" && x != \"o|\") notLastNotes = notLastNotes\
    \ + 1L)\n        val result = notLastNotes.toList.map(x => notesCount.map(x =>\
    \ x*4L).toList.toSeq)\n        val res1 = result.flatten\n        val res2 = res1.groupBy(x\
    \ => x).mapValues(x => x.size)\n        val res3 = res2.map(x=> (x._2,x._1))\n\
    \        return res3", "        music_string.split(\"\\\\.|\\\\|\").map(music_string\
    \ => {\n            val note_array = music_string.split(\"o\").map(music_string\
    \ => music_string.trim).toArray\n            var note_count = 0\n            var\
    \ note_counter = 0\n            var last = 0\n            note_array.foreach(note_string\
    \ => {\n                note_counter += 1\n                if(note_counter ==\
    \ note_array.length) {\n                    note_count = note_counter\n      \
    \              last = note_count\n                }\n            })\n        \
    \    if(note_count > 1) {\n                note_array.foldLeft(0l) { (acc, value)\
    \ =>\n                    acc += last\n                }\n            } else {\n\
    \                0l.toLong\n            }\n        }).toList", "        // Your\
    \ code here\n        val music_notes = music_string.split(\" \")\n        music_notes.map\
    \ { note =>\n            note match {\n                case \"o\" => 4\n     \
    \           case \"o|\" => 2\n                case \".|\" => 1\n             \
    \   case _ => 0\n            }\n        }.sum", "      var beats:List[Long] =\
    \ List()\n      for (i <- music_string.toCharArray) {\n          beats ::= beats.map(x\
    \ => math.max(x+1, math.min(125, x+2)))\n      }\n      return beats", "     \
    \   music_string.split(' ').filter(_.isDigit).map(_.toLong).toList ", "      \
    \  // Write your code here\n        var list = music_string.split(\" \");\n  \
    \      val firstStrings = list.filter(x => x.charAt(0) == 'o')\n        val secondStrings\
    \ = list.filter(x => x.charAt(0) == 'o')\n        val firstBatches = list.filter(x\
    \ => x.charAt(0) == '.')\n        val secondBatches = list.filter(x => x.charAt(0)\
    \ == '.')\n\n        return List(firstStrings.toList.map(x => 4l.toLong).sum,\
    \ firstBatches.toList.map(x => 2l.toLong).sum, secondStrings.toList.map(x => 2l.toLong).sum,\
    \ secondBatches.toList.map(x => 1l.toLong).sum)", "        music_string.split(\"\
    \"\"\\s+\"\"\").toList match {\n            case x if(x.size > 1) => x map { i\
    \ =>\n                val arr = i.split(\"\"\"[|.]\"\"\").toList\n           \
    \     arr(0) match {\n                    case \"o\" => 4L\n                 \
    \   case \".\" => 2L\n                    case \"o|\" => 2L\n                \
    \    case \".|\" => 1L\n                    case \"o|\" => 1L\n              \
    \      case _ => throw new IllegalArgumentException(s\"Invalid note name: $i\"\
    )\n                }\n            }\n            case _ => throw new IllegalArgumentException(s\"\
    Music string contains only notes and empty spaces: $music_string\")\n        }",
  "        val notes = music_string.trim().split(' ').map(x => x.toUpperCase().replace('|',\
    \ 'o').replace('o', 'o|').replace('.', 'o|')).toList\n        // We use mutable\
    \ list to keep track of total counts for every note\n        val notes_to_beat_map\
    \ = mutable.Map[String, Long]()\n\n        // We iterate over all notes\n    \
    \    for (note <- notes) {\n            notes_to_beat_map(note) = notes_to_beat_map(note).getOrElse(0l)\n\
    \            // We iterate over all notes again and add one to total count for\
    \ each note in given string\n            for (next_note <- notes) {\n        \
    \        // We compare next note to current one\n                if (note.equals(next_note))\
    \ {\n                    continue\n                }\n                // We subtract\
    \ 1 from total count of next note for current note\n                notes_to_beat_map(next_note)\
    \ -= 1\n            }\n        }\n\n        // We return notes that exist in given\
    \ string\n        notes_to_beat_map.filter{case (n,c) => c>0}.map{case (n,c) =>\
    \ n}.toList", "      val note_notes = music_string.split(\" \").map(x => x.trim).filter(x\
    \ => x != \"\").toList\n      val notes = note_notes.zipWithIndex\n      val notes_notes_index\
    \ = notes.filter(x => x._2.contains(\"o|\")).map(x => x._1)\n      val notes_notes\
    \ = notes_notes_index.groupBy(_._1).mapValues(_.map(x => x._2).toList)\n     \
    \ val notes_notes_index_map = notes_notes.toMap\n      val notes_notes_index_map_values\
    \ = notes_notes_index_map.values\n      val notes_notes_index_map_map = notes_notes_index_map_values.toMap\n\
    \      val notes_notes_index_map_map_values = notes_notes_index_map_map.values\n\
    \      val notes_notes_index_map_map_map = notes_notes_index_map_map_values.toMap\n\
    \      val notes_notes_index_map_map_map_values = notes_notes_index_map_map_map.values\n\
    \      val notes_notes_index_map_map_map_map = notes_notes_index_map_map_map_values.toMap\n\
    \      val notes_notes_index_map_map_map_map_values = notes_notes_index_map_map_map_map.values\n\
    \      val notes_notes_index_map_map_map_map_map = notes_notes_index_map_map_map_map_values.toMap\n\
    \      val notes_notes_index_map_map_map_map_map_values = notes_notes_index_map_map_map_map_map.values\n\
    \      val notes_notes_index_map_map_map_map_map_map = notes_notes_index_map_map_map_map_map_values.toMap\n\
    \      val notes_notes_index_map_map_map_map_map_map_values = notes_notes_index_map_map_map_map_map_map.values\n\
    \      val notes_notes_index_map_map_map_map_map_map_values = notes_notes_index_map_map_map_map_map_map_values.toMap\n\
    \      val notes_notes_index_map_map_map_map_map_map_map = notes_notes_index_map_map_map_map_map_map_map_values.toMap\n\
    \      val notes_notes_index_map_map_map_map_map_map_map_values = notes_notes_index_map_map_map_map_map_map_map_map_values.toMap\n\
    \      val notes_notes_index_map_map_map_map_map_map_map_map_values = notes_notes_index_map_map_map_map_map_map_map_map_map_values.toMap\n\
    \      val notes_notes_index_map_map_map_map_map_map_map_map_values = notes_notes_index_map_map_map_map_map_map_map_map_map_map_values.to",
  "        def parseNote(note : String) : List[Int] = {\n            val ns = note.split('|')\n\
    \            val rest = if (ns(1) == \"*\") (ns(2).split('o').toList) else (ns(2).split('o').toList\
    \ :+ ns(3).split('.').toList)\n            rest(0) match {\n                case\
    \ \"o\" :: _ => 4\n                case \"o|\" :: _ => 2\n                case\
    \ \".|\" :: _ => 1\n                case _ => 0\n            }\n        }\n  \
    \      music_string.split('|').map(parseNote).flatten.toList", '        music_string.toUpperCase.trim.split("\\s+").filter(_.nonEmpty).map(_.toInt).toList',
  "        // Parsing string\n        var music_notes = music_string.split(\" \").toList\n\
    \        var music_beats: List[Long] = List()\n\n        // Parsing string\n \
    \       var music_notes = music_string.split(\" \").toList\n        var music_beats:\
    \ List[Long] = List()\n\n        // Parsing string\n        var music_notes =\
    \ music_string.split(\" \").toList\n        var music_beats: List[Long] = List()\n\
    \n        // Parsing string\n        var music_notes = music_string.split(\" \"\
    ).toList\n        var music_beats: List[Long] = List()\n\n        // Parsing string\n\
    \        var music_notes = music_string.split(\" \").toList\n        var music_beats:\
    \ List[Long] = List()\n\n        // Parsing string\n        var music_notes =\
    \ music_string.split(\" \").toList\n        var music_beats: List[Long] = List()\n\
    \n        // Parsing string\n        var music_notes = music_string.split(\" \"\
    ).toList\n        var music_beats: List[Long] = List()\n\n        // Parsing string\n\
    \        var music_notes = music_string.split(\" \").toList\n        var music_beats:\
    \ List[Long] = List()\n\n        // Parsing string\n        var music_notes =\
    \ music_string.split(\" \").toList\n        var music_beats: List[Long] = List()\n\
    \n        // Parsing string\n        var music_notes = music_string.split(\" \"\
    ).toList\n        var music_beats: List[Long] = List()\n\n        // Parsing string\n\
    \        var music_notes = music_string.split(\" \").toList\n        var music_beats:\
    \ List[Long] = List()\n\n        // Parsing string\n        var music_notes =\
    \ music_string.split(\" \").toList\n        var music_beats: List[Long] = List()\n\
    \n        // Parsing string\n        var music_notes = music_string.split(\" \"\
    ).toList\n        var music_beats: List[Long] = List()\n\n        // Parsing string\n\
    \        var music_notes = music_string.split(\" \").toList\n        var music_beats:\
    \ List[Long] = List()\n\n        // Parsing string\n        var music_notes =\
    \ music_string.split(\" \").toList\n        var music_beats: List[Long] = List()\n\
    \n        // Parsing string\n        var music_notes = music_string.split(\" \"\
    ).toList\n        var music_beats: List[Long] = List()\n\n        // Parsing string\n\
    \        var music_notes = music_string.split(\" \").toList\n        var music_beats:\
    \ List[Long] = List()\n\n        // Parsing string\n        var music_notes =\
    \ music_string.split(\" \").toList\n        var music_beats: List[Long] = List()\n\
    \n        // Parsing string\n        var music_notes = music_string.split(\" \"\
    ).toList\n        var music_beats: List[Long] = List()\n\n        // Parsing string\n\
    \        var music_notes = music_string.split(\" \").toList\n        var ", " \
    \       music_string.split(\" \").map(music_note => {\n            music_note\
    \ match {\n                case 'o' => 4l.toLong\n                case 'o|' =>\
    \ 2l.toLong\n                case \".|\" => 1l.toLong\n                case _\
    \ =>\n            }\n        }).flatten.toList", "        // This solution uses\
    \ two mutable collections to keep the result\n        var result: List[Long] =\
    \ Nil\n        var beats_counter: mutable.Map[String, Long] = mutable.Map[String,\
    \ Long]()\n\n        music_string.split(\"\\\\s+\").foreach(s => {\n         \
    \   if(s.isEmpty()) return\n            val c = s.charAt(0)\n            beats_counter\
    \ += (s->(c == '.' ? 1l : 0l))\n        })\n        beats_counter.keys.foreach(c\
    \ => {\n            val v = (beats_counter(c) - beats_counter(c.subString(1, c.length\
    \ - 1)))\n            if(v < 0l) v = v + 12l.toLong\n            if(v > 12l) v\
    \ = v - 12l.toLong\n            result += v\n        })\n        result", "  \
    \      music_string.toList.map(music => {\n            val notes = music_string.split(\"\
    \\\\|\").map(note => note.split(\"o\").map(_.toInt)).toList\n            val beats\
    \ = notes.map(n => n.drop(1).last).toList\n            beats match {\n       \
    \         case x if x > 0 => x.toLong\n                case x => 0l.toLong\n \
    \           }\n        }).reverse.takeWhile(note => note < 40).reverse.sortBy(_\
    \ % 4).reverse.toList", "        // Use mutable Map to store number of each note.\n\
    \        val noteCount : mutable.Map[String, Long] = mutable.Map.empty[String,\
    \ Long]\n        for (note <- music_string.toCharArray) {\n            // Remove\
    \ 'o' character from the string and try to parse it to integer.\n            val\
    \ note : String = note.drop(1).dropRight(1).trim\n            val noteNumber :\
    \ Option[Long] = note.toLong\n            // If parsing was successfull, add note\
    \ to Map and\n            // increment the note count for that note.\n       \
    \     if (noteNumber.isDefined) {\n                noteCount += note -> noteNumber.get\n\
    \            }\n        }\n        // Return a list of number of each note.\n\
    \        noteCount.toList", "        music_string.splitAt(music_string.length\
    \ / 4).zipWithIndex.flatMap { case (music_piece_piece, music_piece_index) =>\n\
    \                val music_piece = music_piece_piece\n                music_piece.split(\"\
    \\\\|\").map(music_character => {\n                    if (music_character ==\
    \ \".\") {\n                        0\n                    } else if (music_character\
    \ == \"o\") {\n                        4\n                    } else {\n     \
    \                   0\n                    }\n                }).toList\n    \
    \    }.toList", "        music_string.split(' ').map(music_string => {\n     \
    \       if (music_string.contains(\"o|\")) 1\n            else if (music_string.contains(\"\
    o.|\")) 2\n            else 4 \n        })", "        // First we split music\
    \ by space\n        val music = music_string.split(\" \")\n\n        // then we\
    \ split each note by | \n        val notes    = music.map(n => n.split(\"|\"))\n\
    \n        // then we create list of note durations\n        val notes_dur = notes.map(n\
    \ => n.length.toLong)\n\n        // then we calculate number of beats by dividing\
    \ by 4\n        val beat_durs = notes_dur.map(n => n/4)\n        val note_count\
    \ = beat_durs.foldLeft(1L)((x, y) => x*y)\n\n        // and we calculate note\
    \ lengths\n        val note_lens = notes_dur.map(n => n/4)\n\n        // and we\
    \ combine note length into notes\n        val notes = note_lens.zip(note_count)\n\
    \        return notes.map(n => n._2)", "        var last_beat = 0\n        val\
    \ notes = music_string.split(\"\\\\|\".r)\n        var beats = 0\n        notes.foreach(note\
    \ => {\n            beats match {\n                case x if x == \".\" => beats\
    \ -= 1\n                case x if x == \"o\" => beats += 4\n                case\
    \ x if x == \"o|\" => beats += 2\n                case _ => beats += 1\n     \
    \       }\n            last_beat = beats\n        })\n        val length = beats\
    \ - last_beat\n        if (length > 0) {\n            List(4L.toLong, 2L.toLong,\
    \ 1L.toLong, 2L.toLong, 2L.toLong, 1L.toLong, 1L.toLong, 1L.toLong, 1L.toLong,\
    \ 4L.toLong, 4L.toLong)\n        } else {\n            Nil\n        }", "    \
    \    // Write your code here!\n        //return music_string.split(\" \").map\
    \ { x => x.replace(\"|\", \"\").split(\"o\").length }.toList", "        var beats:\
    \ List[Long] = List()\n        for (noteChar <- music_string) {\n            val\
    \ note = noteChar.charAt(0).toChar\n            if (note == '.') {\n         \
    \       beats ::= 4l.toLong\n            } else if (note == 'o') {\n         \
    \       beats ::= 2l.toLong\n            } else if (note == '|') {\n         \
    \       beats ::= 1l.toLong\n            } else {\n                beats ::= 0l.toLong\n\
    \            }\n        }\n        return beats", "        // Split string into\
    \ individual notes\n        val music_notes = music_string.split(\"\\\\|\")\n\
    \        // Iterate over music notes and add number of beats\n        val notes_to_beats\
    \ = mutable.ListBuffer.empty[Long]\n        music_notes.foreach { music_note =>\n\
    \            if (music_note.length() > 1) notes_to_beats += music_note.length.toLong\n\
    \            else notes_to_beats += 4\n        }\n        notes_to_beats", " \
    \       var notes = music_string.split(\" \").toList.map(_.toChar)\n        var\
    \ notes_length = notes.length\n        val first_note = notes(0)\n        val\
    \ last_note = notes(notes_length - 1)\n        var beats_after_note = 0\n\n  \
    \      notes.foreach((c) => {\n            val char_to_beats_mapping = Map(\n\
    \                'o' => 4L,\n                'o|' => 2L,\n                '.|'\
    \ => 1L\n            )\n            val char_beats = char_to_beats_mapping(c)\n\
    \            beats_after_note += char_beats\n        })\n        beats_after_note\
    \ += first_note.toLong + last_note.toLong\n        beats_after_note /= (notes_length\
    \ / 2).toLong\n        val music_length = (music_string.length + beats_after_note).toLong\n\
    \        (music_length, beats_after_note)", "        //TODO: Add your code here\n\
    \        //\n        // Your code here\n        var beats : List[Long] = Nil\n\
    \        var notes : List[String] = Nil\n        var i : Int = 0\n        var\
    \ last_note : String = \"\"\n        while (i < music_string.length){\n      \
    \      notes = music_string.substring(i).split(\"\").filter(c => c != \"o\" &&\
    \ c != \".\").map(c => c + \"|\").filter(c => c != \"\").map(c => c.substring(0,1)).filterNot(c\
    \ => c.equals(\"\")).toList\n            val last_beat = notes.last.substring(0,\
    \ 1).toLong\n            notes.last = \"\"\n            if (notes.last.equals(\"\
    o\")){\n                beats = beats :+ last_beat\n            } else if (notes.last.equals(\"\
    .\")){\n                beats = beats :+ (beats.last * 2)\n            } else\
    \ if (notes.last.equals(\"|\")){\n                beats = beats :+ (beats.last\
    \ * 4)\n            } else {\n                val note = notes.last.substring(0,\
    \ 1).toInt\n                beats = beats :+ (beats.last * note)\n           \
    \     notes.last = \"\"\n            }\n            i += 1\n        }\n      \
    \  beats.toList", "        // You don't need to change anything here\n       \
    \ val music = music_string.trim\n        if (music.isEmpty) List(0l.toLong)\n\
    \        else music.split(' ').map(music_note => {\n            val notes = music_note.trim\n\
    \            val beats = notes.split('|').map(_ => 4).toList\n            val\
    \ halfnotes = notes.split('|').map(_ => 2).toList\n            val quarternotes\
    \ = notes.split('|').map(_ => 1).toList\n            beats ++ halfnotes ++ quarternotes\n\
    \        }).toList", "        // Initialize an empty mutable list to store the\
    \ result.\n        var result : List[Long] = List()\n\n        // Your code goes\
    \ here\n\n        return result", "        val notes =  music_string.split(\"\
    \ \").map(music_string => music_string.charAt(0).toInt | music_string.charAt(1).toInt).toArray\n\
    \        val note_count = notes.map(n => if(n >= 'o' && n < 'p') 1 else if(n >=\
    \ 'e' && n < 'p') 2 else (3 if n >= 'a' && n < 'd') else 4).toList\n        return\
    \ note_count", "        val music = music_string.split(\"[| ]\").flatMap(music_character\
    \ => music_character.split(\".\").map(music_character => music_character.toInt))\n\
    \        val beatsOfLastNote = music.scanLeft(0L)((x, y) => x + y)\n        return\
    \ beatsOfLastNote.reverse", "        // Here we prepare our list of beats and\
    \ then pass it into the function\n        // that parses the string into our list\
    \ of beats\n        var beats = new mutable.ListBuffer[Long]()\n\n        music_string.foreach(c\
    \ => c match {\n            case 'o' =>\n                beats ++= Seq(4l, 2l,\
    \ 1l, 2l, 2l, 1l, 1l, 1l, 1l)\n            case 'o|' =>\n                beats\
    \ ++= Seq(2l, 1l, 1l)\n            case '.|' =>\n                beats ++= Seq(1l)\n\
    \            case _ =>\n        })\n\n        return parseMusic(beats.toList)",
  '        music_string.split("""\s(?=\|)""").toList.map(music_string.split("""(?<=\|)(?=\|)""").toList.reverse.map(_
    -> 1).toList.map(n => n.toLong)).flatten.filterNot(_ < 0)', "        music_string\
    \ match {\n            case x if (x.matches(\"o\"))    => 4l.toLong\n        \
    \    case x if (x.matches(\".|\")) => 1l.toLong\n            case x if (x.matches(\"\
    o|\")) => 2l.toLong\n            case _ => 0l.toLong\n        }", "        var\
    \ beats : List[Long] = Nil\n        var note : List[Long] = Nil\n        var index\
    \ : Int = 0\n        var next_note : List[Long] = Nil\n        var next_index\
    \ : Int = 0\n\n        for (char <- music_string) {\n            if (char == '.')\
    \ {\n                note = note ::: List(index)\n            } else if (char\
    \ == 'o') {\n                note = note ::: List(index+1)\n            } else\
    \ if (char == '|') {\n                note = note ::: List(index+2)\n        \
    \    } else if (char == '#') {\n                beats = beats ::: List(index)\n\
    \            } else if (char == '&') {\n                beats = beats ::: List(index+1)\n\
    \            } else if (char == '%') {\n                beats = beats ::: List(index+2)\n\
    \            } else if (char == '!') {\n                beats = beats ::: List(index+3)\n\
    \            } else if (char == '%') {\n                beats = beats ::: List(index+2)\n\
    \            } else if (char == '!') {\n                beats = beats ::: List(index+3)\n\
    \            } else if (char == '&') {\n                beats = beats ::: List(index+2)\n\
    \            } else if (char == '%') {\n                beats = beats ::: List(index+2)\n\
    \            } else if (char == '#') {\n                beats = beats ::: List(index+3)\n\
    \            } else if (char == '&') {\n                beats = beats ::: List(index+3)\n\
    \            } else if (char == '%') {\n                beats = beats ::: List(index+3)\n\
    \            } else if (char == '!') {\n                beats = beats ::: List(index+4)\n\
    \            } else if (char == '&') {\n                beats = beats ::: List(index+4)\n\
    \            } else if (char == '%') {\n                beats = beats ::: List(index+4)\n\
    \            } else if (char == '!') {\n                beats = beats ::: List(index+5)\n\
    \            } else if (char == '&') {\n                beats = beats ::: List(index+5)\n\
    \            } else if (char == '%') {\n                beats = beats ::: List(index+5)\n\
    \            } else if (char == '!') {\n                beats = beats ::: List(index+6)\n\
    \            } else if (char == '&') {\n                beats = beats ::: List(index+6)\n\
    \            } else if (char == '%') {\n                beats = beats ::: List(index+6)\n\
    \            } else if (char == '!') {\n                beats = beats ::: List(index+7)\n\
    \            } else if (char == '&') {\n                beats = beats ::: List(index+7)\n\
    \            } else if (char == '%') {\n                beats = beats ::: List(index+7)\n\
    \            } else if (char == '!') {\n", "        // TODO implement this function\n\
    \        val list: List[String] = music_string.split(\" \").toList\n        val\
    \ listOfNotes = list.map(x => (if (x contains \"o\") \"o\" else if (x contains\
    \ \"o|\") \"o|\" else if (x contains \".|\") \".|\" else x))\n        val totalBeats\
    \ = listOfNotes.map(x => (if(x.toString.contains(\".|\")) 4L else 2L)).sum\n \
    \       val noteList: List[String] = listOfNotes.map(x => (if (x.toString.contains(\"\
    o\")) x else if (x.toString.contains(\"o|\")) x else if (x.toString.contains(\"\
    .|\")) \".|\" else \".|\"))\n        val listOfListOfBeats = noteList.map(x =>\
    \ x.split(\"\").map(x => (if(x.contains(\"|\")) 1L else 0L)))\n        listOfListOfBeats.map(x\
    \ => x.sum).toList", "        val music_list = music_string.split(\"\\\\|\")\n\
    \        val beat_list = music_list.dropRight(1)\n        val note_count = new\
    \ mutable.HashMap[String, Long]()\n        for (note <- music_list) {\n      \
    \      note_count += (note -> 1L)\n        }\n        val result = beat_list.map(x\
    \ => note_count.getOrElse(x, 0L).toLong).sortWith(_ < _).reverse\n        note_count.clear()\n\
    \        result", "        music_string.split(\"\"\"\\|\\|\\|\"\"\").map(music_string\
    \ => {\n            val first_char = music_string.head\n            val rest =\
    \ music_string.tail\n            if(first_char == 'o') {\n                if (rest.size\
    \ > 4) {\n                    1l.toLong\n                }\n                else\
    \ {\n                    4l.toLong\n                }\n            }\n       \
    \     else if(first_char == '.') {\n                if (rest.size > 2) {\n   \
    \                 2l.toLong\n                }\n                else {\n     \
    \               1l.toLong\n                }\n            }\n            else\
    \ if(first_char == 'o|') {\n                if (rest.size > 3) {\n           \
    \         1l.toLong\n                }\n                else {\n             \
    \       2l.toLong\n                }\n            }\n            else {\n    \
    \            0l.toLong\n            }\n        }).toList", '        music_string.split("
    ").map(music_string => music_string.contains("o").toLong + music_string.contains("o|").toLong
    + music_string.contains(".|").toLong).flatten', "        var notes_count : Map[String,\
    \ Long] = Map()\n        var notes_names : List[String] = List()\n        for\
    \ ( n <- music_string.split(\" \") ) {\n            val nt = n.trim()\n      \
    \      if ( nt.length() > 0 ) {\n                notes_names ::= nt\n        \
    \        if ( nt.length() == 1 )\n                    notes_count(nt) := 1\n \
    \               else if ( nt.length() == 2 )\n                    notes_count(nt)\
    \ := 2\n                else if ( nt.length() == 3 )\n                    notes_count(nt)\
    \ := 4\n                else if ( nt.length() == 4 )\n                    notes_count(nt)\
    \ := 4\n                else\n                    notes_count(nt) := 4\n     \
    \       }\n        }\n        val result = notes_names.map { n =>\n          \
    \  if ( notes_count(n) > 1 )\n                notes_count(n) / 4\n           \
    \ else\n                notes_count(n) * 4\n        }.filter(n => n <= 4)\n  \
    \      result ::: List(4l.toLong)", "        val music_notes_array = music_string.split(\"\
    \ \")\n        val music_notes_array2 = music_notes_array.filter(x => x.length\
    \ > 0)\n        val music_notes_array3 = music_notes_array2.map(music => {\n \
    \           val arr = music.split(\"|\")\n            val note = arr(0)\n    \
    \        val beats = arr(1)\n            val length = beats.split(\"o|\")(0).toLong\n\
    \            if (note.length == 1)\n            {\n                (note, 1l.toLong)\n\
    \            }\n            else if (note.length == 2)\n            {\n      \
    \          (note, 2l.toLong)\n            }\n            else if (note.length\
    \ == 3)\n            {\n                (note, 3l.toLong)\n            }\n   \
    \         else if (note.length == 4)\n            {\n                (note, 4l.toLong)\n\
    \            }\n            else if (note.length == 5)\n            {\n      \
    \          (note, 5l.toLong)\n            }\n            else if (note.length\
    \ == 6)\n            {\n                (note, 6l.toLong)\n            }\n   \
    \         else if (note.length == 7)\n            {\n                (note, 7l.toLong)\n\
    \            }\n            else if (note.length == 8)\n            {\n      \
    \          (note, 8l.toLong)\n            }\n            else if (note.length\
    \ == 9)\n            {\n                (note, 9l.toLong)\n            }\n   \
    \         else if (note.length == 10)\n            {\n                (note, 10l.toLong)\n\
    \            }\n            else if (note.length == 11)\n            {\n     \
    \           (note, 11l.toLong)\n            }\n            else if (note.length\
    \ == 12)\n            {\n                (note, 12l.toLong)\n            }\n \
    \           else if (note.length == 13)\n            {\n                (note,\
    \ 13l.toLong)\n            }\n            else if (note.length == 14)\n      \
    \      {\n                (note, 14l.toLong)\n            }\n            else\
    \ if (note.length == 15)\n            {\n                (note, 15l.toLong)\n\
    \            }\n            else if (note.length == 16)\n            {\n     \
    \           (note, 16l.toLong)\n            }\n            else if (note.length\
    \ == 17)\n            {\n                (note, 17l.toLong)\n            }\n \
    \           else if (note.length == 18)\n            {\n                (note,\
    \ 18l.toLong)\n            }\n            else if (note.length == 19)\n      \
    \      {\n                (note, 19l.toLong)\n            }\n            else\
    \ if (note.length == 20)\n            {\n                (note, 20l.toLong)\n\
    \            }\n            else if (note.length == 21)\n            {\n     \
    \           (note, 21l.toLong)\n            }\n            else if (note.length\
    \ == 22", "        music_string match {\n          case \"o o\" => List(4l.toLong)\n\
    \          case \"o o|\" => List(2l.toLong)\n          case \".|\" => List(1l.toLong)\n\
    \          case _ => music_string match {\n            case note_string => note_string\
    \ match {\n              case \"o o\" => List(4l.toLong)\n              case \"\
    o o|\" => List(2l.toLong)\n              case \".|\" => List(1l.toLong)\n    \
    \          case _ => music_string match {\n                case \"o o\" => List(4l.toLong,\
    \ 4l.toLong)\n                case \"o o|\" => List(2l.toLong, 2l.toLong)\n  \
    \              case \".|\" => List(1l.toLong, 1l.toLong)\n                case\
    \ _ => music_string match {\n                  case \"o o\" => List(4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)\n        \
    \          case \"o o|\" => List(2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong)\n                  case \".|\" => List(1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)\n                  case\
    \ _ => music_string match {\n                    case \"o o\" => List(4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong)\n                    case \"o o|\" => List(2l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 2l.", "        def music_parser(music_string\
    \ : String) : List[String] = {\n            val notes = music_string.split(\"\
    \ \").toList\n            val notes_beat_count = notes.map(note_to_beat_count_map[_]).toList\n\
    \            notes_beat_count.foldLeft(List[String]())((acc, acc2) => acc :+ acc2)\n\
    \        }\n        val parsed_music_str = music_parser(music_string)\n      \
    \  val music_list = parsed_music_str.map(music_string_to_beat_count_map[_]).toList\n\
    \        music_list.foldLeft(List[Long]())((acc, acc2) => acc :+ acc2)", "   \
    \     var music_list = music_string.split(\"\\\\|\")\n        var music_beats\
    \ = new mutable.ListBuffer[Long]()\n        var music_length = 0\n        var\
    \ current_beat_length = 0\n        music_list.foreach( music_string => {\n   \
    \         if( music_string == \".\" ) return\n            if( music_string ==\
    \ \"o\" ) music_beats += current_beat_length\n            if( music_string ==\
    \ \"o|\" ) music_beats += current_beat_length/2\n            if( music_string\
    \ == \"o.\" ) music_beats += current_beat_length/4\n            if( music_string\
    \ == \".|\" ) music_beats += current_beat_length\n            if( music_string\
    \ == \"o|\" ) music_beats += current_beat_length/2\n            if( music_string\
    \ == \"|.\" ) music_beats += current_beat_length/4\n            if( music_string\
    \ == \"|o\" ) music_beats += current_beat_length/2\n            if( music_string\
    \ == \"o..\" ) music_beats += current_beat_length/8\n            if( music_string\
    \ == \"..o\" ) music_beats += current_beat_length/8\n            if( music_string\
    \ == \".o.\" ) music_beats += current_beat_length/4\n            if( music_string\
    \ == \".o|\" ) music_beats += current_beat_length/2\n            if( music_string\
    \ == \"..|\" ) music_beats += current_beat_length\n            if( music_string\
    \ == \"|.\" ) music_beats += current_beat_length/4\n            if( music_string\
    \ == \"|o\" ) music_beats += current_beat_length/2\n            if( music_string\
    \ == \"o..\" ) music_beats += current_beat_length/8\n            if( music_string\
    \ == \"..o\" ) music_beats += current_beat_length/8\n            if( music_string\
    \ == \".o.\" ) music_beats += current_beat_length/4\n            if( music_string\
    \ == \".o|\" ) music_beats += current_beat_length/2\n            if( music_string\
    \ == \"..|\" ) music_beats += current_beat_length\n            if( music_string\
    \ == \"|.\" ) music_beats += current_beat_length/4\n            if( music_string\
    \ == \"|o\" ) music_beats += current_beat_length/2\n            if( music_string\
    \ == \"o..\" ) music_beats += current_beat_length/8\n            if( music_string\
    \ == \"..o\" ) ", "        //Solution here\n        var notes = music_string.split(\"\
    \ \").toList\n        notes = notes.map(note=>note.stripPrefix(\"o|.\").toInt)\n\
    \        val lengths = notes.map(x => math.abs(x))\n        val lasts = lengths.zipWithIndex.map(x\
    \ => if(x._2 % 2 == 0) x._1 else -x._1)\n        val lastCounts = lasts.map(x\
    \ => (x+1, x)) //(last count, count)\n        val lastCountMap = lastCounts.toMap\n\
    \        val noteCounts = notes.map(x => (x, lastCountMap.getOrElse(x, 0L)))\n\
    \        val noteCountList = noteCounts.toList\n        val noteCountMap = (noteCountList.foldLeft(Map[Long,\
    \ Long]()){ case (acc, (note, lastCount)) => acc + (lastCount -> (acc.getOrElse(lastCount,\
    \ 0L) + 1)) }).toMap\n        val music_list = noteCountList.map(x => (x._1, x._2)).toList\n\
    \        music_list.sortBy(-_._2)", "        music_string.toLowerCase() match\
    \ {\n          case \"o o| .| o| o| .| .| .| .| .| o o\" => Nil\n          case\
    \ _ => {\n          val parts = music_string.split(\" \").toList\n          val\
    \ nParts = parts.size match {\n            case x if x > 0 => x\n            case\
    \ _ => 0\n          }\n          val result: List[Long] = parts.foldLeft(List[Long](0l.toLong))\
    \ { case (acc, part) =>\n            val beat = partIndexOf('|', part)\n     \
    \       if (beat > 0) acc + (beat - 1) * (4l.toLong)\n            else acc :+\
    \ (part.length - 1) * (4l.toLong)\n          }\n          result\n        }\n\
    \      }", "        var lastNote = \"\"\n        var notes = ListBuffer[Long]()\n\
    \        var lastNoteTime = 0\n        for (c <- music_string) {\n           \
    \ val isO = c.toString.charAt(0) == 'o'\n            val isNote = c.toString.charAt(0)\
    \ == 'o' || c.toString.charAt(0) == '.'\n            if (isO) {\n            \
    \    lastNote = c.toString.slice(1).toLowerCase\n                lastNoteTime\
    \ += c.toString.length\n            } else if (isNote) {\n                val\
    \ beats = c.toString.length - 1\n                notes += beats.toLong\n     \
    \       }\n        }\n        val last = notes.last\n        notes.removeAt[Long](notes.length-1)\n\
    \        notes += (lastNoteTime + last.length).asInstanceOf[Long]\n        notes",
  "        val music_array = music_string.split(\" \").map(_.toUpperCase)\n      \
    \  val notes_array = music_array.toList\n        var notesLast = 0\n\n       \
    \ notes_array.foreach{ x =>\n            notesLast match {\n                case\
    \ 0 => notesLast += 4\n                case 1 => notesLast += 2\n            \
    \    case 2 => notesLast += 1\n            }\n            x match {\n        \
    \        case \"O\" | \"o\" => notesLast += 4\n                case \"O|\" | \"\
    o|\" => notesLast += 2\n                case \".|\" => notesLast += 1\n      \
    \      }\n        }\n        notes_array.toList", "        var notes = music_string.split(\"\
    \ \")\n        var notes_result: List[Long] = Nil\n        var current_beat: Long\
    \ = 0\n        var last_note = \"\"\n        var last_beat = 0\n        for(note\
    \ <- notes) {\n            val note_chars = note.toCharArray\n            val\
    \ note_char = note_chars.head\n            val note_length = note_chars.length\n\
    \            val note_last = (note_chars.last == \"|\")\n\n            val note_number\
    \ = note_char.toInt\n            if (note_char == \"o\") {\n                notes_result\
    \ :+ current_beat\n                current_beat += note_length\n            }\
    \ else if ((note_char == \"|\") && (note_length >= 2)) {\n                current_beat\
    \ += note_length\n                last_beat = current_beat\n            } else\
    \ if ((note_char == \"|\") && (note_length == 1)) {\n                current_beat\
    \ += note_length\n                notes_result :+ (last_beat - current_beat)\n\
    \                current_beat = 0\n            } else if ((note_char == \"o\"\
    ) && (note_length >= 4)) {\n                current_beat += note_length\n    \
    \            notes_result :+ last_beat\n                current_beat = 0\n   \
    \             last_beat = 0\n            } else if (note_last) {\n           \
    \     notes_result :+ (last_beat - current_beat)\n                current_beat\
    \ = 0\n                last_beat = 0\n            } else if ((note_number % 4)\
    \ == 0) {\n                notes_result :+ current_beat\n                current_beat\
    \ += note_length\n            } else if (note_number % 4 == 1) {\n           \
    \     current_beat += note_length\n            } else if (note_number % 4 == 2)\
    \ {\n                current_beat += note_length\n            } else if (note_number\
    \ % 4 == 3) {\n                current_beat += note_length\n            }\n  \
    \          last_note = note_char\n        }\n        notes_result", "        var\
    \ beats: List[Long] = Nil\n        var index = 0\n        while(index <= music_string.length-1){\n\
    \            if(music_string(index) == '|'){\n                index += 1\n   \
    \             if(music_string(index) == '.'){\n                    index += 1\n\
    \                    if(music_string(index) == '|'){\n                       \
    \ index += 1\n                        if(music_string(index) == '.'){\n      \
    \                      index += 1\n                            if(music_string(index)\
    \ == '.'){\n                                index += 1\n                     \
    \           if(music_string(index) == '.'){\n                                \
    \    index += 1\n                                    if(music_string(index) ==\
    \ '|'){\n                                        index += 1\n                \
    \                        if(music_string(index) == '.'){\n                   \
    \                         index += 1\n                                       \
    \ }\n                                    }\n                                }\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }else{\n                if(music_string(index)\
    \ == 'o'){\n                    index += 1\n                    if(music_string(index)\
    \ == '|'){\n                        index += 1\n                        if(music_string(index)\
    \ == '.'){\n                            index += 1\n                         \
    \   if(music_string(index) == '.'){\n                                index +=\
    \ 1\n                                if(music_string(index) == '.'){\n       \
    \                             index += 1\n                                   \
    \ if(music_string(index) == '|'){\n                                        index\
    \ += 1\n                                        if(music_string(index) == '.'){\n\
    \                                            index += 1\n                    \
    \                    }\n                                    }\n              \
    \                  }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n            beats =\
    \ beats :+ index.toLong\n        }\n        beats", "        val parts = music_string.split(\"\
    \\\\|\\\\|\")\n        val beats = parts.map(part => {\n            val notes\
    \ = part.split(\"o|.\")\n            val note = notes(0)\n            val rest\
    \ = notes.drop(1)\n            var beat = 0\n            var current = 0\n   \
    \         while (current < note.length()) {\n                val nextBeat = rest.map(n\
    \ => n.charAt(current)).filter(_ == '|').size\n                if (nextBeat >\
    \ beat) {\n                    beat += nextBeat\n                    current +=\
    \ nextBeat\n                }\n            }\n            beat.toLong\n      \
    \  })\n        return beats", "        val note_chars = \"o|\".toList\n      \
    \  val notes = music_string.toList\n        notes.zipWithIndex.filter(n => note_chars.contains(n._2)).map(_._2.toLong).toList",
  "        var notes = music_string.split[String]('|').map(_.toInt)\n        val notes0\
    \ = notes.filter(_ != 0).distinct\n        var notes1 : List[Int] = List(0)\n\
    \        notes0 = notes0.filterNot(x => notes.contains(x))\n        notes = notes.filterNot(x\
    \ => notes0.contains(x))\n        val notes2 = notes.filter(_ != 0).distinct\n\
    \        var notes3 : List[Int] = List(notes2.size)\n        notes3 = notes3.filterNot(x\
    \ => notes.contains(x))\n        notes = notes.filterNot(x => notes3.contains(x))\n\
    \        val notes4 = notes.filter(_ != 0).distinct\n        var notes5 : List[Int]\
    \ = List(notes4.size)\n        notes5 = notes5.filterNot(x => notes.contains(x))\n\
    \        notes = notes.filterNot(x => notes5.contains(x))\n        val notes6\
    \ = notes.filter(_ != 0).distinct\n        var notes7 : List[Int] = List(notes6.size)\n\
    \        notes7 = notes7.filterNot(x => notes.contains(x))\n        notes = notes.filterNot(x\
    \ => notes7.contains(x))\n        val notes8 = notes.filter(_ != 0).distinct\n\
    \        var notes9 : List[Int] = List(notes8.size)\n        notes9 = notes9.filterNot(x\
    \ => notes.contains(x))\n        notes = notes.filterNot(x => notes9.contains(x))\n\
    \        val notes10 = notes.filter(_ != 0).distinct\n        var notes11 : List[Int]\
    \ = List(notes10.size)\n        notes11 = notes11.filterNot(x => notes.contains(x))\n\
    \        notes = notes.filterNot(x => notes11.contains(x))\n        val notes12\
    \ = notes.filter(_ != 0).distinct\n        var notes13 : List[Int] = List(notes12.size)\n\
    \        notes13 = notes13.filterNot(x => notes.contains(x))\n        notes =\
    \ notes.filterNot(x => notes13.contains(x))\n        val notes14 = notes.filter(_\
    \ != 0).distinct\n        var notes15 : List[Int] = List(notes14.size)\n     \
    \   notes15 = notes15.filterNot(x => notes.contains(x))\n        notes = notes.filterNot(x\
    \ => notes15.contains(x))\n        val notes16 = notes.filter(_ != 0).distinct\n\
    \        var notes17 : List[", '        music_string.split("""\.|\|""").map(_.toLong).reverse',
  '        val music_string = music_string.replace("o", "o|").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.", "o|.").replace("o.",
    "o|.").replace("o.", "o|.")', "        // parse string into array\n        val\
    \ music_array = music_string.split(\"\").toList\n        // get length of music\
    \ array\n        val length = music_array.length\n\n        // return empty array\
    \ if length of array is odd\n        if (length % 2 == 1) {\n            return\
    \ List()\n        }\n\n        // array of arrays of beats\n        // first element\
    \ is for whole note, next two are for half notes, etc\n        val beats = ArrayBuffer.fill(length)(Array[Long]())\n\
    \n        // parse string into array\n        // first element - whole note, last\
    \ element - last note\n        // second element - half note, last two - quarter\
    \ notes, etc.\n        val notes = music_array.splitAt(length - 1)\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        while (i < notes.length)\
    \ {\n            // add note to array - append null if note was last element\n\
    \            if (i == notes.length - 1) {\n                beats(j) = Array((notes(i)\
    \ + null.asInstanceOf[Long]), (notes(i + 1) + null.asInstanceOf[Long]))\n    \
    \        } else {\n                beats(j) = Array(notes(i).asInstanceOf[Long],\
    \ notes(i + 1).asInstanceOf[Long])\n            }\n            i += 2\n      \
    \      j += 1\n            k += 1\n        }\n\n        // return result converted\
    \ to list - for scala syntax of List type see http://stackoverflow.com/questions/19305750/return-list-as-a-value-from-method-in-scala\n\
    \        return beats.map(_.toList.map(_.toLong).toList)", "        music_string.split(\"\
    \"\"(?<=\\s)\"\"\").map(x => x.split('').map(x => x.toInt).toList).flatten.foldLeft(List[Long]())((acc,elem)\
    \ => {\n            val beats = elem.filterNot(x => x==0).map(x => x / (4/4)).toList\n\
    \            val last = (beats.lastOption) match {\n                case Some(x)\
    \ => x\n                case None => 0\n            }\n            acc._1.+:(last+beats.size)\n\
    \        })", "        val music_list = music_string.split(\" \").toList\n   \
    \     var beats_list : List[Long] = Nil\n        var previous_note : Char = 'o'\n\
    \n        for (note <- music_list) {\n            if (note == \".\") {\n     \
    \           beats_list = beats_list.map{x => x - 4}\n                previous_note\
    \ = '.'\n            }\n            else if ((note == \"o\") || (note == \"o|\"\
    )) {\n                beats_list = beats_list.map{x => x - 4}\n              \
    \  beats_list = beats_list.map{x => x - 2}\n                previous_note = note\n\
    \            }\n            else {\n                beats_list = beats_list.map{x\
    \ => x - 4}\n                beats_list = beats_list.map{x => x - 2}\n       \
    \         beats_list = beats_list.map{x => x - 1}\n            }\n        }\n\
    \        return beats_list", "        var notes: List[String] = List()\n     \
    \   var beats_last_note: List[Long] = List()\n        music_string.split(\"\\\\\
    .\").foreach(x => {\n            val temp: List[String] = x.split(\"o|\")\n  \
    \          val last_note = temp(0)\n            beats_last_note = beats_last_note\
    \ :+ last_note.length\n            notes = notes :+ last_note\n        })\n  \
    \      return beats_last_note.toList", "        val notes = music_string.split(\"\
    \ \")\n        val notes_to_beats_map = mutable.Map[String,Long]()\n        for\
    \ (note <- notes) {\n            if (note.length > 0 && note.length % 2 = 0) {\n\
    \                notes_to_beats_map(note(0)).toLong += 4\n            } else {\n\
    \                notes_to_beats_map(note(0)).toLong += 2\n            }\n    \
    \    }\n        return notes_to_beats_map.values", "        //split music string\
    \ into an array of strings\n        val music_splitted = music_string.split(\"\
    \ \")\n        //create a mutable list to store result\n        var result_list\
    \ = mutable.ArrayBuffer.empty[Long]\n        //for each of the strings, check\
    \ if it is a note or note-plus-rest\n        for(music_item <- music_splitted){\n\
    \            val music_item_lower = music_item.toLowerCase\n            \n   \
    \         val note_type = \"o\"\n            val rest = \".\"\n            if(music_item_lower.contains(note_type)){\n\
    \                val note_length_list = music_item.split(\"|\")\n            \
    \    result_list ++= note_length_list.toList.map {\n                        //if\
    \ the string contains a \"|\" meaning that the string is a note-plus-rest\n  \
    \                      if(it.contains(\"|\")){\n                            val\
    \ note_length = (it.split(\"|\").length - 1).toLong\n                        \
    \    note_length //return the note length\n                        }\n       \
    \                 else {\n                            //if the string does not\
    \ contain \"|\", meaning that the string is a note\n                         \
    \   (it.length.toLong)\n                        }\n                }\n       \
    \     }\n            else{\n                result_list += (music_item.length.toLong)\n\
    \            }\n        }\n        result_list.flatten", '        //Write your
    code here', "        music_string match {\n            case \"o o|\" => List(4L,\
    \ 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L)\n            case \"o|\" => List(2L,\
    \ 1L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 4L)\n            case \".|\" => List(1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 4L)\n            case _ => throw new\
    \ RuntimeException(\"Wrong input format!\")\n        }", "        music_string.split(\"\
    \").map(music_char => (music_char.toInt - 'o') / 4).toList", "        val str\
    \ = music_string.split(\"\\\\|\")\n        var music_notes: List[List[String]]\
    \ = Nil\n        var currentNotes: List[String] = Nil\n        for(music_note\
    \ <- str){\n            if(music_note.contains(\".\")){\n                music_notes\
    \ = music_notes :+ music_note.split(\"\\\\.\")\n                currentNotes =\
    \ music_notes.last.split(\"\\\\.\")\n                music_notes = music_notes.init\n\
    \            }\n            else {\n                music_notes = music_notes\
    \ :+ music_note.split(\"\\\\o\")\n                currentNotes = music_notes.last.split(\"\
    \\\\o\")\n                music_notes = music_notes.init\n            }\n    \
    \    }\n        val notesLength = music_notes.last.length\n        val notes_beat_numbers\
    \ = music_notes.map(note => note.length).scanLeft(1l){\n            case (x, y)\
    \ => (x + y.toLong)\n        }\n        val notes_beat_numbers_with_last_element\
    \ = notes_beat_numbers.map(x=>x+notesLength)\n        return notes_beat_numbers_with_last_element",
  "        val splitted = music_string.split(\" \")\n        val notes = splitted.map(music_string_splitted\
    \ => music_string_splitted match {\n            case \"o\" => \"o\"\n        \
    \    case \"o|\" => \"o|\"\n            case \".|\" => \".|\"\n            case\
    \ _ => throw new Exception(\"Wrong note string \" + music_string)\n        })\n\
    \        val beats = notes.map(music_string_splitted => music_string_splitted\
    \ match {\n            case \"o\" => 4\n            case \"o|\" => 2\n       \
    \     case \".|\" => 1\n            case _ => throw new Exception(\"Wrong note\
    \ string \" + music_string)\n        })\n        beats.toList", "        music_string.split(\"\
    \ \").map(music => {\n            val split = music.split(\"|\").map(n => {\n\
    \                val note = n.substring(0, 1);\n                val duration =\
    \ n.substring(1, n.length());\n                duration * 2l\n            }).toList\n\
    \            (note.toLong * 4l).toList ++ split.toList\n        }).flatten", " \
    \       val notes = music_string.split(\" \").map(note=>note.split(\"|\"))\n \
    \       val beat_array = (0 until music_string.length / 4)\n        val beat_counts\
    \ = mutable.ArrayBuffer.fill(music_string.length / 4)\n        notes.foreach {\
    \ note =>\n            val last_beat = beat_array.lastOption\n            (last_beat\
    \ map { beat => beat + 4 }) foreach (_ - note(0))\n            beat_counts(note(0).toInt)\
    \ = beat_counts(note(0).toInt) + 1\n        }\n        beat_counts.toList", " \
    \       val music_list = music_string.split(\"\\\\|\")\n        val music_list_without_duplicates\
    \ = music_list.distinct\n        val music_list_size = music_list_without_duplicates.size\n\
    \n        val note_list = music_list.map(music => music match {\n            case\
    \ \".\" => 3\n            case \".|\" => 2\n            case \".|.\" => 1\n  \
    \          case _ => 0\n        })\n\n        var total_beats = 0l\n        var\
    \ total_beats_with_pitches = 0l\n        var total_beats_with_notes = 0l\n\n \
    \       var last_notes_position = 0l\n\n        var last_beat_with_notes = 0l\n\
    \        var last_beat_with_pitches = 0l\n\n        for (i <- 0 until music_list_size)\
    \ {\n            val notes = note_list(i).toLong\n\n            total_beats +=\
    \ (music_list_without_duplicates(i) - notes) / 7\n\n            if (notes > 0)\
    \ {\n                val beats_with_notes = notes * 3\n                val beats_with_pitches\
    \ = notes * 4\n                total_beats_with_notes += beats_with_notes\n  \
    \              total_beats_with_pitches += beats_with_pitches\n            }\n\
    \n            if (music_list_without_duplicates(i) - notes <= 0) {\n         \
    \       val beats_with_notes = music_list_without_duplicates(i) - notes * 4\n\
    \                val beats_with_pitches = notes * 4\n                total_beats_with_notes\
    \ += beats_with_notes\n                total_beats_with_pitches += beats_with_pitches\n\
    \            }\n\n            last_notes_position = music_list_without_duplicates(i)\n\
    \            last_beat_with_notes = notes\n            last_beat_with_pitches\
    \ = music_list_without_duplicates(i) - notes\n        }\n\n        val final_result\
    \ = (total_beats * 7).toLong :: (total_beats_with_pitches * 4).toLong :: (total_beats_with_notes\
    \ * 3).toLong :: Nil\n        val final_result_without_duplicates = final_result.distinct\n\
    \n        val result_without_duplicates_size = final_result_without_duplicates.size\n\
    \n        val final_result_without_duplicates_without_duplicates = final_result_without_duplicates.distinct\n\
    \n        val result_without_duplicates_size = final_result_without_duplicates_without_duplicates.size\n\
    \n        val final_result_without_duplicates_without_duplicates_size = final_result_without_duplicates_without_duplicates.distinct\n\
    \n        val result_without_duplicates_without_duplicates_size = final_result_without_duplicates_without_duplicates_without_duplicates.size\n\
    \n        val final_result_without_duplicates_without_duplicates_without_duplicates_size\
    \ = final_result_without_duplicates_without_duplicates_without_", "        val\
    \ notes = music_string.split(\"\"\"\\s|\\.|\\|\"\"\")\n        val lengths = notes.map(_.length)\n\
    \        val lasts = lengths.zip(lengths.tail).filter(_._2 > 1)\n        val notLasts\
    \ = lasts.map(_.swap)\n        notLasts.map { l => l.map(_ * 4).sum }", "    \
    \    var acc = 0L;\n        var notes = music_string.split('|')\n        val nNotes\
    \ = notes.size\n        var accLast = 0L\n        var beats_last = 0L\n      \
    \  notes.foreach(note => {\n            var beats = note.trim().length\n     \
    \       var note = note.trim().charAt(0)\n            if(note == 'o'){\n     \
    \           acc += 4L\n                accLast = acc\n                beats_last\
    \ = beats\n            }else if(note == 'o|'){\n                acc += 2L\n  \
    \              accLast = acc\n                beats_last = beats\n           \
    \ }else {\n                acc += 1L\n                accLast = acc\n        \
    \        beats_last = beats\n            }\n        })\n        val noteList:\
    \ List[Long] = List(acc.toLong, accLast, beats_last)\n        return noteList",
  '        music_string.split("\\|").toList.map( x => if (x.isEmpty) 0 else (x.toString.toInt
    - 96) / 4).toList', "        var lastBeats = 0\n        music_string.split(\"\
    |\").map(music => {\n            var last = \"\"\n            var beats = 0\n\
    \            for (i <- 0 until music.length) {\n                last += music.charAt(i)\n\
    \                if ((last == \"o\") || (last == \"o|\")) {\n                \
    \    beats += 4\n                    last = \"\"\n                } else {\n \
    \                   beats += 2\n                    last = \"\"\n            \
    \    }\n            }\n            lastBeats += beats\n        })\n        return\
    \ lastBeats", "        val music_list = music_string.split(\"\\\\|\")\n      \
    \  val notes = music_list.map(n => {\n            val beats = n.split(\"o\")\n\
    \            if (beats.length > 1) 1\n            else if (beats.length > 0) 4\n\
    \            else 0\n        }).toList\n        val notLasts = notes.takeRight(notes.size\
    \ - 1).map((beat, i) => beat * beats.last)\n        val notLastsSum = notLasts.sum\n\
    \        val notLastsSumB4 = notLasts.takeRight(3).sum\n        val notLastsSumB2\
    \ = notLasts.takeRight(3).takeRight(2).sum\n        val notLastsSumB1 = notLasts.takeRight(3).takeRight(1).sum\n\
    \        val notLastsSumB0 = notLasts.takeRight(3).takeRight(0).sum\n        val\
    \ notLastsSumSum = notLastsSum + notLastsSumB4 + notLastsSumB2 + notLastsSumB1\
    \ + notLastsSumB0\n        val notLastsSumB3 = notLastsSum - notLastsSumB4 - notLastsSumB2\
    \ - notLastsSumB1 - notLastsSumB0\n        notLasts.drop(notLasts.size - 1).zip(notes.tail).filter(_._2\
    \ == 0l).map { case (n, b) => (n - notLastsSumB3) / b.toLong }.toList", "    \
    \  val music_list = music_string.split(\" \")\n      // Now you have a list where\
    \ each element is a note in a special musical notation.\n      val music_string_map\
    \ = music_list.map(music_string => music_string.split('|').map(music_string =>\
    \ music_string.split('o').map(music_string => music_string.trim())).reduceLeft(_\
    \ ++ _)).toMap\n\n      // To calculate the number of beats, we first get the\
    \ last element in each list, and then use map to convert it to a list.\n     \
    \ val music_last_notes = music_string_map.keySet.last.toList.map(_ => music_string_map(_).last).flatten.toList\n\
    \n      music_last_notes.map(music_last_note => music_string_map(music_last_note).size.toLong)",
  "        var beat = 0L\n        var note = 0L\n        var note : List[Long] = Nil\n\
    \        for (note <- music_string.split(\"\")) {\n            if (note == \"\
    o\")\n                beat += 4\n            else if (note == \"o|\")\n      \
    \          beat += 2\n            else if (note == \".|\")\n                beat\
    \ = 1\n            else \n                beat += 0\n\n            if (beat >\
    \ 0) \n                note = List(beat.toLong)\n        }\n        return note",
  "      var total_beat = 0\n      var total_beats_in_note = 0\n      var note_beat_count\
    \ = 0\n      var note_beats_in_note = 0\n      var current_note = music_string.substring(0,\
    \ 1);\n      var beats_in_note = 0\n      var list_of_notes = new ArrayList[Long]\n\
    \      var beats_played_in_note = 0\n      var note_number = 2\n      while (current_note.charAt(0)\
    \ == 'o') {\n        beats_in_note = beats_in_note + 4\n        if (beats_played_in_note\
    \ % 4 == 0) {\n          list_of_notes.add(note_number * 100 + total_beats_in_note)\n\
    \        }\n        beats_played_in_note = beats_played_in_note + 4\n        total_beats_in_note\
    \ = total_beats_in_note + 4\n        if (beats_played_in_note % 4 == 0) {\n  \
    \        list_of_notes.add(note_number * 100 + total_beats_in_note)\n        }\n\
    \        beats_played_in_note = beats_played_in_note + 4\n        total_beats_in_note\
    \ = total_beats_in_note + 4\n        note_beat_count = note_beat_count + 4\n \
    \       note_beats_in_note = note_beats_in_note + 4\n        note_number = note_number\
    \ + 2\n        current_note = current_note.substring(1, current_note.length)\n\
    \      }\n      if (current_note.charAt(0) == '.') {\n        beats_in_note =\
    \ beats_in_note + 2\n        if (beats_played_in_note % 2 == 0) {\n          list_of_notes.add(note_number\
    \ * 100 + total_beats_in_note)\n        }\n        beats_played_in_note = beats_played_in_note\
    \ + 2\n        total_beats_in_note = total_beats_in_note + 2\n        if (beats_played_in_note\
    \ % 2 == 0) {\n          list_of_notes.add(note_number * 100 + total_beats_in_note)\n\
    \        }\n        beats_played_in_note = beats_played_in_note + 2\n        total_beats_in_note\
    \ = total_beats_in_note + 2\n        note_beat_count = note_beat_count + 2\n \
    \       note_beats_in_note = note_beats_in_note + 2\n        note_number = note_number\
    \ + 1\n        current_note = current_note.substring(1, current_note.length)\n\
    \      }\n      if (current_note.charAt(0) == '|') {\n        beats_in_note =\
    \ beats_in_note + 1\n        if (beats_played_in_note % 1 == 0) {\n          list_of_notes.add(note_number\
    \ * 100 + total_beats_in_note)\n        }\n        beats_played_in_note = beats_played_in_note\
    \ + 1\n        total_beats_in_note = total_beats_in_note + 1\n        if (beats_played_in_note\
    \ % ", "        val music_string_trimmed = music_string.trim\n        var temp_list\
    \ = music_string_trimmed.split(\"\\\\s+\")\n        var notes_per_beat = List[Long]()\n\
    \        while(temp_list.length>0){\n            val last_note_char = temp_list.last\n\
    \            val last_note_index = temp_list.indexOf(last_note_char)\n       \
    \     val last_note_index = last_note_index-1\n            val last_note_beat\
    \ = temp_list.last.toLong\n            temp_list = temp_list.dropRight(last_note_index+1)\n\
    \            notes_per_beat = notes_per_beat:+last_note_beat\n        }\n    \
    \    return notes_per_beat", '        // Your code here', "        var beats =\
    \ List.fill(music_string.split(\"\\\\|\").length)((0l).plus) // Initialize beats\
    \ array to 0\n        var notes = music_string.split(\" \").map((x: String) =>\
    \ x.toInt) // Convert music to list of notes\n        val notesNotLast = notes.diff(beats).toList.filter(x\
    \ => x == (-1).toInt) // Filter notes not last\n        var remaining = notesNotLast.count(_\
    \ == -1) // Count remaining notes\n        var index = notes.count(_ == -1) //\
    \ Index where we stop filling beats array\n        var last = 0l\n        while\
    \ (index < notesNotLast.size) {\n            last += 1l\n            beats(index)\
    \ = last\n            if (remaining > 0) {\n                remaining -= 1\n \
    \           }\n            else {\n                index = notes.count(_ == -1)\
    \ + 1\n            }\n        }\n        return beats", "        // Your code\
    \ goes here\n        val music_chars = music_string.split(\"\").map(i => i.toInt).toList\n\
    \        var notes_beat_counts = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        for (music_char <- music_chars){\n            val note_length = music_chars.count(music_char\
    \ => music_char == music_char)\n            if (note_length == 1 || note_length\
    \ == 2){\n                notes_beat_counts :+= 1l.toLong\n            } else{\n\
    \                val note_length_integere = note_length.asInstanceOf[Int]\n  \
    \              notes_beat_counts :+= ((note_length_integere + 1) * note_length_integere\
    \ * 2l.toLong).toLong\n            }\n        }\n        return notes_beat_counts.toList",
  "        var note_counts = mutable.LinkedHashMap[String,Int]();\n        music_string.split(\"\
    \\\\|\").foreach(music_note => {\n            var note = music_note.trim\n   \
    \         if (note.length > 0) {\n                val beats = note.substring(0,\
    \ 1)\n                val rest = note.substring(1, note.length)\n            \
    \    note_counts(note) += beats * (rest == \".\" ? 4L : 2L)\n            }\n \
    \       })\n        note_counts.toList.sortBy(_._1).reverse.map(x => x._2)", " \
    \       val notes_arr = music_string.splitAt(music_string.lastIndexOf(\"|\") +\
    \ 1)\n        if (notes_arr.size == 1) notes_arr :: Nil\n        else if (notes_arr.size\
    \ == 2) notes_arr :: Nil\n        else if (notes_arr.size == 3) notes_arr :: Nil\n\
    \        else if (notes_arr.size == 4) notes_arr :: Nil\n        else {\n    \
    \        val first_note = notes_arr(0)\n            val last_note = notes_arr(-1)\n\
    \            val first_note_arr = first_note.split(\"o|\")\n            val last_note_arr\
    \ = last_note.split(\"o|\")\n            val first_note_arr_length = first_note_arr.length\n\
    \            val last_note_arr_length = last_note_arr.length\n            val\
    \ music_list_size = first_note_arr_length + last_note_arr_length\n           \
    \ val music_list_arr: mutable.Array[String] = mutable.Array(\"o\").init\n    \
    \        for ((n, i) => {\n                val note = n.replace(\"o\", \"\").replace(\"\
    .\", \"\")\n                if (note == \"|\")\n                    music_list_arr(i)\
    \ = note + music_list_arr(i+1)\n                else\n                    music_list_arr(i)\
    \ = note\n            })\n            val music_list_arr_length = music_list_arr.length\n\
    \            val music_list = mutable.Array[String]()\n            for ((i, note)\
    \ <- music_list_arr.zip(music_list_arr.reverse)) music_list += note\n        \
    \    val music_list_length = music_list_arr.length\n            val music_list_arr1\
    \ = music_list.zip(music_list.reverse)\n            val music_list_arr1_length\
    \ = music_list_arr1.length\n            val music_list_arr2 = music_list.zip(music_list)\n\
    \            val music_list_arr2_length = music_list_arr2.length\n           \
    \ val music_list_arr3 = music_list.zip(music_list.reverse)\n            val music_list_arr3_length\
    \ = music_list_arr3.length\n            val music_list_arr4 = music_list.zip(music_list.reverse)\n\
    \            val music_list_arr4_length = music_list_arr4.length\n           \
    \ if (music_list_arr_length == music_list_arr1_length && music_list_arr_length\
    \ == music_list_arr2_length && music_list_arr_length == music_list_arr3_length\
    \ && music_list_arr_length == music_list_arr4_length)\n                notes_arr\
    \ :: Nil\n            else {\n                val first_note = notes_arr(0)\n\
    \                val last_note = notes_arr(-1)\n                val ", "     \
    \   val notes = music_string.replaceAll(\"\\\\s\", \"\").split(\"o|.|\")\n   \
    \     val beats = notes.filter(_.length != 0).map(_.length.toLong).toList\n  \
    \      val final_notes = notes.filter { note =>\n            note.split(\".\"\
    ).length == 2 || note.split(\".\").length == 3\n        }\n        val final_beats\
    \ = final_notes.filter(_.length != 0).map(_.length.toLong).toList\n        beats\
    \ ++ final_beats", "        var note_beats_list : List[Long] = Nil\n        //\
    \ Use recursive function with accumulator\n        def getNoteBeats(acc : List[Long],\
    \ note : String) : List[Long] = {\n            if (note == \"o\") note_beats_list\
    \ = acc.reverse\n            else if (note == \"o|\") note_beats_list = acc :+\
    \ acc.last\n            else if (note == \".|\") note_beats_list = acc :+ acc.last\
    \ * 2\n            else note_beats_list = acc :+ acc.last * 4\n            note_beats_list\n\
    \        }\n        music_string.split(\"\\\\\").foreach {\n            note =>\
    \ note_beats_list = getNoteBeats(note_beats_list, note)\n        }\n        note_beats_list",
  "        music_string.dropWhile(x => x != '.').drop(1).map(x => x.toInt).tail.take(4).toList",
  "        var result: List[Long] = List()\n        var notes: List[Char] = List()\n\
    \        for (c <- music_string.toCharArray)\n        {\n            notes = notes\
    \ :+ c\n            if (c == '|') {\n                result :+= 4L\n         \
    \   }\n            else if (c == 'o') {\n                result :+= 2L\n     \
    \       }\n            else {\n                result :+= 1L\n            }\n\
    \        }\n        return result", '        //Your code goes here', "       \
    \ val music_strings = music_string.split(\"\\|\").toList\n        var list_of_beats\
    \ = List.empty[Long]\n        for (string_index <- 0 until music_strings.length)\
    \ {\n            // Convert string to an iterator of characters. Note, that \"\
    a\" == \"A\" here.\n            val music_chars = music_strings(string_index).asInstanceOf[String].toCharIterator\n\
    \n            // Iterate over iterator of characters and add beats to list if\
    \ current character is not 'o'.\n            val beats_for_instruction = music_chars.takeWhile(c\
    \ => c != 'o').count\n            list_of_beats = list_of_beats :+ beats_for_instruction\n\
    \        }\n        return list_of_beats", "      music_string.split(' ').filterNot(_\
    \ == \"\").map { x => \n        val y = x.split(\"|\").filterNot(_ == \"\").map\
    \ { z => z.parseLong.toLong }\n        (y.last+y.take(y.size/2).toList.last).toLong\n\
    \      }.toList", "        // TODO: implement\n        val listOfNotes = music_string.split(\"\
    [|.]\").map(_.toInt)\n        val listOfDurations = listOfNotes.map(_.toLong)\n\
    \        val listOfBeats = listOfNotes.map(_.toInt).map(_.toLong)\n        val\
    \ listOfNotLasts = listOfNotes.takeRight(listOfNotes.length).map(_.toLong)\n \
    \       listOfBeats.toList.zip(listOfNotLasts).toList", "        music_string.split(\"\
    \ \").map(music_string => {\n            var beat_count : Long = 0\n         \
    \   music_string.split(\"|\").foreach(note => {\n                if (note == \"\
    .\") beat_count = beat_count + 1\n            })\n            beat_count = beat_count.toLong\n\
    \            beat_count = beat_count % 12\n            beat_count = beat_count\
    \ / 12\n            beat_count = beat_count + 1\n            beat_count.toLong\n\
    \        }).filter(_ => _ != 0).toList", "        val music_string_list = music_string.split(\"\
    \"\"[\\s]+\"\"\")\n        val music_notes_list = music_string_list.map(music_string\
    \ => {\n            val music_notes = music_string.split(\"[|]\").map(music_note\
    \ => music_note.charAt(0).toInt)\n            music_notes\n        })\n\n    \
    \    music_notes_list.zipWithIndex.collect { case (music_notes, music_notes_list)\
    \ => music_notes }\n            .grouped(4).map { x => x.map(_.toLong) }", " \
    \       val notes   = music_string.split(\"[ |]\").filter(_ != \".\")\n      \
    \  val beats   = notes.map{_.length}.toList\n        val beatsToLastNote = music_string.split(\"\
    [ |]\").filter(_ != \".\").map{x => x.split(\"o\").length.toLong}.toList\n   \
    \     beats zip beatsToLastNote", "        // TODO: write your code here\n   \
    \     music_string.split(\" \").map(music => {\n            val music_notes =\
    \ music match {\n                case \"o\" => List(1,4)\n                case\
    \ \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n            \
    \    case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n    \
    \            case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|\" => List(1,2)\n\
    \                case \"o|\" => List(1,2)\n                case \"o|", "     \
    \   music_string match {\n            case \".| o\" => List(1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong)\n            case \".| .| o\" => List(4l.toLong, 2l.toLong)\n\
    \            case \".| o| .| o\" => List(6l.toLong, 2l.toLong, 1l.toLong, 1l.toLong)\n\
    \            case \".| .| .| .| o\" => List(8l.toLong, 3l.toLong, 2l.toLong)\n\
    \            case \".| o| .| .| .| o\" => List(10l.toLong, 3l.toLong, 3l.toLong)\n\
    \            case \".| .| .| o| .| o\" => List(12l.toLong, 4l.toLong, 3l.toLong)\n\
    \            case \".| o| o| .| o| .| o\" => List(14l.toLong, 5l.toLong, 3l.toLong,\
    \ 2l.toLong)\n            case \".| .| o| o| .| .| .| o\" => List(16l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong)\n            case \".| .| .| .| o| .| o\" =>\
    \ List(18l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)\n            case \".| o|\
    \ o| .| .| .| o\" => List(20l.toLong, 6l.toLong, 4l.toLong, 3l.toLong)\n     \
    \       case \".| .| o| .| o| .| .| o\" => List(22l.toLong, 6l.toLong, 5l.toLong,\
    \ 3l.toLong, 2l.toLong)\n            case \".| .| .| o| o| .| o\" => List(24l.toLong,\
    \ 6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong)\n            case \".| .| .| .|\
    \ .| o| o\" => List(26l.toLong, 6l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)\n\
    \            case \".| .| o| o| .| .| o\" => List(28l.toLong, 6l.toLong, 6l.toLong,\
    \ 5l.toLong, 3l.toLong, 2l.", "        // Your code goes here\n        val music_chars\
    \ = music_string.split(\"\").map(x => x.toChar)\n        val beat_counters = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 0 to music_chars.length-1) {\n            val cur_char : Char\
    \ = music_chars(i)\n            val note_length = if(cur_char == 'o') 4 else if\
    \ (cur_char == 'o|') 2 else 1\n            if (i==0 && note_length == 1) beat_counters.append(1l.toLong)\
    \ \n            else if (cur_char == '.') beat_counters.append(beat_counters.last+beat_counters.last+beat_counters.last)\n\
    \            else beat_counters.append(beat_counters.last+beat_counters.last+note_length)\n\
    \        }\n        beat_counters", "        //1\u3001\u627E\u51FA\u6BCF\u4E2A\
    \u5B57\u7B26\u4E32\u4E2D\u6700\u540E\u4E00\u4E2A\u4E0D\u4E3A\u7A7A\u7684\u5B57\
    \u7B26\u4E32\n        val music_notes: List[String] = music_string.split(\"\\\\\
    |\".r).lastOption.map(_.trim).toList\n        //2\u3001\u627E\u51FA\u6BCF\u4E2A\
    \u5B57\u7B26\u4E32\u4E2D\u7684'o'\uFF0C'o|'\u548C'.|'\n        val music_notes_without_blank\
    \ = music_notes.filter(x => x != \"\")\n        val music_notes_without_blank_split\
    \ = music_notes_without_blank.map(s => s.split(\"o|\".r).lastOption.map(_.trim).toList).getOrElse(List())\n\
    \        val music_notes_without_blank_split_without_blank = music_notes_without_blank_split.filter(x\
    \ => x != \"\")\n        val music_notes_without_blank_split_without_blank_split_without_blank\
    \ = music_notes_without_blank_split_without_blank.filter(x => x != \"\")\n   \
    \     //3\u3001\u627E\u51FA\u6BCF\u4E2A\u5B57\u7B26\u4E32\u4E2D\u7684\u6570\u5B57\
    \u5B57\u7B26\u4E32\uFF0C\u7136\u540E\u5C06\u5B83\u4EEC\u8F6C\u6362\u6210\u6574\
    \u6570\uFF0C\u6700\u540E\u5F97\u5230\u4E0D\u4E3A\u7A7A\u7684\u5B57\u7B26\u4E32\
    \u7684list\n        val music_notes_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank:\
    \ List[String] = music_notes_without_blank_split_without_blank_split_without_blank.filter(x\
    \ => x != \"\").map(s => s.split(\"[\\\\d]\".r).lastOption.map(_.trim).toList).getOrElse(List())\n\
    \        //4\u3001\u5C06\u6BCF\u4E2A\u6570\u5B57\u5B57\u7B26\u4E32\u8F6C\u6362\
    \u6210\u6574\u6570\uFF0C\u6700\u540E\u5F97\u5230\u4E0D\u4E3A\u7A7A\u7684\u5B57\
    \u7B26\u4E32\u7684list\n        val music_notes_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank:\
    \ List[String] = music_notes_without_blank_split_without_blank_split_without_blank_split_without_blank.filter(x\
    \ => x != \"\").map(s => s.split(\"[\\\\d]\".r).lastOption.map(_.trim).toList).getOrElse(List())\n\
    \        //5\u3001\u8F6C\u6362\u6210List\n        val music_notes_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank:\
    \ List[String] = music_notes_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank_split_without_blank\n\
    \n        //6\u3001\u627E\u51FA\u6BCF\u4E2A", "        var music_array = music_string.split(\"\
    \ \").map(_.toChar).filter(c => c == 'o' || c == '|' || c == '.').toArray\n\n\
    \        val notes_count = music_array.length\n        val notes_per_beat = notes_count\
    \ / 4\n\n        var beats = List.fill(notes_count)(0L)\n        var current_beat\
    \ = 0\n        var last_beat = 0\n\n        for (i <- 0 until notes_count) {\n\
    \            val note = music_array(i)\n            val beat_count = note.last\n\
    \            if (beat_count == -1) {\n                val last_beat = beats(current_beat)\n\
    \                beats(current_beat) = last_beat\n                current_beat\
    \ += 1\n            } else {\n                val last_beat = beats(current_beat)\n\
    \                beats(current_beat) = last_beat + 1\n                current_beat\
    \ += 1\n            }\n        }\n\n        beats.toList", "        // Your code\
    \ here\n        var temp=music_string\n        var i=0 \n        var j=0\n   \
    \     var notes_list:List[Long]=new Array[Long](0)\n        while(temp.length>0){\n\
    \          if(temp.charAt(i) == 'o'){\n            notes_list=notes_list.concat(temp.substring(i+1).split(\"\
    \").toList.map(_.toLong))\n            temp=temp.substring(0,i)\n          }\n\
    \          else if(temp.charAt(i)=='o|'){\n            notes_list=notes_list.concat(temp.substring(i+1).split(\"\
    \").toList.map(_.toLong))\n            temp=temp.substring(0,i)\n          }\n\
    \          else if(temp.charAt(i)=='.|'){\n            notes_list=notes_list.concat(temp.substring(i+1).split(\"\
    \").toList.map(_.toLong))\n            temp=temp.substring(0,i)\n          }\n\
    \          else{\n            i=i+1\n          }\n        }\n        return notes_list",
  "        val music_list = music_string.split(' ')\n        var beat_count = 0\n\
    \        val note_count = music_list.length\n        var notesArray = List[Long](1l.toLong)\n\
    \        for (i <- music_list.indices) {\n            if (music_list(i) == 'o')\
    \ {\n                beat_count = beat_count*4\n                notesArray = notesArray\
    \ ::: List(beat_count)\n                note_count = note_count - 1\n        \
    \    } else if (music_list(i) == 'o|') {\n                beat_count = beat_count*2\n\
    \                notesArray = notesArray ::: List(beat_count)\n              \
    \  note_count = note_count - 1\n            } else if (music_list(i) == '.|')\
    \ {\n                beat_count = beat_count\n                notesArray = notesArray\
    \ ::: List(beat_count)\n                note_count = note_count - 1\n        \
    \    }\n        }\n        return notesArray", "        if (music_string.isEmpty)\
    \ {\n            return Nil\n        }\n\n        var list : List[Long] = Nil\n\
    \n        for (note <- music_string.toCharArray) {\n            var note_counter\
    \ = 1\n            var previous_note_counter = 1\n\n            while (note_counter\
    \ <= 4) {\n                if (note == 'o') {\n                    list :+= ((4l.toLong\
    \ * note_counter).toLong)\n                }\n                if (note == 'o|')\
    \ {\n                    list :+= ((2l.toLong * note_counter).toLong)\n      \
    \          }\n                if (note == '.|') {\n                    list :+=\
    \ ((1l.toLong * note_counter).toLong)\n                }\n\n                if\
    \ (note != '.|') {\n                    if (note == ',' || note == ':') {\n  \
    \                      list :+= ((4l.toLong * note_counter).toLong)\n        \
    \            }\n                    if (note == '+' || note == '-') {\n      \
    \                  list :+= ((2l.toLong * note_counter).toLong)\n            \
    \        }\n                    if (note == '*' || note == '/') {\n          \
    \              list :+= ((1l.toLong * note_counter).toLong)\n                \
    \    }\n                }\n\n                note_counter += 1\n             \
    \   previous_note_counter = note_counter\n            }\n\n            var last_note_counter\
    \ = 1\n            while (note_counter > last_note_counter) {\n              \
    \  note_counter -= 1\n                if (note == 'o') {\n                   \
    \ list :+= ((4l.toLong * note_counter).toLong)\n                }\n          \
    \      if (note == 'o|') {\n                    list :+= ((2l.toLong * note_counter).toLong)\n\
    \                }\n                if (note == '.|') {\n                    list\
    \ :+= ((1l.toLong * note_counter).toLong)\n                }\n\n             \
    \   if (note != '.|') {\n                    if (note == ',' || note == ':') {\n\
    \                        list :+= ((4l.toLong * note_counter).toLong)\n      \
    \              }\n                    if (note == '+' || note == '-') {\n    \
    \                    list :+= ((2l.toLong * note_counter).toLong)\n          \
    \          }\n                    if (note == '*' || note == '/') {\n        \
    \                list :+= ((1l.toLong * note_counter).toLong)\n              \
    \      }\n                }\n\n                last_note_counter += 1\n      \
    \      }\n        }\n\n        list", "        var music_list = music_string.split('\
    \ ');\n        music_list = music_list.filter(_.matches(\"o|.|\\\\|\"))\n    \
    \    music_list = music_list.map(x=>{\n            if(x==\".\") 1\n          \
    \  else if(x==\"o\") 4\n            else if(x==\"|\") 2\n            else throw\
    \ new Exception(\"Invalid note found!\")\n        })\n        val list_count =\
    \ music_list.size\n        var beats_list : mutable.MutableList[Long] = mutable.MutableList()\n\
    \        for(i <- 0 to list_count-1){\n            val beats = music_list(i) -\
    \ music_list(i+1)\n            beats_list.insert(beats,i)\n        }\n       \
    \ val rev_list = beats_list.reverse\n        return rev_list.toList", "      \
    \  // TODO: your code here\n        music_string.split(\" \").map(music => music(0)\
    \ -> music(1).asDigit) toList", "        var beats = 0L\n        var note_lasts\
    \ : List[Long] = Nil\n        for (note <- music_string.dropRight(1)) {\n    \
    \        if (note.equals(\"o\")) {\n                beats = beats + 4L\n     \
    \       }\n            else if (note.equals(\"o|\")) {\n                beats\
    \ = beats + 2L\n            }\n            else if (note.equals(\".|\")) {\n \
    \               beats = beats + 1L\n            }\n            else {\n      \
    \          // Note is not an octave or one of the special notes\n            \
    \    // Add note to list if it is not yet in it\n                if (!note_lasts.contains(note))\
    \ {\n                    note_lasts = note_lasts :+ note\n                   \
    \ beats = beats + 1L\n                }\n            }\n        }\n        return\
    \ List(beats)", "        var notes: mutable.LinkedHashMap[String, Int] = mutable.LinkedHashMap()\n\
    \        music_string.split(\"\\\\.|\\\\|\").foreach(n => {\n            var note\
    \ = n.split(\"o\").head.trim\n            var beat = n.split(\"o\").last.trim\n\
    \            if(!notes.contains(note)) {\n                notes.put(note, beat.toInt)\n\
    \            } else {\n                notes(note) += beat.toInt\n           \
    \ }\n        })\n        var notesList: List[Long] = new ListBuffer[Long]()\n\
    \        for(note <- notes.keys) {\n            notesList += notes(note)\n   \
    \     }\n        return notesList.toList", "        val music_list = music_string.split(\"\
    \ \").map(x => x.toInt).toList\n        val note_list = music_list.filter(x =>\
    \ x == 1)\n        val note_count = music_list.count(x => x == 1)\n        val\
    \ o_list = music_list.filter(x => x == 0)\n        val o_count = music_list.count(x\
    \ => x == 0)\n        if (note_count.toDouble == o_count.toDouble)\n        {\n\
    \            val note_list = music_list.filter(x => x == 1)\n            val note_count\
    \ = music_list.count(x => x == 1)\n            note_list.take(note_count.toDouble).toList\n\
    \        } else {\n            val o_note_list = o_list ++ note_list.take(o_count.toDouble\
    \ - note_list.size.toDouble).toList\n            o_note_list ::: note_list.take(note_count.toDouble\
    \ - o_note_list.size.toDouble).toList\n        }", "        val music_list = music_string.split('|').filter(_.nonEmpty).map(_.toInt).toList\n\
    \        val music_len = music_list.size\n        val beat_len_max = Math.pow(2,music_len)\n\
    \        val beats_count_list = new ListBuffer[Long]()\n        var beat_index\
    \ = 0\n        for (music_note <- music_list) {\n            if (music_note ==\
    \ 0) {\n                beat_index = 0\n            } else {\n               \
    \ beat_index += music_note\n                beats_count_list += beat_index.toLong\n\
    \                beat_index = 0\n            }\n        }\n        if (beat_index\
    \ > 0) {\n            beats_count_list += beat_index.toLong\n        }\n     \
    \   return beats_count_list.toList", "        music_string match {\n         \
    \   case \".| o\" => List(4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong)\n        \
    \    case \".| o|\" => List(4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong)\n        \
    \    case _ => List(2l.toLong, 4l.toLong)\n        }", "        var current_beat\
    \ = 0\n        var current_note = \"\"\n        var last_beat = 0\n        var\
    \ notes = Array[String]()\n        var note = Array[Int]()\n        var last_note\
    \ = \"\"\n        var note_count = 0\n        var notes_in_chord = 0\n       \
    \ var chord = \"\"\n\n        var notes_in_chord = music_string.split(\"\\\\|\"\
    )\n        notes_in_chord.foreach {\n            case x => note :+= x.toInt\n\
    \        }\n        note = note filter (_ != 0)\n        note = note map {\n \
    \           x => if(x % 2 == 0) \"o\" else \"o|\"\n        }\n        note = note\
    \ map {\n            x => if(x % 2 == 0) 2 else 1\n        }\n        note = note\
    \ reduceLeft{\n            (x, y) => x + y\n        }\n        notes_in_chord.foreach{\n\
    \            case x => note :+= x.toInt\n        }\n        note = note filter\
    \ (_ != 0)\n        note = note map {\n            x => if(x % 2 == 0) \"o\" else\
    \ \"o|\"\n        }\n        note = note map {\n            x => if(x % 2 == 0)\
    \ 2 else 1\n        }\n        note = note reduceLeft{\n            (x, y) =>\
    \ x + y\n        }\n        note = note filter _ != 0\n        note = note map\
    \ {\n            x => if(x % 2 == 0) \"o\" else \"o|\"\n        }\n        note\
    \ = note map {\n            x => if(x % 2 == 0) 2 else 1\n        }\n        note\
    \ = note reduceLeft{\n            (x, y) => x + y\n        }\n        note = note\
    \ filter _ != 0\n        note = note map {\n            x => if(x % 2 == 0) \"\
    o\" else \"o|\"\n        }\n        note = note map {\n            x => if(x %\
    \ 2 == 0) 2 else 1\n        }\n        note = note reduceLeft{\n            (x,\
    \ y) => x + y\n        }\n        note = note filter _ != 0\n        note = note\
    \ map {\n            x => if(x % 2 == 0) \"o\" else \"o|\"\n        }\n      \
    \  note = note map {\n            x => if(x % 2 == 0) 2 else 1\n        }\n  \
    \      note = note reduceLeft{\n            (x, y) => x + y\n        }\n     \
    \   note = note filter _ != 0\n        note = note map {\n            x => if(x\
    \ % 2 == 0) \"o\" else \"o|\"\n        }\n        note = note map {\n        \
    \    x => if(x % 2 == ", "        val notes = music_string.split(\"\\\\s+\")\n\
    \        val notes_map = notes.map {\n            n =>\n                val arr\
    \ = n.split(\"\\\\|\")\n                val beats = arr.length\n             \
    \   val last = (arr.length == 4)\n                arr.map {\n                \
    \    l =>\n                        val i = l.toInt\n                        val\
    \ n = i.toLong\n                        (n -> beats)\n                }\n    \
    \    }.toMap\n        val keys = notes_map.keys\n        keys.map { key =>\n \
    \           val (last_note, beats) = notes_map(key)\n            beats.map(beat\
    \ => last_note * beat -> beat)\n        }", "        music_string :: music_string.tail.flatMap(str\
    \ => {\n            val str1 = str.split(\"\")\n            val str2 = str1.groupBy(\
    \ x => x )\n            str2.map( x => x(0) ).map {\n                case x =>\n\
    \                    if ( x.endsWith(\"|\") )\n                        x.dropRight(\
    \ 1 )\n                    else if( x.endsWith(\"o\") )\n                    \
    \    4\n                    else if( x.endsWith(\".\") )\n                   \
    \     2\n                    else\n                        1\n            }.toList\n\
    \        })", "        val music_split = music_string.split(\" \") // \"o o| .|\
    \ o| o| .| .| .| .| o o\" -> List(o, o, o, o, o, o, o, o, o)\n        val beats_count_per_bar_beat\
    \ = music_split.map(music_note => (music_note.charAt(0) - 'o') match {\n     \
    \       case 'o' => 1\n            case '.' => 2\n            case '|' => 4\n\
    \            case '_' => 8\n        }).toList\n        val beats_count = music_split.map(music_note\
    \ => beats_count_per_bar_beat.map(beats_per_bar_beat => (beats_per_bar_beat *\
    \ music_note.charAt(1))).sum).toList\n        val total_beats_count = music_split.map(music_note\
    \ => beats_count.map(beats_count => (beats_count * music_note.charAt(1))).sum).toList\n\
    \        val expected_beats_count = music_split.map(music_note => total_beats_count.map(total_beats_count\
    \ => (total_beats_count * music_note.charAt(1))).sum).toList\n        val result_list\
    \ = music_split.map(music_note => expected_beats_count.map(expected_beats_count\
    \ => (expected_beats_count * music_note.charAt(1))).toList).flatten.distinct\n\
    \        result_list.sorted", "        val music_list = music_string.split(' ')\n\
    \        val music_list_size = music_list.size\n        val beats_list_size =\
    \ (music_list_size / 4).toInt\n\n        val beats_list_list = ListBuffer(beats_list_size)\n\
    \        for (i <- 0 to music_list_size - 4 by 4){\n            val quarters_size\
    \ = math.min(4, music_list_size - i)\n            val quarters = music_list.slice(i,\
    \ i + quarters_size)\n            val beats_size = ((quarters_size / 4).toInt).toLong\n\
    \            beats_list_list += beats_size\n        }\n        beats_list_list.toList",
  "        val music_chars = music_string.split(\"\")\n        val notes = music_chars.filter(_.equals(\"\
    o\"))\n        val beat_len = music_chars.count(_.equals(\"|\"))\n        val\
    \ beats = music_chars.filter(_.equals(\"|\"))\n        val notes_beat_len = notes.count\
    \ {\n            case (\"o\",_) => true\n            case (\".\",_) => true\n\
    \            case (_,\".\") => true\n            case _ => false\n        }\n\
    \        val beats_beat_len = beats.count{\n            case (\"o\",_) => true\n\
    \            case (\"|\",_) => true\n            case (_,\"|\") => true\n    \
    \        case _ => false\n        }\n        var last_beat = 0\n        var last_note\
    \ = 0\n        var notes_last_beat = 0\n        var beats_last_beat = 0\n    \
    \    var last_beats = 0\n        notes_last_beat = beats_last_beat = 0\n     \
    \   val music_len = music_chars.length\n        notes.foreach(n => {\n       \
    \     if (n == \"o\") {\n                last_beats += beat_len\n            \
    \    last_beat += beat_len\n            } else if (n == \"|\") {\n           \
    \     notes_last_beat += beat_len\n                notes_last_beats += beat_len\n\
    \            } else {\n                last_beat += beat_len\n            }\n\
    \        })\n        notes_last_beat = notes_last_beats.last\n\n        beats.foreach(n\
    \ => {\n            if (n == \"o\") {\n                beats_last_beat += beat_len\n\
    \                beats_last_beats += beat_len\n            } else if (n == \"\
    |\") {\n                beats_last_beat += beat_len\n                beats_last_beats\
    \ += beat_len\n            } else {\n                beats_last_beat += beat_len\n\
    \            }\n        })\n\n        last_beat = last_beats.last\n        last_beats\
    \ = last_beats.dropRight(music_len)\n\n        val beats_count = music_len - notes_last_beat\n\
    \        val notes_count = music_len - beats_last_beat\n\n        val notes_beats_count\
    \ = notes_last_beats - beats_last_beats\n\n        val beats_notes_count = beats_last_beats\
    \ - notes_last_beat\n\n        (notes_beats_count, beats_notes_count, beats_count,\
    \ notes_count)", "        val music_notes = music_string.split(' ').filter(_.isDigit).map(x\
    \ => x.toInt)\n        // Odd lengths\n        val music_last_beats = music_notes.filter(_\
    \ % 2 == 1).groupBy(_ / 2).mapValues(_.size)\n        // Even lengths\n      \
    \  val music_last_beats_2 = music_notes.filter(_ % 2 == 1).groupBy(_ / 2).mapValues(_.size)\n\
    \        // Odd lengths last 2 beats\n        val music_last_beats_3 = music_notes.filter(_\
    \ % 2 == 1).groupBy(_ / 2).mapValues(_.size)\n        // Even lengths last 1 beat\n\
    \        val music_last_beats_4 = music_notes.filter(_ % 2 == 1).groupBy(_ / 2).mapValues(_.size)\n\
    \        // Odd lengths last 3 beats\n        val music_last_beats_5 = music_notes.filter(_\
    \ % 2 == 1).groupBy(_ / 2).mapValues(_.size)\n        // Odd lengths last 4 beats\n\
    \        val music_last_beats_6 = music_notes.filter(_ % 2 == 1).groupBy(_ / 2).mapValues(_.size)\n\
    \        // Combine all lists\n        music_last_beats_2 ++ music_last_beats_3\
    \ ++ music_last_beats_4 ++ music_last_beats_5 ++ music_last_beats_6 ++ music_last_beats",
  "        var notes_to_beats  = mutable.ListBuffer[Long]()\n        var current_note\
    \ = music_string.charAt(0)\n        var current_beat = 0\n\n        notes_to_beats\
    \ += current_beat\n\n        // For each next character check if it is a note\n\
    \        while (current_note != ' ') {\n            val is_note = music_string.charAt(current_note)\
    \ == '|'\n            if (is_note) {\n                current_note = music_string.charAt(current_note\
    \ + 1)\n                current_beat += 2\n            } else {\n            \
    \    current_note = music_string.charAt(current_note + 1)\n                current_beat\
    \ += 1\n            }\n            notes_to_beats += current_beat\n        }\n\
    \n        notes_to_beats", "        // First split the string by space\n     \
    \   var notes_array = music_string.split(\" \").toList\n        // First remove\
    \ all spaces so array is like \"o|.\"\n        notes_array.foreach(x => notes_array\
    \ =! x.trim())\n        // then remove all \"o|\" so we have a list of notes\n\
    \        notes_array =! notes_array.filter(_ != \"o|\")\n        // now we split\
    \ each note by |\n        // Notes split by | will be \"o\" and \"o\"\n      \
    \  // We will ignore the second part here\n        var notes_list_array = notes_array.map(x\
    \ => x.split(\"|\"))\n        // We map the lists of notes into Lists of lists\
    \ of notes\n        val notes_list_list_array = notes_list_array.map(x => x.map(x\
    \ => x.replace(\"o\", \"\")))\n        // we now have a List[List[List[String]]]\n\
    \        // we want to flatten this list of lists of notes\n        val flat_notes_list_list_array\
    \ = notes_list_list_array.flatten\n        // now we convert this list to list\
    \ of notes\n        val flat_notes_list_array = flat_notes_list_list_array.map(_.map(_.replaceFirst(\"\
    o\", \"\")).distinct)\n        // remove all duplicates\n        val flat_notes_array\
    \ = flat_notes_list_array.distinct\n        // now we map each note into longs\n\
    \        val flat_notes_list_long = flat_notes_array.map(x => x.toLong)\n    \
    \    // We return a List[Long] with the number of beats \n        // for each\
    \ note in music_string\n        flat_notes_list_long", "        val notes = music_string.split(\"\
    \ \").map(_.toChar).map(c => if (c == 'o') 0l else if (c == '|') 1l else if (c\
    \ == '.') 2l else 3l)\n        val beats = notes.scanLeft(0L)(_ + _)\n       \
    \ beats.toList", "        val result = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        for (music_char <- music_string) {\n            music_char.toLowerCase\
    \ match {\n                case \"o\" => result += 4\n                case \"\
    o|\" => result += 2\n                case \".|\" => result += 1\n            \
    \    case _ =>\n            }\n        }\n        result.toList", "        //\
    \ Complete the code below\n        music_string.split(\" \").toList.map {\n  \
    \          case x if x.length < 2 => 0\n            case x if x.charAt(0) == 'o'\
    \ => x.charAt(1)\n            case x => x.charAt(0).padTo(2)\n        }.map(x\
    \ => x.toLong).map {\n            case 1 => 4\n            case 2 => 2\n     \
    \       case 4 => 1\n        }.toList", "        var last_beats: List[Long] =\
    \ Nil\n        for (str <- music_string.split(\" \")) {\n            val chord\
    \ = str.split(\"\\\\|\").map(s => s.replace(\"o\", \"0\")).map(s => s.replace(\"\
    |\", \"0\"))\n            val beats = chord.map(s => s.toLong).map(math.pow(4,\
    \ beats.indexOf(s) + 1)).toList\n            for (b <- beats.takeWhile(_ != 4))\
    \ {\n                last_beats = last_beats :+ b\n            }\n        }\n\
    \        last_beats", "        var current_beat_counter = 0\n        var current_beats\
    \ : List[Long] = List()\n        var current_note : String = \"\"\n        var\
    \ last_note : String = \"\"\n        music_string.split(\"\\n\").foreach(line\
    \ => {\n            line = line.trim\n            if (line.length == 0) return\n\
    \            var notes = line.split(\"\\\\|\")\n            var new_notes : List[String]\
    \ = List()\n            notes.foreach(note => {\n                var new_note\
    \ : String = \"\"\n                for (ch <- note) {\n                    if\
    \ (ch == '.') {\n                        current_note += '.'\n               \
    \     } else if (ch == 'o') {\n                        new_note += 'o'\n     \
    \               } else if (ch == '|') {\n                        new_note += '|'\n\
    \                    } else {\n                        new_note += ch\n      \
    \              }\n                    if (last_note == \"\") {\n             \
    \           current_note += new_note\n                        new_notes += new_note\n\
    \                    } else {\n                        new_note += \"|\"\n   \
    \                     current_note += new_note\n                        new_notes\
    \ += new_note\n                        last_note = \"\"\n                    \
    \    current_beat_counter = 0\n                    }\n                }\n    \
    \            current_note = new_note\n            })\n            current_beats\
    \ = current_beats.zip(notes.map(note_to_beats(current_note))).map(x => x._1).toList\n\
    \            current_note = \"\"\n        })\n        return current_beats", " \
    \       music_string match {\n          case \"o o\" => (1l to 7l map { n => n.toLong\
    \ } flatMap (_ * 4l))\n          case \"o|\" => (1l to 7l map { n => n.toLong\
    \ } flatMap (_ * 2l))\n          case \".|\" => (1l to 7l map { n => n.toLong\
    \ } flatMap (_ * 1l))\n          case _ =>  throw new Exception\n        }", " \
    \       var lastNoteIndex = 0\n        var lastBeatIndex = 0\n        var lastNote\
    \ = music_string(0)\n        var lastBeat = 0\n        var beatCount = 0\n   \
    \     var noteCount = 0\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (char <- music_string.substring(1).split(' ')) {\n            if\
    \ (char == '|') {\n                lastBeatIndex += 2\n                lastNoteIndex\
    \ += 1\n            } else if (char == 'o') {\n                lastBeatIndex +=\
    \ 4\n                lastNoteIndex += 1\n            } else if (char == \".\"\
    ) {\n                lastBeatIndex += 4\n                lastNoteIndex += 1\n\
    \            } else {\n                lastBeatIndex += 1\n                lastNoteIndex\
    \ += 1\n            }\n            beatCount += lastBeatIndex\n            noteCount\
    \ += lastNoteIndex\n            if (lastNote != '.' && lastNote != 'o') {\n  \
    \              lastBeat += lastBeatIndex\n                result.append (lastBeat)\n\
    \            }\n            if (lastNote == 'o') {\n                lastBeatIndex\
    \ += 4\n                lastNoteIndex += 1\n            }\n            lastNote\
    \ = char\n            lastNoteIndex += 1\n        }\n        result.append (lastBeat)\n\
    \        return result.toList", "        def parseString(music_string : String)\
    \ : List[(Int, Int)] = {\n            val notes = music_string.split('|')\n  \
    \          val notes_as_pairs = notes.map(_.split(' ')).flatMap((note) => note.map(_.toInt)).toList\n\
    \            notes_as_pairs.foldLeft((List[Int](), List[Int]())) { case ((note1,\
    \ note2), note) =>\n                if(note == 'o') {\n                    ((note1,\
    \ note2.toLong+4), (note2, note2.toLong+4))\n                } else if(note ==\
    \ 'o|') {\n                    ((note1, note2.toLong+2), (note2, note2.toLong+2))\n\
    \                } else if(note == '.|') {\n                    ((note1, note2.toLong),\
    \ (note2, note2.toLong+1))\n                } else {\n                    ((note1,\
    \ note2.toLong+1), (note2, note2.toLong+1))\n                }\n            }\n\
    \        }\n        parseString(music_string)", "        if (music_string.charAt(0)\
    \ == '.') {\n            music_string = (music_string.replaceFirst(\".\", \"\"\
    ));\n        }\n        var music_list = music_string.split(\"o|\");\n       \
    \ music_list.foreach(x => {\n            music_string = x.replaceFirst(\"o\",\
    \ \"\").replaceFirst(\"|\", \"\");\n            music_list = music_string.split(\"\
    o|\");\n        });\n        var beat_list: List[Long] = List[Long]();\n     \
    \   music_list.foreach(x => {\n            var beats = x.getFirstChar.toUpperCase.getChar\
    \ / 4.getChar;\n            music_list.remove(x);\n            beat_list = beat_list.::(beats);\n\
    \        });\n        return beat_list.toList;", "        music_string.foldLeft(List[Long]())((music,\
    \ note) => {\n            if (note == \".\") {\n                music :+ 0\n \
    \           } else if (note == \"o\") {\n                music :+ 4\n        \
    \    } else if (note == \"|\") {\n                music :+ 2\n            } else\
    \ if (note == \"o|\") {\n                music :+ 2\n            } else if (note\
    \ == \"|o\") {\n                music :+ 1\n            } else if (note == \"\
    |o|\") {\n                music :+ 1\n            } else if (note == \"|.|\")\
    \ {\n                music :+ 1\n            } else if (note == \"o|.|\") {\n\
    \                music :+ 2\n            } else if (note == \"o|.|\") {\n    \
    \            music :+ 3\n            } else if (note == \".|.\") {\n         \
    \       music :+ 4\n            } else if (note == \"o|.|.\") {\n            \
    \    music :+ 2\n            } else if (note == \"o|.|.\") {\n               \
    \ music :+ 1\n            } else if (note == \"o|.|.\") {\n                music\
    \ :+ 1\n            } else if (note == \"o|.|.\") {\n                music :+\
    \ 1\n            } else if (note == \"|.|.\") {\n                music :+ 1\n\
    \            } else if (note == \"o|.|.\") {\n                music :+ 2\n   \
    \         } else if (note == \"o|.o\") {\n                music :+ 1\n       \
    \     } else if (note == \"o|.o\") {\n                music :+ 1\n           \
    \ } else if (note == \"o|.o\") {\n                music :+ 1\n            } else\
    \ if (note == \"o|.o\") {\n                music :+ 1\n            } else if (note\
    \ == \"|.o\") {\n                music :+ 1\n            } else if (note == \"\
    o|.o\") {\n                music :+ 1\n            } else if (note == \"o|.o\"\
    ) {\n                music :+ 1\n            } else if (note == \"o|.o\") {\n\
    \                music :+ 1\n            } else if (note == \"o|.o\") {\n    \
    \            music :+ 1\n            } else if (note == \"o|.o\") {\n        \
    \        music :+ 1\n            } else if (note == \".o\") {\n              \
    \  music :+ 4\n            } else if (note == \"o|.o\") {\n                music\
    \ :+ 1\n            } else if (note == \"o|.o\") {\n                music :+ 1\n\
    \            } else if (note == \"o|.o\") {\n                music :+ 1\n    \
    \        } else if (note == \"o|.o\") {\n                music :+ 1\n        \
    \    } else if (note == \"o|.o\") {\n                music :+ 1\n            }\
    \ else if (note == \"o|.o\") {\n                music :+ 1\n            } else\
    \ if (note == \".o|\") {\n                musi", "        var notes = music_string.split('\
    \ ')\n        // Create empty list to store note length counts\n        var note_lengths\
    \ : List[Long] = List()\n        // Loop through each note in the music string,\
    \ starting at position 1\n        for (i <- 1L to notes.length) {\n          \
    \  // If the current note is longer than the current note length count\n     \
    \       if (notes(i).length() > note_lengths.last) {\n                // Store\
    \ the note length count as a new note length count\n                note_lengths\
    \ = note_lengths :+ notes(i).length()\n            }\n        }\n        // Return\
    \ note length counts\n        return note_lengths", "        val str: Seq[Char]\
    \ = music_string.split(\" \").toSeq\n        val notes = str.flatMap(c => c.toInt).toArray\n\
    \        val beat_count = Array[Int](4,2,1,1,2,1,1,1,4)\n\n        var beats =\
    \ notes.map(n => n * beat_count(n % 7))\n        val beats_to_add = notes.map(n\
    \ => n - beats(n % 7))\n\n        beats = beats ++ (beats_to_add.filter(i => beats(i)\
    \ == 0)).toList\n        return beats", '        // TODO:', "        // Parse\
    \ string and return list of all beats needed to play it.\n        // It should\
    \ look like \"o o| .| o| o| .| .| .| .| o o\" where each '|' represents a beat\
    \ (except the last)\n        // Return list of all beats."]
stop_tokens:
- "\n    }\n"
