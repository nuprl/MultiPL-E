name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return true if the three\n\
  \    // sides form a right-angled triangle, false otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n\
  \    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a\
  \ : Long, b : Long, c : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        var n1 = (b - a) * (Math.sqrt(a * a + b * b) - c) / 2\n   \
    \     var n2 = (c - a) * (Math.sqrt(a * a + c * c) - b) / 2\n        return (n1\
    \ * n1 <= n2 * n2)", "        val a2 = a * a;\n        val b2 = b * b;\n     \
    \   val c2 = c * c;\n        val a2b2 = a2 + b2;\n        val a2c2 = a2 + c2;\n\
    \        val b2ac2 = b2 + c2;\n        val a2b2c2 = a2b2 + b2c2;\n        val\
    \ a2c1b2 = a2c2 + b2;\n        val a2b2c1b2 = a2b2c2 + b2c1;\n        return ((a2c2b2\
    \ > a2b2c1b2) || (a2b2c1b2 < a2c1b2)) && ((b2c1 > a2b2c1b2) || (a2c1b2 < a2c1))",
  "        var aSquare = a * a\n        var bSquare = b * b\n        var cSquare =\
    \ c * c\n        var s = (a + b + c) / 2\n        if (s == 0)\n            return\
    \ true\n        if (aSquare + bSquare < cSquare)\n            return false\n \
    \       if (bSquare + cSquare < aSquare)\n            return false\n        if\
    \ (aSquare + cSquare < bSquare)\n            return false\n        if (bSquare\
    \ < cSquare)\n            return false\n        if (a == b)\n            return\
    \ true\n        return false", "        var ans = false\n        for (ia <- 1\
    \ to a) {\n            for (ib <- 1 to b) {\n                for (ic <- 1 to c)\
    \ {\n                    val ans = abc if (ia == ib and ib == ic) else 0\n   \
    \                 if (ans == 1) ans = false\n                }\n            }\n\
    \        }\n        ans", "        // Write your code here.\n        var triangle_angle_to_side\
    \ = a.toDouble * b.toDouble\n        triangle_angle_to_side += c.toDouble * b.toDouble\n\
    \        triangle_angle_to_side += c.toDouble * a.toDouble\n        triangle_angle_to_side\
    \ /= 2\n        return triangle_angle_to_side == 0", "        if (b > c || b <\
    \ c || a > c || a < c) {\n            return true\n        }\n        else {\n\
    \            val d = 3*(b - c)\n            val e = 6*(a - b)\n            val\
    \ f = 6*(b - a)\n            val g = 6*(c - a)\n            val h = 6*(b - c)\n\
    \            val l = 3*(b - c)\n            val m = 3*(b - c)\n            val\
    \ n = 3*(b - c)\n            val q = a*b - b*c\n            val r = a * b + b*c\
    \ - a*c\n            val s = 2*(q*q - 2*r + c)\n            if (s < 0 || s > h)\
    \ {\n                return true\n            } else {\n                val t1\
    \ = 2*(q*q - 2*r + c)/2\n                val t2 = (s - t1)\n                if\
    \ (t2 > 0 && t2 < t) {\n                    return false\n                }\n\
    \                else {\n                    return true\n                }\n\
    \            }\n        }", "        if (a + b + c < 3l*3l) \n            false\n\
    \        else\n            if (a + c < b + c)\n                false\n       \
    \     else\n                if (b + c < a + b)\n                    false\n  \
    \              else\n                    if (a + b + c < 3l*3l)\n            \
    \            true\n                    else\n                        false\n}\n\
    }\n</code>\nScala code:\n<code>\nobject Problem{\n  def rightAngleTriangle(a:Long,\
    \ b:Long, c:Long) = \n    (a + b + c < 3l*3l) ? false :\n    (a + c < b + c) ?\
    \ false :\n    (b + c < a + b) ? false :\n    (a + b + c < 3l*3l) ? true :\n \
    \   false\n}\n</code>\n<|/ a |>\n<| a |>\nThis is one way to solve the problem:\n\
    <code>\ndef rightAngleTriangle(side1: Long, side2: Long, side3: Long) = {\n  val\
    \ xs = List(side1, side2, side3)\n  val ys = List(1, side1, side3)\n  val xs2\
    \ = List(1, side2, side3)\n  val ys2: List = (side1, side3, side2)\n  val xs3:\
    \ List = (side1, side3, side2)\n  val ys3: List = (side1, side2, side3)\n  val\
    \ xs = xs.foldLeft((xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs))((xs, x, y) => x.zip(y).foldLeft((xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs))((xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs))((xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, ", " \
    \       val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n\
    \        val d1 = math.max(a1, b1, c1)\n        val d2 = math.min(a1, b1, c1)\n\
    \        math.abs(b1 - c1) < math.abs(d2 - d1)", "        val a1 = a.toDouble\n\
    \        val b1 = b.toDouble\n        val c1 = c.toDouble\n        val length\
    \ = a1 * b1 - a1 * c1 + b1 * c1;\n        if(length == 0){\n            true\n\
    \        }else {\n            val sq1 = Math.pow(length, 0.5);\n            val\
    \ sq2 = Math.pow(length, 2.0);\n            if(sq1 == sq2){\n                true\n\
    \            }else {\n                false\n            }\n        }", "    \
    \    var c1 = a*a + b*b\n        var c2 = c*c\n        var d = c1 + c2\n     \
    \   return ((d > 0) || (d == 0) || (a == b*c/d))", "        // Define the sum\n\
    \        val sum = a + b + c\n        \n        // Define the difference\n   \
    \     val difference = a * b - c\n        \n        // If the sum of differences\
    \ equals to zero, all three sides are equal\n        if (sum == 0) true\n    \
    \    else (difference > 0) && (difference < 0)", "        var a = a\n        var\
    \ b = b\n        var c = c\n        var x = 0l\n        var y = 0l\n        var\
    \ d = 0l\n        var n = 0l\n        var isRight = true // assume right angle\n\
    \        var isOdd = false\n\n        // Check if the three sides form a right\
    \ angled triangle\n        if (a > b && a > c) { \n            x = a\n       \
    \     isRight = false\n        } else if (b > a && b > c) {\n            x = b\n\
    \            isRight = true\n        } else if (c > a && c > b) {\n          \
    \  x = c\n            isRight = false\n        }\n\n        // Calculate the distance\
    \ of each point\n        if (x != 0l) {\n            d = x - a\n        } else\
    \ {\n            d = a - x\n        }\n\n        if (d < 0l) {\n            isOdd\
    \ = true\n            n = 1l\n            while (d > 0l && d < 0l) {\n       \
    \         n += 1l\n                d /= 2l\n            }\n            while (d\
    \ < 0l && d > 0l) {\n                n -= 1l\n                d *= 2l\n      \
    \      }\n        }\n\n        // Check if the two vertices forms a right angle\n\
    \        if (a > x && a > b) { \n            y = a\n            isRight = false\n\
    \        } else if (b > x && b > c) {\n            y = b\n            isRight\
    \ = true\n        } else if (c > x && c > b) {\n            y = c\n          \
    \  isRight = false\n        }\n\n        // Calculate the angle between the two\
    \ edges\n        if (y != 0l) {\n            x = y - n * (x / d)\n        } else\
    \ {\n            x = n * (y / d)\n        }\n\n        // Check if the angle is\
    \ greater than 90 degree\n        if (abs(x) > 90) {\n            isOdd = true\n\
    \        }\n\n        if (isOdd && isRight) {\n            return true\n     \
    \   } else {\n            return false\n        }", "        if(a >= 0 && b >=\
    \ 0 && c >= 0){\n            a <= b+c && a+c <= b\n        }", "        val s1\
    \ = a/2\n        val s2 = b/2 - s1\n        val s3 = c/2 - s2\n\n        // Check\
    \ if (s1,s2,s3) is a right angled triangle\n        if (math.abs(math.pow(s1,2)\
    \ + math.pow(s2,2) - math.pow(s3,2)) < math.pow(10,-10)) {\n            // If\
    \ so, then return True\n            return true\n        }\n        else {\n \
    \           // Else return False\n            return false\n        }", '        //
    Code here', "        val a1 = a - b\n        val b1 = c - b\n        val c1 =\
    \ c - a\n        val a2 = a - c1\n        val b2 = c - b2\n        val c2 = c\
    \ - a2\n        val a3 = a - c2\n        val b3 = c - a3\n        val c3 = c -\
    \ a3\n        (a1 < 0) || (a2 < 0) || (a3 < 0) || (b1 < 0) || (b2 < 0) || (b3\
    \ < 0) || (c1 < 0) || (c2 < 0) || (c3 < 0) || (a1 + b1 + c1 > 0) || (a2 + b2 +\
    \ c2 > 0) || (a3 + b3 + c3 > 0)", "        if (a == 0) return false\n        if\
    \ (b == 0) return false\n        if (c == 0) return false\n        if (a < b)\
    \ if (a < c) if (b < c) return true\n        else return false", "        var\
    \ l1 = scala.math.abs(a)\n        var l2 = scala.math.abs(b)\n        var l3 =\
    \ scala.math.abs(c)\n        var sq1 = (l1*(l1+1)) / 2\n        var sq2 = (l2*(l2+1))\
    \ / 2\n        var sq3 = (l3*(l3+1)) / 2\n\n        var a1 = ((sq1-l1)*(sq2-l2)-(sq1-l2)*sq3)\
    \ / sq3\n        var b1 = ((sq2-l1)*(sq3-l3)-(sq2-l3)*sq1) / sq1\n        var\
    \ c1 = ((sq3-l1)*(sq1-l1)-(sq3-l1)*sq2) / sq2\n        var d1 = ((sq1-l1)*(sq2-l2)-(sq1-l2)*sq3)\
    \ / sq3\n\n        var isRightAngle = (a1<a2) && (b1<b2) && (c1<d2) && ((a1>0)\
    \ && (a2>0) && (b1>0) && (b2>0) && (c1>0) && (c2>0))\n        return isRightAngle",
  "        // Two possibilities : two sides are the same length or two sides are different\n\
    \        // lengths\n        // Two possible outcomes:\n        // - both sides\
    \ are equal\n        // - at least one of the sides are different\n        if\
    \ (a == b || b == c) true\n        else false", "        val a = (a.toDouble /\
    \ 3l).toInt\n        val b = (b.toDouble / 3l).toInt\n        val c = (c.toDouble\
    \ / 3l).toInt\n        if (a + b > c && a + c > b) true\n        else false",
  "        if (a + b + c < 3) {\n            return false\n        }\n\n        if\
    \ (a == b || a == c) {\n            return true\n        }\n\n        var aa :\
    \ Long = 0\n        var bb : Long = 0\n        var cc : Long = 0\n\n        var\
    \ aa : Long = 0\n        var bb : Long = 0\n        var cc : Long = 0\n\n    \
    \    var aa : Long = 0\n        var bb : Long = 0\n        var cc : Long = 0\n\
    \n        var aa : Long = 0\n        var bb : Long = 0\n        var cc : Long\
    \ = 0\n\n        for (i<- a until b ) {\n            aa = aa + a\n        }\n\
    \        for (i<- a until c ) {\n            bb = bb + b\n        }\n        for\
    \ (i<- b until c ) {\n            cc = cc + c\n        }\n\n        if (aa ==\
    \ bb || aa == cc || bb == cc) {\n            return true\n        }\n        return\
    \ false", "        var a : Long = a\n        var b : Long = b\n        var c :\
    \ Long = c\n        var right : Boolean = false\n        var angle = 0\n     \
    \   while (a<b && a < c) {\n            b = b + 1\n            a = a + 1\n   \
    \     }\n        while (b<c && b < a) {\n            c = c + 1\n            b\
    \ = b + 1\n        }\n        angle = math.atan2(b,c)\n        if ((angle > 0\
    \ && angle < math.pi/2)  || (angle < 0 && angle > math.pi/2)) {\n            right=true\n\
    \        }\n        if (right) {\n            return true\n        }\n       \
    \ return false", '        ((a - b) < (a - c) && (b - c) < c) || ((a - b) > (a
    - c) && (b - c) > c)', "        if((a.toDouble * a.toDouble + b.toDouble * b.toDouble\
    \ + c.toDouble * c.toDouble <= 0l))\n            (true) \n        else\n     \
    \       (false)", '        Math.abs(a-b) <= Math.abs(c-b) && Math.abs(a-c) <=
    Math.abs(b-c)', "        var d = (math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) *\
    \ math.sqrt(Math.pow(c, 2)))\n        if((d / a) * (d / b) < 0.0)\n          \
    \  return true\n        else\n            return false", "        val a2 = a*a\n\
    \        val b2 = b*b\n        val c2 = c*c\n        (a2+b2+c2 > a2+b2+c2) &&\
    \ (b2+c2+a2 > b2+c2+a2) &&\n               (c2+a2+b2 > c2+a2+b2)", "        val\
    \ a = math.abs(a).toInt\n        val b = math.abs(b).toInt\n        val c = math.abs(c).toInt\n\
    \        if(a==b || b==c || c==a) true else false", "        def degree(x : Long)\
    \ : Long = {\n            val temp = x / 180.0 * Math.PI\n            if (temp\
    \ >= 0 && temp <= 90) {\n                return temp\n            } else if (temp\
    \ > 90 && temp <= 180) {\n                return (temp - 90)\n            } else\
    \ if (temp > 180 && temp <= 270) {\n                return 180\n            }\
    \ else {\n                return 270\n            }\n        }\n        val temp1\
    \ = degree(a) - degree(b)\n        val temp2 = degree(b) - degree(c)\n       \
    \ val temp3 = degree(a) - degree(c)\n        if (temp1 == 0) {\n            if\
    \ (temp2 == 0) {\n                if (temp3 == 0)\n                    return\
    \ true\n                else\n                    return false\n            }\
    \ else {\n                return false\n            }\n        } else {\n    \
    \        if (temp2 != 0 && temp3 != 0)\n                return true\n        \
    \    else\n                return false\n        }", "       val a1 = a*a;\n \
    \      val b1 = b*b;\n       val c1 = c*c;\n       val ab = a1 + b1;\n       val\
    \ ac = a1 + c1;\n       val bc = b1 + c1;\n       val bd = b1 + a1;\n       val\
    \ acd = ac + bc;\n       val bda = bd + acd;\n       if(a1 == 0 && b1 == 0 &&\
    \ c1 == 0 && ab == ac && bd == acd && bda == a1)\n       {\n          return true;\n\
    \       }\n       else if(a1 == 0 && b1 == 0 && c1 == 0 && ab == ac && bd == acd\
    \ && bda != a1)\n       {\n          return false;\n       }\n       else if(a1\
    \ != 0 && b1 != 0 && c1 != 0 && ab != ac && bd != acd && bda != a1)\n       {\n\
    \          return false;\n       }\n       return true;", "        if(a>0 && b>0\
    \ && c>0) {\n            if((a-b)*(2*a-b+c-b) == (a+b)*(2*a-b+c-b)) {\n      \
    \          if(a*(b+c-a) == (b+c)*(2*a-b)) {\n                    if(b*(b+c-b)\
    \ == a*(a+b)) {\n                        if((a-b)*(b+c-a) == (a-b)*(a+b)) {\n\
    \                            if((a+b)*(b+c-b) == a*(a+b)) {\n                \
    \                return true\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \        false", "        val a1 = (a + b) / 2.0\n        val a2 = (a + c) / 2.0\n\
    \        val b1 = (b + c) / 2.0\n        val b2 = (a1 + b2) / 2.0\n        val\
    \ c1 = (a2 + b2)/2.0\n        val c2 = (a1 + c2)/2.0\n        val d1 = (c + b2)/2.0\n\
    \        val d2 = (a + d1)/2.0\n        val e1 = (b + c1)/2.0\n        val e2\
    \ = (c + a1)/2.0\n        val f1 = (c + b1)/2.0\n        val f2 = (b + e1)/2.0\n\
    \        return ((a1 - b2) < a2 < b2) && ((a1 - c2) < a2 < c2) && ((b1 - d2) <\
    \ b2 < c2) && ((b1 - e2) < b2 < c2) && ((c1 - f2) < c2 < f2) && ((c1 - e2) < c2\
    \ < e2)", "        val ab = c * b\n        val ac = a * a\n        val ad = a\
    \ * c\n        val ae = a * b\n        val bc = b * b\n        val bd = b * a\n\
    \        val be = b * c\n        val bf = b * b\n        val acac = ac * ac\n\
    \        val acad = ac * ad\n        val acae = ac * ae\n        val adad = ad\
    \ * ad\n        val adead = ad * ae\n        val adee = ad * ae\n        val aede\
    \ = ae * ae\n        val aefb = ae * ef\n        val baad = ba * ad\n        val\
    \ baac = ba * ac\n        val bbac = bc * bc\n        val babd = bd * bd\n   \
    \     val baef = be * bf\n        val bbacde = bcade * bcade\n        val bbacef\
    \ = bcaef * bcaef\n        val babde = bade * bdead\n        val bbade = bade\
    \ * bdead\n        val baede = bade * bdee \n        val bafb = bae * bf\n   \
    \     val bcac = bca * ac\n        val bcbc = bcb * bc\n        val cbad = bd\
    \ * ac\n        val cbac = bc * ac\n        val cbba = cb * ba\n        val cbbae\
    \ = cb * bae\n        val cbcba = cbc * ba\n        val cbcab = bcab * cab\n \
    \       val cbcbae = cbcba * bae\n        val cbccade = bcade*cbcade\n       \
    \ val cbcad = cbc*cbad\n        val cbcaef = cbc*caef\n        val cbcde = cbc*de\n\
    \        val cbde = cbc*de\n        val cabc = cab * ca\n        val cbae = cba\
    \ * ae\n        val cbaef = cba * ae\n        val cbaede = cba * aede\n      \
    \  val cbaefb = cba * aefb\n        val cbbaef = cbba * bef\n        val cbcabde\
    \ = cbcab * cde\n        val cbcabef = cbcab * cef\n        val cbcabefb = cbcab\
    \ * cefb\n        val cbcbaefb = cbcba * befb\n        val cbcbe = cbc*be\n  \
    \      val cbe = cbc", "        val d0 = a - b\n        val d1 = c - b\n     \
    \   val d2 = c - a\n        val d3 = a - c\n        d0 * (d1 * (d2 - d3)) > (d0\
    \ * (d2 * (d3 - d1)) + (d1 * d3))", "      val s1 = a - b\n      val s2 = c -\
    \ b\n      val s3 = a - c\n\n      if (s1*s2 < 0)\n         true\n      else\n\
    \         if (s1*s3 > 0)\n            true\n         else\n            if (s2*s3\
    \ < 0)\n               true\n            else\n               false", "      \
    \  val ab = a*b\n        val ac = a*c\n        val bc = b*c\n        val sqrtAab\
    \ = math.sqrt(ab)\n        val sqrtAc = math.sqrt(ac)\n        val sqrtBc = math.sqrt(bc)\n\
    \        sqrtAab.abs <= sqrtAc.abs && sqrtAab.abs <= sqrtBc.abs ", "        if\
    \ ( (math.abs(a - b) > math.abs(a - c)) || (math.abs(b - c) > math.abs(a - c))\
    \ )\n            false\n        else\n            if (math.abs(a) == math.abs(b)\
    \ || math.abs(b) == math.abs(c))\n                true\n            else\n   \
    \             if (math.abs(a - b) > math.abs(b - c))\n                    true\n\
    \                else\n                    false", "        if(Math.pow(a, b)\
    \ + Math.pow(c, c) > (Math.pow(a, a) + Math.pow(b, b))) {\n            false\n\
    \        } else if(Math.pow(a, b) + Math.pow(c, c)\n                > (Math.pow(a+b,\
    \ a) + Math.pow(b+c, b) + Math.pow(c+a, c) + Math.pow(a+b, a+b))) {\n        \
    \    true\n        } else if(Math.pow(a, b) + Math.pow(c, c)\n               \
    \ > (Math.pow(a+b, a) + Math.pow(b+c, b) + Math.pow(c+a, c) + Math.pow(a+b, a+b)))\
    \ {\n            true\n        } else if(Math.pow(a, a) + Math.pow(b, b) \n  \
    \              > (Math.pow(a+b, a) + Math.pow(b+c, b) + Math.pow(c+a, c) + Math.pow(a+b,\
    \ a+b))) {\n            true\n        } else if(Math.pow(a, a) + Math.pow(b, b)\
    \ \n                > (Math.pow(a+b, a) + Math.pow(b+c, b) + Math.pow(c+a, c)\
    \ + Math.pow(a+b, a+b))) {\n            true\n        } else {\n            false\n\
    \        }", "        val aIsLeft = a * b - c * a >= 0\n        val bIsLeft =\
    \ b * c - a * b >= 0\n        val cIsLeft = c * a - b * c >= 0\n        aIsLeft\
    \ && bIsLeft && cIsLeft", "        if ((a*a + b*b == c*c) && (a < b) && (b < c))\n\
    \            return true\n        else \n            return false", "        val\
    \ x1 = (a + b) / 2.0\n        val y1 = (c + b) / 2.0\n        val x2 = (c + a)\
    \ / 2.0\n        val y2 = (a + c) / 2.0\n        val dx = b - a\n        val dy\
    \ = c - a\n        val x3 = x1 + dx\n        val y3 = y1 + dy\n        val x4\
    \ = x2 + dx\n        val y4 = y2 + dy\n        (x3 > x4) && (x3 < x4) && (y3 >\
    \ y4) && (y3 < y4)", "        var aLength : Int = a\n        var bLength : Int\
    \ = b\n        var cLength : Int = c\n        while (bLength > 0) {\n        \
    \    if (aLength == bLength && aLength == cLength) {\n                return true\n\
    \            }\n            aLength -= 1\n            bLength -= 1\n         \
    \   cLength -= 1\n        }\n        return false", '        (a > b) && (a > c)
    && (b > c)', "        if(b == 0 || c == 0)\n            return true\n        //\
    \ if the right side of the triangle is longer than the left\n        // side,\
    \ it's a right angle triangle\n        if(a > b)\n            return ((a % b)\
    \ == (c % a))\n        // if the left side of the triangle is longer than the\
    \ right side,\n        // it's a right angle triangle\n        if(b > c)\n   \
    \         return ((b % c) == (a % b))\n        // if both sides of the triangle\
    \ are equal\n        // it's a right angle triangle\n        return ((a % b) ==\
    \ (c % b))", "        var a1 : Int = a / 3;\n        var b1 : Int = b / 3;\n \
    \       var c1 : Int = c / 3;\n        var d1 = Math.abs(b1 - c1);\n        var\
    \ d2 = Math.abs(a1 - b1);\n        var d3 = Math.abs(a1 - c1);\n        var d4\
    \ = Math.abs(b1 - a1);\n        if((d1 < d2 && d1 < d3) && (d1 < d4))\n      \
    \  {\n            true\n        }\n        else\n        {\n            false\n\
    \        }", '        (a + b > c) && (a + c > b) && (b + c > a)', "        val\
    \ sides = List(a,b,c)\n        // Get the side with the smallest length\n    \
    \    val smallest = sides.min\n        val temp = smallest\n        val temp =\
    \ temp / temp\n        // Get the angle\n        val angle = smallest*90\n   \
    \     // If angle = 90 degree\n        if (angle == 90){\n            return true\n\
    \        }\n        // If one of the sides is 90 degree\n        if (sides.contains(90)){\n\
    \            return true\n        }\n        // If one of the sides is right angle\n\
    \        if (sides.contains(temp)){\n            return true\n        }\n    \
    \    return false", "        def angleToOrigin(x : Long, y : Long, z : Long, origin\
    \ : Long) : Long = {\n            val xDot = x - origin\n            val yDot\
    \ = y - origin\n            val zDot = z - origin\n            math.atan2(yDot,\
    \ xDot)\n        }\n        def angleToTriangle(x :Long, y :Long, z :Long, a :Long,\
    \ b :Long, c :Long) : Long = {\n            val ox = angleToOrigin(x, y, z, a)\n\
    \            val oy = angleToOrigin(x, y, z, c)\n            val oz = angleToOrigin(x,\
    \ y, z, b)\n            math.acos(math.sin(ox) * (math.cos(oy) - math.sin(oz))\
    \ + (math.sin(ox) * math.sin(oy) * math.cos(oz) - math.cos(ox) * math.cos(oz)\
    \ * math.tan(oy)));\n        }\n        (angleToTriangle(a, b, c, a, c, b) ==\
    \ angleToTriangle(b, a, c, a, c, b)) || (angleToTriangle(a, b, c, b, a, c) ==\
    \ angleToTriangle(c, a, b, a, b, c));", "        def getDiagonal(a: Long, b: Long,\
    \ c : Long) = scala.math.sqrt(b * b - 4 * a * c)\n        def getAngle(a: Long,\
    \ b: Long, c : Long) = scala.math.atan2(b,c) / (2 * a)\n        def getAngleDiff(a:\
    \ Long, b: Long, c : Long) = scala.math.abs(scala.math.degrees(getAngle(a,b,c))\
    \ - scala.math.degrees(getAngle(b, c, a)))\n        getAngleDiff(a,b,c) >= 0 &&\
    \  getAngleDiff(b,c,a) >= 0 &&\n        getAngleDiff(c,a,b) >= 0 &&  getAngleDiff(a,c,b)\
    \ >= 0", "        val x1 = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n      \
    \  val x2 = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2))\n        val x3 = Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(c, 2))\n        val a1 = Math.abs(a / x1)\n        val a2 = Math.abs(b\
    \ / x2)\n        val a3 = Math.abs(c / x3)\n        (a1 * a2 == a3) && (a1 * a3\
    \ == b2)", "        if (math.abs(a - (b + c)) > math.abs(a - (c + b)))\n     \
    \       return true\n        else\n            return false", '        Math.abs(a
    - b) < Math.abs(a - c) && Math.abs(b - c) < Math.abs(b - a)', "        val ab\
    \ = b - a\n        val ac = c - a\n        val bc = (-b) + a\n        (ab * ac\
    \ > 0 && ab * bc > 0 && ac * bc == 0)", "        var sides = List(a, b, c)\n \
    \       var side1 = sides.filter(_ < 0).foldLeft(0)((x, y) => x + y)\n       \
    \ var side2 = sides.filter(_ > 0).foldLeft(0)((x, y) => x + y)\n        var side3\
    \ = sides.filter(_ == 0).foldLeft(0)((x, y) => x + y)\n        return (side1 +\
    \ side2 > side3)", "        val side1 = a.toDouble\n        val side2 = b.toDouble\n\
    \        val side3 = c.toDouble\n        // check which one is greater \n    \
    \    val max = (math.max(side1, side2), math.max(side2, side3))\n        val min\
    \ = (math.min(side1, side2), math.min(side2, side3))\n        // check whether\
    \ they are equal \n        (min == max) ", "      val ab = math.abs(a - b)\n \
    \     val ac = math.abs(c - a)\n      val bc = math.abs(c - b)\n      if (ab >\
    \ ac && ab > bc) {\n        true\n      } else {\n        false\n      }", " \
    \       // base case\n        if ((a+b)+(c+b) > 4l) {\n            false\n   \
    \     }\n        else{\n            val l = (a+b+c)/2\n            val m = (a*b*c)/l\n\
    \            val theta = (math.atan2(m, l) + math.pi/2 - math.pi/2) % (math.pi/2)\n\
    \            if (Math.abs(theta - math.pi/2) < 1e-10 && Math.abs(theta - math.pi/4)\
    \ < 1e-10 && Math.abs(theta - 3*math.pi/4) < 1e-10){\n                true\n \
    \           }\n            else {\n                false\n            }\n    \
    \    }", "        val side1 = sqrt(math.pow(a, 2) + math.pow(b, 2))\n        val\
    \ side2 = sqrt(math.pow(c, 2) + math.pow(d, 2))\n        math.abs(side1 - side2)\
    \ > math.abs(side1 - side2)", "        if(a>0 && b>0 && c>0)\n        {\n    \
    \        val delta = b * b - 4 * a * c;\n            if(delta < 0)\n         \
    \   {\n                return false;\n            }\n            val x1 = (-b\
    \ + Math.sqrt(delta)) / (2 * a);\n            val x2 = (-b - Math.sqrt(delta))\
    \ / (2 * a);\n            val y1 = ((-1) * b + Math.sqrt(delta)) / (2 * a);\n\
    \            val y2 = ((-1) * b - Math.sqrt(delta)) / (2 * a);\n            val\
    \ xMin = x1 > x2 ? x1 : x2;\n            val xMax = x1 < x2 ? x1 : x2;\n     \
    \       val yMin = y1 > y2 ? y1 : y2;\n            val yMax = y1 < y2 ? y1 : y2;\n\
    \            if(xMin < c && xMax > c && yMin > c && yMax > c)\n            {\n\
    \                return true;\n            }\n        }\n        return false;",
  "        if(a == null || b == null || c == null) {\n            return false\n \
    \       }\n        if(a == 0 || b == 0 || c == 0 || abs(a - b) > abs(a - c) ||\
    \ abs(a - c) > abs(b - c)) {\n            return false\n        }\n        if(abs(a\
    \ - b) < abs(a - c) && abs(a - b) < abs(b - c)) {\n            return true\n \
    \       }\n        return false", "        val ad = a - b\n        val bc = b\
    \ - c\n        val cd = c - a\n\n        if (ad*ac > bc*bd) {\n            true\n\
    \        } else {\n            false\n        }", "        val x0 : Double = a/2.0;\n\
    \        val y0 : Double = c/2.0;\n        val x1 =  (y0 - b)/2.0;\n        val\
    \ y1 =  (x0 - a)/2.0;\n        val x2 =  (y1 - c)/2.0;\n        val y2 =  (x1\
    \ - b)/2.0;\n        (x0*y0-x1*y1-x2*y2) >= 0", "        var isRightAngle : Boolean\
    \ = false\n        // Check all sides of the triangle\n        if(a > 0 && b >\
    \ 0 && c > 0) {\n            // Check if all sides are equal\n            if(a\
    \ == b && b == c) {\n                isRightAngle = true\n            }\n    \
    \        // Check if all are equal\n            if(a == b || a == c || b == c)\
    \ {\n                isRightAngle = false\n            }\n        }\n        isRightAngle",
  "        if( a < 0 || b < 0 || c < 0 ) throw new RuntimeException\n        if( a\
    \ == 0 || b == 0 || c == 0 ) throw new RuntimeException\n        if( a == b &&\
    \ b == c ) true else false", "        def aOfB : Double = a/b\n        def cOfB\
    \ : Double = c/b\n        def dOfC : Double = a/c\n        def aC : Double = (a*c)-a\n\
    \        def bC : Double = (b*c)-b\n        def aAbs : Double = aOfB * aAbs\n\
    \        def bAbs : Double = bAbs * bAbs\n        def cAbs : Double = cAbs * cAbs\n\
    \        def dAbs : Double = dAbs * dAbs\n        def isRightAngleTriangle : Boolean\
    \ = {\n            (aAbs + bAbs + cAbs + dAbs) == Math.sqrt(aAbs**2 + bAbs**2\
    \ + cAbs**2 + dAbs**2) \n        }\n        \n        def isRightAngleTriangleWithTolerance(a\
    \ : Double, b : Double, c : Double, tolerance : Double) : Boolean = {\n      \
    \      (aOfB + bAbs + cAbs + dAbs) == Math.sqrt(a**2 + b**2 + c**2 + d**2) \n\
    \        }\n        \n        isRightAngleTriangleWithTolerance(a,b,c,tolerance)",
  '        if(b > c) c else b', "        // The hypotenuse of a right angle triangle\
    \ is twice the length of any \n        // other side.\n        // The equation\
    \ of right angle triangle is h= ((s^2 + c^2)^0.5) - ((s^2 + b^2)^0.5)\n      \
    \  // So if we plug in a, b, c into this equation:\n        // h = ((s^2 + c^2)^0.5)\
    \ - ((s^2 + b^2)^0.5)\n        // We can see that our hypotenuse is s^2 + c^2\
    \ = b^2 + a^2 \n        // (s^2 + b^2)^2 = a^2 + b^2\n        // So we can use\
    \ the law of cosines to simplify this: \n        // h^2 = a^2 + b^2\n        //\
    \ s^2 = a^2 * b^2 + b^2 * c^2\n        // c^2 = a^2 * b^2 + b^2 * c^2\n      \
    \  // h^2 = a^2 * b^2 + b^2 * c^2\n        // a^2 * b^2 = c^2 * h^2 \n       \
    \ // b^2 * c^2 = h^2 * s^2\n        // So we know that \n        // h^2 = a^2\
    \ + b^2 + c^2\n        // a^2 * b^2 = c^2 * h^2\n        // b^2 * c^2 = h^2 *\
    \ s^2\n        // h^2 = s^2 + c^2 - a^2 * b^2\n        // s^2 = a^2 * b^2 - b^2\
    \ * c^2\n        // c^2 = a^2 * b^2 - b^2 * c^2\n        // h^2 = a^2 * b^2 -\
    \ b^2 * c^2\n        // s^2 = a^2 * b^2 - b^2 * c^2\n        // c^2 = a^2 * b^2\
    \ - b^2 * c^2\n        // h^2 = a^2 * b^2 - b^2 * c^2\n        // So if we plug\
    \ these numbers into this equation:\n        // h^2 = s^2 + c^2 - a^2 * b^2\n\
    \        // s^2 = a^2 * b^2 - b^2 * c^2\n        // c^2 = a^2 * b^2 - b^2 * c^2\n\
    \        // s^2 = a^2 * b^2 - b^2 * c^2\n        // c^2 = a^2 * b^2 - b^2 * c^2\n\
    \        // a^2 * b^2 = c^2 * h^2\n        // b^2 * c^2 = h^2 * s^2\n        //\
    \ h^2 = s^2 + c^2 - a^2 * b^2\n", "        // Return true if a is 90 degree.\n\
    \        if(a*a == (a*b+b*c)){\n            true\n        }\n        else {\n\
    \            false\n        }", "       val a1 = a / 2\n       val b1 = b / 2\n\
    \       val c1 = c / 2\n       val dx = a - b\n       val dy = b - c\n       val\
    \ dz = c - a\n       val side1 = math.sqrt(dx * dx + dy * dy + dz * dz)\n    \
    \   val side2 = math.sqrt(a1 * a1 + b1 * b1 + c1 * c1)\n       side1 == side2",
  "        val a = a\n        val b = b\n        val c = c\n        if (a == 0 ||\
    \ b == 0 || c == 0) return false\n        if (a == 0 || b == 0) return false\n\
    \        if (a == b) return true\n        if (a == c) return false\n        if\
    \ ((a != 0) && (b != 0) && (c != 0)) return true\n        return false", "   \
    \     // Use a variable to track the sum of the three sides\n        var total\
    \ = 0L\n        \n        // Use a variable to track the sum of the angles \n\
    \        var totalAngles = 0L\n\n        // Use a variable and an if statement\
    \ to track the total angle between the three sides\n        var totalAngle = 0L\n\
    \n        // Use a for loop to track the sum using three counters\n        var\
    \ sum = 0L\n        for (i<- 0 until 3){\n            total = total + a(i) * b(i)\
    \ * c(i)\n        }\n        // Use a for loop to track the sum of the angles\
    \ using three counters\n        for (i<- 0 until 3){\n            totalAngles\
    \ = totalAngles + math.acos(a(i) / math.sqrt(a(i) * a(i) + b(i) * b(i) + c(i)\
    \ * c(i))) * 180 / math.Pi\n        }\n        // Use a for loop to track the\
    \ total angle using three counters\n        for (i<- 0 until 3){\n           \
    \ totalAngle = totalAngle + math.acos(a(i) / math.sqrt(a(i) * a(i) + b(i) * b(i)\
    \ + c(i) * c(i))) * 180 / math.Pi\n        }\n        // Use an if statement to\
    \ compare the sum of the angles and total angle values\n        if (totalAngles\
    \ < totalAngle){\n            return true\n        } else {\n            return\
    \ false\n        }", "        def calcArea(lengths : Seq[Long]) : Long = {\n \
    \           val a = lengths.head\n            val b = lengths.last\n         \
    \   val c = lengths.init\n            (a + b + c) * ((a + b) * (c - b)) / (2.0\
    \ * a * c)\n        }\n        val ab = calcArea(Seq(a,b))\n        val bc = calcArea(Seq(b,c))\n\
    \        ab > (bc + a * a)", "        val ab = abs(a - b)\n        val ac = abs(a\
    \ - c)\n        val bc = abs(b - c)\n        val noOfSides = ab + ac + bc\n  \
    \      noOfSides > 1 && (ab >= ac && ab >= bc) || (ab <= ac && ab <= bc)", " \
    \       // Check that the sides a, b, and c are not null\n        if (a==null\
    \ || b==null || c==null)\n            return false\n        // Check that the\
    \ sides a, b, and c are the same length\n        else if (a != b) \n         \
    \   return false\n        else if (b != c)\n            return false\n       \
    \ // If they're the same length and they're not the same length\n        else\
    \ if (a == c)\n            return false\n        // Check that the sides a and\
    \ b are in the same quadrant\n        else if (a >= b && b >= c)\n           \
    \ return false\n        // Check that the sides b and c are in the same quadrant\n\
    \        else if (b >= a && c >= a)\n            return false\n        // Check\
    \ that the sides b and c are in the same quadrant\n        else if (b >= c &&\
    \ c >= b)\n            return false\n        // If a is greater than b, then a\
    \ and c are in the same quadrant\n        else if (a > b)\n            return\
    \ true\n        // If a is less than b, then b and c are in the same quadrant\n\
    \        else if (a < b)\n            return false\n        // If a is greater\
    \ than c, then b and c are in the same quadrant\n        else if (a > c)\n   \
    \         return true\n        // If a is less than c, then a and c are in the\
    \ same quadrant\n        else if (a < c)\n            return false\n        //\
    \ If both a and c are greater than c, then a and b are in the same quadrant\n\
    \        else \n            return false", "        var n = 0\n        while(n\
    \ <3 ) {\n          if(math.abs(a-b)==math.abs(c-b)) {\n            return true\n\
    \          } else if(math.abs(a-c)==math.abs(b-c)) {\n            return true\n\
    \          } else {\n            a += 1\n            b += 1\n            c +=\
    \ 1\n          }\n          n += 1\n        }\n        return false", "      \
    \  val ab = a * b\n        val ac = a * c\n        val bc = b * c\n        val\
    \ acb = ac + bc\n        val ac2b = ac * bc\n        val ac2c = ac * c\n     \
    \   val bc2 = bc * 2\n        val bc3 = bc * 3\n        val ac3b = ac + bc + bc2\n\
    \        val ac3c = ac + bc + bc2 + ac2b\n        val bc3 = bc * 3\n        val\
    \ ab3c = ab + cc + bc3\n        val ab3b = ab + cc + bc3 + ab3c\n        val ac3bcac3bc2\
    \ = ac3b * ac2b * bc2\n        val ac3bcac3bc2bc = ac3b * ac2b * bc2 + ac2c *\
    \ ac2b\n        val ac3bcac3bc2 = ac3bcac3bc2 <= ac3bcac3bc\n        val ac3bcac3bc3\
    \ = ac2b * ac2b * bc3 * 3\n        val ab3bcac3bc2 = ab3b * ac2b * bc2 * 2\n \
    \       val ab3bcac3bc3 = ab3b * ac2b * bc3 * 3\n        val ac3bcac3bc2 = ac3bcac3bc2\
    \ <= ac3bcac3bc\n        val ac3bcac3bc3 = ac3bcac3bc3 <= ab3bcac3bc\n       \
    \ val ac3bcac3bc4 = ac3b * ac2b * bc2 * 2\n        val ab3bcac3bc2 = ab3bcac3bc2\
    \ <= ab3bcac3bc\n        val ab3bcac3bc3 = ab3bcac3bc3 <= ac3bcac3bc\n       \
    \ val ab3bcac3bc4 = ab3bcac3bc4 <= ac3bcac3bc * 4\n        val ac3bcac3bc2 = ac3bcac3bc2\
    \ <= ac3bcac3bc\n        val ac3bcac3bc3 = ac3bcac3bc3 <= ab3bcac3bc\n       \
    \ val ac3bcac3bc4 = ac3bcac3bc4 <= ac3bcac3bc * 4\n        val ac3bcac3bc5 = ac2b\
    \ * ac2b * bc3 * 3\n        val ab3bcac3bc2 = ab3bcac3bc2 <= ab3bcac3bc\n    \
    \    val ab3bcac3bc", "        if ((a < b) && (b < c)) {\n            return (math.abs((math.signum((math.pow(b,\
    \ 2) - math.pow(a, 2)) / (math.pow(b, 2) + math.pow(a, 2))))) <= 0.1)\n      \
    \  }\n        else {\n            return (math.abs((math.signum((math.pow(c, 2)\
    \ - math.pow(b, 2)) / (math.pow(c, 2) + math.pow(b, 2))))) <= 0.1)\n        }",
  "        val aSquared : Double = a * a\n        val bSquared : Double = b * b\n\
    \        val cSquared : Double = c * c\n        val bCosine : Double = bSquared\
    \ / aSquared\n        val cCosine : Double = cSquared / aSquared\n        bCosine\
    \ >= cCosine || bCosine * cCosine < 0", "        if (Math.abs(a) <= 2l){\n   \
    \         if (Math.abs(b) <= 2l){\n                if (Math.abs(c) <= 2l){\n \
    \                   false\n                } else {\n                    true\n\
    \                }\n            } else {\n                true\n            }\n\
    \        } else {\n            false\n        }", "        val leftSide = a\n\
    \        val rightSide = b\n        val midSide = c\n        val leftSideLength\
    \ = leftSide.length\n        val rightSideLength = rightSide.length\n        val\
    \ midSideLength = midSide.length\n        val isRight = \n            if (leftSideLength\
    \ == rightSideLength && leftSideLength == midSideLength) true\n            else\
    \ false\n        val isLeft = \n            if (rightSideLength == leftSideLength\
    \ && rightSideLength == midSideLength) true\n            else false\n        if\
    \ (isLeft && isRight) true\n        else false", "        if (Math.pow(Math.abs(b\
    \ - a), 2) != Math.pow(Math.abs(c - b), 2)) {\n            return false\n    \
    \    }\n        val ab = math.sqrt(Math.pow(Math.abs(b - a), 2))\n        val\
    \ bc = math.sqrt(Math.pow(Math.abs(c - b), 2))\n        val abc = math.pow(ab,\
    \ b)\n        if (abc != 0) {\n            if (ab != 0) {\n                if\
    \ (bc != 0) {\n                    if (abc != 0) {\n                        if\
    \ ((b - c) == abc) {\n                            return true\n              \
    \          } else if ((c - b) == abc) {\n                            return true\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return false", "        val pq = math.sqrt((b * b)\
    \ - (4 * a * c))\n        (pq < (4 * a * b)) || ((pq > (4 * a * a)) && (a * a\
    \ + b * b > c * c))", "        val ab = a * b\n        val ac = a * c\n      \
    \  val bc = b * c\n        val de = ab + bc\n        val f = ac - de\n       \
    \ val g = bc - de\n        val h = (bc - ac) / ab\n\n        ((f*f) + (g*g) <=\
    \ h)", "        val aLen = math.sqrt(a * a)\n        val bLen = math.sqrt(b *\
    \ b)\n        val cLen = math.sqrt(c * c)\n        if ((bLen * aLen > cLen * b)\
    \ || (cLen * aLen > bLen * c)) {\n            if (a == b)\n                if\
    \ (b == c)\n                    true\n                else if (a == c)\n     \
    \               false\n                else\n                    false\n     \
    \       else if (a == c)\n                false\n            else if (b == c)\n\
    \                true\n            else\n                false\n        }\n  \
    \      else {\n            if (a < c && a < b)\n                true\n       \
    \     else if (a > c && a > b)\n                false\n            else if (a\
    \ > c && a < b)\n                false\n            else\n                true\n\
    \        }", "        val side1 = math.sqrt(a * a + b * b) // b * b\n        val\
    \ side2 = math.sqrt(c * c + a * a) // a * a\n        side1 < side2 && side1 >\
    \ 0 && side2 < side1", "        if ((a + b > c) && (c + d > a) && (b + c > d))\
    \ true\n        else false", "        val x1 = a\n        val x2 = b\n       \
    \ val x3 = c\n        val y1 = x1 * x1 + x2 * x2 + x3 * x3\n        val y2 = x2\
    \ * x2 + x3 * x3\n        val y3 = x1 * x1 + x2 * x2 + x3 * x3\n        ((y1 -\
    \ (y2 * y2)).abs <= Double.PositiveInfinity && (y3 - (y1 * y2)).abs <= Double.PositiveInfinity\
    \ )", "        if (a == 0 || b == 0 || c == 0) return false\n        else if (Math.pow(a,\
    \ 2) + Math.pow(b, 2) + Math.pow(c, 2) == 0) return false\n        else if (Math.pow(a,\
    \ 2) - Math.pow(b, 2) - Math.pow(c, 2) == 0) return false\n        else{\n   \
    \         var a = Math.sqrt(Math.pow(a, 2))\n            var b = Math.sqrt(Math.pow(b,\
    \ 2))\n            var c = Math.sqrt(Math.pow(c, 2))\n            if ((b * b)\
    \ - (4 * a * c) == 0) return true\n            else if (((-b * b) + (4 * a * c))\
    \ > 0) return false\n            else return true\n        }", "        val ac\
    \ = math.sqrt(a*a + b*b)\n        val bc = math.sqrt(b*b + c*c)\n        val ca\
    \ = math.sqrt(c*c + a*a)\n        val p1 = (ac - bc)/(2*a)\n        val p2 = (ac\
    \ - ca)/(2*b)\n        val p3 = ca/2*(a + b)\n        if (math.abs((p1 - p2) -\
    \ p3) > 0.001)\n        {\n            return false\n        }\n        else\n\
    \        {\n            return true\n        }", "        val d  = math.sqrt(\
    \ (a * a + b * b - c * c) )\n        d < math.min(a , b, c) ", "        def rightAngle(x\
    \ : Long, y : Long) : Boolean = {\n            if (x == y) return true\n     \
    \       if (x == 0 || x == y) return false\n            if (y == 0)\n        \
    \        return (math.signum(x / y) * math.signum(y / x))\n            return\
    \ false\n        }\n        val isRight = rightAngle(a, c) == rightAngle(b, c)\
    \ == rightAngle(c, a)\n        val isOpp = rightAngle(a, c) == rightAngle(b, c)\
    \ == rightAngle(c, a)\n        val isUpp   = rightAngle(a, b) == rightAngle(b,\
    \ c) == rightAngle(b, a)\n        val isLow   = rightAngle(a, b) == rightAngle(b,\
    \ c) == rightAngle(b, a )\n        isRight && isOpp  && isUpp  && isLow", "  \
    \      val d = (b + c) / 2\n        if (a == 0 || d == 0 || b == 0 || c == 0)\n\
    \            false\n        else\n            Math.abs(b - c) > Math.abs(a - d)",
  "        if (c.minus(a).abs < b.minus(a).abs)\n            (b.minus(a).abs - (b.minus(a).abs\
    \ - c.minus(a).abs) < c.minus(a).abs)\n        else\n            (c.minus(a).abs\
    \ - (c.minus(a).abs - b.minus(a).abs) < b.minus(a).abs)", "        def check(x\
    \ :Long) :Long = {\n            if(x>0 && x<a) x\n            else check(x-a)\n\
    \        }\n\n        def check(y :Long) :Long = {\n            if(y>0 && y<b)\
    \ y\n            else check(y-b)\n        }\n\n        def check(z :Long) :Long\
    \ = {\n            if(z>0 && z<c) z\n            else check(z-c)\n        }\n\n\
    \        check(check(check(check(b-a)))) ", "        // Write your code here.\n\
    \        val a = a - b\n        val b = b - c\n        val c = c - a\n       \
    \ val xc = Math.sqrt(a * a + b * b)\n        val yc = Math.sqrt(a * a + c * c)\n\
    \        val zc = Math.sqrt(b * b + c * c)\n        val u = (yc / (xc * yc)) *\
    \ (xc / (xc * xc))\n        val v = (xc / (xc * xc)) * (yc / (yc * yc))\n    \
    \    val ux = Math.cos(a) * v\n        val uy = Math.sin(a) * v\n        val vx\
    \ = Math.cos(b) * u\n        val vy = Math.sin(b) * u\n        val vz = Math.cos(c)\
    \ * v\n        ((ux == 1) && (uy == 1) && (vz == 1))", "        val length = math.sqrt(a\
    \ * a+b * b+c * c)\n        val angle1 = math.asin(a / length)\n        val angle2\
    \ = math.asin(c / length)\n        val angle3 = math.asin(c / b)\n        math.abs(angle2\
    \ - angle3) < 0.001 ", "      if(a > b && a > c){\n        if(b > c){\n      \
    \    return true\n        }\n      }\n      else{\n        if(b > c){\n      \
    \    return false\n        }\n      }", "        // Solve for triangles sides\n\
    \        // A = (c+b)/2\n        // B = (c-b)/2\n        // C = (a-b)/2\n    \
    \    // Then calculate the hypotenuse of the triangle:\n        // hypotenuse\
    \ = Math.sqrt(Math.pow(A, 2) + Math.pow(B, 2)) / Math.sqrt(Math.pow(A, 2) + Math.pow(B,\
    \ 2) + Math.pow(C, 2))\n        val A = (c + b) / 2\n        val B = (c - b) /\
    \ 2\n        val C = (a - b) / 2\n        // Now find the hypotenuse\n       \
    \ val hypotenuse = Math.sqrt(Math.pow(A, 2) + Math.pow(B, 2)) / Math.sqrt(Math.pow(A,\
    \ 2) + Math.pow(B, 2) + Math.pow(C, 2))\n        // Now check if the hypotenuse\
    \ is greater than or equal to the length of the sides\n        val hypotenuseIsGreaterThanOrEqualToLengthOfSides\
    \ = hypotenuse >= Math.sqrt(Math.pow(A, 2) + Math.pow(B, 2))\n        return hypotenuseIsGreaterThanOrEqualToLengthOfSides",
  "        if (b > a && c > b) {\n            var x :Int = (a+b)/2\n            var\
    \ y :Int = (a+c)/2\n            var x1 :Int = (a+b+c)/3\n            var y1 :Int\
    \ = (a+b+c+a)/3\n            var x2 :Int = (a+b+c-a)/3\n            var y2 :Int\
    \ = (a+b+c-b)/3\n            if (x1==x2 && x1==y2) {\n                val dx =\
    \ ((b*b) - (4*a*c))/2.0\n                val dy = ((b*b) - (4*a*a))/2.0\n    \
    \            val rad =Math.sqrt(dx*dx + dy*dy)\n                val x =a*Math.cos(rad)\
    \ + b*Math.sin(rad)\n                val y =a*Math.sin(rad) - b*Math.cos(rad)\n\
    \                true\n            } else\n                false\n        } else\n\
    \            false", "        if(a*a + b*b == c*c){\n            var ans = false\n\
    \            val list = List(a, b, c);\n            list.foreach(ans = a <= b+c\
    \ && b <= a+c && c <= b+a);\n            ans\n        } else {\n            false\n\
    \        }", "        var ab = a.toLong\n        var bc = b.toLong\n        var\
    \ cd = c.toLong\n        if (ab eq bc && bc eq cd) true\n        else { \n   \
    \         var d = ab - bc\n            ab = bc - cd\n            bc = ab + d\n\
    \            ab = bc - cd\n        }\n        if (ab eq bc && bc eq cd) true\n\
    \        else false", "        val s1 = math.sqrt(a * b * c / 2.0).toDouble\n\
    \        val s2 = math.sqrt(a * c * b / 2.0).toDouble\n        val s3 = math.sqrt(b\
    \ * c * a) / 2.0\n        return (a * s2 - b * s3 == 0.0) && (a * s3 + b * s1\
    \ == 0.0)", "        if(a<b+c || b<a+c || c<a+b) false\n        else if(Math.abs(a-b)<=Math.toRadians(90)\
    \ && Math.abs(b-c)<=Math.toRadians(90) && Math.abs(c-a)<=Math.toRadians(90)) true\n\
    \        else false", '        math.abs(a-b) < math.abs(a-c) && math.abs(a-b)
    < math.abs(a-c)', "        var _a : Long = _\n        var _b : Long = _\n    \
    \    var _c : Long = _\n        var a : Long = _\n        var b : Long = _\n \
    \       var c : Long = _\n        var _result : Boolean = _\n\n        if (a *\
    \ b * c == 0) {\n            return true\n        }\n        \n        a = (a\
    \ / b) * c\n        b = (b / a) * c\n        c = (c / a) * b\n        \n     \
    \   _a = a\n        _b = b\n        _result = false\n        \n        for(a =\
    \ _a; a <= c; a += 1) {\n            for(b = _b; b <= c; b += 1) {\n         \
    \       for(c = _c; c <= c; c += 1) {\n                    if(a == b + c) {\n\
    \                        if(a == _a + _b) {\n                            if(a\
    \ == _a + _c + _b) {\n                                if(a == _c + _a + _b) {\n\
    \                                    if(a == _c + _c + _b) {\n               \
    \                         if(a == _c + _c + _a + _b) {\n                     \
    \                       if(a == _c + _c + _a + _c + _b) {\n                  \
    \                              _result = true\n                              \
    \              }\n                                        }\n                \
    \                    }\n                                }\n                  \
    \          }\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        \n        _result", "        math.sqrt(a.toDouble\
    \ * a.toDouble + b.toDouble * b.toDouble + c.toDouble * c.toDouble)\n        \
    \    .toDouble / Math.sqrt(a.toDouble * a.toDouble + b.toDouble * b.toDouble +\
    \ c.toDouble * c.toDouble)\n            .toDouble == 1", "        // To determine\
    \ the length of side a\n        val sideA = sqrt(a.toDouble * a.toDouble + b.toDouble\
    \ * b.toDouble + c.toDouble * c.toDouble)\n\n        // To determine the length\
    \ of side b\n        val sideB = sqrt(b.toDouble * b.toDouble + a.toDouble * a.toDouble\
    \ + c.toDouble * c.toDouble)\n\n        // To determine the length of side c\n\
    \        val sideC = sqrt(c.toDouble * c.toDouble + a.toDouble * a.toDouble +\
    \ b.toDouble * b.toDouble)\n\n        // To determine the angle\n        val angle\
    \ = (sideA - sideB).toDouble / sqrt(sideA * sideA + sideB * sideB + sideC * sideC)\n\
    \n        // To determine whether the angle is right angle or 90 degree\n    \
    \    (Math.abs(angle - 90) < 0.00001)", "        //Write your code here\n    \
    \    val left = 0l\n        val right = 0l\n        val x = ((b * c) - (a * b))\n\
    \        val y = ((b * d) - (a * c))\n        val z = ((b * e) - (a * d))\n  \
    \      if(x > 0l && y > 0l && z > 0l) {\n            left := x\n            right\
    \ := y\n            true\n        } else if(x < 0l && y > 0l && z > 0l) {\n  \
    \          left := -y\n            right := y\n            true\n        } else\
    \ if(x < 0l && y < 0l && z > 0l) {\n            left := -y\n            right\
    \ := -x\n            true\n        } else if(x < 0l && y < 0l && z < 0l) {\n \
    \           left := -x\n            right := -x\n            true\n        } else\
    \ if(x > 0l && y < 0l && z < 0l) {\n            left := x\n            right :=\
    \ -x\n            true\n        } else if(x > 0l && y < 0l && z > 0l) {\n    \
    \        left := -x\n            right := z\n            true\n        } else\
    \ if(x < 0l && y > 0l && z < 0l) {\n            left := -y\n            right\
    \ := z\n            true\n        } else if(x < 0l && y > 0l && z > 0l) {\n  \
    \          left := -x\n            right := z\n            true\n        } else\
    \ if(x > 0l && y > 0l && z < 0l) {\n            left := x\n            right :=\
    \ z\n            true\n        } else if(x < 0l && y > 0l && z > 0l) {\n     \
    \       left := -x\n            right := -z\n            true\n        } else\
    \ {\n            false\n        }", "        // Find the length of each side\n\
    \        val aLength : Long = math.sqrt(a * a)\n        val bLength : Long = math.sqrt(b\
    \ * b)\n        val cLength : Long = math.sqrt(c * c)\n\n        // Find the hypotenuse\
    \ for each side\n        val aHypotenuse : Long = aLength * b\n        val bHypotenuse\
    \ : Long = bLength * a\n        val cHypotenuse : Long = cLength * b\n\n     \
    \   // Find the area of the triangle by using the hypotenuse\n        val areaTriangle\
    \ : Double = aHypotenuse * bHypotenuse * cHypotenuse\n\n        // The area of\
    \ the triangle must be greater than zero.\n        if(areaTriangle < 0.0) \n \
    \           return false\n\n        // Return the result based on the triangle\
    \ sides\n        if(a = b) \n            return c == a\n\n        if(b = c)\n\
    \            return a == c\n\n        if(c = b)\n            return a == b\n\n\
    \        // If it reaches here, the triangle is not right-angled.\n        return\
    \ false", "        val x1: Int = Math.min(a, b, c);\n        val x2: Int = Math.max(a,\
    \ b, c);\n        val y1: Int = Math.min(b, c, a);\n        val y2: Int = Math.max(b,\
    \ c, a);\n        val l1: Int = Math.min(x2, y2);\n        val l2: Int = Math.max(x2,\
    \ y2);\n        val a1: Int = Math.min(x1, y1);\n        val a2: Int = Math.max(x1,\
    \ y1);\n        l1 == l2 && a1 == a2", "      val rad = math.atan2( b * 0.5 -\
    \ c * 0.5, a * 0.5 - c * 0.5 )\n      rad > math.pi/2 || rad < -math.pi/2 ", " \
    \     val a = a.toDouble\n      val b = b.toDouble\n      val c = c.toDouble\n\
    \      val ab = math.pow(b, 2)\n      val ac = math.pow(c, 2)\n      val ad =\
    \ math.pow(a, 2)\n      ab == ac && ab == ad && ac == ad", "      val d1 = (b*b)\
    \ - (4*a*c)\n      val d2 = (a*a) - (4*b*c)\n      val d3 = (b*b) - (4*a*c)\n\
    \      val d4 = (a*a) - (4*b*c)\n      if (d1 == 0) \n        if (d2 == 0)\n \
    \         if (d3 == 0) true\n            else false\n        else false\n    \
    \  else if (d2 == 0) \n        if (d3 == 0) true\n          else false\n     \
    \   else false\n      else false", "        // use scala.math to calculate angle\n\
    \        // use scala.collection.mutable to store length\n        val a = math.radians(a)\n\
    \        val b = math.radians(b)\n        val c = math.radians(c)\n        //\
    \ calculate hypotenuse length\n        val hypotenuse = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n        // calculate cosine of angle\n        val cosine\
    \ = math.acos(b / hypotenuse)\n        // calculate sine of angle\n        val\
    \ sine = math.asin(b / hypotenuse)\n        // check cosine\n        if (cosine\
    \ > 1.0) cosine = 1.0\n        if (cosine < -1.0) cosine = -1.0\n        // check\
    \ sine\n        if (sine > 1.0) sine = 1.0\n        if (sine < -1.0) sine = -1.0\n\
    \        // check hypotenuse\n        if (hypotenuse < 0.0) hypotenuse = 0.0\n\
    \        // check cosine is between -1.0 and 1.0\n        if (cosine < -1.0) cosine\
    \ = -1.0\n        if (cosine > 1.0) cosine = 1.0\n        // check sine is between\
    \ -1.0 and 1.0\n        if (sine < -1.0) sine = -1.0\n        if (sine > 1.0)\
    \ sine = 1.0\n        // check hypotenuse is between 0.0 and hypotenuse\n    \
    \    if (hypotenuse < 0.0) hypotenuse = 0.0\n        // check cosine is between\
    \ 0.0 and 1.0\n        if (cosine < 0.0) cosine = 0.0\n        if (cosine > 1.0)\
    \ cosine = 1.0\n        // check sine is between 0.0 and 1.0\n        if (sine\
    \ < 0.0) sine = 0.0\n        if (sine > 1.0) sine = 1.0\n        // return result\n\
    \        if (cosine * sine < 0.0) false else true", "        val triangleSides\
    \ = a to b toList to c toList\n        val triangleArea = triangleSides reduce\
    \ ((a,b) => a + b) toDouble * 0.5\n        val isRight = triangleArea < 0.0 &&\
    \ triangleArea > triangleSides.last / 2\n        triangleSides foreach println\n\
    \        isRight", "        if( a>b && a>c )\n            false\n        else\n\
    \            if( b>a && b>c )\n                false\n            else\n     \
    \           if( c>a && c>b )\n                    false\n                else\n\
    \                    true", "        val ab = math.sqrt((a * a) + (b * b))\n \
    \       val ac = math.sqrt((a * a) + (c * c))\n        val bc = math.sqrt((b *\
    \ b) + (c * c))\n        ab < ac && ab < bc", "        val abs = math.sqrt(b.toDouble\
    \ * a.toDouble)\n        val ac = math.sqrt(a.toDouble * c.toDouble)\n       \
    \ val bc = math.sqrt(b.toDouble * c.toDouble)\n\n        val denom = abs * bc\n\
    \        val a1 = abs / (a * b)\n        val b1 = bc / (b * c)\n        val a2\
    \ = abs / (a * c)\n        val b2 = bc / (b * a)\n\n        val d1 = a1 * b2 -\
    \ a2 * b1\n        val d2 = b1 * a2 - b2 * a1\n\n        if (denom == 0) {\n \
    \           false\n        } else {\n            if (d1 > 0) {\n             \
    \   d1.toDouble > 0\n            } else {\n                d2.toDouble > 0\n \
    \           }\n        }", "        var sum = 0l\n        val x = Math.abs(a)\
    \ + Math.abs(b) + Math.abs(c)\n        x match {\n            case x if x >= 1l\
    \ =>\n                sum += a\n            case x if x >= 2l =>\n           \
    \     sum += b\n            case x if x >= 3l =>\n                sum += c\n \
    \           case x if x == 1l || x == 2l || x == 3l =>\n                if (Math.abs(Math.sin(a)\
    \ * Math.sin(b) * Math.sin(c)) < Math.sqrt(Math.abs(a * b * c))) return true\n\
    \            case _ =>\n        }\n        return false", "      val l = Math.sqrt(a*a\
    \ + b*b + c*c)\n      val d = (a*a + b*b - c*c)/(l*l)\n      d < 1.0", "     \
    \   val ab = b - a\n        val ac = c - a\n        val bc = c - b\n        val\
    \ abc = ab * bc\n        abc < 0", "        val ab = math.abs(b - a)\n       \
    \ val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n\n        ab < ac\
    \ && ab < bc", "        val a1 = scala.math.sqrt(a * a + b * b)\n        val a2\
    \ = scala.math.sqrt(a * a + c * c)\n        val b2 = scala.math.sqrt(b * b + c\
    \ * c)\n        (a1 * a2 + a2 * b2 == b1 * a2) || (a1 * a2 + a2 * b2 == c * a2)\
    \ || (a1 * a2 + a2 * b2 == a1 * b2) || (b1 * a2 + b2 * b2 == c1 * a2)", "    \
    \    if (a > b && a > c && b > c && a != 0 && b != 0 && c != 0) \n        {\n\
    \            val tri = math.sqrt(a * a + b * b + c * c)\n            if (tri %\
    \ 1 != 0) {\n                return false\n            }\n        }\n        return\
    \ true", "        if (a == 0) false else if (b == 0) false else a != b\n     \
    \   && ((Math.atan2((b - a), (c - a)) < Math.toDegrees(90)) == true)", "     \
    \   val leftSide  = math.sqrt( (pow(a,2)) + (pow(b,2)) + (pow(c,2)) ) \n     \
    \   val rightSide = math.sqrt( (pow(a,2)) - (pow(b,2)) - (pow(c,2)) ) \n     \
    \   val aIsRight = Math.abs( Math.asin ( leftSide ) ) == 90 \n        val bIsRight\
    \ = Math.abs( Math.asin ( rightSide ) ) == 90 \n        val cIsRight = Math.abs(\
    \ Math.asin ( rightSide ) ) == 90 \n        if (aIsRight && bIsRight && cIsRight)\n\
    \            true \n        else \n            false ", "        val ad = a/2\n\
    \        val bd = b/2\n        val cd = c/2\n        var ad2 = ad*ad\n       \
    \ var bd2 = bd*bd\n        var cd2 = cd*cd\n        var adb2 = ad2*bd\n      \
    \  var adc2 = ad2*cd\n        var bdc2 = bd2*cd\n        val discriminant = adb2\
    \ + bdc2 - adc2\n        discriminant > 0", "        val l1 = (a * b * c).toInt\n\
    \        val l2 = (b * a * c).toInt\n        val l3 = (a * b * c).toInt\n    \
    \    l1 > l2 && (l1 > l3 || l2 > l3)", "        val ab = math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2))\n        val ac = math.sqrt(Math.pow(a, 2) + Math.pow(c,\
    \ 2))\n        val bc = math.sqrt(Math.pow(b, 2) + Math.pow(c, 2))\n        ((ab\
    \ + ac > bc) && (ab - ac > bc))", "        // Define a function\n        def getAngle(point\
    \ : Long) : Double = {\n            Math.atan2(point, b) - Math.atan2(point, a)\n\
    \        }\n        \n        // Check if it is an angle\n        if(getAngle(a)\
    \ == getAngle(b) == getAngle(c)) {\n            return true\n        }\n     \
    \   \n        // The 3 angles\n        var a1 = getAngle(a)\n        var b1 =\
    \ getAngle(b)\n        var c1 = getAngle(c)\n        \n        // Check if one\
    \ of them is 90 degree\n        if(a1 == Math.PI && b1 == Math.PI && c1 == Math.PI)\
    \ {\n            return true\n        }\n        \n        // If any of the angles\
    \ are not 90 degree\n        if(a1 != Math.PI && b1 != Math.PI && c1 != Math.PI)\
    \ {\n            // Return the other side\n            val b2 = getAngle(b)\n\
    \            val c2 = getAngle(c)\n            \n            if(a1 == b2 && b1\
    \ == c2 && c1 == a1) {\n                return true\n            }\n         \
    \   \n            // Otherwise, try other side\n            if(a1 == b2 && b1\
    \ != c2 && c1 != a1) {\n                return true\n            }\n         \
    \   \n            // Otherwise, try other side\n            if(a1 != b2 && b1\
    \ == c2 && c1 != a1) {\n                return true\n            }\n        }\n\
    \        \n        return false", "        var x = math.sqrt(math.pow(a, 2) +\
    \ math.pow(b, 2))\n        var y = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \        var z = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\n        if ((x\
    \ >= y && x >= z) || (y >= x && y >= z)) {\n            return true\n        }\
    \ else {\n            return false\n        }", "        // The third side will\
    \ be equal to the other two. \n        // The third side is b + c\n        val\
    \ b2 = b + c\n        // The third side will be equal to the other two. \n   \
    \     // The third side is b - c\n        val c2 = b - c\n        // The third\
    \ side will be equal to the other two. \n        // The third side is b2 - c2\n\
    \        val a2 = b2 - c2\n        // The third side will be equal to the other\
    \ two. \n        // The third side is b2 + c2\n        val b2 = b2 + c2\n    \
    \    // If b2 + c2 > a2, the third side is b + c.\n        // If b2 - c2 > a2,\
    \ the third side is b - c.\n        // If b2 + c2 > a2, the third side is b2 -\
    \ c2.\n        // If b2 - c2 > a2, the third side is b2 + c2.\n        (b2 + c2\
    \ > a2) || ((b2 - c2 > a2) || (b2 + c2 > a2) || (b2 - c2 > a2))", "      val AB\
    \ = math.sqrt((a*a)+(4*b*c)); \n      val AC = math.sqrt((a*a)+(2*b*c)); \n  \
    \    val BC = math.sqrt((2*b*c)+(a*a));\n      val A = (b*b) - ((3*b*c)+(a*a));\
    \ \n      val B = (3*b*c) - ((5*a*b) + (2*b*c));\n      val C = (5*a*b) - ((7*a*b)\
    \ + (3*b*c));\n      if(AC == 0){\n        true\n      }else if(AB*BC == 0){\n\
    \        true\n      }else{\n        math.atan((B*B+C*C)/(2*AB*BC)) == math.atan((B*B-A*A)/(2*AB*BC))\n\
    \      }", '        if (a == 0 && b == 0 && c == 0) true else false', "      \
    \  if (a > 0 && b > 0 && c > 0){\n            var result = true\n            if\
    \ (b > a){\n                if (c > b){\n                    result = false\n\
    \                }else{\n                    result = true\n                }\n\
    \            }else{\n                if (c > a){\n                    result =\
    \ false\n                }else{\n                    result = true\n         \
    \       }\n            }\n            result\n        }else{\n            false\n\
    \        }", "        var angleA = a.toDouble / 2\n        var angleB = b.toDouble\
    \ / 2\n        var angleC = c.toDouble / 2\n        if (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleB, 2) + Math.pow(angleC, 2)) <= 1)\n        {\n         \
    \   return true\n        }\n        var x1 = (angleA * angleB - angleC) / (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleC, 2)))\n        var y1 = (angleC * angleB - angleA) / (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleC, 2)))\n        var x2 = (angleA * angleC - angleB) / (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleC, 2)))\n        var y2 = (angleB * angleC - angleA) / (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleC, 2)))\n        if (x1 == y2 && x1 == y1 && x2 == y1)\n\
    \        {\n            return true\n        }\n        if (x1 <= x2 && x2 <=\
    \ y1)\n        {\n            return true\n        }\n        if (x1 >= x2 &&\
    \ x2 >= y1)\n        {\n            return true\n        }\n        if (x1 >=\
    \ x2 && x1 <= y2 && y2 <= x1)\n        {\n            return true\n        }\n\
    \        return false", "        def isAngle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n            if (a == b || a == c || b == c) return true\n            else\
    \ return false\n        }\n        def isRightAngle(a : Long, b : Long, c : Long)\
    \ : Boolean = {\n            if (a == b || a == c || b == c) return true\n   \
    \         else return false\n        }\n        if (isAngle(a, b, c) && isAngle(a,\
    \ c, b)) {\n            if (isRightAngle(a, b, c)) return true\n            else\
    \ return false\n        }\n        val ab = abs(b - c)\n        val ac = abs(a\
    \ - c)\n        val bc = abs(b - c)\n        if (ab != ac && ab != bc) return\
    \ false\n        if (ac > bc && ab != bc) return true\n        if (bc > ac &&\
    \ ab != bc) return true\n        if (ac < bc && ab != bc) return true\n      \
    \  return false", "        if((b - c) * (b + c) > a * a) {\n            false\n\
    \        } else {\n            var bsq = a * a\n            var csq = b * b\n\
    \            var det = bsq * c - a * c\n            if(det >= 0.0) {\n       \
    \         var s = (-b + Math.sqrt(det)) / (2.0 * a)\n                if(s == 0.0)\
    \ {\n                    true\n                } else {\n                    var\
    \ isRight = s >= 0.0\n                    if(isRight) {\n                    \
    \    val q = (-b - Math.sqrt(det)) / (2.0 * a)\n                        if(q ==\
    \ 0.0) {\n                            true\n                        }\n      \
    \              }\n                }\n            }\n        }", "        // Check\
    \ if either side is zero\n        if((a < 0L) || (b < 0L) || (c < 0L))\n     \
    \       return false\n        // Check if a is less than b, c\n        else if(a\
    \ < b) \n        { \n            // check if b is less than c\n            else\
    \ if(b < c) \n            { \n                // check if c is less than a\n \
    \               else if(c < a) \n                { \n                    // return\
    \ true\n                    true\n                }\n                // else return\
    \ false\n                else\n                { \n                    // else\
    \ return false\n                    false\n                }\n            }\n\
    \            // else return false\n            else\n            {\n         \
    \       // else return false\n                false\n            }\n        }\n\
    \        // else return false\n        else\n        {\n            // else return\
    \ false\n            false\n        }", "        if (c > a && c > b) false\n \
    \       else if (c < a && c < b) false\n        else if (c < a && c > b) true\n\
    \        else if (c > a && c < b) true\n        else false", "        val a1 =\
    \ math.sqrt(a * a + b * b)\n        val c1 = math.sqrt(c * c + a * a)\n      \
    \  val b1 = math.sqrt(b * b + c * c)\n        return (a1 < b1 && a1 < c1 && b1\
    \ < c1)", "        val a = abs(a)\n        val b = abs(b)\n        val c = abs(c)\n\
    \        \n        val discriminant = b * b - 4 * a * c\n        \n        if\
    \ (discriminant < 0) \n            throw new RuntimeException(\"a < 0\")\n   \
    \     \n        // discriminant > 0\n        if (discriminant >= 0) {\n      \
    \      val root1 = (-b + sqrt(discriminant)) / (2 * a)\n            val root2\
    \ = (-b - sqrt(discriminant)) / (2 * a)\n            if (root1 <= 0 && root2 <=\
    \ 0)\n                true\n            else\n                false\n        }\n\
    \        else \n            false", "        val d1 = b - a\n        val d2 =\
    \ c - a\n        val d3 = b - c\n        d1 < 0 && d2 < 0 && d3 < 0", "      \
    \  val x1 = (b - a) / (2l)\n        val x2 = (c - b) / (2l)\n        val x3 =\
    \ x1 +x2\n        val y1 = (a + c) / (2l)\n        val y2 = (y1 - c) / (2l)\n\
    \        val y3 = (y1 - b) / (2l)\n        (x2 == 0 && y1 == 0 && y3 == 0) ||\
    \ (x1 == 0 && y2 == 0 && y3 == 0)", "      if(a == 0 && b == 0 && c == 0) true\n\
    \      else {\n        if(math.abs(a-b) == math.abs(a-c) && math.abs(b-b) == math.abs(c-c))\
    \ true\n        else false\n      }", "        if (a < 0 || b < 0 || c < 0) \n\
    \            return false\n\n        var sum : Long = 0\n        var d : Long\
    \ = Math.sqrt(Math.pow(a - b, 2) + Math.pow(c - b, 2))\n        var t : Long =\
    \ Math.abs(b - c)\n        if (d > t || d + t < d)\n            return false\n\
    \n        for (i <- 1 to d) {\n            sum += d * Math.pow((a + b) / 2, 2)\n\
    \        }\n\n        if (sum == 0)\n            return false\n\n        // if\
    \ sum value is equal to a + b + c, then a + b is greater than c\n        return\
    \ a + b == sum", "        if (b - a < c && c - b < a && c - b > -a) {\n      \
    \      true\n        } else {\n            false\n        }", "        if (Math.sqrt(a*a\
    \ + b*b + c*c) != 0l) {\n            val triangleSide1x = a\n            val triangleSide1y\
    \ = b\n            val triangleSide2x = c\n            val triangleSide2y = a\n\
    \            val triangleSide3x = c\n            val triangleSide3y = b\n\n  \
    \          // To check if a triangle is a right angled one\n            // We\
    \ have to calculate the area of triangle using Heron's formula\n            //\
    \ http://en.wikipedia.org/wiki/Heron%27s_formula\n            val triangleArea\
    \ = Math.sqrt(triangleSide1x*triangleSide1x + triangleSide1y*triangleSide1y)\n\
    \            val rightAngleTriangleArea = triangleArea * (triangleSide2x + triangleSide3x)\
    \ / 2\n            val upTriangleArea = triangleArea * (triangleSide1x + triangleSide3x)\n\
    \            val downTriangleArea = triangleArea * (triangleSide1y + triangleSide3y)\n\
    \            // If area is same then triangle is a right angled one\n        \
    \    if (triangleArea == rightAngleTriangleArea) {\n                return true\n\
    \            } else if (triangleArea == upTriangleArea) {\n                return\
    \ true\n            } else if (triangleArea == downTriangleArea) {\n         \
    \       return true\n            } else {\n                return false\n    \
    \        }\n        } else {\n            return false\n        }", "        //\
    \ Write your code here\n        def isRightAngle(a: Long, angle: Long, length:\
    \ Long): Boolean = {\n            val xs = List(a, b)\n            val ys = List(c,\
    \ c)\n            val xLen = math.sqrt((a * a) + ((b * b) - (a * c)))\n      \
    \      val yLen = math.sqrt((a * a) + ((b * b) - (a * b)))\n            val r\
    \ = math.sqrt((xLen * xLen) - ((yLen * yLen) - (xLen * yLen)))\n            val\
    \ xa = xs.map( x => (x/r)%1)\n            val ya = ys.map( y => (y/r)%1)\n   \
    \         val d = ((xa * ya) - (ya * xa)).toDouble\n            if (math.abs(d)\
    \ < 1.0) true else false\n        }\n        def isRightAngle2(a: Long, angle:\
    \ Long, length: Long): Boolean = {\n            val xs = List(a, b)\n        \
    \    val ys = List(c, c)\n            val xLen = math.sqrt((a * a) + ((b * b)\
    \ - (a * c)))\n            val yLen = math.sqrt((a * a) + ((b * b) - (a * b)))\n\
    \            val r = math.sqrt((xLen * xLen) - ((yLen * yLen) - (xLen * yLen)))\n\
    \            val xa = xs.map( x => (x/r)%1)\n            val ya = ys.map( y =>\
    \ (y/r)%1)\n            val d = ((xa * ya) - (ya * xa)).toDouble\n           \
    \ if (math.abs(d) < 1.0) true else false\n        }\n        def isRightAngle3(a:\
    \ Long, angle: Long, length: Long): Boolean = {\n            val xs = List(a,\
    \ b)\n            val ys = List(c, c)\n            val xLen = math.sqrt((a * a)\
    \ + ((b * b) - (a * c)))\n            val yLen = math.sqrt((a * a) + ((b * b)\
    \ - (a * b)))\n            val r = math.sqrt((xLen * xLen) - ((yLen * yLen) -\
    \ (xLen * yLen)))\n            val xa = xs.map( x => (x/r)%1)\n            val\
    \ ya = ys.map( y => (y/r)%1)\n            val d = ((xa * ya) - (ya * xa)).toDouble\n\
    \            if (math.abs(d) < 1.0) true else false\n        }\n        def isRightAngle4(a:\
    \ Long, angle: Long, length: Long): Boolean = {\n            val xs = List(a,\
    \ b)\n            val ys = List(c, c)\n            val xLen = math.sqrt((a", " \
    \       val l = a to b\n        val r = c to l\n        val u = a to c\n     \
    \   val v = b to u\n        if (u.product() < v.product()) {\n            val\
    \ u = c to b\n            val v = a to u\n            val w = c to v\n       \
    \     val a = u.product()\n            val b = v.product()\n            val c\
    \ = w.product()\n            val s = (a + b + c) / 2\n            return if (s\
    \ > (a + b + c)) {\n                true\n            } else {\n             \
    \   false\n            }\n        } else {\n            val u = a to c\n     \
    \       val v = c to b\n            val w = b to u\n            val a = u.product()\n\
    \            val b = v.product()\n            val c = w.product()\n          \
    \  val s = (a + b + c) / 2\n            return if (s > (a + b + c)) {\n      \
    \          true\n            } else {\n                false\n            }\n\
    \        }", "        val sqrt1 = math.sqrt(a.toDouble * a.toDouble + b.toDouble\
    \ * b.toDouble + c.toDouble * c.toDouble - 2 * a.toDouble * b.toDouble + 2 * a.toDouble\
    \ * c.toDouble - 2 * b.toDouble * c.toDouble + a.toDouble * b.toDouble + a.toDouble\
    \ * c.toDouble - b.toDouble * a.toDouble - b.toDouble * c.toDouble - c.toDouble\
    \ * a.toDouble - c.toDouble * b.toDouble)\n        val sqrt2 = math.sqrt(a.toDouble\
    \ * a.toDouble + b.toDouble * b.toDouble + c.toDouble * c.toDouble - 2 * a.toDouble\
    \ * b.toDouble + 2 * a.toDouble * c.toDouble - 2 * b.toDouble * c.toDouble + a.toDouble\
    \ * b.toDouble + a.toDouble * c.toDouble - b.toDouble * a.toDouble - b.toDouble\
    \ * c.toDouble - c.toDouble * a.toDouble - c.toDouble * b.toDouble)\n        sqrt1\
    \ / sqrt2 > 1", "        val sides = List(a, b, c).sum\n        val roots = List(1/a,\
    \ 1/b, 1/c).product\n        (sides == roots) || (sides * sides == roots * roots)",
  "        // Write your code here\n        val side1 = a + (b / 2)\n        val side2\
    \ = c + (c / 2)\n        val side3 = a + c\n\n        return (side1 == side2 ||\
    \ side2 == side3 || side1 == side3)", "        var d= (b*b) - (4 * a * c)\n  \
    \      if (d < 0) {\n            d = -d;\n        }\n        val e = (b * b) -\
    \ (4 * a * c);\n        if (e < 0) {\n            e = -e;\n        }\n       \
    \ if (d == 0 || e == 0) {\n            return false\n        }\n        val discriminant\
    \ = b * b - 4 * a * c;\n        val root1 = (-b + Math.sqrt(discriminant)) / (2\
    \ * a);\n        val root2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n     \
    \   val root3 = (-b + Math.sqrt(discriminant)) / (2 * a);\n        val root4 =\
    \ (-b - Math.sqrt(discriminant)) / (2 * a);\n        val roots = List(root1, root2,\
    \ root3, root4);\n        val isRight = (roots contains root1 || roots contains\
    \ root2 || roots contains root3 || roots contains root4);\n        return isRight",
  '        Math.abs(a - b) > (Math.abs(b - a) + Math.abs(c - b))', "        var x1\
    \ = (a / 2l)\n        var y1 = (b / 2l)\n        var z1 = (c / 2l)\n        var\
    \ x2 = (a / 2l)\n        var y2 = (b / 2l)\n        var z2 = (c / 2l)\n      \
    \  var x3 = (a / 2l)\n        var y3 = (b / 2l)\n        var z3 = (c / 2l)\n \
    \       var x4 = (a / 2l)\n        var y4 = (b / 2l)\n        var z4 = (c / 2l)\n\
    \        var x5 = (a / 2l)\n        var y5 = (b / 2l)\n        var z5 = (c / 2l)\n\
    \        x1 = Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1)\n        x2 = Math.sqrt(x2\
    \ * x2 + y2 * y2 + z2 * z2)\n        x3 = Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3)\n\
    \        x4 = Math.sqrt(x4 * x4 + y4 * y4 + z4 * z4)\n        x5 = Math.sqrt(x5\
    \ * x5 + y5 * y5 + z5 * z5)\n        if (a > b && a > c && a > x1 && a > y1 &&\
    \ a > z1 && b > x2 && b > y2 && b > z2 && c > x3 && c > y3 && c > z3 && x4 > x5\
    \ && x4 > y5 && x4 > z5 && y4 > x5 && y4 > y5 && y4 > z5) {\n            true\n\
    \        } else {\n            false\n        }", "        val d = (b - a) * (c\
    \ - b)\n        if (d == 0.0) return true\n        if (d > 0.0) {\n          \
    \  val bc = d / (b + c)\n            val ca = -bc / (a + c)\n            val a2\
    \ = a - a / 2.0\n            val b2 = b - b / 2.0\n            val c2 = c - c\
    \ / 2.0\n            val ans = ((a2 * (c2 + b2 - ca)) * c) + (b2 * (c2 + a2 -\
    \ ca)) * b\n            val bn = ((a2 * (c2 + b2 - ca)) * a) + (b2 * (c2 + a2\
    \ - ca)) * c\n            val cn = (a2 * (c2 + b2 - ca)) * b\n            val\
    \ ans = (ans * ans) - (bn * bn) * (cn - ans)\n            return ans <= 0.0 &&\
    \ ans >= -1.0\n        }\n        val bd = d / (b + d)\n        val ad = -(bd)\
    \ / (a + d)\n        val a2 = a - a / 2.0\n        val b2 = b - b / 2.0\n    \
    \    val c2 = c - c / 2.0\n        val ans = ((a2 * (b2 + c2 - ad)) * b) + (b2\
    \ * (a2 + c2 - ad)) * a\n        val bn = ((a2 * (b2 + c2 - ad)) * c) + (b2 *\
    \ (a2 + c2 - ad)) * a\n        val cn = ((a2 * (b2 + c2 - ad)) * a) + (b2 * (a2\
    \ + c2 - ad)) * b\n        val ans = (ans * ans) - (bn * bn) * (cn - ans)\n  \
    \      return ans <= 0.0 && ans >= -1.0", "        val ab = math.sqrt((a * a)\
    \ + (b * b))\n        val ac = math.sqrt((a * a) + (c * c))\n        val bc =\
    \ math.sqrt((b * b) + (c * c))\n        (ab == ac) && (bc == ab)", "        val\
    \ AB = math.pow(a,2) - math.pow(b,2);\n        val BC = math.pow(b,2) - math.pow(c,2);\n\
    \        val AC = math.pow(a,2) - math.pow(c,2);\n        math.abs(math.abs(AC\
    \ - BC) + math.abs(AB + BC)) < math.pow(a,0.5)", "        val ab = a - b\n   \
    \     val ac = a - c\n        val bc = b - c\n        ab.abs <= ac.abs && bc.abs\
    \ <= ab.abs", "        val ab = math.sqrt((b * b)- (a * a))\n        val bc =\
    \ math.sqrt((b * c)- (b * b))\n        val ac = math.sqrt((c * c)- (a * a))\n\
    \        bc > ab && ac > ab", "        val d = b - a\n        val e = c - a\n\
    \        d != 0 && (e == 0 || (d - e) == 180 * Math.sqrt(d / e))", "        if\
    \ ((b - a) * (c - b) == (c - a) * (b - a)) {\n            true\n        } else\
    \ {\n            false\n        }", "        if (a == 0 || b == 0 || c == 0) return\
    \ false\n        val angleA = ((b * b) - (4 * a * c)).toFloat / 2\n        val\
    \ angleB = ((a * a) - (4 * a * b)).toFloat / 2\n        val angleC = ((a * a)\
    \ - (4 * a * c)).toFloat / 2\n        if (math.abs(angleB) > math.abs(angleA)\
    \ && math.abs(angleC) > math.abs(angleA)) {\n            true\n        } else\
    \ {\n            false\n        }", "        var a = Math.abs(a)\n        var\
    \ b = Math.abs(b)\n        var c = Math.abs(c)\n        \n        if((a*a+b*b)==0)\n\
    \        {\n          if((a*a+c*c)==0)\n          {\n            if((a*a+b*b)==0)\n\
    \              return true\n            else\n              return false\n   \
    \       }\n          else return false\n        }\n        else\n        {\n \
    \         var d = ((a*a + c*c) - (b*b))\n          if(d<0) return false\n    \
    \      \n          var e = ((b*b + c*c) - (a*a))\n          if(e<0) return false\n\
    \          \n          if((d+e)>0) return false\n          else return true\n\
    \        }", "        val one = sqrt(pow(a, b) + pow(c, 2))\n        val two =\
    \ sqrt(pow(a, 2) + pow(c, 2))\n        val three = sqrt(pow(a, 3) + pow(c, 2))\n\
    \        one < two && two < three", "        def gcd(a: Long, b: Long): Long =\
    \ if (b == 0) a else gcd(b, a%b)\n        def lcm(a: Long, b: Long): Long = (a\
    \ * b)/gcd(a, b)\n        lcm(a, b) == a && lcm(a, b) == b && lcm(a, c) == c &&\
    \ lcm(c, a) == c", "        val a2 = a * a\n        val b2 = b * b\n        val\
    \ c2 = c * c\n        val ab2 = a2 + b2\n        val ac2 = a2 + c2\n        val\
    \ bc2 = b2 + c2\n        val ad2 = a2 + b2\n        val bcd = b2 + c2\n      \
    \  val cd2 = c2 + d2\n        val bc3 = bc + c3\n        val cd3 = c2 + d3\n \
    \       val bc5 = bc + c5\n        val cd5 = c2 + d5\n        val bc7 = bc + c7\n\
    \        val cd7 = c2 + d7\n        val bc9 = bc + c9\n        val cd9 = c2 +\
    \ d9\n        val ac3 = ac + c3\n        val bc1 = bc + c1\n        val cd1 =\
    \ c2 + d1\n        val ad3 = ac + d3\n        val bd1 = bc + d1\n        val cd9\
    \ = c2 + d9\n        val ac5 = ac + c5\n        val bd9 = bc + d9\n        val\
    \ cd1 = c2 + d1\n        val ad5 = ac + d5\n        val bd5 = bc + d5\n      \
    \  val cd7 = c2 + d7\n        val ac7 = ac + c7\n        val bd7 = bc + d7\n \
    \       val cd9 = c2 + d9\n        val ac9 = bc + c9\n        val bd9 = bc + d9\n\
    \        val ad1 = ac + d1\n        val bd1 = bc + d1\n        val ac1 = ac +\
    \ c1\n        val bd1 = bc + d1\n        val c11 = c * c\n        val d11 = d\
    \ * d\n        val c12 = c * c\n        val d12 = d * d\n        val d13 = d *\
    \ d\n        val c13 = c * c\n        val c21 = c * c\n        val d11 = d * d\n\
    \        val d12 = d * d\n        val d13 = d * d\n        val c23 = c * c\n \
    \       val d21 = d * d\n        val d22 = d2 * d\n        val d23 = d2 * d\n\
    \        val c33 = c * c\n        val d31 = d * d\n        val d32 = d3 * d\n\
    \        val d33 = d3 * d\n        val c13 = c * c\n        val c21 = c * c\n\
    \        val d31 = d * d\n        val d32 = d3 * d\n        val d33 = d3 * d\n\
    \        val c43 = c * c\n        val d11 = d * d\n        val d12 = d2 * d\n\
    \        val d13 = d", "        def rightAngle(a:Long, degree:Int) : Long = {\n\
    \            val n = a.abs * (a.abs % 180 - degree) / (180 - degree)\n       \
    \     if (n < 0) (n + 180) else n\n        }\n        def checkIfRight(a:Long,\
    \ b:Long, c:Long) : Boolean = {\n            val cd = rightAngle(c, 90) - rightAngle(a,\
    \ 90)\n            if (cd < 0) return false\n            if (cd >= 180*2) return\
    \ true\n            val bd = rightAngle(b, 90) - rightAngle(b, 180)\n        \
    \    if (bd >= 180*2) return false\n            val ad = rightAngle(a, 90) - rightAngle(a,\
    \ 180)\n            if (ad >= 180*2) return false\n            return true\n \
    \       }\n        checkIfRight(a, b, c) || checkIfRight(b, a, c) || checkIfRight(b,\
    \ c, a) || checkIfRight(c, a, b)", "        val ab = b - a\n        val ac = c\
    \ - a\n        val ad = ab - ac\n        val bc = b - c\n        val bd = bc -\
    \ ab\n        ab == ac && ab == ad && (ab == bc || bd == 0)", "        if (Math.abs(b\
    \ - c) > Math.abs(a - b)) {\n            if (Math.abs(c - b) > Math.abs(a - c))\
    \ {\n                if (Math.abs(a - c) > Math.abs(b - a)) {\n              \
    \      true\n                } else {\n                    false\n           \
    \     }\n            } else {\n                true\n            }\n        }\
    \ else {\n            false\n        }", '        // Write your logic here', " \
    \       if (math.abs(a) == math.abs(b) && math.abs(a) == math.abs(c)) {\n    \
    \        true\n        } else if (math.abs(a) == math.abs(b)) {\n            false\n\
    \        } else if (math.abs(a) == math.abs(c)) {\n            false\n       \
    \ } else {\n            val a1 = a - b\n            val a2 = c - b\n         \
    \   val b1 = b - a\n            val b2 = c - a\n            val c1 = c - a\n \
    \           // return (b1 * b2) - (a1 * c2) = 0\n            (a1 * b2) - (a1 *\
    \ c2) != 0\n        }", "        if((a>0) && (b>0) && (c>0)){\n            if((a>=b)\
    \ && (b>=c))\n            {\n                return true\n            }\n    \
    \        else if((a<=b) && (c>b) && (c>=a))\n            {\n                return\
    \ true\n            }\n            else if((a>b) && (c>a) && (c<=b))\n       \
    \     {\n                return true\n            }\n        }\n        else if((a<=0)\
    \ && (b<=0) && (c<=0))\n        {\n            return false\n        }\n     \
    \   return false", "        if (a < b) \n            (a-b)*(Math.sign(b-c)) >=\
    \ 0\n        else\n            (b-a)*(Math.sign(a-c)) >= 0", "        // If any\
    \ of these is negative, it is not an angle. \n        // Else if the sum of the\
    \ lengths is zero, return false. \n        // Else return true.\n        if ((a\
    \ < 0) || (b < 0) || (c < 0)) \n            false \n        else \n          \
    \  ((a + b + c) == 0)", "        // Given a triangle, a side, and a length of\
    \ a side, return true if the side \n        // is on the right of the triangle\
    \ and is equal to the specified length, \n        // false otherwise.\n      \
    \  // Example:\n        // >>> rightAngleTriangle((1l), (2l), (1l))\n        //\
    \ (true)\n        // >>> rightAngleTriangle((1l), (1l), (1l))\n        // (true)\n\
    \        // >>> rightAngleTriangle((3l), (3l), (1l))\n        // (false)\n   \
    \     (a < c || a == c) && (a < b || a == b) && (a == c || b < c)", "        val\
    \ longSideA = math.abs(a)\n        val longSideB = math.abs(b)\n        val longSideC\
    \ = math.abs(c)\n\n        // check if a==b or b==c\n        if(longSideA == longSideB)\
    \ \n            return longSideA == longSideC\n        else\n            return\
    \ longSideB == longSideC", "        // a b and c are positive long integer literals\n\
    \        // a and c are equal\n        val isRight = (a + b == c) || (a == c)\n\
    \        // a and c are NOT equal\n        val isNotRight = (a * b != c) || (a\
    \ * b == c)\n        return isRight && isNotRight", "      // Use formula to calculate\
    \ sides\n      var leftSide : Long = a\n      var rightSide : Long = b\n     \
    \ var topSide : Long = c\n      leftSide = (leftSide / a) * b\n      rightSide\
    \ = (rightSide / b) * c\n      topSide = (topSide / c) * a\n      // check if\
    \ sides are equal\n      if (leftSide == rightSide && leftSide == topSide) {\n\
    \        true\n      } else {\n        false\n      }", "        val ab = a -\
    \ b\n        val bc = b - c\n        val ac = a - c\n\n        (ab*bc*ac > 0)",
  "        // Your code goes here\n        var d : Long = 0\n        if(a>b && b>c)\
    \ d=a-b\n        if(a>b && b<c) d=a-c\n        if(a<b && b>c) d=b-c\n        if(a<b\
    \ && b<c) d=b-a\n        val ans = (d*d)/(4*a * b * c)\n        return ans==(a\
    \ * a + b * b + c * c)", "        if((a*a + b*b + c*c) < 0)\n            return\
    \ false\n        else{\n            val u = b*b - 4*a*c\n            val v2 =\
    \ a*a - b*b\n            val w1 = 2*b\n            val w2 = a*a - c*c\n      \
    \      val w3 = b*b + c*c\n\n            if((u > 0) && (v2 < 0) && (w2 < 0) &&\
    \ (w1 < w3))\n                return true\n            else\n                return\
    \ false\n        }", "        val ab = math.pow((b - a), 2)\n        val bc =\
    \ math.pow((c - b), 2)\n        val ac = math.pow((a - c), 2)\n        (ab + bc\
    \ == ac)", "        val a1 = Math.sqrt(a * a)\n        val b1 = Math.sqrt(b *\
    \ b)\n        val c1 = Math.sqrt(c * c)\n        return (a * b * c == a1 * b1\
    \ * c1)", '        return a > 0 && b > 0 && c > 0 && (c > a || a > c || b > a
    || b > c)', '        (a * b * c) / (a * a + b * b + c * c) == (a * b + c * c)
    / 2.0', "        // Write your code here\n        var flag = false\n        if((Math.sqrt((b*b)\
    \ - 4*a*c) >= 0)){\n            flag = true\n        }\n        flag", "     \
    \   if((a < b) \n            && (b < c) \n            && (c > a) \n          \
    \  && ((a+b+c) > 0))\n        {\n            // Triangle is valid, check angles\n\
    \            val dab = a.toDouble - b\n            val dac = a.toDouble - c\n\
    \            val daa = a.toDouble - a\n            val dac = c.toDouble - c\n\
    \            val daa = a.toDouble - a\n            val dcd = b.toDouble - dab\n\
    \            val dab = b.toDouble - dac\n            val daa = a.toDouble - a\n\
    \            val dca = c.toDouble - dac\n            val dbb = c.toDouble - dab\n\
    \            val dbd = b.toDouble - dac\n            val dbd = b.toDouble - dbb\n\
    \            val dab = b.toDouble - dac\n            val dbb = c.toDouble - dbd\n\
    \            val dbd = b.toDouble - dbb\n            val dab = b.toDouble - dac\n\
    \            val ddb = dab.toDouble - dbd\n            val dca = dac.toDouble\
    \ - dbd\n            val dab = dab.toDouble - dca\n            val dab = dab.toDouble\
    \ - ddb\n            // Make sure dab does not equal 180\n            dab != 180\n\
    \        }\n        else{\n            // Triangle is invalid\n            false\n\
    \        }", "        val ab = math.sqrt((b * b) - ((a * a) * (c - b)))\n    \
    \    val ac = math.sqrt((b * b) - ((a * a) * (b - a)))\n        val bc = math.sqrt((a\
    \ * a) - ((b * b) * (c - a)))\n        ab ~= ac && ac ~= bc && bc ~= c", '        math.sqrt(a
    * b * c) % 1 == 0', '        Math.abs(a * a + b * b - c * c) < 0.00001', "   \
    \     val isRight = ( (a + b) > c || (b + c) > a || (c + a) > b )\n        isRight",
  "        //Using sqrt method of Double class\n        //Calculating length using\
    \ Math class\n        val a = math.sqrt(a * a)\n        val b = math.sqrt(b *\
    \ b)\n        val c = math.sqrt(c * c)\n        val area = (a * b + c * a)\n \
    \       (area < a)", "        val d = b * b - 4 * a * c\n        if(d<0) return\
    \ false\n        val det = if (b != 0) -a / b else 0\n        if(det==0) return\
    \ false\n        val f = det * d\n        if(f<0) return false\n        val g\
    \ = -2 * f * Math.sqrt(f)\n        val delta = a / det\n        if(g>delta) return\
    \ false\n        true", "        if (a + b > c) false\n        else c < a && c\
    \ < b && c < a + b", "        val A = (a + b)/2.0\n        val B = (b + c)/2.0\n\
    \        val C = (c + a)/2.0\n        val AB = (B*B - A*C)\n        val AC = (A*C\
    \ - C*A)\n        AB*AB + AC*AC <= 0", "        val dx = a.toDouble - b.toDouble\n\
    \        val dy = c.toDouble - b.toDouble\n        val dz = b.toDouble - a.toDouble\n\
    \        val denom = dz * dz - dx * dx\n        denom > 0", "        val a1 =\
    \ ((b - a) * (b - a) + (c - a) * (c - a)).abs \n        val b1 = ((b - a) * (b\
    \ - a) - (c - a) * (c - a)).abs \n        val c1 = ((a - b) * (a - b) + (c - b)\
    \ * (c - b)).abs \n        a1 < b1 && b1 < c1 || (a1 == b1 && c1 == b1)", "  \
    \      val aDiv = a.toDouble / 2\n        val bDiv = b.toDouble / 2\n        val\
    \ cDiv = c.toDouble / 2\n        var result = (bDiv - aDiv) * (c-aDiv) - (aDiv\
    \ - bDiv) * (c-bDiv)\n        // Check if two sides are equal\n        if (result\
    \ == 0) {\n            return true\n        }\n        return result.toInt ==\
    \ 0"]
stop_tokens:
- "\n    }\n"
