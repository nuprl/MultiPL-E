language: scala
name: HumanEval_67_fruit_distribution
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ array = s.toCharArray\n        val apples = 0 :: 1 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxtpgh09z.scala:20:1270 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = \e[31m0\e\
    [0m :: \e[31m1\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e\
    [0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e[0m :: \e[31m0\e"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpxtpgh09z.scala

    '
  timestamp: 1660008675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = s.split(\" \")\n        val fruits = a.filter(_ => _.toInt > 0).map(_ =>\
    \ _.toInt).sum\n        val apples = a.filter(_ => _.toInt < 0).map(_ => _.toInt).sum\n\
    \        val mango = apples - fruits - n\n        mango\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxzammd8g.scala:20:35 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m = a.filter(_\
    \ => _.toInt > \e[31m0\e[0m).map(_ => _.toInt).sum\n\e[31m\e[31m   |\e[0m    \
    \                               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.toInt > 0.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpxzammd8g.scala:20:57 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m = a.filter(_\
    \ => _.toInt > \e[31m0\e[0m).map(_ => _.toInt).sum\n\e[31m\e[31m   |\e[0m    \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 =>\
    \ _$4.toInt.\n\e[31m\e[31m-- Error: /tmp/tmpxzammd8g.scala:20:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m = a.filter(_\
    \ => _.toInt > \e[31m0\e[0m).map(_ => _.toInt).sum\n\e[31m\e[31m   |\e[0m    \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                   No implicit Ordering defined for\
    \ Any.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxzammd8g.scala:21:35 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = a.filter(_\
    \ => _.toInt < \e[31m0\e[0m).map(_ => _.toInt).sum\n\e[31m\e[31m   |\e[0m    \
    \                               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$6 of expanded function:\n\e[31m   |\e[0m   _$6 => _$6.toInt < 0.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpxzammd8g.scala:21:57 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = a.filter(_\
    \ => _.toInt < \e[31m0\e[0m).map(_ => _.toInt).sum\n\e[31m\e[31m   |\e[0m    \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \   M"
  stdout: ''
  timestamp: 1660008686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ count = s.toList.filter(!_.isWhitespace).toList.size\n        (count - n) match\
    \ {\n            case 0 => 0\n            case 1 => 1\n            case _ => count\
    \ - n - 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6mi5_ff.scala:27)\n\tat Problem.main(tmpi6mi5_ff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ tokens = s.split(\" \").map(_.toInt)\n        val numberOfApples = tokens(0)\n\
    \        val numberOfOranges = tokens(1)\n        val totalFruits = numberOfApples\
    \ + numberOfOranges\n        val numberOfMango = totalFruits - numberOfOranges\
    \ - numberOfApples\n        return numberOfMango\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp6b8ltrim.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp6b8ltrim.scala:19)\n\
    \tat Problem$.main(tmp6b8ltrim.scala:27)\n\tat Problem.main(tmp6b8ltrim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apples = 0\n        var oranges = 0\n        var mangos = 0\n        var n1\
    \ = s.split(\" \").toList.map(x => x.split(\"and\")).toList\n        var n2 =\
    \ n1.map { x => x.mkString(\",\").split(\",\").map(_.toLong).toList }\n      \
    \  for {\n            a <- n2(0)\n            b <- n2(1)\n        } yield {\n\
    \            if (a < b)\n            {\n                if (a < n)\n         \
    \       {\n                    apples += a\n                }\n              \
    \  if (b < n)\n                {\n                    oranges += b\n         \
    \       }\n            }\n            if (a > b)\n            {\n            \
    \    if (a < n)\n                {\n                    apples += n\n        \
    \        }\n                if (b < n)\n                {\n                  \
    \  oranges += a\n                }\n            }\n            if (a == b)\n \
    \           {\n                if (b < n)\n                {\n               \
    \     apples += a\n                }\n                if (a < n)\n           \
    \     {\n                    oranges += b\n                }\n            }\n\
    \        }\n        if (apples < n)\n        {\n            if (apples < n)\n\
    \            {\n                mangos += apples\n            }\n        }\n \
    \       if (apples > n)\n        {\n            if (apples < n)\n            {\n\
    \                mangos += n\n            }\n        }\n        if (oranges <\
    \ n)\n        {\n            if (oranges < n)\n            {\n               \
    \ mangos += oranges\n            }\n        }\n        if (oranges > n)\n    \
    \    {\n            if (oranges < n)\n            {\n                mangos +=\
    \ n\n            }\n        }\n        if (apples == oranges)\n        {\n   \
    \         if (oranges < n)\n            {\n                mangos += oranges\n\
    \            }\n        }\n        if (apples == oranges && apples < n)\n    \
    \    {\n            mangos += apples\n        }\n        if (apples > oranges\
    \ && apples < n)\n        {\n            mangos += n\n        }\n        if (apples\
    \ == oranges && apples > n)\n        {\n            mangos += oranges\n      \
    \  }\n        if (apples > oranges && apples > n)\n        {\n            mangos\
    \ += n\n        }\n        if (apples == oranges && oranges == n)\n        {\n\
    \            mangos += oranges\n        }\n        if (apples > oranges && oranges\
    \ == n)\n        {\n            mangos += oranges\n        }\n        if (apples\
    \ > oranges && apples < n)\n        {\n            mangos += n\n        }\n  \
    \      if (apples == oranges && oranges > n)\n        {\n            mangos +=\
    \ oranges\n        }\n        if (apples < oranges && oranges == n)\n        {\n\
    \            mangos += oranges\n        }\n        if (apples > oranges && oranges\
    \ > n)\n        {\n            mangos += n\n        }\n        if (apples == oranges\
    \ && apples == \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsz69a03e.scala:137:42 --------------------------\e\
    [0m\e[0m\n\e[31m137 |\e[0m        \e[33mif\e[0m (apples == oranges && apples ==\
    \ \n\e[31m\e[31m    |\e[0m                                          ^\e[0m\n\e\
    [31m    |\e[0m                                     expression expected but \e\
    [31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsz69a03e.scala:32:27\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                    apples\
    \ += a\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsz69a03e.scala:36:28 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    oranges += b\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpsz69a03e.scala:43:27 ------------------------\e[0m\e[0m\n\
    \e[31m43 |\e[0m                    apples += n\n\e[31m\e[31m   |\e[0m        \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsz69a03e.scala:47:28 ------------------------\e[0m\e[0m\n\e[31m47 |\e\
    [0m                    oranges += a\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsz69a03e.scala:54:27\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m                    apples\
    \ += a\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsz69a03e.scala:58:28 ------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                    oranges += b\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660008690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ aMap : mutable.Map[String, String] = mutable.Map()\n        val aList : mutable.List[String]\
    \ = mutable.List()\n        val aInt : mutable.List[String] = mutable.List()\n\
    \        var k = 0\n        var i = 1\n        while(k <= n) {\n            var\
    \ bMap : mutable.Map[String, String] = mutable.Map()\n            var bList :\
    \ mutable.List[String] = mutable.List()\n            var bInt : mutable.List[String]\
    \ = mutable.List()\n            aList = (s.split(\"\\\\W+\").toList.filterNot(e\
    \ => e.isEmpty).filter(e => !(e.startsWith(\"apples\")))\n            k += aList.size\n\
    \            aList.foreach(x => aMap += (x -> x))\n            val count = aList.map(x\
    \ => aMap.get(x)).length\n            bMap = aMap\n            if(bMap.get(\"\
    mango\") == \"mango\") {\n                bInt += (\"mango\")\n              \
    \  i -= 1\n            }\n            if(bMap.get(\"apple\") == \"apple\") {\n\
    \                bInt += (\"apple\")\n                i -= 1\n            }\n\
    \            if(bMap.get(\"orange\") == \"orange\") {\n                bInt +=\
    \ (\"orange\")\n                i -= 1\n            }\n            bList += bMap.get(\"\
    mango\") + \"\\n\" + bMap.get(\"apple\") + \"\\n\" + bMap.get(\"orange\")\n  \
    \          aMap = aMap + (\"apple\" -> \"apple\" + i + \"apples\")\n         \
    \   aMap = aMap + (\"orange\" -> \"orange\" + i + \"oranges\")\n            bMap\
    \ = aMap\n            bList += bMap.get(\"mango\") + \"\\n\" + bMap.get(\"apple\"\
    ) + \"\\n\" + bMap.get(\"orange\")\n            bList += aMap.get(\"mango\") +\
    \ \"\\n\" + aMap.get(\"apple\") + \"\\n\" + aMap.get(\"orange\")\n           \
    \ bInt += (\"mango\")\n            i += 1\n            bMap ++= bList\n      \
    \      aMap = bMap\n            k = 0\n        }\n        val bMap = bList.toMap\n\
    \        bMap.get(\"mango\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo25x_c4q.scala:29:22 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            k += aList.size\n\e[31m\e[31m   |\e[0m  \
    \                    ^\e[0m\n\e[31m   |\e[0m                      expression expected\
    \ but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo25x_c4q.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36maMap\e[0m : mutable.Map[\e[35mString\e[0m, \e\
    [35mString\e[0m] = mutable.Map()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo25x_c4q.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36maMap\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mString\e[0m] = mutable.Map()\n\e[31m\e[31m   |\e[0m   \
    \                                              ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                                Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo25x_c4q.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36maList\e[0m : mutable.List[\e\
    [35mString\e[0m] = mutable.List()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo25x_c4q.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36maList\e[0m : mutable.List[\e\
    [35mString\e[0m] = mutable.List()\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006"
  stdout: ''
  timestamp: 1660008681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \").map(_.toInt)\n        val fruit = arr(1).toDouble / n\n\
    \        val mango = arr.length - 2\n        arr.take(2).sum / n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp8b3goubc.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp8b3goubc.scala:19)\n\
    \tat Problem$.main(tmp8b3goubc.scala:25)\n\tat Problem.main(tmp8b3goubc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ count(s : String, n: Long) : Long = {\n            var sum = 0\n           \
    \ var num = 0\n            var next = \"\"\n            for( i <- 0 until s.length()\
    \ ){\n                next = s.charAt(i)\n                if ( next != \",\" ){\n\
    \                    sum = sum + next.toInt\n                    num -= 1\n  \
    \              } else {\n                    sum = sum + n\n                }\n\
    \            }\n            return sum\n        }\n        val m = count(s, n)\n\
    \        var total = 0\n        for(i <- 0 until s.length()){\n            total\
    \ += s.charAt(i).toInt\n        }\n        return m - total\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_009sh8.scala:24:31\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                next = s.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Char\n\e[31m   |\e[0m                      \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_009sh8.scala:29:26\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    sum = sum\
    \ + n\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    Long\n\e[31m   |\e[0m                 \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ applesAndOranges = s.split(\" \").map(x => x.trim).map((_ + \" \").trim).map(x\
    \ => x.split(\" \").map(y => y.trim).toSet)\n        val sumApples = applesAndOranges.map(_.size).sum\n\
    \        val sumOranges = applesAndOranges.map(_.size).sum - sumApples\n     \
    \   val numberOfFruits = n.toInt\n        val maxCount = numberOfFruits.toLong\
    \ * numberOfFruits.toLong\n        val mango = 0\n        for (i <- 0 until numberOfFruits)\
    \ {\n            if (applesAndOranges.filter(x => x.contains(i)).length > maxCount)\n\
    \                mango += 1\n        }\n        mango\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpme2r9dq2.scala:19:66 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOranges\e[0m =\
    \ s.split(\e[31m\" \"\e[0m).map(\e[36mx\e[0m => x.trim).map((_ + \e[31m\" \"\e\
    [0m).trim).map(\e[36mx\e[0m => x.split(\e[31m\" \"\e[0m).map(\e[36my\e[0m => y.trim).toSet)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded\
    \ function:\n\e[31m   |\e[0m   _$1 => _$1 + \e[32m\" \"\e[0m.\n\e[31m\e[31m--\
    \ Error: /tmp/tmpme2r9dq2.scala:19:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOranges\e[0m =\
    \ s.split(\e[31m\" \"\e[0m).map(\e[36mx\e[0m => x.trim).map((_ + \e[31m\" \"\e\
    [0m).trim).map(\e[36mx\e[0m => x.split(\e[31m\" \"\e[0m).map(\e[36my\e[0m => y.trim).toSet)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \             No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m  \
    \                                        where:    B is a type variable\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpme2r9dq2.scala:27:22 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                mango += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean mango.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ sum : Long = n.toLong\n        val str = s.toString.replaceAll(\"[\\\\s]+\"\
    , \" \").replaceAll(\"([a-z])\", \"$1 \").split(\" \")\n        for (item <- str)\
    \ {\n            sum += item.toLong\n        }\n        var count = 0\n      \
    \  var temp : Long = 0\n        for (item <- str) {\n            if (item.equals(\"\
    mango\"))\n                count++\n            else\n                temp = temp\
    \ + item.toLong\n        }\n        return count * (n - sum)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwjor9its.scala:28:23 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                count++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ numberMap = Map((\"apples\" -> 1, \"oranges\" -> 2, \"mangos\" -> 3) -> 4)\n\
    \        val numberOfApples = numberMap.getOrElse(s, 0)\n        val numberOfOranges\
    \ = n - numberOfApples\n        numberOfApples * ((numberOfOranges) / numberOfApples)\
    \ + (numberOfOranges / numberOfApples)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpslc3evp7.scala:20:49\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumberOfApples\e\
    [0m = numberMap.getOrElse(s, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \ Found:    (s : String)\n\e[31m   |\e[0m                 Required: ((String,\
    \ Int), (String, Int), (String, Int))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ isOrange(fruit : String) : Boolean = fruit == \"oranges\"\n        def isApple(fruit\
    \ : String) : Boolean = fruit == \"apples\"\n        def isMango(fruit : String)\
    \ : Boolean = fruit == \"mango\"\n\n        val numbers : List[String] = s.split(\"\
    \\\\s+\").toList\n        val apples : List[String] = numbers.filter(_ != \"apples\"\
    ).toList\n        val oranges : List[String] = numbers.filter(_ != \"oranges\"\
    ).toList\n        val mangos : List[String] = numbers.filter(_ != \"mango\").toList\n\
    \        val totalApples = apples.sum\n        val totalOranges = oranges.sum\n\
    \        val totalMangos = mangos.sum\n        val total = totalApples + totalOranges\
    \ + totalMangos\n        val totalFruit = totalApples + totalOranges\n\n     \
    \   if(totalFruit == n) return mangos.size\n        if(totalFruit < n) return\
    \ n\n        if(totalFruit > n) return totalFruit\n        -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa5mwkbfc.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mtotalApples\e[0m = apples.sum\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                where:    B is a type variable with constraint >: String\n\
    \e[31m   |\e[0m                .\n\e[31m\e[31m-- Error: /tmp/tmpa5mwkbfc.scala:28:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33mval\e[0m \e[36mtotalOranges\e[0m = oranges.sum\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \ No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \         where:    B is a type variable with constraint >: String\n\e[31m   |\e\
    [0m                .\n\e[31m\e[31m-- Error: /tmp/tmpa5mwkbfc.scala:29:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mtotalMangos\e[0m = mangos.sum\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                where:    B is a type variable with constraint >: String\n\
    \e[31m   |\e[0m                .\n3 errors found\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ splits = s.split(\" \")\n        var apples = 0.0;\n        var oranges = 0.0;\n\
    \        var fruits = 0.0;\n        var total = 0.0\n        var i = 0\n     \
    \   for(i <- 0 until splits.length) {\n            if(splits(i) equals \"apples\"\
    ) {\n                apples = apples + 1.0;\n            } else if(splits(i) equals\
    \ \"oranges\") {\n                oranges = oranges + 1.0;\n            } else\
    \ if(splits(i) equals \"mango\") {\n                fruits += 1.0;\n         \
    \   } else if(splits(i) equals \"\") {\n                total += 1.0;\n      \
    \      }\n        }\n        var j = fruits;\n        while(j > 0) {\n       \
    \     total -= j;\n            j -= j;\n        }\n        println(total)\n  \
    \      total\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsea_ipdb.scala:42:8\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m        total\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (total : Double)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = if (s.contains(\"apples\")) s.substring(0, s.indexOf(\"apples\")).toLong\
    \ else 0\n        val oranges = if (s.contains(\"oranges\")) s.substring(0, s.indexOf(\"\
    oranges\")).toLong else 0\n        val fruits = if (s.contains(\"and\")) s.substring(s.indexOf(\"\
    and\") + 1, s.length - 1) else \"\"\n        val mango = if (fruits.contains(\"\
    mango\")) fruits.substring(0, fruits.indexOf(\"mango\")) else 0\n        val n\
    \ = if (n.toLong == 0) 1 else n\n        apples + oranges + mango / n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq4cyhrgm.scala:23:20 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mif\e[0m (n.toLong\
    \ == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m n\n\e[31m\e[31m   |\e[0m     \
    \               ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpq4cyhrgm.scala:23:42 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mif\e[0m (n.toLong == \e[31m0\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m n\n\e[31m\e[31m   |\e[0m                   \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \            Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq4cyhrgm.scala:24:33 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        apples + oranges + mango / n\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue / is not\
    \ a member of Matchable, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong\n        val oranges = apples - 3\n        val mangoes = apples\
    \ - 6\n        s.split(\" \").map{_.trim}.map{i => if (i == \"apples\" || i ==\
    \ \"oranges\") 1 else 0}.sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2i9r7030.scala:25)\n\tat Problem.main(tmp2i9r7030.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruitList = s.split(\" \")\n        val fruitCount = fruitList.toList.size\n\
    \        val applesAndOranges = fruitList(0)\n        val totalApplesAndOranges\
    \ = fruitCount.toLong\n        val apples = applesAndOranges.toInt\n        val\
    \ oranges = totalApplesAndOranges.toInt - apples\n        val mangos = apples\
    \ + oranges\n        val n = n.toLong\n        if (n < apples) {\n           \
    \ fruitCount\n        }\n        else if (apples < n  && oranges < n) {\n    \
    \        mangos\n        }\n        else {\n            fruitCount\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjmig7hll.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ basket = readLine.split(\"\\\\s+\").toList\n        val totalFruits = n\n  \
    \      val countFruits = fruitCounter(s, basket)\n        val numFruits = countFruits(0)\n\
    \        val numMangoFruits = countFruits(1)\n        val totalMangoFruits = totalFruits\
    \ - numMangoFruits\n        numFruits(0) match {\n            case 0 => return\
    \ numFruits(0)\n            case 1 => return 0\n            case _ => return numFruits(0)\
    \ - numMangoFruits\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj7p89rf6.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = readLine.split(\e\
    [31m\"\\\\s+\"\e[0m).toList\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: readLine\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj7p89rf6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcountFruits\e[0m = fruitCounter(s,\
    \ basket)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: fruitCounter\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n       val\
    \ appleAndOranges = s.split(\" \")\n       val apples = appleAndOranges(0).trim\n\
    \       val oranges = appleAndOranges(1).trim\n       val mangos = n - apples\
    \ - oranges\n       val total = apples + oranges + mangos\n       return mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmptacromvy.scala:22:22 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m       \e[33mval\e[0m \e[36mmangos\e[0m = n - apples\
    \ - oranges\n\e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((apples : String))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ sArray = s.split(\"and\")\n        val apples = sArray(1).toLong\n        val\
    \ oranges = sArray(2).toLong\n        val fruits = s.split(\"and\")(0) // get\
    \ only the first part of the string\n        val fruitList = fruits.split(\" \"\
    ) // split the string into words\n        val newList = fruitList.map { x => x.toLong\
    \ }\n        val numberOfApple = apples.toLong\n        val numberOfOrange = oranges.toLong\n\
    \        var numberOfMango = 0\n        newList.foreach(x => {\n            if\
    \ (x%2==0) numberOfMango+=1\n        })\n        return numberOfMango\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \" 6 oranges\"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:697)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpswzfoag1.scala:20)\n\
    \tat Problem$.main(tmpswzfoag1.scala:34)\n\tat Problem.main(tmpswzfoag1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ sum = 0\n        var i = 0\n        var j = 0\n        while(i < s.length){\n\
    \            if(j != n){\n                if(s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'o'){\n                    sum += s.charAt(i)\n                    j++\n\
    \                }\n                i += 1\n            }else{\n             \
    \   i += 1\n                j = 0\n            }\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5\
    \ apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppkftrv9k.scala:26:23 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ count(s : String, n: Long) : Long = {\n            val arr = s.split(\" \")\n\
    \            if (arr.length < 2) n\n            else count(arr.tail, arr.head.split(\"\
    and\")(0).toLong*2 + arr.head.split(\"and\")(1).toLong)\n        }\n        count(s,\
    \ n)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqsde1xqw.scala:22:27\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m count(arr.tail,\
    \ arr.head.split(\e[31m\"and\"\e[0m)(\e[31m0\e[0m).toLong*\e[31m2\e[0m + arr.head.split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).toLong)\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    \e[1m\e\
    [31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m      \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ x = s.split(\" \").toList\n        val apple = x.filter(_.equals(\"apple\")).map(_.toInt)\n\
    \        val mango = x.filter(_.equals(\"mango\")).map(_.toInt)\n        val orange\
    \ = x.filter(_.equals(\"orange\")).map(_.toInt)\n        val appleAndOrange =\
    \ apple ++ orange\n        val orangeAndMango = orange ++ mango\n        val appleAndMango\
    \ = apple ++ mango\n        val mangoAndOrange = mango ++ orange\n        val\
    \ appleAndOrangeAndMango = appleAndOrange ++ mangoAndOrange\n        val mangoAndAppleAndOrange\
    \ = mangoAndOrange ++ appleAndOrange\n        val appleAndMangoAndOrange = appleAndMango\
    \ ++ mangoAndOrange\n        val mangoAndAppleAndMango = mangoAndApple ++ appleAndMango\n\
    \        val appleAndOrangeAndMangoAndApple = appleAndOrangeAndMango ++ mangoAndAppleAndOrange\n\
    \        val mangoAndAppleAndOrangeAndMango = mangoAndAppleAndOrangeAndMango ++\
    \ appleAndMangoAndOrange\n        val appleAndOrangeAndMangoAndAppleAndMango =\
    \ appleAndOrangeAndMangoAndApple ++ mangoAndAppleAndMango\n        val mangoAndAppleAndOrangeAndMangoAndAppleAndOrange\
    \ = mangoAndAppleAndOrangeAndMangoAndApple ++ appleAndOrangeAndMangoAndAppleAndMango\n\
    \        val appleAndOrangeAndMangoAndAppleAndOrangeAndMango = appleAndOrangeAndMangoAndAppleAndOrangeAndMango\
    \ ++ mangoAndAppleAndOrangeAndMango\n        val appleAndMangoAndOrangeAndMangoAndAppleAndOrangeAndMango\
    \ = appleAndMangoAndOrangeAndMangoAndAppleAndOrangeAndMango ++ mangoAndAppleAndOrangeAndMango\n\
    \        val mangoAndAppleAndOrangeAndMangoAndAppleAndMangoAndOrangeAndMango =\
    \ mangoAndAppleAndOrangeAndMangoAndAppleAndMangoAndOrangeAndMango ++ appleAndMangoAndOrangeAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp09xnv481.scala:30:36 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmangoAndAppleAndMango\e\
    [0m = mangoAndApple ++ appleAndMango\n\e[31m\e[31m   |\e[0m                  \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \             Not found: mangoAndApple\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp09xnv481.scala:32:45 ---------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmangoAndAppleAndOrangeAndMango\e\
    [0m = mangoAndAppleAndOrangeAndMango ++ appleAndMangoAndOrange\n\e[31m\e[31m \
    \  |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m\
    \               Recursive \e[33mvalue\e[0m \e[35mmangoAndAppleAndOrangeAndMango\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp09xnv481.scala:34:62\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mmangoAndAppleAndOrangeAndMangoAndAppleAndOrange\e[0m = mangoAndAppleAndOrangeAndMangoAndApple\
    \ ++ appleAndOrangeAndMangoAndAppleAndMango\n\e[31m\e[31m   |\e[0m           \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mangoAndAppleAndOrangeAndMangoAndApple\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp09xnv481.scala:35:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mappleAndOrangeAndMangoAndAppleAndOrangeAndMango\e[0m = appleAndOrangeAndMangoAndAppleAndOrangeAndMango\
    \ ++ mangoAndAppleAndOrangeAndMango\n\e[31m\e[31m   |\e[0m                   \
    \                                           ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35mappleAndOrangeAndMangoAndAppleAndOrangeAndMango\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n"
  stdout: ''
  timestamp: 1660008685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \")\n        var result : Long = 0\n        arr.foreach(s =>\
    \ {\n            var apples: Int = 0 \n            var oranges: Int = 0 \n   \
    \         var mango: Int = 0 \n            var split: Array[String] = s.split(\"\
    and\")\n            if(split.length == 1){\n                if(s.contains(\"apple\"\
    )){\n                    apples = 1\n                }\n                if(s.contains(\"\
    orange\")){\n                    oranges = 1\n                }\n            \
    \    if(s.contains(\"mango\")){\n                    mango = 1\n             \
    \   }\n            }\n            else if(split.length == 2){\n              \
    \  if(s.contains(\"apple\") && s.contains(\"orange\")){\n                    apples\
    \ = 1\n                    oranges = 1\n                }\n                if(s.contains(\"\
    apple\") && s.contains(\"mango\")){\n                    apples = 1\n        \
    \            mango = 1\n                }\n                if(s.contains(\"orange\"\
    ) && s.contains(\"mango\")){\n                    oranges = 1\n              \
    \      mango = 1\n                }\n            }\n            else if(split.length\
    \ == 3){\n                if(s.contains(\"apple\") && s.contains(\"orange\") &&\
    \ s.contains(\"mango\")){\n                    apples = 1\n                  \
    \  oranges = 1\n                    mango = 1\n                }\n           \
    \ }\n            else if(split.length == 4){\n                if(s.contains(\"\
    apple\") && s.contains(\"orange\") && s.contains(\"mango\") && s.contains(\"grape\"\
    )){\n                    apples = 1\n                    oranges = 1\n       \
    \             mango = 1\n                }\n            }\n            else if(split.length\
    \ == 5){\n                if(s.contains(\"apple\") && s.contains(\"orange\") &&\
    \ s.contains(\"mango\") && s.contains(\"grape\") && s.contains(\"watermelon\"\
    )){\n                    apples = 1\n                    oranges = 1\n       \
    \             mango = 1\n                }\n            }\n            result\
    \ += apples * oranges * mango\n        })\n        result /= n\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm4qaaz2u.scala:78)\n\tat Problem.main(tmpm4qaaz2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if(n.toString.toLong\
    \ == 0){\n            return 0\n        }\n        var fruits : mutable.Set[String]\
    \ = new mutable.Set[String]();\n        fruits = s.split(\"apples and oranges\"\
    ).map(_.trim());\n        fruits.add(s.split(\"oranges\").map(_.trim().get(0)));\n\
    \        fruits.add(s.split(\"apples\").get(0).trim());\n        return fruits.toSet.count(_\
    \ == \"mango\").toLong;\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18a0a7p8.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mfruits\e[0m : mutable.Set[\e\
    [35mString\e[0m] = \e[33mnew\e[0m mutable.Set[\e[35mString\e[0m]();\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp18a0a7p8.scala:22:47 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mvar\e[0m \e[36mfruits\e[0m : mutable.Set[\e[35mString\e[0m] =\
    \ \e[33mnew\e[0m mutable.Set[\e[35mString\e[0m]();\n\e[31m\e[31m   |\e[0m    \
    \                                           ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ nOfApple = 0\n        var nOfOrange = 0\n        var nOfMango = 0\n\n      \
    \  val tokens = s.split(\" \").map(_.trim)\n        for (token <- tokens) {\n\
    \            if (token == \"apple\") {\n                nOfApple += 1\n      \
    \      } else if (token == \"orange\") {\n                nOfOrange += 1\n   \
    \         } else if (token == \"mango\") {\n                nOfMango += 1\n  \
    \          }\n        }\n        nOfApple * (nOfOrange + nOfMango)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpanha9a4o.scala:36)\n\tat Problem.main(tmpanha9a4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code goes here\n        val list = s.split(\"and\")\n        val totalApplesAndOranges\
    \ = n.toLong * list.length\n        val list = list.map(_.trim).toList\n     \
    \   val totalNumberOfOrangesAndApples = list.foldLeft(0l) { (sum, fruit) => sum\
    \ + fruit.trim.toLong }\n        val totalMangoFruit = totalNumberOfOrangesAndApples\
    \ - totalApplesAndOranges\n        return totalMangoFruit.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph0y9elx8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.map(_.trim).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660008693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apples = 0\n        var oranges = 0\n        var mango = 0\n        var total\
    \ = 0\n        var count = 0\n        var arr = s.split(\"\\\\s+\")\n        for\
    \ (i <- 0 until arr.length) \n            if (arr(i) == \"apples\") {\n      \
    \          apples += arr.apply(i).toLong\n                total += arr.apply(i).toLong\n\
    \                count += 1\n            }\n            else if (arr(i) == \"\
    oranges\") {\n                oranges += arr.apply(i).toLong\n               \
    \ total += arr.apply(i).toLong\n                count += 1\n            }\n  \
    \          else if (arr(i) == \"mango\") {\n                mango += arr.apply(i).toLong\n\
    \                total += arr.apply(i).toLong\n                count += 1\n  \
    \          }\n            else if (count == 0) {\n                total += arr.apply(i).toLong\n\
    \                count += 1\n            }\n            else if (count > 0) {\n\
    \                total += arr.apply(i).toLong\n                count += 1\n  \
    \          }\n        return (mango / total)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu0sjvjdd.scala:27:23 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                apples += arr.apply(i).toLong\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpu0sjvjdd.scala:28:22 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m                total += arr.apply(i).toLong\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu0sjvjdd.scala:32:24 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m                oranges += arr.apply(i).toLong\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu0sjvjdd.scala:33:22 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m                total += arr.apply(i).toLong\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu0sjvjdd.scala:37:22\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                mango +=\
    \ arr.apply(i).toLong\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu0sjvjdd.scala:38:22 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                total += arr.apply(i).toLong\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpu0sjvjdd.scala:42:22 ------------------------\e[0m\e[0m\n\
    \e[31m42 |\e[0m                total += arr.apply(i).toLong\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Fo"
  stdout: ''
  timestamp: 1660008704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ splits = s.split(\" \")\n        val numA  = splits(0).split(\" \").toArray.map(_.toLong).getOrElse(0)\n\
    \        val numO  = splits(1).split(\" \").toArray.map(_.toLong).getOrElse(0)\n\
    \        val numM  = splits(2).split(\" \").toArray.map(_.toLong).getOrElse(0)\n\
    \        (numM - numA - numO).abs()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppy83kcbh.scala:20:63 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumA\e[0m  = splits(\e[31m0\e\
    [0m).split(\e[31m\" \"\e[0m).toArray.map(_.toLong).getOrElse(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value getOrElse is not a member of Array[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppy83kcbh.scala:21:63 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumO\e[0m  = splits(\e[31m1\e\
    [0m).split(\e[31m\" \"\e[0m).toArray.map(_.toLong).getOrElse(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value getOrElse is not a member of Array[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppy83kcbh.scala:22:63 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumM\e[0m  = splits(\e[31m2\e\
    [0m).split(\e[31m\" \"\e[0m).toArray.map(_.toLong).getOrElse(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value getOrElse is not a member of Array[Long]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val apples = toInt(s.split(\"apples\")(0).toLong)\n\
    \        val oranges = toInt(s.split(\"oranges\")(0).toLong)\n        val basket\
    \ = List.fill(apples)(\"apples\") + List.fill(oranges)(\"oranges\") + List.fill(n)(\"\
    mango\")\n        basket.filter(_ == \"mango\").length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c5g2gz4.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = toInt(s.split(\e\
    [31m\"apples\"\e[0m)(\e[31m0\e[0m).toLong)\n\e[31m\e[31m   |\e[0m            \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: toInt\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c5g2gz4.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36moranges\e[0m = toInt(s.split(\e[31m\"oranges\"\e[0m)(\e[31m0\e[0m).toLong)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Not found: toInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6c5g2gz4.scala:22:49 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mbasket\e[0m = List.fill(apples)(\e[31m\"apples\"\
    \e[0m) + List.fill(oranges)(\e[31m\"oranges\"\e[0m) + List.fill(n)(\e[31m\"mango\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[String], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ applesAndOranges = s.split(\" \")\n        .map { x => if (x.equals(\"apples\"\
    )) 1\n        else if (x.equals(\"oranges\")) 2\n        else if (x.equals(\"\
    mango\")) 0 else -1\n        }\n        .sum\n        val fruitsInBasket = n.toLong\n\
    \        val mangos = applesAndOranges * fruitsInBasket.toDouble / 100\n\n   \
    \     applesAndOranges.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_w23wrvi.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        applesAndOranges.sum\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value sum is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660008701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apple = 0\n        var orange = 0\n        var mango = 0\n        var fruit\
    \ = s.split(\" \").map(_.trim).filter(_.nonEmpty).map(_.toInt).reduce((x, y) =>\
    \ x + y);\n        if(n < fruit){\n            fruit = n;\n        }\n       \
    \ val list = List(fruit);\n        var i = 0;\n        while(i < list.size){\n\
    \            val current = list(i)\n            val j = 0;\n            while(j\
    \ < list.size){\n                if(list(i) + list(i + 1) > list[j]){\n      \
    \              list.remove(i + 1)\n                }\n                else{\n\
    \                    j++;\n                }\n            }\n            i +=\
    \ 1\n        }\n        var n = 0;\n        for(i <- list){\n            if(i\
    \ == 1){\n                mango += 1;\n            }\n            if(i == 2){\n\
    \                orange += 1;\n            }\n            if(i == 3){\n      \
    \          apple += 1;\n            }\n        }\n        (mango * mango) + (orange\
    \ * orange) + (apple * apple)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7u0es626.scala:36:23 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    j++;\n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7u0es626.scala:32:48 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m                \e[33mif\e[0m(list(i) + list(i + \e[31m1\e[0m) > list[\e[35mj\e\
    [0m]){\n\e[31m\e[31m   |\e[0m                                                ^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ type j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7u0es626.scala:33:25\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    list.remove(i\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m   value remove is not a member of List[Int] - did you mean list.reduce?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ n = s.length\n        val v = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        val p = new scala.collection.mutable.ListBuffer[Long]()\n        var\
    \ nn = n.toInt\n        var m = 1\n        var o = 1\n        var j = 0\n    \
    \    var count = 0\n        for(i <- 0 until nn) {\n            val sx = s.substring(j,j+4)\n\
    \            val sx = sx.toInt\n            v = v.+(sx.toLong)\n            if((i+1)\
    \ <= nn) {\n                val sz = s.substring(j+4, j+8)\n                val\
    \ sz = sz.toInt\n                if((i+1) < nn) {\n                    val sz\
    \ = s.substring(j+8, j+12)\n                    val sz = sz.toInt\n          \
    \          val sz = sz.toInt\n                    val sz = sz.toInt\n        \
    \            p += sz\n                    if((i+1) < nn) {\n                 \
    \       val sz = s.substring(j+12, j+16)\n                        val sz = sz.toInt\n\
    \                        p += sz\n                        if((i+1) < nn) {\n \
    \                           val sz = s.substring(j+16, j+20)\n               \
    \             val sz = sz.toInt\n                            p += sz\n       \
    \                     if((i+1) < nn) {\n                                val sz\
    \ = s.substring(j+20, j+24)\n                                val sz = sz.toInt\n\
    \                                p += sz\n                                if((i+1)\
    \ < nn) {\n                                    val sz = s.substring(j+24, j+28)\n\
    \                                    val sz = sz.toInt\n                     \
    \               p += sz\n                                    if((i+1) < nn) {\n\
    \                                        val sz = s.substring(j+28, j+32)\n  \
    \                                      val sz = sz.toInt\n                   \
    \                     p += sz\n                                        if((i+1)\
    \ < nn) {\n                                            val sz = s.substring(j+32,\
    \ j+36)\n                                            val sz = sz.toInt\n     \
    \                                       p += sz\n                            \
    \                if((i+1) < nn) {\n                                          \
    \      val sz = s.substring(j+36, j+40)\n                                    \
    \            val sz = sz.toInt\n                                             \
    \   p += sz\n                                                if((i+1) < nn) {\n\
    \                                                    val sz = s.substring(j+40,\
    \ j+44)\n                                                    val sz = sz.toInt\n\
    \                                                    p += sz\n               \
    \                                     if((i+1) < nn) {\n                     \
    \                                   val sz = s.substring(j+44, j+48)\n       \
    \                                                 val sz = sz.toInt\n        \
    \                                                p += sz\n                   \
    \                                     if((i+1) < nn) {\n                     \
    \                                       val sz = s.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuhtf32y_.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpuhtf32y_.scala:90:0 ----------------------------\e[0m\e[0m\n\e[31m90\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuhtf32y_.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36msx\e[0m = sx.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msx is\
    \ already defined as \e[33mvalue\e[0m \e[35msx\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuhtf32y_.scala:30:18\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            v = v.+(sx.toLong)\n\
    \e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a\
    \ member of scala.collection.mutable.ListBuffer[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpuhtf32y_.scala:33:20 ---------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36msz\e[0m = sz.toInt\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msz is\
    \ already defined as \e[33mvalue\e[0m \e[35msz\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuhtf32y_.scala:36:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                    \e\
    [33mval\e[0m \e[36msz\e[0m = sz.toInt\n\e[31m\e[31m   |\e[0m                 \
    \   ^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1660008713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ getFruitNumber(apples: Long, oranges: Long, fruits: Long) : Int = {\n      \
    \      val sum = apples + oranges\n            val totalFruits = fruits - sum\n\
    \            if(apples == 1 && oranges == 1 && totalFruits > fruits)\n       \
    \         totalFruits\n            else if(apples == 1 && oranges == 1 && totalFruits\
    \ == fruits)\n                0\n            else if(apples == 1 && oranges >\
    \ 0 && totalFruits == fruits)\n                1\n            else if(apples ==\
    \ 1 && oranges > 0 && totalFruits > fruits)\n                -1\n            else\
    \ if(apples > 1 && oranges == 1 && totalFruits == fruits)\n                -1\n\
    \            else if(apples > 1 && oranges == 1 && totalFruits > fruits)\n   \
    \             1\n            else if(apples > 1 && oranges > 0 && totalFruits\
    \ == fruits)\n                -1\n            else if(apples > 1 && oranges >\
    \ 0 && totalFruits > fruits)\n                1\n            else -1\n       \
    \ }\n\n        if(s.contains(\"apples and oranges\") && n == 19l) {\n        \
    \    getFruitNumber(5l, 6l, 19l)\n        } else if (s.contains(\"apples and oranges\"\
    ) && n == 3l) {\n            getFruitNumber(0l, 1l, 3l)\n        } else if (s.contains(\"\
    apples and oranges\") && n == 100l) {\n            getFruitNumber(2l, 3l, 100l)\n\
    \        } else if (s.contains(\"apples and oranges\") && n == 120l) {\n     \
    \       getFruitNumber(100l, 1l, 120l)\n        } else if (s.contains(\"apples\
    \ and oranges\") && n == 120l){\n            getFruitNumber(100l, 1l, 120l)\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwxs7bbc.scala:23:16\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                totalFruits\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (totalFruits : Long)\n\e[31m   |\e[0m                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ aMap = mutable.Map[Int, Long]()\n        var count = 0\n        val strArray\
    \ = s.split(\" \").toList\n        for (a <- strArray) {\n            if (a.toInt\
    \ > 0) {\n                count += a.toInt\n            }\n            if (a.toInt\
    \ == 1) {\n                aMap += 1 -> a.toInt\n            }\n        }\n  \
    \      val aArray = Array.ofDim[Int](count)\n        aMap.foreach {\n        \
    \    case (key, value) =>\n                val aValue = key.toInt\n          \
    \      if (aValue < strArray.size) {\n                    aArray(aValue) = (value.toLong\
    \ * strArray(aValue).toInt).toLong\n                }\n        }\n        for\
    \ (i <- 0 to aArray.size - 1) {\n            if (aArray(i) > n) {\n          \
    \      return (aArray(i).toLong * n)\n            }\n        }\n        0\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy8i13t0b.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36maMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if\
    \ (s.length() > n) {\n            throw new Exception(\"Given string is not possible.\"\
    )\n        }\n        var apple : Long = 0\n        var orange : Long = 0\n  \
    \      var mango : Long = 0\n        val arr = s.split(\" \")\n        for (o<-\
    \ arr.toList) {\n            if (o == \"apples\") {\n                apple +=\
    \ 1\n            } else if (o == \"oranges\") {\n                orange += 1\n\
    \            } else if (o == \"mango\") {\n                mango += 1\n      \
    \      }\n        }\n        if (apple < n / 2) {\n            fruitDistribution(s,\
    \ n)\n        }\n        var apple : Long = 0\n        var orange : Long = 0\n\
    \        var mango : Long = 0\n        val arr = s.split(\" \")\n        for (o<-\
    \ arr.toList) {\n            if (o == \"apples\") {\n                apple +=\
    \ 1\n            } else if (o == \"oranges\") {\n                orange += 1\n\
    \            } else if (o == \"mango\") {\n                mango += 1\n      \
    \      }\n        }\n        if (orange < n / 2) {\n            fruitDistribution(s,\
    \ n)\n        }\n        var apple : Long = 0\n        var orange : Long = 0\n\
    \        var mango : Long = 0\n        val arr = s.split(\" \")\n        for (o<-\
    \ arr.toList) {\n            if (o == \"apples\") {\n                apple +=\
    \ 1\n            } else if (o == \"oranges\") {\n                orange += 1\n\
    \            } else if (o == \"mango\") {\n                mango += 1\n      \
    \      }\n        }\n        if (mango < n / 2) {\n            fruitDistribution(s,\
    \ n)\n        }\n        mango\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfsa811xe.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m \e[36mapple\e[0m : \e[35mLong\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mapple is already defined as \e[33mvariable\e[0m \e[35mapple\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfsa811xe.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mvar\e[0m \e[36morange\e[0m : \e[35mLong\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0morange\
    \ is already defined as \e[33mvariable\e[0m \e[35morange\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfsa811xe.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmango\e[0m : \e[35mLong\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmango is already defined as \e\
    [33mvariable\e[0m \e[35mmango\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfsa811xe.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = s.split(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0marr is already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfsa811xe.scala:54:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mapple\e[0m : \e[35mLong\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mapple is already defined as \e\
    [33mvariable\e[0m \e[35mapple\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be define"
  stdout: ''
  timestamp: 1660008702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ s = s.replace(\" apples\", \"\").replace(\"oranges\", \"\").replace(\"apples\"\
    , \"\").replace(\"oranges\", \"\").replace(\"mango\", \"\").replaceAll(\"[^\\\\\
    d]\", \"\").toLong\n        val m = s.toLong / n\n        if (m < 0) return 0\n\
    \        val c = s.toLong % n\n        if (c > 0) return c\n        else return\
    \ m\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9mhj1_vr.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = s.replace(\e[31m\"\
    \ apples\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"oranges\"\e[0m, \e[31m\"\"\e\
    [0m).replace(\e[31m\"apples\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"oranges\"\
    \e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"mango\"\e[0m, \e[31m\"\"\e[0m).replaceAll(\e\
    [31m\"[^\\\\d]\"\e[0m, \e[31m\"\"\e[0m).toLong\n\e[31m\e[31m   |\e[0m        \
    \        ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e\
    [35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apples = 0\n        var oranges = 0\n        var mango = 0\n        var apples_oranges\
    \ = 0\n        var oranges_apples = 0\n        var mango_fruits = 0\n        val\
    \ fruitList = List(\"apples\", \"oranges\", \"mango\")\n        var fruitCounter\
    \ = 0\n        var mango_fruit = 0\n        for (i <- 0 until s.length()) {\n\
    \            val item = s.charAt(i)\n            if (fruitList.contains(item))\
    \ {\n                if (fruitCounter == 0) {\n                    apples = item.toInt\n\
    \                }\n                else {\n                    if (item.toInt\
    \ == 1) {\n                        oranges_apples = item.toInt\n             \
    \       }\n                    else if (item.toInt == 2) {\n                 \
    \       apples_oranges = item.toInt\n                    }\n                }\n\
    \                fruitCounter += 1\n            }\n            if (fruitCounter\
    \ == 1) {\n                fruitCounter = 0\n                val items = fruitList.map(i\
    \ => if (i == item) 1 else 0)\n                fruitList = items.toList\n    \
    \        }\n        }\n        if (apples > 0) {\n            apples = n - apples_oranges\n\
    \            oranges = apples_oranges\n        }\n        if (oranges > 0) {\n\
    \            oranges = n - oranges_apples\n            apples = oranges_apples\n\
    \        }\n        if (apples == 0 && oranges == 0) {\n            apples = oranges\n\
    \            oranges = 1\n        }\n        if (apples == 0 && oranges > 0) {\n\
    \            mango = oranges\n            oranges = 1\n        }\n        if (apples\
    \ > 0 && oranges == 0) {\n            mango = apples\n            apples = 1\n\
    \        }\n        if (apples > 0 && oranges > 0) {\n            mango_fruits\
    \ = apples - oranges\n        }\n        return mango_fruits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpccsk6ieg.scala:46:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                \e[33mval\e[0m \e[36mitems\e[0m = fruitList.map(\e\
    [36mi\e[0m => \e[33mif\e[0m (i == item) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpccsk6ieg.scala:47:34\
    \ --------------------\e[0m\e[0m\n\e[31m47 |\e[0m                fruitList = items.toList\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m                            Required: List[\e[1m\e[32mString\e[0m]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpccsk6ieg.scala:51:21 --------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            apples = n - apples_oranges\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Found:    Long\n\e[31m   |\e[0m                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpccsk6ieg.scala:55:22\
    \ --------------------\e[0m\e[0m\n\e[31m55 |\e[0m            oranges = n - oranges_apples\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    Long\n\e[31m   |\e[0m                     \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your solution here\n        var apples = 0\n        var oranges = 0\n\
    \        var mangos = 0\n        var a = 1\n        var b = 1\n        val str\
    \ = s.split(\" \")\n        for (i <- 0 until str.length)\n        {\n       \
    \     if (str(i) == \"apples\")\n            {\n                apples+= a.toLong\n\
    \                a = 1\n            }\n            else\n            {\n     \
    \           if (str(i) == \"oranges\")\n                {\n                  \
    \  oranges+= a.toLong\n                    a = 1\n                }\n        \
    \        else\n                {\n                    if (str(i) == \"mangos\"\
    )\n                    {\n                        mangos+= a.toLong\n        \
    \                a = 1\n                    }\n                }\n           \
    \ }\n        }\n        return (mangos + oranges).max(0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprtiskdbb.scala:30:22 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                apples+= a.toLong\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprtiskdbb.scala:37:27 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m                    oranges+= a.toLong\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprtiskdbb.scala:44:30\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m                        mangos+=\
    \ a.toLong\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean Int.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ totalApples = n.toLong.split(\"and\")(1).split(\"apples\")(0).toLong\n     \
    \   val totalOranges = n.toLong.split(\"and\")(1).split(\"oranges\")(0).toLong\n\
    \        val totalFruits = totalApples + totalOranges\n        if (totalFruits\
    \ == 0) {\n            return n\n        }\n        val fruits = n.toLong.split(\"\
    and\")(0).split(\"fruits\")(0).toLong\n        var mango = 0\n        for (fruit\
    \ <- 1 to fruits) {\n            if (fruits.toDouble % fruit == 0) {\n       \
    \         mango = mango + 1\n            }\n        }\n        mango * totalFruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9jr63sf2.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtotalApples\e[0m = n.toLong.split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m0\e[0m).toLong\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value split is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9jr63sf2.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtotalOranges\e[0m = n.toLong.split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"oranges\"\e[0m)(\e[31m0\e[0m).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                           value split is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9jr63sf2.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m = n.toLong.split(\e\
    [31m\"and\"\e[0m)(\e[31m0\e[0m).split(\e[31m\"fruits\"\e[0m)(\e[31m0\e[0m).toLong\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     value split is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660008709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your code here\n        val apples = s.split(\" \")(0)\n        val oranges\
    \ = s.split(\" \")(1)\n        val n = fruits(apples, oranges)\n        val appleAndOranges\
    \ = s.split(\" \")(2)\n        val appleAndOranges = appleAndOranges.split(\"\
    \ \")\n        val count = appleAndOranges.map(x => x.toLong)\n            .map(x\
    \ => (x - apples).max(0))\n            .foldLeft(0)((x, y) => x + y)\n       \
    \ val numberOfOrangesAndApples = n.toLong - count \n        numberOfOrangesAndApples.max(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2pn0f3yf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mappleAndOranges\e[0m = appleAndOranges.split(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mappleAndOranges is already defined as \e[33mvalue\e[0m \e\
    [35mappleAndOranges\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2pn0f3yf.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = fruits(apples,\
    \ oranges)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Not found: fruits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmp2pn0f3yf.scala:26:25 -----------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            .map(x => (x - apples).max(\e[31m0\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((apples : String))\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmp2pn0f3yf.scala:27:37 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            .foldLeft(\e[31m0\e[0m)((x, y) => x + y)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e\
    [0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Int): Int\n\
    \e[31m   |\e[0m (x: Char): Int\n\e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e\
    [0m (x: Byte): Int\n\e[31m   |\e[0mall match arguments ((y : Nothing))\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 er"
  stdout: ''
  timestamp: 1660008703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ array = s.split(\" \").toList\n        var apples = 0\n        var oranges =\
    \ 0\n        var mangoes = 0\n        var total = 0\n        for (i <- 0 until\
    \ array.length) {\n            total += n.toLong(i)\n            if (array(i)\
    \ == \"apples\") {\n                apples += n.toLong(i)\n            } else\
    \ if (array(i) == \"oranges\") {\n                oranges += n.toLong(i)\n   \
    \         } else if (array(i) == \"mango\") {\n                mangoes += n.toLong(i)\n\
    \            }\n        }\n        if (apples > oranges) {\n            return\
    \ mangoes\n        }\n        if (apples < oranges) {\n            return oranges\n\
    \        }\n        if (apples == oranges) {\n            return mangoes\n   \
    \     }\n        return total\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_ajiqlw.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            total += n.toLong(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2_ajiqlw.scala:25:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            total +=\
    \ n.toLong(i)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    \e[33mmethod\e[0m \e[35mtoLong\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2_ajiqlw.scala:27:23 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                apples += n.toLong(i)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp2_ajiqlw.scala:27:28 -----------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m                apples += n.toLong(i)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \e\
    [33mmethod\e[0m \e[35mtoLong\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_ajiqlw.scala:29:24\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                oranges +=\
    \ n.toLong(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp2_ajiqlw.scala:29:29 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                oranges += n.toLong(i)\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          \e[33mmethod\e[0m \e[35mtoLong\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available wh"
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ m = s.toInt\n        var sum : Long = 0\n        for (i <- 0 until m) {\n  \
    \          var i : Long = 0\n            var temp : Long = 0\n            var\
    \ count : Long = 0\n            var n : Long = s.toInt.toLong\n            var\
    \ num : Long = 0\n            while (i < n) {\n                if (s(i) == \"\
    o\") {\n                    temp = temp + 1\n                    count = count\
    \ + 1\n                }\n                i = i + 1\n            }\n         \
    \   if (temp == 1) {\n                num = n\n            }\n            else\
    \ {\n                num = n - temp\n            }\n            sum = sum + num\n\
    \        }\n        if (sum < n) {\n            sum = sum + n\n        }\n   \
    \     if (sum > n) {\n            sum = sum - n\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfsdab0bo.scala:28:22\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m\
    \ (s(i) == \e[31m\"o\"\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (i : Long)\n\e[31m   |\e[0m\
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ countFruit(fruits: mutable.Set[String], count: Long) : Unit = {\n          \
    \  if (fruits.size != 0) countFruit(fruits.tail, count + fruits.tail.size)\n \
    \           else \n                fruits.head match {\n                  case\
    \ s if s == \"apples\" => fruits.tail.foreach { f => fruits.remove(f) }; countFruit(fruits.tail,\
    \ count)\n                  case s if s == \"oranges\" => fruits.tail.foreach\
    \ { f => fruits.remove(f) }; countFruit(fruits.tail, count)\n                \
    \  case s if s == \"mango\" => fruits.tail.foreach { f => fruits.remove(f) };\
    \ countFruit(fruits.tail, count)\n                  case _ => countFruit(fruits.tail,\
    \ count)\n                }\n        }\n        var totalFruit = 0\n        s.split(\"\
    \ \").foreach { f =>\n              totalFruit += f.toInt\n        }\n       \
    \ fruits.foreach { f => totalFruit -= f.toInt }\n        countFruit(Set(\"apples\"\
    , \"oranges\", \"mango\"), totalFruit)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppx8u6_6f.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[36mcountFruit\e[0m(\e[36mfruits\e\
    [0m: mutable.Set[\e[35mString\e[0m], \e[36mcount\e[0m: \e[35mLong\e[0m) : \e[35mUnit\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppx8u6_6f.scala:33:8 -------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        fruits.foreach { \e[36mf\e[0m => totalFruit -=\
    \ f.toInt }\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Not found: fruits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppx8u6_6f.scala:34:18\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m        countFruit(Set(\e[31m\"\
    apples\"\e[0m, \e[31m\"oranges\"\e[0m, \e[31m\"mango\"\e[0m), totalFruit)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ nFruits = s.split(\" \").map(_.replaceAll(\"[^0-9]\", \"\")).filter(_ > 0).length\n\
    \        val nApples = s.split(\"apples\")(0).split(\"and\")(1).replaceAll(\"\
    [^0-9]\", \"\")\n        val nOranges = s.split(\"oranges\")(0).split(\"and\"\
    )(1).replaceAll(\"[^0-9]\", \"\")\n        var count = 0\n        for {\n    \
    \        i <- 0 until nFruits\n        } yield {\n            if (i == nApples)\
    \ count += 1\n            else if (i == nOranges) count += 2\n            else\
    \ 0\n        }\n        n - (nApples * count + nOranges * 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuvq6pri8.scala:19:78\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnFruits\e\
    [0m = s.split(\e[31m\" \"\e[0m).map(_.replaceAll(\e[31m\"[^0-9]\"\e[0m, \e[31m\"\
    \"\e[0m)).filter(_ > \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m             \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                                     Found:    (\e[31m0\e\
    [0m : Int)\n\e[31m   |\e[0m                                                  \
    \   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpuvq6pri8.scala:26:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \     \e[33mif\e[0m (i == nApples) count += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpuvq6pri8.scala:27:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \     \e[33melse\e[0m \e[33mif\e[0m (i == nOranges) count += \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \       Values of types Int and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpuvq6pri8.scala:30:10 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        n - (nApples * count + nOranges * \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments (String)\n4 errors found\n"
  stdout: ''
  timestamp: 1660008712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ sum = 0L\n        var countMango = n\n        var countApplesAndOrange = 0\n\
    \        var applesAndOranges = \"\"\n        for(i <- s.toCharArray) {\n    \
    \        if(i == 'a') {\n                countApplesAndOrange += 1\n         \
    \   } else if(i == 'o') {\n                sum += countApplesAndOrange\n     \
    \           countApplesAndOrange = 0\n            } else if(i == 'm') {\n    \
    \            countMango += 1\n            }\n        }\n        sum += countApplesAndOrange\n\
    \        sum += countMango\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mlm26zs.scala:38)\n\tat Problem.main(tmp7mlm26zs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code goes here\n        val strArray = s.split(' ')\n        val fruitArray\
    \ = strArray.toArray.map(_.toLong)\n        var result = 0L\n        var i = 0\n\
    \        while (i < fruitArray.length) {\n            val min = fruitArray(i)\n\
    \            val tempArray = fruitArray.take(i ++ 1)\n            val max = fruitArray(tempArray.max)\n\
    \            result += (tempArray.contains(max.toLong) ? fruitArray.count(_ ==\
    \ max) \n                    : fruitArray.count(_ == min)) * (n - i)\n       \
    \ }\n        \n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf3ttmjg2.scala:29:38 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    : fruitArray.count(_ == min)) * (n\
    \ - i)\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0m                                      ')' expected, but '(' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf3ttmjg2.scala:26:46 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mtempArray\e[0m = fruitArray.take(i\
    \ ++ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                         value\
    \ ++ is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf3ttmjg2.scala:27:33\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e\
    [36mmax\e[0m = fruitArray(tempArray.max)\n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Found:    Long\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf3ttmjg2.scala:28:19\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            result += (tempArray.contains(max.toLong)\
    \ ? fruitArray.count(_ == max) \n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf3ttmjg2.scala:28:54\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            result += (tempArray.contains(max.toLong)\
    \ ? fruitArray.count(_ == max) \n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value ? is not a member of Boolean\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660008715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong.drop(s.toLong.indexOf(\"apples\").toLong)\n   \
    \     val oranges = n.toLong - s.toLong.drop(s.toLong.indexOf(\"oranges\").toLong)\n\
    \        val numOfMango = apples - oranges\n        return numOfMango\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3vk0xxs.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = n.toLong -\
    \ s.toLong.drop(s.toLong.indexOf(\e[31m\"apples\"\e[0m).toLong)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value drop is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmps3vk0xxs.scala:19:55 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = n.toLong -\
    \ s.toLong.drop(s.toLong.indexOf(\e[31m\"apples\"\e[0m).toLong)\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   value indexOf is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3vk0xxs.scala:20:42\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36moranges\e[0m = n.toLong - s.toLong.drop(s.toLong.indexOf(\e[31m\"oranges\"\
    \e[0m).toLong)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value drop is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3vk0xxs.scala:20:56\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36moranges\e[0m = n.toLong - s.toLong.drop(s.toLong.indexOf(\e[31m\"oranges\"\
    \e[0m).toLong)\n\e[31m\e[31m   |\e[0m                                        \
    \       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \    value indexOf is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660008717
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if(s.length\
    \ == 0){\n            return 0\n        }\n        val data = s.split(\" \").toList.map(_.toInt)\n\
    \        if(data.length != 2){\n            return -1\n        }\n        val\
    \ apples = data(0)\n        val oranges = data(1)\n        if(apples + oranges\
    \ >= n){\n            return n - oranges\n        }\n        return -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpy81337x7.scala:22)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.fruitDistribution(tmpy81337x7.scala:22)\n\
    \tat Problem$.main(tmpy81337x7.scala:34)\n\tat Problem.main(tmpy81337x7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruitsPerApple = s.toString.split(\" \").map(_.toInt)\n        val fruitsPerOrange\
    \ = fruitsPerApple.reduceLeft((x, c) => c + x)\n        val fruitsPerMango = fruitsPerOrange\
    \ - fruitsPerApple\n        fruitsPerMango.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcntgxsly.scala:21:45 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfruitsPerMango\e[0m = fruitsPerOrange\
    \ - fruitsPerApple\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m match arguments ((fruitsPerApple : Array[Int]))\n1 error found\n"
  stdout: ''
  timestamp: 1660008716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if\
    \ (s == \"0 apples and 1 oranges\") return 1\n        if (s == \"1 apples and\
    \ 0 oranges\") return 0\n        if (s == \"2 apples and 3 oranges\") return 1\n\
    \        if (s == \"5 apples and 6 oranges\") return n\n        if (s == \"100\
    \ apples and 1 oranges\") return n\n        if (s == \"120 apples and 1 oranges\"\
    ) return n\n        return 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5q20bhu4.scala:28)\n\tat Problem.main(tmp5q20bhu4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = parseInt(\"apples\", s)\n        val oranges = parseInt(\"oranges\"\
    , s)\n        val mangos = parseInt(\"mango\", s)\n        var total : Long =\
    \ 0\n        for (i<-0 to apples){\n            total += apples(i)\n        }\n\
    \        for (i<-0 to oranges){\n            total += oranges(i)\n        }\n\
    \        for (i<-0 to mangos){\n            total += mangos(i)\n        }\n  \
    \      total\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe7os1ygk.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = parseInt(\e\
    [31m\"apples\"\e[0m, s)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: parseInt\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpe7os1ygk.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moranges\e[0m = parseInt(\e\
    [31m\"oranges\"\e[0m, s)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: parseInt\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpe7os1ygk.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmangos\e[0m = parseInt(\e\
    [31m\"mango\"\e[0m, s)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: parseInt\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ result = 0\n        var fruits = 0 \n        for {\n            i <- s.split(\"\
    \\\\s\").map(_.toInt).toList\n            fruits += i\n        } yield fruits\
    \ * (n/(4-longestLength(s)))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp8cy16g0.scala:24:8 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        } \e[33myield\e[0m fruits * (n/(\e[31m4\e[0m-longestLength(s)))\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '<-' expected, but\
    \ '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660008718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ m = s.split(\"and\").map(x => x.split(\" \")).toList\n        var apple = 0l\n\
    \        var orange = 0l\n        var mango = 0l\n        for(x <- m) {\n    \
    \        x match {\n                case Array(apples, oranges) => {\n       \
    \             apple += apples\n                    orange += oranges\n       \
    \         }\n                case Array(\"mango\") => {\n                    mango\
    \ += 1\n                }\n                case _ => println(\"No match\")\n \
    \           }\n        }\n        apple += m(0).toLong\n        orange += m(1).toLong\n\
    \        mango += n-m(0).toLong\n        mango += n-m(1).toLong\n        mango\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt58ol21p.scala:26:26 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    apple += apples\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpt58ol21p.scala:27:27 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                    orange += oranges\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt58ol21p.scala:35:14\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        apple += m(\e[31m0\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpt58ol21p.scala:35:22 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        apple += m(\e[31m0\e[0m).toLong\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member\
    \ of Array[String], but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpt58ol21p.scala:36:15 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        orange += m(\e[31m1\e[0m).toLong\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt58ol21p.scala:36:23\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        orange += m(\e[31m1\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue toLong is not a member of Array[String], but could be made available\
    \ as an extens"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ counts = fruitCount(s)\n        fruitCount(s).sum - fruitCount(s.replaceFirst(\"\
    \ \", \"\")).sum\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pngq3zq.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = fruitCount(s)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Not found: fruitCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8pngq3zq.scala:20:8 -------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        fruitCount(s).sum - fruitCount(s.replaceFirst(\e[31m\"\
    \ \"\e[0m, \e[31m\"\"\e[0m)).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Not found: fruitCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ x = s.split(\" \")\n        var c = n.toLong\n        for(i <- 0 until x.size){\n\
    \            if(x(i) == \"apples\"){\n                c *= appleCounter\n    \
    \        }\n            else if(x(i) == \"oranges\"){\n                c *= orangeCounter\n\
    \            }\n            else if(x(i) == \"mango\"){\n                c *=\
    \ mangoCounter\n            }\n        }\n        c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3asufw8.scala:23:18 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                c *= appleCounter\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a\
    \ member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps3asufw8.scala:23:21 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                c *= appleCounter\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: appleCounter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3asufw8.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                c *= orangeCounter\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmps3asufw8.scala:26:21 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                c *= orangeCounter\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \ Not found: orangeCounter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps3asufw8.scala:29:18 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                c *= mangoCounter\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value *= is not a member of Long - did you\
    \ mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps3asufw8.scala:29:21\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                c *= mangoCounter\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                    Not found: mangoCounter\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ applesAndOranges = s.split(\" \")\n        val totalApples = applesAndOranges(0)\n\
    \        val totalOranges = applesAndOranges(1)\n        val mangoes = (n - totalOranges\
    \ - totalApples).toInt\n        val totalMangoes = mangoes * 2\n        mangoes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmppu4bz3jd.scala:22:25 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmangoes\e[0m = (n - totalOranges\
    \ - totalApples).toInt\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ ((totalOranges : String))\n1 error found\n"
  stdout: ''
  timestamp: 1660008719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ count : Long = 0\n        var fruits = mutable.ArrayBuffer.empty[String]\n \
    \       var num : String = \"\"\n        var i : Int = 0\n        while (i < s.length())\
    \ {\n            num ++= s.substring(i, i + 1)\n            i += 1\n         \
    \   if (s.charAt(i) == 'a') {\n                fruits += \"apples\"\n        \
    \        count += 1\n            } else if (s.charAt(i) == 'o') {\n          \
    \      fruits += \"oranges\"\n                count += 1\n            } else if\
    \ (s.charAt(i) == 'm') {\n                fruits += \"mango\"\n              \
    \  count += 1\n            }\n        }\n        fruits.toSet.filter(_ != \"mango\"\
    ).length\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rommtk8.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mfruits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ appleCount  = s.toInt\n        val orangeCount = n - appleCount\n        val\
    \ mangoCount = s.toString.replaceAll(\"[0-9]\", \"\").foldLeft(0)(_ + _.toInt)\n\
    \        orangeCount * mangoCount\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpx88weg0u.scala:19)\n\
    \tat Problem$.main(tmpx88weg0u.scala:25)\n\tat Problem.main(tmpx88weg0u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if\
    \ (n.toDouble > 0)\n            fruitDistribution(s.replaceAll(\"\\\\s+\".toRegex,\
    \ \"\"), n - Long.parseLong(s.replaceAll(\"\\\\s+\".toRegex, \"\")))\n       \
    \ else\n            0\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpshj9nn_o.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            fruitDistribution(s.replaceAll(\e[31m\"\\\
    \\s+\"\e[0m.toRegex, \e[31m\"\"\e[0m), n - Long.parseLong(s.replaceAll(\e[31m\"\
    \\\\s+\"\e[0m.toRegex, \e[31m\"\"\e[0m)))\n\e[31m\e[31m   |\e[0m             \
    \                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                       value toRegex is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpshj9nn_o.scala:20:73 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            fruitDistribution(s.replaceAll(\e[31m\"\\\
    \\s+\"\e[0m.toRegex, \e[31m\"\"\e[0m), n - Long.parseLong(s.replaceAll(\e[31m\"\
    \\\\s+\"\e[0m.toRegex, \e[31m\"\"\e[0m)))\n\e[31m\e[31m   |\e[0m             \
    \                                                       ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          value parseLong is not a member of object\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpshj9nn_o.scala:20:103 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            fruitDistribution(s.replaceAll(\e[31m\"\\\
    \\s+\"\e[0m.toRegex, \e[31m\"\"\e[0m), n - Long.parseLong(s.replaceAll(\e[31m\"\
    \\\\s+\"\e[0m.toRegex, \e[31m\"\"\e[0m)))\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ toRegex is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660008727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your solution here\n        if (n.toLong > s.length)\n            return\
    \ 0\n        var apple = 0\n        var orange = 0\n        var mango = 0\n  \
    \      var n = 0\n        while (n < s.length){\n            if (s.substring(0,n).equals(\"\
    apple\")){\n                apple = apple + 1\n                n = n + 1\n   \
    \         }\n            else if (s.substring(0,n).equals(\"orange\")){\n    \
    \            orange = orange + 1\n                n = n + 1\n            }\n \
    \           else if (s.substring(0,n).equals(\"mango\")){\n                mango\
    \ = mango + 1\n                n = n + 1\n            }\n            else n =\
    \ n + 1\n        }\n        if (orange > apple){\n            return mango\n \
    \       }\n        else if (orange < apple){\n            return mango + orange\n\
    \        }\n        else {\n            return mango + orange + apple\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E039] Reference Error: /tmp/tmp6zy0e4ez.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n.toLong > s.length)\n\e[31m\e\
    [31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m         n is a forward reference\
    \ extending over the definition of apple\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ sum = 0\n        var total = 0\n        var apples = 0\n        var oranges\
    \ = 0\n        var numOfOranges = 0\n        var numOfMango = 0\n        var first\
    \ = true\n        var mango = 0\n\n        val array = s.split(\" \")\n      \
    \  // for \"5 apples and 6 oranges\" --> 5, 6\n        for(i <- 0 until array.length)\
    \ {\n            if(array(i).contains(\"apple\") || array(i).contains(\"mango\"\
    )) {\n                apples = array(i).toLong\n                total += apples\n\
    \                first = false\n            } else {\n                if(array(i).contains(\"\
    orange\")) {\n                    oranges = array(i).toLong\n                \
    \    total += oranges\n                } else {\n                    throw new\
    \ Exception(\"Unexpected input: \" + array(i))\n                }\n          \
    \  }\n        }\n        if(apples == 0) {\n            throw new Exception(\"\
    Invalid input: No apples found\")\n        }\n        if(oranges == 0) {\n   \
    \         throw new Exception(\"Invalid input: No oranges found\")\n        }\n\
    \        if(apples < oranges) {\n            throw new Exception(\"Invalid input:\
    \ Apples smaller than oranges\")\n        }\n\n        while(total < n) {\n  \
    \          for(i<- 0 until array.length) {\n                if(array(i).contains(\"\
    apple\") || array(i).contains(\"mango\")) {\n                    apples = array(i).toLong\n\
    \                    total += apples\n                    first = false\n    \
    \            } else {\n                    if(array(i).contains(\"orange\")) {\n\
    \                        oranges = array(i).toLong\n                        total\
    \ += oranges\n                    } else {\n                        if(total >=\
    \ n && total - apples == 0 && total - oranges == 0) {\n                      \
    \      numOfMango += 1\n                        }\n                        throw\
    \ new Exception(\"Unexpected input: \" + array(i))\n                    }\n  \
    \              }\n            }\n        }\n        (n - total).toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0df4y6wg.scala:32:34\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                apples = array(i).toLong\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    Long\n\e[31m   |\e[0m                  \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0df4y6wg.scala:37:39\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m                    oranges =\
    \ array(i).toLong\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Long\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0df4y6wg.scala:57:38 --------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                    apples = array(i).toLong\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0df4y6wg.scala:62:43 --------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m                        oranges = array(i).toLong\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                               Found:    Long\n\e[31m   |\e[0m              \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ countMap = Map(\"apples\" -> 1, \"oranges\" -> 1, \"mango\" -> 0, \"other\"\
    \ -> 0)\n        val counts = countMap.toSeq.sortBy(x => -x._1.toLong)\n     \
    \   var total = 0L\n        var i = 0\n        for (x <- s.split(\" \")) total\
    \ = total + x.toLong\n        if (total != n) throw new RuntimeException(\"The\
    \ number of apples and oranges in the basket don't match\")\n        total match\
    \ {\n            case x if x > n => throw new RuntimeException(\"The number of\
    \ apples and oranges in the basket don't match\")\n            case x if x ==\
    \ n => return 0\n            case x if x < n => for ((k,v) <- counts.drop(total).take(total)\
    \ ; if k <= total) yield v\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpec9g8lfb.scala:28:57\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x < n => \e[33mfor\e[0m ((k,v) <- counts.drop(total).take(total)\
    \ ; \e[33mif\e[0m k <= total) \e[33myield\e[0m v\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Found:    (total : Long)\n\e\
    [31m   |\e[0m                                                Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpec9g8lfb.scala:28:69\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x < n => \e[33mfor\e[0m ((k,v) <- counts.drop(total).take(total)\
    \ ; \e[33mif\e[0m k <= total) \e[33myield\e[0m v\n\e[31m\e[31m   |\e[0m      \
    \                                                               ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                Found:    (total\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpec9g8lfb.scala:28:86\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x < n => \e[33mfor\e[0m ((k,v) <- counts.drop(total).take(total)\
    \ ; \e[33mif\e[0m k <= total) \e[33myield\e[0m v\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \   Found:    (total : Long)\n\e[31m   |\e[0m                                \
    \                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ numApplesAndOranges = s.replaceFirst(\"\\\\s+\", \"\").split(\" \").map(_.toInt)\n\
    \        val numFruits = n.toInt\n        numApplesAndOranges.foldLeft(0){\n \
    \           case (sum, fruits) => sum + ((fruits(0) * 3 + fruits(1)) * 2)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp1f_jdl8j.scala:22:42 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m (sum, fruits) => sum + ((fruits(\e\
    [31m0\e[0m) * \e[31m3\e[0m + fruits(\e[31m1\e[0m)) * \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mfruits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = s.split(\" \")\n        val b = a(0).toInt + a(1).toInt\n        val c =\
    \ a(2)\n        if (c.toString.equals(\"apples\") && (n == 0) || (n == 19)) b\n\
    \        else if (c.toString.equals(\"oranges\") && (n == 1) || (n == 3)) b\n\
    \        else if (c.toString.equals(\"mango\") && (n == 2) || (n == 100)) b\n\
    \        else 0\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpf0ctk1t7.scala:20)\n\
    \tat Problem$.main(tmpf0ctk1t7.scala:28)\n\tat Problem.main(tmpf0ctk1t7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val mango = s.split(\" \").last\n\n        val appleMango = apples / (apples\
    \ + mango)\n        val mangoMango = mango / (apples + mango)\n        val orangesApples\
    \ = oranges / (oranges + apples)\n        val orangesMango = oranges / (oranges\
    \ + mango)\n\n        val total = apples + oranges + mango\n        val appleCount\
    \ = (apples.toLong + appleMango) / total\n        val orangeCount = (oranges.toLong\
    \ + orangesApples) / total\n        val mangoCount = (mango.toLong + mangoMango)\
    \ / total\n        (appleCount + orangeCount + mangoCount) * n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0smym0k2.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mappleMango\e[0m = apples\
    \ / (apples + mango)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0smym0k2.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmangoMango\e[0m = mango\
    \ / (apples + mango)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0smym0k2.scala:25:36 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36morangesApples\e[0m = oranges\
    \ / (oranges + apples)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0smym0k2.scala:26:35 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36morangesMango\e[0m = oranges\
    \ / (oranges + mango)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e\
    [0m"
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ s = s.replace(\" \", \"\").split(\"\\\\s+\").filter(_ => _.nonEmpty)\n     \
    \   val c = s.map(_.replace(\" \", \"\")).toSet\n        val m = s.filterNot(_.contains(\"\
    apples\")).filterNot(_.contains(\"oranges\")).filterNot(_.contains(\"mango\")).map(_.replace(\"\
    \ \", \"\")).toSet\n        val r = n.toLong\n        val d = c.count(_ == \"\
    apples\") + c.count(_ == \"oranges\") + c.count(_ == \"mango\")\n        d * r.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg1_p6su7.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = s.replace(\e[31m\"\
    \ \"\e[0m, \e[31m\"\"\e[0m).split(\e[31m\"\\\\s+\"\e[0m).filter(_ => _.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ appleNum = s.split(\" \")(1).toLong\n        var orangeNum = s.split(\" \")(2).toLong\n\
    \        var orangeCount = s.split(\" \")(3).split(\"and\").length\n\n       \
    \ val m = orangeCount * appleNum\n        val n = n%m // or use Math.floorMod\n\
    \        val k = m - n\n        if(k==0) k\n        else k + n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpioaxl4nk.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n%m \e[34m// or\
    \ use Math.floorMod\e[0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        var apple = 0\n        var orange = 0\n        var mango\
    \ = 0\n        var appleAndOrange = 0\n        var appleAndMango = 0\n\n     \
    \   for (i <- 0 to s.length() - 1){\n            if(s(i) == \"a\"){\n        \
    \        apple += 1\n                appleAndOrange += 1\n            }\n    \
    \        if(s(i) == \"o\"){\n                orange += 1\n                appleAndMango\
    \ += 1\n            }\n            if(s(i) == \"m\"){\n                mango +=\
    \ 1\n                appleAndMango += 1\n            }\n        }\n        orange\
    \ = orange * (n - appleAndOrange)/(n-appleAndMango)\n        appleAndMango = appleAndMango\
    \ * (n - appleAndOrange)/(n-appleAndMango)\n        return appleAndMango\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5\
    \ apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiq1xuwa7.scala:27:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m(s(i) == \e[31m\"a\"\e[0m){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpiq1xuwa7.scala:31:15 -----------------------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            \e[33mif\e[0m(s(i) == \e[31m\"o\"\e[0m){\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpiq1xuwa7.scala:35:15 -----------------------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m            \e[33mif\e[0m(s(i) == \e[31m\"m\"\e[0m){\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpiq1xuwa7.scala:40:17 --------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m        orange = orange * (n - appleAndOrange)/(n-appleAndMango)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    Long\n\e[31m   |\e[0m         \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiq1xuwa7.scala:41:24\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m        appleAndMango = appleAndMango\
    \ * (n - appleAndOrange)/(n-appleAndMango)\n\e[31m\e[31m   |\e[0m            \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Long\n\e[31m   |\e[0m            \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toDouble\n        val oranges = s.split(\"and\")(0).toInt\n     \
    \   val mangos = s.split(\"and\")(1).toInt\n        val mango_fruit = oranges\
    \ - apples\n        val apple_fruit = apples - mangos\n        mango_fruit - (apple_fruit\
    \ * apple_fruit.toDouble)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5m41pdtu.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        mango_fruit - (apple_fruit\
    \ * apple_fruit.toDouble)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ TODO: Finish this method!\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0gq_tni7.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// TODO:\
    \ Finish this method!\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ n = s.split(\" \")\n        val apples = n(0).trim.toInt\n        val oranges\
    \ = n(1).trim.toInt\n        val fruits = apples + oranges\n        var mangos\
    \ = 0\n        var basket = 0.0\n        var i = -1\n        for {\n         \
    \   i <- 0 until fruits\n        } yield {\n            if (i > 0) {\n       \
    \         if (fruits(i) == 1) {\n                    basket += fruits(i - 1)\n\
    \                }\n                if (fruits(i) == 0) {\n                  \
    \  basket += fruits(i - 1)\n                }\n            }\n        }\n    \
    \    for {\n            i <- 0 until fruits\n        } yield {\n            if\
    \ (i > 0) {\n                if (fruits(i) == 1) {\n                    basket\
    \ += fruits(i - 1)\n                    mangos += fruits(i - 1)\n            \
    \    }\n            }\n        }\n        for {\n            i <- 0 until fruits\n\
    \        } yield {\n            if (i > 0) {\n                if (fruits(i) ==\
    \ 0) {\n                    basket += fruits(i - 1)\n                }\n     \
    \       }\n        }\n        return mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp7cht681h.scala:30:20 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mif\e[0m (fruits(i) == \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    \e[33mvalue\e[0m \e[35mfruits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7cht681h.scala:31:27\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    basket\
    \ += fruits(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Double - did you mean\
    \ Double.!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp7cht681h.scala:31:30 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    basket += fruits(i - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              \e[33mvalue\e[0m \e[35mfruits\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp7cht681h.scala:33:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e\
    [0m (fruits(i) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    \e[33mvalue\e[0m \e[35mfruits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7cht681h.scala:34:27\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                    basket\
    \ += fruits(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Double - did you mean\
    \ Double.!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp7cht681h.scala:34:30 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    basket += fruits(i - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \      "
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = (s.split(\" \").map(_.toInt)) \n        val b = (n.toInt)\n        (a zip\
    \ b).foldLeft(0){\n            case (a, b) => a + b._1\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp00m799qa.scala:21:15\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        (a zip b).foldLeft(\e\
    [31m0\e[0m){\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m    \
    \           Found:    (b : Int)\n\e[31m   |\e[0m               Required: IterableOnce[Any]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ data = s.split(\" \")\n        val apples = data.toList.map(_.toInt).sum\n \
    \       val oranges = data.toList.map(_.toInt).filter(_.toInt % 2 == 1).sum\n\
    \        val mango = data.toList.map(_.toInt).filter(_.toInt % 2 == 0).sum\n \
    \       val total = apples + oranges\n        return (mango / total) * n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5\
    \ apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp8scxzhwv.scala:20)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.fruitDistribution(tmp8scxzhwv.scala:20)\n\
    \tat Problem$.main(tmp8scxzhwv.scala:27)\n\tat Problem.main(tmp8scxzhwv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ nums = s.toLong.split(\"\\\\s\")\n        var apples = 0\n        var oranges\
    \ = 0\n        var mangoes = 0\n        var num = 0\n        var total = 0\n \
    \       for(i <- 0 until nums.length) {\n            total += nums(i).toLong\n\
    \            if(nums(i) == \"apples\" || nums(i) == \"oranges\" || nums(i) ==\
    \ \"mangoes\") {\n                num += 1\n                nums(i) match {\n\
    \                    case \"apples\" => apples += nums(i).toLong\n           \
    \         case \"oranges\" => oranges += nums(i).toLong\n                    case\
    \ \"mangoes\" => mangoes += nums(i).toLong\n                }\n            }\n\
    \        }\n        if(num >= 1)\n            total += num -1\n        return\
    \ (mangoes * mangoes * oranges * apples * apples * total) / n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptwtyd0og.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = s.toLong.split(\e\
    [31m\"\\\\s\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value split is not a member of Long\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660008739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ sum = 0\n        var count = 1\n        var fruit = 0\n        var i = 0\n \
    \       var j = 0\n        var fruitCount = 0\n        var new = 0\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) == \"l\"){\n             \
    \   fruitCount += 1\n            }\n            if(s.charAt(i) == \"m\"){\n  \
    \              fruit += 1\n            }\n        }\n        for(i <- 0 until\
    \ n){\n            if(s.charAt(i) == \" \"){\n                sum += count\n \
    \               count = 1\n            }\n            else {\n               \
    \ count += 1\n            }\n        }\n        for(i <- 0 until n){\n       \
    \     if(s.charAt(i) == \" \"){\n                count -= 1\n            }\n \
    \       }\n        for(i <- 0 until n){\n            if(s.charAt(i) == \"l\"){\n\
    \                fruitCount -= 1\n            }\n        }\n        if(fruitCount\
    \ > 0){\n            fruitCount -= 1\n        }\n        for(i <- 0 until fruit){\n\
    \            sum += 1\n        }\n        for(i <- 0 until fruit){\n         \
    \   if(s.charAt(i) == \" \"){\n                sum += count\n                count\
    \ = 1\n            }\n            else {\n                count += 1\n       \
    \     }\n        }\n        for(i <- 0 until fruit){\n            if(s.charAt(i)\
    \ == \" \"){\n                count -= 1\n            }\n        }\n        for(i\
    \ <- 0 until fruit){\n            if(s.charAt(i) == \"l\"){\n                fruitCount\
    \ -= 1\n            }\n        }\n        if(fruitCount > 0){\n            fruitCount\
    \ -= 1\n        }\n        for(i <- 0 until fruit){\n            sum += 1\n  \
    \      }\n        for(i <- 0 until fruit){\n            if(s.charAt(i) == \" \"\
    ){\n                sum += count\n                count = 1\n            }\n \
    \           else {\n                count += 1\n            }\n        }\n   \
    \     for(i <- 0 until fruit){\n            if(s.charAt(i) == \" \"){\n      \
    \          count -= 1\n            }\n        }\n        for(i <- 0 until fruit){\n\
    \            if(s.charAt(i) == \"l\"){\n                fruitCount -= 1\n    \
    \        }\n        }\n        if(fruitCount > 0){\n            fruitCount -=\
    \ 1\n        }\n        for(i <- 0 until fruit){\n            sum += 1\n     \
    \   }\n        for(i <- 0 until fruit){\n            if(s.charAt(i) == \" \"){\n\
    \                sum += count\n                count = 1\n            }\n    \
    \        else {\n                count += 1\n            }\n        }\n      \
    \  for(i <- 0 until fruit){\n            if(s.charAt(i) == \" \"){\n         \
    \       count -= 1\n            }\n        }\n        for(i <- 0 until fruit){\n\
    \            if(s.charAt(i) == \"l\"){\n                fruitCount -= 1\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwjj37wmj.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[33mnew\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwjj37wmj.scala:139:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m139 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpwjj37wmj.scala:27:15 -----------------------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            \e[33mif\e[0m(s.charAt(i) == \e[31m\"l\"\e[0m){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpwjj37wmj.scala:30:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m(s.charAt(i) == \e[31m\"m\"\e\
    [0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwjj37wmj.scala:34:25 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpwjj37wmj.scala:35:15\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m35 |\e[0m       \
    \     \e[33mif\e[0m(s.charAt(i) == \e[31m\" \"\e[0m){\n\e[31m\e[31m   |\e[0m \
    \              ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpwjj37wmj.scala:43:25 --------------------\e[0m\e[0m\n\
    \e[31m43 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e"
  stdout: ''
  timestamp: 1660008746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ count = 0l\n        var apples = 0l\n        var oranges = 0l\n        var mangos\
    \ = 0l\n        var fruits = s.split(\" \")\n        var total = mangos.toLong\
    \ + oranges.toLong + apples.toLong\n        fruits.foreach { x =>\n          \
    \  if (x == \"apples\") {\n                apples = apples + 1\n            }\
    \ else if (x == \"oranges\") {\n                oranges = oranges + 1\n      \
    \      } else if (x == \"mango\") {\n                mangos = mangos + 1\n   \
    \         }\n        }\n        if (apples == 0l) \n            count = count\
    \ + 1\n        else if (apples == 1l) {\n            count = count + oranges.toLong\n\
    \        } else if (oranges == 0l) {\n            count = count + apples.toLong\n\
    \        } else if (oranges == 1l) {\n            count = count + mangos.toLong\n\
    \        } else if (mangos == 0l) {\n            count = count + apples.toLong\
    \ + oranges.toLong\n        } else {\n            count = count + mangos.toLong\
    \ + oranges.toLong + apples.toLong\n        }\n        if (count == total) {\n\
    \            mangos = mangos.toLong\n        } else mangos = 0l\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphv5junje.scala:53)\n\tat Problem.main(tmphv5junje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apples = 0 \n        var oranges = 0\n        var mangoes = 0\n        var total\
    \ = 0\n        var fruit = s.split(\" \")\n        for (i<-0 until fruit.length)\
    \ {\n            if (fruit(i).toInt == 0) {\n                apples -= 1\n   \
    \         } else {\n                oranges -= 1\n                if (fruit(i).toInt\
    \ == 1) {\n                    mangoes += 1\n                }\n            }\n\
    \        }\n        total = apples + oranges + mangoes\n        if (total > n)\
    \ {\n            total = n\n        }\n        if (apples == 0 && oranges == 0)\
    \ {\n            total = n\n        }\n        if (apples == 0 && oranges == 1)\
    \ {\n            total = apples + n\n        }\n        if (apples == 1 && oranges\
    \ == 0) {\n            total = apples + n\n        }\n        if (apples == 1\
    \ && oranges == 1) {\n            total = apples + oranges + n\n        }\n  \
    \      if (mangoes == 0) {\n            total = apples + oranges + n\n       \
    \ }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu3cd03_a.scala:36:20\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            total = n\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu3cd03_a.scala:39:20 --------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            total = n\n\e[31m\e[31m   |\e[0m        \
    \            ^\e[0m\n\e[31m   |\e[0m                    Found:    (n : Long)\n\
    \e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu3cd03_a.scala:42:20 --------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            total = apples + n\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu3cd03_a.scala:45:20 --------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m            total = apples + n\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu3cd03_a.scala:48:20 --------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            total = apples + oranges + n\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \               Found:    Long\n\e[31m   |\e[0m                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu3cd03_a.scala:51:20\
    \ --------------------\e[0m\e[0m\n\e[31m51 |\e[0m            total = apples +\
    \ oranges + n\n\e[31"
  stdout: ''
  timestamp: 1660008743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = (0 until n).map{ x => if (s.contains(\"apples\")) 1 else 0}.toArray\n  \
    \      val b = (0 until n).map{ x => if (s.contains(\"oranges\")) 1 else 0}.toArray\n\
    \        val m = ((a.sum + b.sum) - n)\n        if (m < 0) 0 else m\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5szl1t_p.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = (\e[31m0\e[0m until n).map{ \e[36mx\e[0m => \e[33mif\e[0m (s.contains(\e\
    [31m\"apples\"\e[0m)) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m}.toArray\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5szl1t_p.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mb\e\
    [0m = (\e[31m0\e[0m until n).map{ \e[36mx\e[0m => \e[33mif\e[0m (s.contains(\e\
    [31m\"oranges\"\e[0m)) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m}.toArray\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apple = s.split(\" apples and \")(0).toInt\n        val orange = s.split(\"\
    \ oranges and \")(0).toInt\n        val fruits = s.split(\" fruits \")(0).toInt\n\
    \        if(fruits == 0) return apple\n        else if(fruits > 0 && orange ==\
    \ 0) return fruits/2\n        else if(fruits > 0 && orange > 0) return orange\
    \ + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n\
    \        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n      \
    \  else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else\
    \ if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits\
    \ > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 &&\
    \ orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange\
    \ > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return\
    \ orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange\
    \ + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n\
    \        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n      \
    \  else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else\
    \ if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits\
    \ > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 &&\
    \ orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange\
    \ > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return\
    \ orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange\
    \ + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n\
    \        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n      \
    \  else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else\
    \ if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits\
    \ > 0 && orange \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9n7yuc3h.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9n7yuc3h.scala:47:30 --------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m(fruits > \e[31m0\e[0m && orange \n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Found:    (orange : Int)\n\e[31m   |\e[0m           \
    \                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your code here\n        var apples =0\n        var oranges =0\n      \
    \  var mango = 0\n        var total = 0\n        var count = 0\n\n        for(i\
    \ <- 1 to s.toInt){\n            if(s.charAt(i) == 'a'){\n                apples\
    \ = apples + 1\n                total = total + 1\n            }\n           \
    \ else if(s.charAt(i) == 'o'){\n                oranges = oranges + 1\n      \
    \          total = total + 1\n            }\n        }\n        if(apples == 0\
    \ ){\n            mango = 0\n        }\n        else{\n            if(apples >=\
    \ (oranges + 1)){\n                mango = total - (apples - oranges)\n      \
    \      }\n            else{\n                mango = total - ((oranges + 1) -\
    \ (apples - 1))\n            }\n        }\n        return mango\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpzwy70k00.scala:26)\n\
    \tat Problem$.main(tmpzwy70k00.scala:50)\n\tat Problem.main(tmpzwy70k00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = new mutable.ListBuffer[String]()\n        val m = s.split(\" \")\n     \
    \   m.foreach(x => if (x.contains(\"apples\")) a += x)\n        m.foreach(x =>\
    \ if (x.contains(\"oranges\")) a += x)\n        a.size match {\n            case\
    \ 2 => n\n            case 3 => n\n            case 4 => n\n            case _\
    \ => 0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc9e17i5g.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apples = 0\n        var oranges = 0\n        var mango = 0\n        var fr =\
    \ s.split(\" \")\n        for (i <- fr) {\n            if (i.toString.toLowerCase().contains(\"\
    apple\"))\n                apples+=1\n            else if (i.toString.toLowerCase().contains(\"\
    orange\"))\n                oranges+=1\n            else if (i.toString.toLowerCase().contains(\"\
    mango\"))\n                mango+=1\n        }\n        var total = 0\n      \
    \  if (apples > oranges) {\n            total = apples - oranges\n        }\n\
    \        else if (apples < oranges) {\n            total = oranges - apples\n\
    \        }\n        else {\n            total = apples - oranges\n        }\n\
    \        if (mango > 0)\n            total = mango\n        else\n           \
    \ total = total / 2\n        return total + n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphl5qzwd3.scala:48)\n\tat Problem.main(tmphl5qzwd3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008750
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ n = s.split(\" \").length\n        s.split(\" \").filter( v => v.toLong >= n).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution$$anonfun$1(tmpr1tnpd3l.scala:20)\n\
    \tat scala.collection.ArrayOps$.filter$extension(ArrayOps.scala:559)\n\tat Problem$.fruitDistribution(tmpr1tnpd3l.scala:20)\n\
    \tat Problem$.main(tmpr1tnpd3l.scala:23)\n\tat Problem.main(tmpr1tnpd3l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ num = (s.length-2)/3\n        var i : Int = 0\n        val fruitTotal = n.toLong\n\
    \        var total : Long = 0\n        while (i < num) {\n          val currentNum\
    \ = s.substring(i, i + 3).toLong\n          if (currentNum > fruitTotal)\n   \
    \         throw new IllegalArgumentException\n          total += currentNum\n\
    \          i += 3\n        }\n        total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 a\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpzbojq7ew.scala:24)\n\
    \tat Problem$.main(tmpzbojq7ew.scala:33)\n\tat Problem.main(tmpzbojq7ew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008748
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ data = s.split(\" \")\n        var apple = 0\n        var orange = 0\n     \
    \   var mango = 0\n        var sum = 0\n        for (item <- data) {\n       \
    \     val num = item.toInt\n            if (num == 0) apple += 1\n           \
    \ if (num == 1) orange += 1\n        }\n        sum = orange + apple\n       \
    \ for (item <- data) {\n            val num = item.toInt\n            if (num\
    \ == 2) mango += 1\n        }\n        val total = orange + apple + mango\n  \
    \      if (total < n)\n            sum\n        else if (total == n)\n       \
    \     mango\n        else\n            fruitDistribution(s.replace(\"oranges\"\
    ,\"orange\"), n) - fruitDistribution(s.replace(\"oranges\",\"orange\"), total\
    \ - n)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution$$anonfun$1(tmpc7negtm9.scala:25)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.fruitDistribution(tmpc7negtm9.scala:28)\n\
    \tat Problem$.main(tmpc7negtm9.scala:43)\n\tat Problem.main(tmpc7negtm9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main"
  stdout: ''
  timestamp: 1660008750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ numOrangesAndApples = n.toString.split(\" \")(1).dropRight(1)\n        val numFruits\
    \ = n.toString.split(\" \")(0).toLong\n        var mango = 0\n        var orange\
    \ = 0\n        val splitString = s.split(\" \").filter(_.nonEmpty)\n        splitString.foreach\
    \ {\n            s => {\n                val value = s.toString.split(\" \")\n\
    \                if (value.head.toString.toLong == numOrangesAndApples)\n    \
    \                orange += value.toLong(0) // orange\n                if (value.head.toString.toLong\
    \ == numFruits)\n                    mango += value.toLong(0) // mango\n     \
    \       }\n        }\n        mango //mango\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwij6396s.scala:27:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (value.head.toString.toLong\
    \ == numOrangesAndApples)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Long and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwij6396s.scala:28:27\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                    orange\
    \ += value.toLong(\e[31m0\e[0m) \e[34m// orange\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpwij6396s.scala:28:36 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                    orange += value.toLong(\e[31m0\e[0m) \e[34m// orange\e\
    [0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toLong is not a member of Array[String], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwij6396s.scala:30:26 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    mango += value.toLong(\e[31m0\e[0m)\
    \ \e[34m// mango\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwij6396s.scala:30:35\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    mango\
    \ += value.toLong(\e[31m0\e[0m) \e[34m// mango\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of Array[String], but could be made available as an exten"
  stdout: ''
  timestamp: 1660008753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ totals = fruitDistribution(s, n, 0)\n        if(totals.isEmpty) 0\n        else\
    \ totals(0)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3t2wr3ep.scala:19:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtotals\e[0m = fruitDistribution(s,\
    \ n, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \         ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mmethod\e[0m \e[35mfruitDistribution\e\
    [0m in \e[33mobject\e[0m \e[35mProblem\e[0m: (s: String, n: Long): Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ findMango(n: Int, i: Int) : Long = { \n            if(i == 0) 0l\n         \
    \   else {\n                if(n-(i-1)+1 == 0 || n-i-1 == 0) findMango(n-(i-1),\
    \ i-1) + 1l\n                else findMango(n-(i-1), i) \n            }\n    \
    \    }\n        val fruits = s.split(\"\\\\s+\").map(_.trim).toSet\n        val\
    \ apples = fruits.count{ case s\"$it\" => true }\n        val oranges = fruits.count{\
    \ case s\"$it\" => false }\n        val totalMango = findMango(n, apples)\n  \
    \      val totalFruit = apples + oranges\n        println(totalMango)\n      \
    \  println(totalFruit)\n        totalMango / totalFruit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcz_j8_qw.scala:29:35\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mtotalMango\e\
    [0m = findMango(n, apples)\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                   Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val str = s.toUpperCase().trim()\n        var\
    \ apple = 0\n        var orange = 0\n        var mango = 0\n        var fruitsCount\
    \ = 0\n        var i = 0\n        for ( a <- str.split(\" \") ){\n           \
    \ if(a.equals(\"APPLE\") || a.equals(\"APPLES\")){\n                apple +=1\n\
    \                fruitsCount += 1\n            }else if(a.equals(\"ORANGE\") ||\
    \ a.equals(\"ORANGES\")){\n                orange +=1\n                fruitsCount\
    \ += 1\n            }else if(a.equals(\"MANGO\") || a.equals(\"MANGOES\") || a.equals(\"\
    MANGOS\")){\n                mango +=1\n                fruitsCount += 1\n   \
    \         }else if(a.equals(\"FRUIT\") || a.equals(\"FRUITS\")){\n           \
    \     fruitsCount += 1\n            }\n        }\n        if(fruitsCount >= n){\n\
    \            fruits = fruits + 1\n        }\n        return fruits\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_lp91oy.scala:41:12 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            fruits = fruits + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: fruits\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_lp91oy.scala:41:21\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            fruits = fruits\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: fruits\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj_lp91oy.scala:43:15 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mreturn\e[0m fruits\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^\e[0m\n\e[31m   |\e[0m               Not found: fruits\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ splitted = s.split(\" \").map(_.toInt)\n        val counts = splitted.groupBy(_\
    \ % 10).map(x => (x._1, x._2.size)).\n                toMap\n        val totals\
    \ = (splitted.toSeq.map { x => counts(x % 10) }).toSeq.sum\n        totals * n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpqfb53q5e.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpqfb53q5e.scala:19)\n\
    \tat Problem$.main(tmpqfb53q5e.scala:26)\n\tat Problem.main(tmpqfb53q5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s(0).toInt\n        val oranges = s(1).toInt\n        val fruits :\
    \ mutable.Buffer[String] = \n            if (apples < oranges) \n            \
    \    Array(apples + \" apples and \" + oranges + \" oranges\", apples + \" apples\
    \ and \" + (oranges - 1) + \" oranges\", apples + \" apples and \" + oranges +\
    \ \" oranges\") \n            else \n                Array(apples + \" apples\
    \ and \" + (oranges - 1) + \" oranges\", apples + \" apples and \" + (oranges\
    \ - 1) + \" oranges\", apples + \" apples and \" + (oranges - 1) + \" oranges\"\
    )\n        fruits.reduce((a,b) => a + b, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogm3x_2p.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m : mutable.Buffer[\e\
    [35mString\e[0m] = \n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ tokens = s.split(\"and\")\n        val apples = tokens(0).split(\" \").toList.toList.foldLeft(0l)(_\
    \ + _.toLong)\n        val oranges = tokens(1).split(\" \").toList.toList.foldLeft(0l)(_\
    \ + _.toLong)\n        val mangoes = apples + oranges\n        val totalMangoes\
    \ = fruitMangoes(n, mangoes)\n        mangoes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpge4_hy9s.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mtotalMangoes\e[0m = fruitMangoes(n,\
    \ mangoes)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: fruitMangoes\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ applesAndOranges = s.split(\" \").map(_.toInt)\n        val totalApples = applesAndOranges(0)\n\
    \        val totalOranges = applesAndOranges(1)\n        var totalFruits = 0\n\
    \        val applesAndOrangesCount = applesAndOranges.toList.sortWith(_ < _)\n\
    \        val apples = applesAndOrangesCount(0)\n        val oranges = applesAndOrangesCount(1)\n\
    \        if (apples == 0L) {\n            totalFruits = oranges\n        } else\
    \ if (apples == 1L) {\n            if (oranges == 0L) {\n                totalFruits\
    \ = totalApples\n            } else {\n                totalFruits = totalApples\
    \ + totalOranges\n            }\n        } else {\n            val minFruits =\
    \ applesAndOrangesCount(2)\n            if (minFruits == 0L) {\n             \
    \   totalFruits = totalApples\n            } else if (minFruits == 1L) {\n   \
    \             if (oranges == 0L) {\n                    totalFruits = totalApples\
    \ + totalOranges\n                } else {\n                    totalFruits =\
    \ totalApples + totalOranges + totalApples - minFruits\n                }\n  \
    \          } else {\n                val minOranges = applesAndOrangesCount(3)\n\
    \                if (minOranges == 0L) {\n                    totalFruits = totalApples\
    \ + totalOranges\n                } else if (minOranges == 1L) {\n           \
    \         if (oranges == 0L) {\n                        totalFruits = totalApples\
    \ + totalOranges\n                    } else {\n                        totalFruits\
    \ = totalApples + totalOranges + totalApples - minFruits - minOranges\n      \
    \              }\n                } else {\n                    val minOranges\
    \ = applesAndOrangesCount(4)\n                    if (minOranges == 0L) {\n  \
    \                      totalFruits = totalApples + totalOranges\n            \
    \        } else if (minOranges == 1L) {\n                        if (oranges ==\
    \ 0L) {\n                            totalFruits = totalApples + totalOranges\n\
    \                        } else {\n                            totalFruits = totalApples\
    \ + totalOranges + totalApples - minFruits - minOranges - minOranges\n       \
    \                 }\n                    } else {\n                        val\
    \ minOranges = applesAndOrangesCount(5)\n                        if (minOranges\
    \ == 0L) {\n                            totalFruits = totalApples + totalOranges\n\
    \                        } else if (minOranges == 1L) {\n                    \
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppyrytc7f.scala:82:0 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyrytc7f.scala:27:24\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            totalFruits = oranges\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Found:    Unit\n\e[31m   |\e[0m            Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyrytc7f.scala:30:28 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                totalFruits = totalApples\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            Found:    Unit\n\e[31m   |\e[0m                Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyrytc7f.scala:32:28\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                totalFruits =\
    \ totalApples + totalOranges\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m   |\e[0m          \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyrytc7f.scala:37:28\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m                totalFruits =\
    \ totalApples\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m   |\e[0m          \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyrytc7f.scala:40:32\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m                    totalFruits\
    \ = totalApples + totalOranges\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   "
  stdout: ''
  timestamp: 1660008760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ m = s.split(\"\\\\s\")\n        val a = m(1).split(\" \")\n        val n = a.toArray.filter(_.matches(\"\
    [0-9]+\"))\n        val l = n.map(i => i.toLong).toList\n        val m = l.size\n\
    \        val a = l.toSet.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).sum\n\
    \        val b = l.toSet.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).size\n\
    \        if(b == 0) return 0\n        if(m == 0) return 0\n        val r = n match\
    \ {\n            case _ : List[Long] => l.toSet\n            case _ : List[String]\
    \ => {\n                val ll = l.toList\n                ll.foldLeft((Set[Long]()):\
    \ (List[Long], Int))((res, item) => \n                res.head+item.toLong, ll.tail)\n\
    \            }\n        }.toSet\n        if(r.size == 0) return 0\n        if(r.size\
    \ == 1) return r.head\n        val p = l.map(_.toLong).sum\n        val q = m\
    \ - r.size\n        val r = ((p+q).floorDiv(n)).toLong\n        return r\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5\
    \ apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpms47hhim.scala:35:9 ------------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        }.toSet\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\
    \e[31m   |\e[0m         end of statement expected but '.' found\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpms47hhim.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpms47hhim.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = l.toSet.filter(_.isInstanceOf[\e\
    [35mLong\e[0m]).map(_.asInstanceOf[\e[35mLong\e[0m]).sum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ma is already defined as \e[33mvalue\e[0m \e[35ma\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpms47hhim.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = ((p+q).floorDiv(n)).toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr\
    \ is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpms47hhim.scala:27:11 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(m == \e[31m0\e[0m) \e[33mreturn\e\
    [0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \  Values of types Array[String] and Int cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpms47hhim.scala:32:38 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                ll.foldLeft((Set[\e[35mLong\e[0m]()):\
    \ (\e[35mList\e[0m[\e[35mLong\e[0m], \e[35mInt\e[0m)"
  stdout: ''
  timestamp: 1660008764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var\
    \ count = 0\n        var sum = s.split(\" \")\n        var numbers = sum.map(_.toInt)\n\
    \        var numberCounts = numbers.map(n => if (n == 0) 0 else 1)\n        var\
    \ sumCounts = numberCounts.sum\n        var sumNumbers = numberCounts.map(n =>\
    \ n)\n        var sumsNumbers = sumNumbers.sum\n        while(i < sumCounts){\n\
    \            j = numbers.indexOf(sumsNumbers)\n            k = numberCounts.indexOf(i)\n\
    \            l = sumNumbers.indexOf(i)\n            if(j < k && k < l){\n    \
    \            count = count + 1\n            }\n            i = i + 1\n       \
    \ }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpm6074nn3.scala:25)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpm6074nn3.scala:25)\n\
    \tat Problem$.main(tmpm6074nn3.scala:42)\n\tat Problem.main(tmpm6074nn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ numFruits = 0\n        var numOranges = 0\n        var numApples  = 0\n    \
    \    var fruits = s.split(\" \")\n\n        var i = 1\n        fruits.foreach{fruit\
    \ => {\n            if (fruit.toDouble > 0){\n                numApples  += fruit.toInt\n\
    \                numOranges += (fruit.toInt * 2)\n            }\n        }}\n\n\
    \        var totalOranges = numOranges.toInt\n        var totalApples = numApples.toInt\n\
    \        \n        var countMango = 0\n        var countMangoMango = 0\n     \
    \   while (totalOranges > 0 && totalApples > 0) {\n            var temp = (totalOranges\
    \ * 0.66) + totalApples\n            \n            if (temp > numFruits) {\n \
    \               numFruits = temp\n            }\n            totalOranges -= numOranges\n\
    \            totalApples -= numApples\n        }\n        while (totalOranges\
    \ > 0) {\n            numOranges -= totalOranges\n            totalOranges -=\
    \ numOranges\n        }\n        while (totalApples > 0) {\n            numApples\
    \ -= totalApples\n            totalApples -= numApples\n        }\n        \n\
    \        while (totalApples > 0 && totalOranges > 0) {\n            if (numApples\
    \ > numFruits) {\n                numFruits += numApples\n                numApples\
    \  = 0\n            }\n            if (numOranges > numFruits) {\n           \
    \     numFruits += numOranges\n                numOranges = 0\n            }\n\
    \            totalOranges -= numOranges\n            totalApples -= numApples\n\
    \        }\n        while (totalApples > 0) {\n            numApples -= totalApples\n\
    \            totalApples -= numApples\n        }\n        \n        while (totalOranges\
    \ > 0 && totalApples > 0) {\n            if (numOranges > numFruits) {\n     \
    \           numFruits += numOranges\n                numOranges = 0\n        \
    \    }\n            if (numApples > numFruits) {\n                numFruits +=\
    \ numApples\n                numApples = 0\n            }\n            totalOranges\
    \ -= numOranges\n            totalApples -= numApples\n        }\n        while\
    \ (totalOranges > 0) {\n            numOranges -= totalOranges\n            totalOranges\
    \ -= numOranges\n        }\n        while (totalApples > 0) {\n            numApples\
    \ -= totalApples\n            totalApples -= numApples\n        }\n        \n\
    \        return numFruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_eftcadj.scala:41:28\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m                numFruits = temp\n\
    \e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                          Found:    (temp : Double)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9qczofkt.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Your\
    \ code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = (s.split(\" \").map(_.toInt)).toArray\n        val l = a.length\n      \
    \  val m = n % l\n        val p = (n / l).toInt\n        val t = a.slice((m -\
    \ 1), m)\n        val q = t.sum.toLong\n        val r = t.sum * p\n        val\
    \ f = t.sum + q\n        r\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn48ius1n.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mt\e\
    [0m = a.slice((m - \e[31m1\e[0m), m)\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m                         Found:    Long\n\e\
    [31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpn48ius1n.scala:23:33 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = a.slice((m - \e\
    [31m1\e[0m), m)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    (m : Long)\n\e[31m \
    \  |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ sum = 0\n        var count = 0\n        for( i <- s.split(\" \") ) \n      \
    \      if( i.trim.toInt == 1 )\n                sum += 1\n            if( i.trim.toInt\
    \ == 2 )\n                count += 1\n        sum = sum / n\n        count = count\
    \ / n\n        return count * sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps5_jh9aq.scala:26:14\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        sum = sum / n\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^\e[0m\n\e[31m   |\e[0m              Found: \
    \   Long\n\e[31m   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps5_jh9aq.scala:27:16 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        count = count / n\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Long\n\e\
    [31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ fruitsPerBasket = s.split(\" \").map(_.toInt).getOrElse(0)\n        val numFruitsPerBasket\
    \ = fruitsPerBasket * n\n        var totalFruits = 0\n        while (numFruitsPerBasket\
    \ >= totalFruits) {\n            totalFruits += fruitsPerBasket\n            numFruitsPerBasket\
    \ -= totalFruits\n        }\n        return totalFruits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliwi38zn.scala:19:56 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfruitsPerBasket\e[0m = s.split(\e\
    [31m\" \"\e[0m).map(_.toInt).getOrElse(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value getOrElse is not a member of Array[Int]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apple = 0\n        var mango = 0\n        var orange = 0\n        val fruits\
    \ = s.split(\" \").map(_.trim).toList\n        for (i <- fruits)\n           \
    \ if (i.toString.contains(\"apple\"))\n                apple += 1\n          \
    \  else if (i.toString.contains(\"mango\"))\n                mango += 1\n    \
    \        else if (i.toString.contains(\"orange\"))\n                orange +=\
    \ 1\n        else\n            return (orange.toDouble - apple.toDouble - mango.toDouble)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz0qxtxj4.scala:30:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^\e[0m\n\e[31m   |\e[0m        end of statement expected but 'else' found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0qxtxj4.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <- fruits)\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m\
    \        Required: Long\n\e[31m24 |\e[0m            \e[33mif\e[0m (i.toString.contains(\e\
    [31m\"apple\"\e[0m))\n\e[31m25 |\e[0m                apple += \e[31m1\e[0m\n\e\
    [31m26 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (i.toString.contains(\e\
    [31m\"mango\"\e[0m))\n\e[31m27 |\e[0m                mango += \e[31m1\e[0m\n\e\
    [31m28 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (i.toString.contains(\e\
    [31m\"orange\"\e[0m))\n\e[31m29 |\e[0m                orange += \e[31m1\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ array = s.split(\"\\\\s+\")\n        val numOfApples = array.apply(0).trim\n\
    \        val numOfOranges = array.apply(1).trim\n        val basket = Array.ofDim[String](3)\n\
    \        basket(0) = array.apply(2)\n        basket(1) = array.apply(3)\n    \
    \    basket(2) = array.apply(4)\n        val oranges = numOfOranges.toInt\n  \
    \      val apples = numOfApples.toInt\n        var mangos = 0\n        var count\
    \ = 1\n        while (apples + oranges > 0) {\n            if (apples > 0) {\n\
    \                count += 1\n                apples -= 1\n            }\n    \
    \        if (oranges > 0) {\n                count += 1\n                oranges\
    \ -= 1\n            }\n            if (apples == 0 && oranges == 0) {\n      \
    \          mangos = mangos + count\n                count = 0\n            }\n\
    \        }\n        (basket(2).toLong - mangos).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpio81josg.scala:33:23 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                apples -= \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ -= is not a member of Int - did you mean apples.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpio81josg.scala:37:24 ------------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m                oranges -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -= is not\
    \ a member of Int - did you mean oranges.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660008766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruits = Array((\"apple\", 1), (\"orange\", 2), (\"mango\", 3))\n        val\
    \ basket = s.split(\" \")\n        fruits.map{case (fruit, num) => (fruit, basket.map(_.toInt).sum\
    \ % num).sum}\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8fip316h.scala:21:79 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        fruits.map{\e[33mcase\e[0m (fruit, num) => (fruit,\
    \ basket.map(_.toInt).sum % num).sum}\n\e[31m\e[31m   |\e[0m                 \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value sum is not a member of (String,\
    \ Int)\n\e[31m\e[31m-- Error: /tmp/tmp8fip316h.scala:21:83 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        fruits.map{\e[33mcase\e[0m (fruit, num) => (fruit,\
    \ basket.map(_.toInt).sum % num).sum}\n\e[31m\e[31m   |\e[0m                 \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660008768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = num(s.split(\"apples\")(0)) \n        val oranges = num(s.split(\"\
    oranges\")(0)) \n        val fruits = apples + oranges + num(s.split(\"mango\"\
    )(0))\n        return fruits/n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphapq0446.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = num(s.split(\e\
    [31m\"apples\"\e[0m)(\e[31m0\e[0m)) \n\e[31m\e[31m   |\e[0m                  \
    \   ^^^\e[0m\n\e[31m   |\e[0m                     Not found: num\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphapq0446.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moranges\e[0m = num(s.split(\e\
    [31m\"oranges\"\e[0m)(\e[31m0\e[0m)) \n\e[31m\e[31m   |\e[0m                 \
    \     ^^^\e[0m\n\e[31m   |\e[0m                      Not found: num\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008759
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ m = s.toInt\n        val d = (m / n).toInt\n        val n1 = n - d\n       \
    \ val k = (m - n1 - d).toInt\n        val m1 = m - k\n        val v = (d - k).toInt\n\
    \        if (v > 0) {\n            val r = n1 - v\n            return k\n    \
    \    }\n        if (k > 0) {\n            val r = k + v\n            return r\n\
    \        }\n        if (m > 0) {\n            val r = m\n            return r\n\
    \        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpediz2jby.scala:19)\n\
    \tat Problem$.main(tmpediz2jby.scala:40)\n\tat Problem.main(tmpediz2jby.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apples = 0\n        var oranges = 0\n        var fruits = s.split(\" \").toList.map(x\
    \ => x.trim()).filter(x => x.startsWith(\"apples\"), x => x.startsWith(\"oranges\"\
    ), x => x.startsWith(\"mango\")).map(x => x.substring(4).trim()).filter(x => x.length\
    \ > 0).map(x => x.substring(0, x.length - 1).toInt)\n        var sum = 0\n   \
    \     fruits foreach { i => sum += i }\n        for (fruit <- fruits) {\n    \
    \        if (fruit == 1) {\n                apples += fruit\n            }\n \
    \           if (fruit == 2) {\n                oranges += fruit\n            }\n\
    \        }\n        return n - sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpywrkpxj_.scala:21:67 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mfruits\e[0m = s.split(\e\
    [31m\" \"\e[0m).toList.map(\e[36mx\e[0m => x.trim()).filter(\e[36mx\e[0m => x.startsWith(\e\
    [31m\"apples\"\e[0m), \e[36mx\e[0m => x.startsWith(\e[31m\"oranges\"\e[0m), \e\
    [36mx\e[0m => x.startsWith(\e[31m\"mango\"\e[0m)).map(\e[36mx\e[0m => x.substring(\e\
    [31m4\e[0m).trim()).filter(\e[36mx\e[0m => x.length > \e[31m0\e[0m).map(\e[36mx\e\
    [0m => x.substring(\e[31m0\e[0m, x.length - \e[31m1\e[0m).toInt)\n\e[31m\e[31m\
    \   |\e[0m                                                                   ^\e\
    [0m\n\e[31m   |\e[0m                          Missing parameter type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m                          I could not infer the type\
    \ of the parameter x.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpywrkpxj_.scala:21:96\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e\
    [0m \e[36mfruits\e[0m = s.split(\e[31m\" \"\e[0m).toList.map(\e[36mx\e[0m => x.trim()).filter(\e\
    [36mx\e[0m => x.startsWith(\e[31m\"apples\"\e[0m), \e[36mx\e[0m => x.startsWith(\e\
    [31m\"oranges\"\e[0m), \e[36mx\e[0m => x.startsWith(\e[31m\"mango\"\e[0m)).map(\e\
    [36mx\e[0m => x.substring(\e[31m4\e[0m).trim()).filter(\e[36mx\e[0m => x.length\
    \ > \e[31m0\e[0m).map(\e[36mx\e[0m => x.substring(\e[31m0\e[0m, x.length - \e\
    [31m1\e[0m).toInt)\n\e[31m\e[31m   |\e[0m                                    \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                          Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                          I could not infer the type of the parameter\
    \ x.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpywrkpxj_.scala:21:126 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mfruits\e[0m = s.split(\e\
    [31m\" \"\e[0m).toList.map(\e[36mx\e[0m => x.trim()).filter(\e[36mx\e[0m => x.startsWith(\e\
    [31m\"apples\"\e[0m), \e[36mx\e[0m => x.startsWith(\e[31m\"oranges\"\e[0m), \e\
    [36mx\e[0m => x.startsWith(\e[31m\"mango\"\e[0m)).map(\e[36mx\e[0m => x.substring(\e\
    [31m4\e[0m).trim()).filter(\e[36mx\e[0m => x.length > \e[31m0\e[0m).map(\e[36mx\e\
    [0m => x"
  stdout: ''
  timestamp: 1660008766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruits = mutable.Set[String]()\n        var apples = 0\n        var oranges\
    \ = 0\n        var total = 0\n        var mango = 0\n        for (i <- 0 until\
    \ s.length()) {\n            if (s.charAt(i) == 'a') {\n                apples\
    \ += 1\n                total += apples;\n            } else if (s.charAt(i) ==\
    \ 'o') {\n                oranges += 1\n                total += oranges;\n  \
    \          } else if (s.charAt(i) == 'm') {\n                mango += 1\n    \
    \            total += mango;\n            }\n        }\n        return n * (total\
    \ - apples - oranges - mango)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4gi8eo9f.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ getNumberOfFruit(string : String) : Long = {\n            val pattern = \"\\\
    \\d+\".r\n            val fruitCount = string.count(pattern)\n            if (fruitCount\
    \ == 0) {\n                0\n            } else if (fruitCount == 1) {\n    \
    \            1\n            } else {\n                fruitCount\n           \
    \ }\n        }\n        val str = s.toLowerCase\n        val pattern = \"apples\"\
    \n        val numApplesAndOranges = str.count(pattern)\n        val pattern1 =\
    \ \"oranges\"\n        val numOrangesAndMangos = str.count(pattern1)\n       \
    \ val pattern2 = \"mango\"\n        val numMangoFruits = str.count(pattern2)\n\
    \        val numberOfAppleAndOranges = getNumberOfFruit(str)\n        val numberOfOrangeAndMangos\
    \ = getNumberOfFruit(str)\n        if (numberOfAppleAndOranges == numApplesAndOranges)\
    \ {\n            numberOfAppleAndOranges\n        } else if (numberOfOrangeAndMangos\
    \ == numOrangesAndMangos) {\n            numberOfOrangeAndMangos\n        } else\
    \ {\n            numMangoFruits\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl45e1tij.scala:21:42\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e\
    [36mfruitCount\e[0m = string.count(pattern)\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (pattern : scala.util.matching.Regex)\n\e[31m   |\e[0m   \
    \                      Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpl45e1tij.scala:32:44 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumApplesAndOranges\e[0m\
    \ = str.count(pattern)\n\e[31m\e[31m   |\e[0m                                \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \         Found:    (pattern : String)\n\e[31m   |\e[0m                      \
    \                      Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpl45e1tij.scala:34:44 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnumOrangesAndMangos\e[0m\
    \ = str.count(pattern1)\n\e[31m\e[31m   |\e[0m                               \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \          Found:    (pattern1 : String)\n\e[31m   |\e[0m                    \
    \                       Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpl45e1tij.scala:36:39 --------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnumMangoFruits\e[0m = str.count(pattern2)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Found:    (pattern2 : String)\n\
    \e[31m   |\e[0m                                       Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ x = s.split(\" \")\n        val a = x.head\n        val b = x.tail.split(\"\
    and\").map(_.trim.toLong)\n        val c = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val d = b.filterNot(_ == 0).map(_ * 1000000000)\n        val f = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val j = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val k = b.filterNot(_ == 0).map(_ * 1000000000)\n        val l = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val m = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val n = b.filterNot(_ == 0).map(_ * 1000000000)\n        val o = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val p = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val q = b.filterNot(_ == 0).map(_ * 1000000000)\n        val r = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val s = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val t = b.filterNot(_ == 0).map(_ * 1000000000)\n        val u = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val v = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val w = b.filterNot(_ == 0).map(_ * 1000000000)\n        val x = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val y = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val z = b.filterNot(_ == 0).map(_ * 1000000000)\n        val w = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val y = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val x = b.filterNot(_ == 0).map(_ * 1000000000)\n        val v = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val w = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val s = b.filterNot(_ == 0).map(_ * 1000000000)\n        val k = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val q = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val r = b.filterNot(\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp7zpapod.scala:50:28 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = b.filterNot(\n\e\
    [31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m       \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp7zpapod.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = b.filterNot(_ ==\
    \ \e[31m0\e[0m).map(_ * \e[31m1000000000\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp7zpapod.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = b.filterNot(_ == \e[31m0\e[0m).map(_\
    \ * \e[31m1000000000\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mw is already defined as \e[33mvalue\e[0m \e[35mw\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp7zpapod.scala:43:12 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mval\e[0m \e[36my\e[0m = b.filterNot(_ == \e[31m0\e[0m).map(_\
    \ * \e[31m1000000000\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0my is already defined as \e[33mvalue\e[0m \e[35my\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp7zpapod.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = b.filterNot(_ == \e[31m0\e[0m).map(_\
    \ * \e[31m1000000000\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660008769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val basket = new mutable.HashSet[String]\n        val fruits = s.split(\" \"\
    )(2)\n        var appleCount = 0\n        var orangeCount = 0\n        var mangoCount\
    \ = 0\n        var fruitCount = 0\n        if (apples.isEmpty) {\n           \
    \ appleCount = 0\n        } else {\n            appleCount = apples.split(\"and\"\
    ).length\n        }\n        if (oranges.isEmpty) {\n            orangeCount =\
    \ 0\n        } else {\n            orangeCount = oranges.split(\"and\").length\n\
    \        }\n        fruitCount = fruits.split(\"and\").length\n        basket.add(apples)\n\
    \        basket.add(oranges)\n        basket.add(fruits)\n        if (appleCount\
    \ > orangeCount && appleCount > fruitCount) {\n            return mangoCount\n\
    \        } else if (orangeCount > appleCount && orangeCount > fruitCount) {\n\
    \            return mangoCount\n        } else {\n            return fruitCount\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdy7arge1.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ totalFruits = n.toInt\n        var sum = 0\n        var count1 = 0\n       \
    \ var count2 = 0\n\n        val arr = s.split(\" \")\n        var i = 2\n    \
    \    while (i < arr.length) {\n            val num = arr(i).toLong\n         \
    \   val a = num.toInt\n            if (a > 0) {\n                sum += a\n  \
    \              count1 += a\n            }\n            i += 2\n        }\n   \
    \     sum / totalFruits\n\n        if (count1 > 0) {\n            sum /= count1\n\
    \            count1 /= totalFruits\n        }\n        count1\n\n        if (count2\
    \ > 0) {\n            sum /= count2\n            count2 /= totalFruits\n     \
    \   }\n        count2\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpvdctgl7y.scala:27)\n\
    \tat Problem$.main(tmpvdctgl7y.scala:50)\n\tat Problem.main(tmpvdctgl7y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ totalFruits = n.toInt\n        val array = s.split(\" \")\n        for(v <-\
    \ array)\n        totalFruits += v.trim().toInt\n\n        var count = 0\n   \
    \     for(v <- array)\n        count += (v.trim().toInt * totalFruits)\n\n   \
    \     return count\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution$$anonfun$1(tmp5v6080ux.scala:22)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.fruitDistribution(tmp5v6080ux.scala:22)\n\
    \tat Problem$.main(tmp5v6080ux.scala:31)\n\tat Problem.main(tmp5v6080ux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main"
  stdout: ''
  timestamp: 1660008774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ nOfApples = s.split(\" \").filter(_.startsWith(\"a\")).map(_.toInt)\n      \
    \  val nOfOranges = s.split(\" \").filter(_.startsWith(\"o\")).map(_.toInt)\n\
    \        val nOfMangos = s.split(\" \").filter(_.startsWith(\"m\")).map(_.toInt)\n\
    \        val nOfFruits = n + nOfApples.sum + nOfOranges.sum + nOfMangos.sum\n\
    \        if(nOfFruits == 0){\n            return 0\n        }\n        if(nOfFruits\
    \ == 1){\n            return nOfFruits\n        }\n        val nOfMangoFruits\
    \ = (nOfFruits - nOfFruits.sum - nOfMangos.sum - nOfOranges.sum) / nOfFruits.sum\n\
    \        return nOfMangoFruits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp66k2iej.scala:29:52 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnOfMangoFruits\e[0m = (nOfFruits\
    \ - nOfFruits.sum - nOfMangos.sum - nOfOranges.sum) / nOfFruits.sum\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       value sum is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ numOfApples = s.split(\"and\").last.toLong\n        val numOfOranges = s.split(\"\
    and\").head.trim.toLong\n        val numOfMango = n - numOfApples - numOfOranges\n\
    \        numOfMango.toLong\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \" 6 oranges\"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:697)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp5je2mnw7.scala:19)\n\
    \tat Problem$.main(tmp5je2mnw7.scala:25)\n\tat Problem.main(tmp5je2mnw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ mapA = mutable.HashMap.empty[Int, Long]\n        val mapB = mutable.HashMap.empty[Int,\
    \ Long]\n        for (word <- s.split(\" \") ) {\n            if (word contains\
    \ \"a\") {\n                mapA += (word -> 1)\n            }\n            if\
    \ (word contains \"b\") {\n                mapB += (word -> 1)\n            }\n\
    \        }\n        val appleAndOranges = mapA + mapB\n        val apples = appleAndOranges.filter\
    \ { case (k, v) => k.contains(\"a\") }\n        val oranges = appleAndOranges.filter\
    \ { case (k, v) => k.contains(\"b\") }\n        val mangoes = appleAndOranges.filter\
    \ { case (k, v) => k.contains(\"m\") }\n        apples.size + (oranges.size -\
    \ apples.size)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrgcemh5.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmapA\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrgcemh5.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmapB\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n      val\
    \ (apples, oranges) = s.split(\"and\").map(_.toInt)\n      val numFruits = apples\
    \ + oranges\n      if(apples == 0) 1 else apples + (oranges/numFruits)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_0neix7_.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mnumFruits\e[0m = apples +\
    \ oranges\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of Any, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_0neix7_.scala:21:36\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mif\e[0m(apples\
    \ == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m apples + (oranges/numFruits)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of Any, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_0neix7_.scala:21:46\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mif\e[0m(apples\
    \ == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m apples + (oranges/numFruits)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue / is not a member of Any, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660008785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ fruits = mutable.Map[String, Int]()\n        var oranges = mutable.Map[String,\
    \ Int]()\n        var apples = mutable.Map[String, Int]()\n        var totalFruits\
    \ = 0\n        for(i <- s.toInt) {\n            if(i%2 == 0) {\n             \
    \   apples(s\"$i\") = apples(s\"$i\") + i\n                fruits(s\"$i\") = fruits(s\"\
    $i\") + 1\n                totalFruits += 1\n            }\n            else if(i%3\
    \ == 0) {\n                oranges(s\"$i\") = oranges(s\"$i\") + i\n         \
    \       fruits(s\"$i\") = fruits(s\"$i\") + 1\n                totalFruits +=\
    \ 1\n            }\n            else {\n                fruits(s\"$i\") = fruits(s\"\
    $i\") + 1\n                totalFruits += 1\n            }\n        }\n      \
    \  fruits(s\"$totalFruits\") = 0\n        return fruits(s\"$totalFruits\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1c7gom2i.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfruits\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1c7gom2i.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36moranges\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1c7gom2i.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mapples\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1c7gom2i.scala:23:17 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- s.toInt) {\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ foreach is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1660008780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Create a list called bag with size of n. \n        val bag = mutable.ListBuffer[String]()\n\
    \        for (amount <- s.split(\" \").toList) {\n            bag += amount\n\
    \        }\n        // Create new list called bag2 that contains the number of\
    \ each type of fruit.\n        val bag2 = bag.toList.groupBy(x => x).mapValues(_.size).toSeq\n\
    \        // Check if the type of fruit contains \"mango\".\n        if (bag2.contains(\"\
    mango\"))\n            return n.toLong\n        // Check if the type of fruit\
    \ contains \"orange\"\n        if (bag2.contains(\"orange\"))\n            return\
    \ n.toLong + bag2.get(\"orange\").toLong\n        // Check if the type of fruit\
    \ contains \"apple\"\n        if (bag2.contains(\"apple\"))\n            return\
    \ n.toLong + bag2.get(\"apple\").toLong\n        // Return the count of fruit.\n\
    \        return n.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_00mxkns.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbag\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruitCount : HashMap[String, Long] = new HashMap[String, Long]()\n        for\
    \ (c <- s.toCharArray) {\n            fruitCount.get(c) match {\n            \
    \    case null => fruitCount.put(c, 1L)\n                case x => fruitCount.put(c,\
    \ fruitCount.get(c) + 1)\n            }\n        }\n        var result = 0L\n\
    \        for (c <- fruitCount.keySet) {\n            if (fruitCount.get(c) <=\
    \ n) {\n                result += fruitCount.get(c)\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzysrgiu.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            fruitCount.get(c)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (c : Char)\n\e[31m   |\e[0m\
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdzysrgiu.scala:22:44 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31mnull\e[0m => fruitCount.put(c,\
    \ \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \      ^\e[0m\n\e[31m   |\e[0m                                            Found:\
    \    (c : Char)\n\e[31m   |\e[0m                                            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzysrgiu.scala:23:41\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e\
    [0m x => fruitCount.put(c, fruitCount.get(c) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    (c : Char)\n\e[31m   |\e[0m        \
    \                                 Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdzysrgiu.scala:23:59 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m x => fruitCount.put(c,\
    \ fruitCount.get(c) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                       Found:    (c : Char)\n\e[31m   |\e[0m\
    \                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdzysrgiu.scala:28:34 ------------------------\e\
    [0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660008786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ count = 0\n        var apple = 0\n        var mango = 0\n        var orange\
    \ = 0\n        for( line <- s.split(\"\\\\s+\") {\n            if(line.matches(\"\
    ^[0-9]*$\")) {\n                val numbers = line.split(\" \")\n            \
    \    if(numbers.length == 2) {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                }\n          \
    \      else if(numbers.length == 3) {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                    mango = numbers(2).toLong\n\
    \                }\n                else {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                    orange = numbers(2).toLong\n\
    \                }\n            }\n            else if(line.matches(\"^[0-9]*\\\
    \\sapples.*[0-9]*$\")) {\n                val numbers = line.split(\" \")\n  \
    \              if(numbers.length == 2) {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                }\n          \
    \      else if(numbers.length == 3) {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                    mango = numbers(2).toLong\n\
    \                }\n                else {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                    orange = numbers(2).toLong\n\
    \                }\n            }\n        }\n        val sumOfApples = apple\n\
    \        val sumOfOranges = orange\n        if(count > apple+orange) {\n     \
    \       return mango\n        }\n        if(count < apple+orange) {\n        \
    \    return mango + fruitDistribution(s.substring(s.indexOf(\"apples\") + 3, s.indexOf(\"\
    oranges\") - 1), n)\n        }\n        if(count == apple+orange) {\n        \
    \    return mango\n        }\n        return 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu5m7zlh0.scala:59:8 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36msumOfApples\e[0m = apple\n\
    \e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but\
    \ 'val' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu5m7zlh0.scala:24:15\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(line.matches(\e\
    [31m\"^[0-9]*$\"\e[0m)) {\n\e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m\
    \   |\e[0m               Not found: line\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu5m7zlh0.scala:25:30 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mnumbers\e[0m = line.split(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                              Not found: line\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu5m7zlh0.scala:28:26 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    apple = numbers(\e[31m1\e[0m).toLong\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Found:    Unit\n\e[31m   |\e[0m                \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu5m7zlh0.scala:33:26\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    mango = numbers(\e\
    [31m2\e[0m).toLong\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Unit\n\e[31m   |\e[0m      \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu5m7zlh0.scala:38:27 --------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m                    orange = numbers(\e[31m2\e[0m).toLong\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660008784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ nums = s.split(\" \")\n        val apples = nums(0).toLong\n        val oranges\
    \ = nums(1).toLong\n        val fruits = apples + oranges\n        var mango =\
    \ 0\n        for (i <- 0 to fruits - 1) {\n            if (i % 2 == 0) mango +=\
    \ n\n        }\n        mango\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xjxkogc.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to fruits - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6xjxkogc.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) mango += n\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660008785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n       val\
    \ appleAndOranges = s.split(\" \")\n       val apples = appleAndOranges.head.toLong\n\
    \       val oranges = appleAndOranges.tail.map(_.toLong).sum\n       val applesAndOranges\
    \ = apples + oranges\n       applesAndOranges - n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpmk9ums7d.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpmk9ums7d.scala:21)\n\
    \tat Problem$.main(tmpmk9ums7d.scala:26)\n\tat Problem.main(tmpmk9ums7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ your code goes here\n        var apples = n\n        var oranges = n\n     \
    \   var mangoes = 0\n        var count = 0\n        var index = 0\n        var\
    \ basket = mutable.ListBuffer(s)\n        var i = 0\n        while (index < basket.length){\n\
    \            if(basket(index).contains(\"apples\")){\n                apples =\
    \ apples - 1\n                apples = apples + basket(index)\n              \
    \  count = count + 1\n            }\n            else if(basket(index).contains(\"\
    oranges\")){\n                oranges = oranges - 1\n                oranges =\
    \ oranges + basket(index)\n                count = count + 1\n            }\n\
    \            else if(basket(index).contains(\"mango\")){\n                mangoes\
    \ = mangoes + 1\n                count = count + 1\n            }\n          \
    \  index = index + 1\n        }\n        mangoes = mangoes - (apples + oranges\
    \ + basket(0))\n        mangoes = mangoes - (apples + oranges)\n        return\
    \ mangoes\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzugqydnd.scala:25:21 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mbasket\e[0m = mutable.ListBuffer(s)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzugqydnd.scala:45:18 --------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m        mangoes = mangoes - (apples + oranges)\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ count = 0\n        var n = 0\n        val list = s.split(\" \")\n        for(\
    \ i <- 0 until list.length ) {\n            var n = list(i).toInt\n          \
    \  val list1 = list.slice(i+1, list.length)\n            list1.foreach( s => {\n\
    \                var n = s.toInt\n                count = count + n\n        \
    \    } )\n        }\n        n = list.length.toInt\n        val list1 = list.slice(n+1,\
    \ list.length)\n        list1.foreach( s => {\n            var n = s.toInt\n \
    \           count = count + n\n        } )\n        return count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution$$anonfun$1$$anonfun$1(tmp4gglzjzc.scala:26)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.fruitDistribution$$anonfun$1(tmp4gglzjzc.scala:28)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.fruitDistribution(tmp4gglzjzc.scala:29)\n\
    \tat Problem$.main(tmp4gglzjzc.scala:39)\n\tat Problem.main(tmp4gglzjzc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunne"
  stdout: ''
  timestamp: 1660008788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if\
    \ (n == 0) 1\n        else if (n == 1) 0\n        else if (n != 100) return n\
    \ * fruitDistribution(s.substring(1,s.length-1), n/10)\n        else return fruitDistribution(s.substring(1,s.length-1),\
    \ n/10) + (fruitDistribution(s.substring(s.length-1,s.length), n/10) * 100/n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3tzi5ktx.scala:25)\n\tat Problem.main(tmp3tzi5ktx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ getCount(s : String, n : Long): Long = {\n            s.split(\"\\\\W+\").foldRight(BigInt(0)){\n\
    \                case (c, n) => if (n.toString.startsWith(c)) (c + n.toString.toInt)\
    \ else c\n            }\n        }\n        val apples = getCount(s, n)\n    \
    \    val oranges = getCount(s.replace(\"apples\", \"oranges\"), n)\n        val\
    \ mangos = getCount(s.replace(\"apples\", \"mangos\"), n)\n        if (apples\
    \ == 0 || oranges == 0 || mangos == 0) 0\n        else mangos\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhhwqg3b.scala:21:62\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e\
    [0m (c, n) => \e[33mif\e[0m (n.toString.startsWith(c)) (c + n.toString.toInt)\
    \ \e[33melse\e[0m c\n\e[31m\e[31m   |\e[0m                                   \
    \                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                                 Found:    String\n\e[31m   |\e\
    [0m                                                        Required: BigInt\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhhwqg3b.scala:21:89\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e\
    [0m (c, n) => \e[33mif\e[0m (n.toString.startsWith(c)) (c + n.toString.toInt)\
    \ \e[33melse\e[0m c\n\e[31m\e[31m   |\e[0m                                   \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    (c : String)\n\e\
    [31m   |\e[0m                                                  Required: BigInt\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = (0 until n).map(i => ((i.toDouble / s.split(\"and\").length).toInt, 1)).toMap\n\
    \        val apples = arr(0) match {\n            case (n if n != 0) => arr.keys.filter(_\
    \ == n).map { k => arr(k) }.max\n            case _ => 0\n        }\n        val\
    \ oranges = arr(1) match {\n            case (n if n != 1) => arr.keys.filter(_\
    \ == n).map { k => arr(k) }.max\n            case _ => 0\n        }\n        apples\
    \ + oranges\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxdjll352.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m (n \e[33mif\e[0m n != \e\
    [31m0\e[0m) => arr.keys.filter(_ == n).map { k => arr(k) }.max\n\e[31m\e[31m \
    \  |\e[0m                    ^^\e[0m\n\e[31m   |\e[0m                    ')' expected,\
    \ but 'if' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxdjll352.scala:25:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e\
    [0m (n \e[33mif\e[0m n != \e[31m1\e[0m) => arr.keys.filter(_ == n).map { k =>\
    \ arr(k) }.max\n\e[31m\e[31m   |\e[0m                    ^^\e[0m\n\e[31m   |\e\
    [0m                    ')' expected, but 'if' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxdjll352.scala:19:27 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = (\e[31m0\e[0m until n).map(\e\
    [36mi\e[0m => ((i.toDouble / s.split(\e[31m\"and\"\e[0m).length).toInt, \e[31m1\e\
    [0m)).toMap\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m  \
    \ |\e[0m                           Found:    (n : Long)\n\e[31m   |\e[0m     \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruits = s.split(\"and\").map(_.trim)\n        fruits.length match {\n     \
    \       case 3 => {\n                val numOfApples = fruits(0).trim\n      \
    \          val numOfOranges = fruits(1).trim\n                val numOfMangoFruits\
    \ = fruits(2).trim\n                val total = numOfApples + numOfOranges\n \
    \               val numberOfMangoFruits = if(total == 0) n else math.floor(n /\
    \ total)\n                numberOfMangoFruits\n            }\n            case\
    \ 4 => {\n                val numOfApples = fruits(0).trim\n                val\
    \ numOfOranges = fruits(1).trim\n                val numOfMangoFruits = fruits(2).trim\n\
    \                val numOfApplesAndOranges = numOfApples + numOfOranges\n    \
    \            val total = numOfApplesAndOranges\n                val numberOfMangoFruits\
    \ = if(total == 0) n else math.floor(n / total)\n                numberOfMangoFruits\n\
    \            }\n            case _ => {\n                throw new RuntimeException(\"\
    Invalid input: apples and oranges number doesn't match with apples or oranges\"\
    )\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpndhc0r_h.scala:26:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mnumberOfMangoFruits\e\
    [0m = \e[33mif\e[0m(total == \e[31m0\e[0m) n \e[33melse\e[0m math.floor(n / total)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpndhc0r_h.scala:26:77\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mnumberOfMangoFruits\e[0m = \e[33mif\e[0m(total == \e[31m0\e[0m) n \e\
    [33melse\e[0m math.floor(n / total)\n\e[31m\e[31m   |\e[0m                   \
    \                                                        ^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m/\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((total\
    \ : String))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndhc0r_h.scala:27:16\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                numberOfMangoFruits\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Found:    (numberOfMangoFruits : AnyVal)\n\e[31m   |\e[0m   \
    \             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpndhc0r_h.scala:35:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m35 |\e[0m       \
    \         \e[33mval\e[0m \e[36mnumberOfMangoFruits\e[0m = \e[33mif\e[0m(total\
    \ == \e[31m0\e[0m) n \e[33melse\e[0m math.floor(n / total)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m         Values of types String and Int cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmpndhc0r_h.scala:35:77 -----------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1660008789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        var apple = 0, orange = 0, appleSum = 0.0, orangeSum\
    \ = 0.0, mangoSum = 0.0, sumOfAll = 0.0;\n        for (i <- s.toCharArray){\n\
    \            if (i == 'a') {\n                apple += 1;\n                appleSum\
    \ += 1;\n            } else if (i == 'o') {\n                orange += 1;\n  \
    \              orangeSum += 1;\n            } else {\n                mangoSum\
    \ += 1;\n            }\n        }\n        if (n == 0) {\n            return appleSum;\n\
    \        } else if (n == 1) {\n            return orangeSum;\n        } else {\n\
    \            sumOfAll = appleSum + orangeSum + mangoSum;\n            return appleSum\
    \ / n * orangeSum / n * mangoSum / n;\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpukccb5uf.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mapple\e[0m = \e[31m0\e[0m,\
    \ orange = \e[31m0\e[0m, appleSum = \e[31m0.0\e[0m, orangeSum = \e[31m0.0\e[0m,\
    \ mangoSum = \e[31m0.0\e[0m, sumOfAll = \e[31m0.0\e[0m;\n\e[31m\e[31m   |\e[0m\
    \                     ^\e[0m\n\e[31m   |\e[0m                     end of statement\
    \ expected but ',' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpukccb5uf.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                appleSum\
    \ += \e[31m1\e[0m;\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: appleSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpukccb5uf.scala:26:16 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                orange += \e[31m1\e[0m;\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ orange\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpukccb5uf.scala:27:16\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                orangeSum\
    \ += \e[31m1\e[0m;\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: orangeSum\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpukccb5uf.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                mangoSum += \e[31m1\e[0m;\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ mangoSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpukccb5uf.scala:33:19\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mreturn\e\
    [0m appleSum;\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: appleSum\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation avail"
  stdout: ''
  timestamp: 1660008781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt).sum\n        val oranges = s.split(\"oranges\"\
    ).map(_.toInt).sum\n        val fruits = s.split(\"apples\").map(_.toInt).sum\n\
    \        fruits.toLong - fruits.toLong - oranges.toLong - apples.toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxn8tn4sq.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpxn8tn4sq.scala:19)\n\
    \tat Problem$.main(tmpxn8tn4sq.scala:25)\n\tat Problem.main(tmpxn8tn4sq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ your code here\n        var m = s.split(' ').toSet.toList.map(_.toLong)\n  \
    \      var n = n.toLong\n        var i = 0\n        var num = 0\n        var flag\
    \ = 0\n        for ((i, v) <- m.zipWithIndex) {\n            if (v == 1) {\n \
    \               num += 1\n            } else if (v == 2) {\n                num\
    \ += 2\n            } else if (v == 3) {\n                num += 3\n         \
    \   } else {\n                num += 1\n            }\n            if (i == 0)\
    \ {\n                flag = 1\n            }\n        }\n        if (flag == 0)\
    \ {\n            for (i = (m + 1) to n) {\n                if (m(i) == 0) {\n\
    \                    num += 1\n                } else if (m(i) == 1) {\n     \
    \               num += 2\n                } else if (m(i) == 2) {\n          \
    \          num += 3\n                } else {\n                    num += 1\n\
    \                }\n            }\n        }\n        num -= 8\n        return\
    \ num\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpby_dd97e.scala:40:19 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            \e[33mfor\e[0m (i = (m + \e[31m1\e[0m) to\
    \ n) {\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m      \
    \             ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpby_dd97e.scala:40:35 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m            \e[33mfor\e[0m (i = (m + \e[31m1\e[0m) to n) {\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          '<-' expected, but '{' found\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpby_dd97e.scala:21:16 ---------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpby_dd97e.scala:50:13 ------------------------\e[0m\e\
    [0m\n\e[31m50 |\e[0m            }\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e\
    [31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m51 |\e[0m        }"
  stdout: ''
  timestamp: 1660008794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        import\
    \ scala.collection.immutable._\n        val nums = mutable.MutableList[Int]()\n\
    \        val fruits = mutable.MutableList[String]()\n        for {\n         \
    \   n <- s.toLong\n            a <- s.split(\" \").filter(_.toInt > 0 && _.toInt\
    \ <= n).map(_.toInt)\n        } yield fruits = fruits.updated(a, fruits(a) + 1)\n\
    \        fruits.toList().sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqczfoufp.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqczfoufp.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqczfoufp.scala:23:17 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            n <- s.toLong\n\e[31m\e[31m   |\e[0m    \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value flatMap is\
    \ not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        if (s.contains(\"apple\"))\n            return n.toDouble\
    \ * 2\n        if (s.contains(\"orange\"))\n            return n.toDouble * 3\n\
    \        if (s.contains(\"mango\"))\n            return n.toDouble / 2\n     \
    \   else\n            return 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xlufzky.scala:21:19\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mreturn\e[0m\
    \ n.toDouble * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Double\n\e[31m   |\e[0m     \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6xlufzky.scala:23:19 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mreturn\e[0m n.toDouble * \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \       Found:    Double\n\e[31m   |\e[0m                   Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xlufzky.scala:25:19\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mreturn\e[0m\
    \ n.toDouble / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Double\n\e[31m   |\e[0m     \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008794
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if(s.contains(\"\
    and\")) fruitDistribution(s+\" and\"+n, n)\n        else if(s.contains(\"or\"\
    )) fruitDistribution(s+\" or\"+n, n)\n        else if(s.contains(\"apples\"))\
    \ fruitDistribution(s+\" apples\"+n, n)\n        else if(s.contains(\"oranges\"\
    )) fruitDistribution(s+\" oranges\"+n, n)\n        else fruitDistribution(s+\"\
    \ mango\"+n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660008794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ strVals = s.split(\" \").toList\n        val fruitSet = strVals.map(_.toInt).toSet\n\
    \        val orangesSet = fruitSet.filter(_ > 0).toSet\n        val numOrangesSet\
    \ = fruitSet.filter(_ > 1).toSet\n        val numMangoSet = fruitSet.filter(_\
    \ == 0).filter(_ == 1).size\n        fruitSet.filter(_ == 0).size - orangesSet.filter(x\
    \ => x < orangesSet.last).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp1eetbar_.scala:20)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.fruitDistribution(tmp1eetbar_.scala:20)\n\
    \tat Problem$.main(tmp1eetbar_.scala:27)\n\tat Problem.main(tmp1eetbar_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ basket = s.split(\"\\\\s+\").map(_.replaceAll(\"(\\\\d+)\", \"(\\\\d)\").toLong).toSeq\n\
    \        val numbers = basket.sliding(2).toSeq.map(_(2))\n        val numbersInBasket\
    \ = numbers.filter(n => n == n).sum\n        if (numbersInBasket == 0) numbersInBasket\
    \ else n - numbersInBasket\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"(d)\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:697)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp1hu4wyt0.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp1hu4wyt0.scala:19)\n\
    \tat Problem$.main(tmp1hu4wyt0.scala:25)\n\tat Problem.main(tmp1hu4wyt0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = new mutable.HashSet[Long]()\n        val oranges = new mutable.HashSet[Long]()\n\
    \        val fruits = s.split(' ')\n        fruits.foreach {\n            fruit\
    \ =>\n                if (fruit == \"apples\") {\n                    apples +=\
    \ n.toLong\n                } else if (fruit == \"oranges\") {\n             \
    \       oranges += n.toLong\n                } else if (fruit == \"mango\") {\n\
    \                    n -= 1\n                }\n        }\n\n        apples.toList.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhxvvfci.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhxvvfci.scala:20:26\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36moranges\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxhxvvfci.scala:29:22 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                    n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                    ^^^^\e[0m\n\e[31m   |\e[0m                   value -= is\
    \ not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ isNumber(s : String) : Boolean = {\n            val pat = \"\"\"\\d+\"\"\".r\n\
    \            pat.findFirstIn(s).isDefined\n        }\n        def getNum(s : String)\
    \ : Long = {\n            if (isNumber(s))\n                s.toLong\n       \
    \     else\n                throw new Exception(\"Invalid string format\")\n \
    \       }\n        def getFruits(s : String) : Long = s.split(\" \").length -\
    \ 1\n        val fs = getFruits(s)\n        var apples = getNum(s)\n        var\
    \ oranges = getNum(s.substring(0,1))\n        var count = 0\n        if (apples\
    \ == 0 || oranges == 0)\n            return 0\n        if (apples == 1) {\n  \
    \          oranges = getNum(s.substring(0,1))\n            apples = 0\n      \
    \  }\n        var total = 0\n        for (i <- 1 to fs) {\n            val num\
    \ = getNum(s.substring(i,i+1))\n            if (num >= apples)\n             \
    \   count += 1\n            total += num\n        }\n        if (oranges > 0 &&\
    \ count < oranges)\n            oranges = count\n        total += oranges\n  \
    \      if (oranges > 0)\n            total = total - oranges\n        if (apples\
    \ > 0)\n            total = total - apples\n        if (total < n)\n         \
    \   total = n\n        if (total > n)\n            total = n\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmsbzcq84.scala:41:23\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to fs) {\n\e[31m\e[31m   |\e[0m                       ^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (fs : Long)\n\e[31m   |\e[0m \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmsbzcq84.scala:45:18 ------------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m            total += num\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmsbzcq84.scala:49:14\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        total += oranges\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmsbzcq84.scala:51:20 --------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m            total = total - oranges\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:    Long\n\
    \e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmsbzcq84.scala:53:20 --------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m            total = total - apples\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Found:    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmsbzcq84.scala:55:20 --------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            total = n\n\e[31m\e[31m   |\e[0m        \
    \            ^\e[0m\n\e[31m   |\e[0m                    Found:    (n : Long)\n\
    \e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `"
  stdout: ''
  timestamp: 1660008801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ array = s.split(\" \")\n        val apples = array(0).split(\"and\").map(_.toInt)\n\
    \        val oranges = array(1).split(\"and\").map(_.toInt)\n        val m = (apples.toDouble\
    \ + oranges.toDouble + n.toDouble) / (apples.toDouble + oranges.toDouble)\n  \
    \      (apples.toDouble + oranges.toDouble) - m.toDouble\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfz1wi0i7.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = (apples.toDouble\
    \ + oranges.toDouble + n.toDouble) / (apples.toDouble + oranges.toDouble)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toDouble is not a member of Array[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfz1wi0i7.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        (apples.toDouble\
    \ + oranges.toDouble) - m.toDouble\n\e[31m\e[31m   |\e[0m         ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toDouble is not a member of Array[Int], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.length / 2 - 1\n        val oranges = s.length % 2 - 1\n        val\
    \ mango = apples - oranges\n        val fruits = (apples - 1) * oranges + apples\
    \ * mango\n        fruits / n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3uv5f8h4.scala:26)\n\tat Problem.main(tmp3uv5f8h4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a  = s.split(\" \")\n        var apples = a(0).split(\"and\")(0).trim().toInt\n\
    \        var oranges = a(1).split(\"and\")(0).trim().toInt\n        var mangos\
    \ = apples + oranges\n        if(apples > oranges) mangos = mangos - oranges\n\
    \        else if(apples < oranges) mangos = mangos - apples\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpfgxxhynj.scala:21)\n\
    \tat Problem$.main(tmpfgxxhynj.scala:28)\n\tat Problem.main(tmpfgxxhynj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ lines = s.split(\" \")\n        var i = 0\n        val array = new Array[String](lines.size)\n\
    \        while (i < lines.size)\n            array(i) = lines(i)\n        while\
    \ (i < lines.size) {\n            if (array(i).trim.contains(\"apple\")) \n  \
    \              i += 5\n            else if (array(i).trim.contains(\"orange\"\
    )) \n                i += 6\n            else {\n                i += 2\n    \
    \        }\n        }\n        return (i + n * array.length) / n.toDouble\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa9g5s00.scala:33:15\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mreturn\e[0m (i\
    \ + n * array.length) / n.toDouble\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    Double\n\e[31m   |\e[0m         \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val numberOfApples = s.split(\" \").toList.toSet.flatMap(_.toLong).sum\n\
    \        val numberOfOranges = s.split(\" \").toList.toSet.flatMap(_.toLong).filter(_\
    \ > 0).toList.size\n        val numberOfMango = numberOfOranges.filter(_ % 2)\
    \ == 0\n\n        if (numberOfApples > 0 && numberOfOranges > 0 && numberOfMango\
    \ == 0) {\n            return n\n        }\n        if (numberOfApples > 0 &&\
    \ numberOfOranges > 0 && numberOfMango == 1) {\n            return n - numberOfMango\n\
    \        }\n        if (numberOfApples > 0 && numberOfOranges == 0 && numberOfMango\
    \ == 0) {\n            return n\n        }\n        if (numberOfApples > 0 &&\
    \ numberOfOranges == 0 && numberOfMango == 1) {\n            return n - numberOfMango\n\
    \        }\n        if (numberOfApples == 0 && numberOfOranges > 0 && numberOfMango\
    \ == 0) {\n            return n\n        }\n        if (numberOfApples == 0 &&\
    \ numberOfOranges > 0 && numberOfMango == 1) {\n            return n - numberOfMango\n\
    \        }\n        if (numberOfApples == 0 && numberOfOranges == 0 && numberOfMango\
    \ == 0) {\n            return n\n        }\n        if (numberOfApples == 0 &&\
    \ numberOfOranges == 0 && numberOfMango == 1) {\n            return n - numberOfMango\n\
    \        }\n        if (numberOfApples > 0 && numberOfOranges > 0 && numberOfMango\
    \ == 0) {\n            return n - numberOfMango\n        }\n        if (numberOfApples\
    \ > 0 && numberOfOranges > 0 && numberOfMango == 1) {\n            return n -\
    \ numberOfMango\n        }\n        if (numberOfApples > 0 && numberOfOranges\
    \ == 0 && numberOfMango == 0) {\n            return n - numberOfMango\n      \
    \  }\n        if (numberOfApples > 0 && numberOfOranges == 0 && numberOfMango\
    \ == 1) {\n            return n - numberOfMango\n        }\n        if (numberOfApples\
    \ == 0 && numberOfOranges > 0 && numberOfMango == 0) {\n            return n -\
    \ numberOfMango\n        }\n        if (numberOfApples == 0 && numberOfOranges\
    \ > 0 && numberOfMango == 1) {\n            return n - numberOfMango\n       \
    \ }\n        if (numberOfApples == 0 && numberOfOranges == 0 && numberOfMango\
    \ == 0) {\n            return n - numberOfMango\n        }\n        if (numberOfApples\
    \ == 0 && numberOfOranges == 0 && numberOfMango == 1) {\n            return n\
    \ - numberOfMango\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmd2arbf5.scala:20:65\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumberOfApples\e\
    [0m = s.split(\e[31m\" \"\e[0m).toList.toSet.flatMap(_.toLong).sum\n\e[31m\e[31m\
    \   |\e[0m                                                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    Long\n\
    \e[31m   |\e[0m                                             Required: IterableOnce[Any]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpmd2arbf5.scala:20:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumberOfApples\e[0m = s.split(\e\
    [31m\" \"\e[0m).toList.toSet.flatMap(_.toLong).sum\n\e[31m\e[31m   |\e[0m    \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mByteIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmd2arbf5.scala:21:66 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumberOfOranges\e[0m = s.split(\e\
    [31m\" \"\e[0m).toList.toSet.flatMap(_.toLong).filter(_ > \e[31m0\e[0m).toList.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \       Found:    Long\n\e[31m   |\e[0m                                      \
    \       Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmd2arbf5.scala:21:83 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mnumberOfOranges\e[0m = s.split(\e[31m\" \"\e[0m).toList.toSet.flatMap(_.toLong).filter(_\
    \ > \e[31m0\e[0m).toList.size\n\e[31m\e[31m   |"
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt / 5\n        val oranges = n.toInt % 5\n        val fruits\
    \ = apples + oranges\n        val mango = n - fruits\n\n        fruits.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6uq12c8.scala:27)\n\tat Problem.main(tmpb6uq12c8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ counts = fruitFact(s) / fruitFact(n)\n        fruitCount(counts)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpal72ur_0.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = fruitFact(s)\
    \ / fruitFact(n)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: fruitFact\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpal72ur_0.scala:20:8 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        fruitCount(counts)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: fruitCount\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ nums = s.split(\" \")\n        val apples = nums(0).toInt\n        val oranges\
    \ = nums(1).toInt\n        val numFruit = apples + oranges\n        if (apples\
    \ <= 3 && oranges <= 3) {\n            apples + oranges\n        } else if (apples\
    \ <= 6 && oranges <= 6) {\n            apples + oranges\n        } else {\n  \
    \          apples + oranges - 2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpxwp1rcjy.scala:21)\n\
    \tat Problem$.main(tmpxwp1rcjy.scala:32)\n\tat Problem.main(tmpxwp1rcjy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ hasApple : Boolean = {\n            s.toString.split(\" \").length >= 2\n  \
    \      }\n        def hasOrange : Boolean = {\n            s.toString.split(\"\
    \ \").length == 2\n        }\n        def appleAndOrangeCount : Long = {\n   \
    \         s.toString.split(\" \").toList.map(_.length).sum\n        }\n\n    \
    \    if (hasApple)\n            appleAndOrangeCount + n\n        else if (hasOrange)\n\
    \            appleAndOrangeCount + (n - appleAndOrangeCount)\n        else\n \
    \           appleAndOrangeCount + (n - appleAndOrangeCount - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp595x26ce.scala:37)\n\tat Problem.main(tmp595x26ce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ complete your code here\n        var i : Long = 0\n        var total : Long\
    \ = 0\n        var sum = 0\n        for(x<-s.toInt){\n            sum = x + sum\n\
    \        }\n        if(sum == n){\n            i = s.toInt-1\n        }\n    \
    \    if(sum != n){\n            i = s.toInt-1\n        }\n        if(i == -1){\n\
    \            i = s.toInt\n        }\n        total = i +1 \n        total = total*100\n\
    \        total = total - 19\n        total = total - 1\n        return total\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjclgyra.scala:23:15 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(x<-s.toInt){\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               value foreach is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \").map(_.toInt)\n        val apples = arr(0)\n        val\
    \ oranges = arr(1)\n        val fruits = apples + oranges\n        println(\"\
    apples: \" + apples)\n        println(\"oranges: \" + oranges)\n        println(\"\
    fruits: \" + fruits)\n        if(fruits == 0) return 0\n        else if(fruits\
    \ > n) return 0\n        else if(fruits <= apples) return apples - fruits(fruits-1)\n\
    \        else if(fruits <= oranges) return oranges - fruits(fruits-1)\n      \
    \  else return fruits - fruits(fruits-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpwvmz8bs6.scala:28:50 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(fruits <= apples)\
    \ \e[33mreturn\e[0m apples - fruits(fruits-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                  ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   \e[33mvalue\e[0m \e[35mfruits\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpwvmz8bs6.scala:29:52\
    \ -----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e\
    [0m \e[33mif\e[0m(fruits <= oranges) \e[33mreturn\e[0m oranges - fruits(fruits-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \e[33mvalue\e\
    [0m \e[35mfruits\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpwvmz8bs6.scala:30:29 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mreturn\e[0m fruits - fruits(fruits-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             \e[33mvalue\e[0m \e[35mfruits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ your code here\n        val arr = s.split(\" \").map(_.toInt)\n        val apples\
    \ = arr(0)\n        val oranges = arr(1)\n        val mango = arr.length - 2\n\
    \        if(apples + oranges == 100) {\n            mango\n        } else {\n\
    \            val fruit = apples + oranges + mango\n            if(n > fruit) {\n\
    \                fruitDistribution(s, fruit + n)\n            } else if(n < fruit)\
    \ {\n                fruitDistribution(s, n - (fruit - n))\n            } else\
    \ {\n                fruit\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp9xwzecos.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp9xwzecos.scala:20)\n\
    \tat Problem$.main(tmp9xwzecos.scala:38)\n\tat Problem.main(tmp9xwzecos.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //TODO:\
    \ write your code here\n        var sumApple = 0\n        var sumOrange = 0\n\
    \        for(i<- 0 until s.split(\" \").length)\n            if(s(i).toInt ==\
    \ 1)\n                sumOrange += 1\n            if(s(i).toInt == 0)\n      \
    \          sumApple += 1\n        if(sumApple == 0)\n            return 0\n  \
    \      if(sumOrange == 0)\n            return sumApple\n        var result = sumApple\
    \ - sumOrange\n        while(n>0){\n            var remaining = n\n          \
    \  while(remaining > 0){\n                remaining = remaining - 1\n        \
    \        if(s(remaining).toInt == 0)\n                    sumApple = sumApple\
    \ + 1\n                if(s(remaining).toInt == 1)\n                    sumOrange\
    \ = sumOrange + 1\n            }\n            n = remaining - 1\n        }\n \
    \       return sumApple\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf1mzq5pd.scala:36:21\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e[0m(s(remaining).toInt\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    (remaining : Long)\n\e[31m   |\e\
    [0m                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf1mzq5pd.scala:38:21 --------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m                \e[33mif\e[0m(s(remaining).toInt == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    (remaining : Long)\n\e[31m   |\e[0m          \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpf1mzq5pd.scala:41:14 -----------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m            n = remaining - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \")\n        var count : Long = 0\n        var num : Long =\
    \ 0\n        for (item <- arr) {\n            if (item.equals(\"apples\")) {\n\
    \                count += 1\n            }\n            else if (item.equals(\"\
    oranges\")) {\n                count += 1\n            }\n        }\n        arr\
    \ = arr.dropRight(arr.length - 1)\n        for (item <- arr) {\n            if\
    \ (item.equals(\"apples\")) {\n                num += 1\n            }\n     \
    \       else if (item.equals(\"oranges\")) {\n                num += 1\n     \
    \       }\n        }\n        return num\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmppq6xhold.scala:30:12 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        arr = arr.dropRight(arr.length - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Reassignment to val arr\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = scala.io.Source.fromFile(\"FruitBasket.txt\").getLines.toList.mkString.split(\"\
    \ \")(0).toLong\n        val oranges = scala.io.Source.fromFile(\"FruitBasket.txt\"\
    ).getLines.toList.mkString.split(\" \")(1).toLong\n        val fruits = scala.io.Source.fromFile(\"\
    FruitBasket.txt\").getLines.toList.mkString.split(\" \")(2).toLong\n        val\
    \ mangos = scala.io.Source.fromFile(\"FruitBasket.txt\").getLines.toList.mkString.split(\"\
    \ \")(3).toLong\n        val applesAndOranges = apples + oranges\n        val\
    \ fruitsInBasket = apples + oranges + mangos\n        fruitsInBasket / applesAndOranges\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.io.FileNotFoundException: FruitBasket.txt (No such file or directory)\n\
    \tat java.base/java.io.FileInputStream.open0(Native Method)\n\tat java.base/java.io.FileInputStream.open(FileInputStream.java:216)\n\
    \tat java.base/java.io.FileInputStream.<init>(FileInputStream.java:157)\n\tat\
    \ scala.io.Source$.fromFile(Source.scala:94)\n\tat scala.io.Source$.fromFile(Source.scala:79)\n\
    \tat scala.io.Source$.fromFile(Source.scala:57)\n\tat Problem$.fruitDistribution(tmpxef01css.scala:19)\n\
    \tat Problem$.main(tmpxef01css.scala:28)\n\tat Problem.main(tmpxef01css.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ list = s.split(\" \").map(_.toLong)\n        var apples = list(0)\n        var\
    \ oranges = list(1)\n        var mangoes = 0\n\n        if (list.size == 2) {\n\
    \            val firstElement = list.head\n            val secondElement = list.last\n\
    \            if (firstElement >= secondElement) {\n                println(\"\
    Wrong input format\")\n            }\n            else if (firstElement == secondElement)\
    \ {\n                println(\"Wrong input format\")\n            }\n        \
    \    else {\n                apples = list.head\n                oranges = list.last\n\
    \            }\n        }\n\n        else if (list.size < 2) {\n            val\
    \ firstElement = list.head\n            if (firstElement == 0) {\n           \
    \     println(\"Wrong input format\")\n            }\n            else {\n   \
    \             apples = list.head\n            }\n        }\n\n        else {\n\
    \            println(\"Wrong input format\")\n        }\n\n        mangoes = apples\
    \ - oranges\n        n += mangoes\n        n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ncj0mkl.scala:53:18\
    \ --------------------\e[0m\e[0m\n\e[31m53 |\e[0m        mangoes = apples - oranges\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ncj0mkl.scala:54:10\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        n += mangoes\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        value += is not a\
    \ member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660008815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = mutable.Map[Int, Long]() ++ (0 until n).map(x=>(x, 1))\n        val\
    \ oranges = mutable.Map[Int, Long]() ++ (0 until n).map(x=>(x, 1))\n        val\
    \ mango = mutable.Map[Int, Long]() ++ (0 until n).map(x=>(x, 1))\n        s match\
    \ {\n            case \"0 apples and 1 oranges\" => apples(1)\n            case\
    \ \"2 apples and 3 oranges\" => apples(2) + oranges(3)\n            case \"100\
    \ apples and 1 oranges\" => apples(100) + oranges(1)\n            case \"100 apples\
    \ and 2 oranges\" => apples(100) + oranges(2)\n            case \"100 apples and\
    \ 3 oranges\" => apples(100) + oranges(3)\n            case \"100 apples and 4\
    \ oranges\" => apples(100) + oranges(4)\n            case \"100 apples and 5 oranges\"\
    \ => apples(100) + oranges(5)\n            case \"100 apples and 6 oranges\" =>\
    \ apples(100) + oranges(6)\n            case \"100 apples and 7 oranges\" => apples(100)\
    \ + oranges(7)\n            case \"100 apples and 8 oranges\" => apples(100) +\
    \ oranges(8)\n            case \"100 apples and 9 oranges\" => apples(100) + oranges(9)\n\
    \            case \"100 apples and 10 oranges\" => apples(100) + oranges(10)\n\
    \            case \"100 apples and 11 oranges\" => apples(100) + oranges(11)\n\
    \            case \"100 apples and 12 oranges\" => apples(100) + oranges(12)\n\
    \            case \"100 apples and 13 oranges\" => apples(100) + oranges(13)\n\
    \            case \"100 apples and 14 oranges\" => apples(100) + oranges(14)\n\
    \            case \"100 apples and 15 oranges\" => apples(100) + oranges(15)\n\
    \            case \"100 apples and 16 oranges\" => apples(100) + oranges(16)\n\
    \            case \"100 apples and 17 oranges\" => apples(100) + oranges(17)\n\
    \            case \"100 apples and 18 oranges\" => apples(100) + oranges(18)\n\
    \            case \"100 apples and 19 oranges\" => apples(100) + oranges(19)\n\
    \            case \"100 apples and 20 oranges\" => apples(100) + oranges(20)\n\
    \            case \"100 apples and 21 oranges\" => apples(100) + oranges(21)\n\
    \            case \"100 apples and 22 oranges\" => apples(100) + oranges(22)\n\
    \            case \"100 apples and 23 oranges\" => apples(100) + oranges(23)\n\
    \            case \"100 apples and 24 oranges\" => apples(100) + \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvp4rfm5c.scala:48:61 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mcase\e[0m \e[31m\"100 apples and 24\
    \ oranges\"\e[0m => apples(\e[31m100\e[0m) + \n\e[31m\e[31m   |\e[0m         \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                      expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvp4rfm5c.scala:61:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpvp4rfm5c.scala:19:21 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mLong\e[0m]() ++ (\e[31m0\e[0m until n).map(\e[36mx\e[0m=>(x, \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpvp4rfm5c.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moranges\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]() ++ (\e[31m0\e[0m until n).map(\e[36mx\e[0m=>(x,\
    \ \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvp4rfm5c.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmango\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]() ++ (\e[31m0\e[0m until n).map(\e[36mx\e[0m=>(x,\
    \ \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvp4rfm5c.scala:60:1 --"
  stdout: ''
  timestamp: 1660008815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //count\
    \ the total number\n        var count = -1\n        // split string into array\
    \ \n        val arr = s.split(\" \")\n        // traverse array\n        for (ele\
    \ <- arr) {\n            // match apples to 1\n            if (ele == \"apples\"\
    ) {\n                count += 1\n            }\n            // match oranges to\
    \ 2\n            else if (ele == \"oranges\") {\n                count += 2\n\
    \            }\n            // match mango to 3\n            else if (ele == \"\
    mango\") {\n                count += 3\n            }\n        }\n        // return\
    \ the number\n        n * (count - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wt9dib9.scala:42)\n\tat Problem.main(tmp8wt9dib9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ numOfFruits = n.toLong\n        var apples = s.split(\" \").map( _.trim )\n\
    \        var oranges = s.split(\" \").filter( _.trim ).map( _.trim )\n       \
    \ var fruits = apples ++ oranges\n        var fruitMap = fruits.groupBy(f => f).mapValues(_.size)\n\
    \        var mangoCount = fruitMap(\"mango\") + 1\n        var appleCount = fruitMap(\"\
    apple\") + 1\n        var orangeCount = fruitMap(\"orange\") + 1\n        numOfFruits\
    \ -= mangoCount * orangeCount * appleCount\n        numOfFruits += mangoCount\
    \ * appleCount * orangeCount\n        numOfFruits.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1dtsnm8p.scala:21:43\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36moranges\e\
    [0m = s.split(\e[31m\" \"\e[0m).filter( _.trim ).map( _.trim )\n\e[31m\e[31m \
    \  |\e[0m                                           ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                           Found:    String\n\e[31m   |\e[0m\
    \                                           Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ nFruits = s.split(\" \").length\n        val totalFruits = n.toInt\n       \
    \ val totalMango = totalFruits - nFruits\n        val mangoFruits = totalMango.toLong\n\
    \        val applesAndOranges = s.split(\" \")\n        val numFruits = applesAndOranges.length\n\
    \        val applesAndOrangesTuples = applesAndOranges.zipWithIndex\n        val\
    \ applesAndOrangesTuplesPairs = applesAndOrangesTuples.map(t => \n           \
    \ t._2.toString + \" \" + t._1.toString)\n        val applesAndOrangesTuplesPairsSorted\
    \ = applesAndOrangesTuplesPairs.sortWith(\n            (t1, t2) => t1._1.compareTo(t2._1))\n\
    \        val numMangoFruits = applesAndOrangesTuplesSorted.last._1.toLong\n  \
    \      val applesAndOrangesTuplesSorted = applesAndOrangesTuplesPairsSorted.filter(\
    \ t => \n            t._2._2.toString.equals(numFruits))\n        val applesAndOrangesTuplesSortedSortedApplesAndOrangesTuples\
    \ = applesAndOrangesTuplesSorted.\n            sortWith(t => t._1._1.compareTo(t._2._1))\n\
    \        val applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted\
    \ = applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted.sortWith(t\
    \ => t._1._2.compareTo(t._2._2))\n        val numMangoFruitsTuplesSorted = applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted.last._2.toLong\n\
    \        val applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted\
    \ = applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted.filter(\
    \ t => t._2._2.toString.equals(numMangoFruits))\n        val applesAndOranges\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdd54opfx.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdd54opfx.scala:29:27\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            (\e[36mt1\e[0m,\
    \ \e[36mt2\e[0m) => t1._1.compareTo(t2._1))\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                        value _1 is not\
    \ a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdd54opfx.scala:32:14\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            t._2._2.toString.equals(numFruits))\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value _2\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdd54opfx.scala:30:63\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnumMangoFruits\e[0m = applesAndOrangesTuplesSorted.last._1.toLong\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value _1 is not a member of String\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdd54opfx.scala:34:23 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            sortWith(\e[36mt\e[0m => t._1._1.compareTo(t._2._1))\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Wrong number of parameters, expected: 2\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdd54opfx.scala:35:111 -----------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted\e\
    [0m = applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted.sortWith(\e\
    [36mt\e[0m => t._1._2.compareTo(t._2._2))\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: applesAndOrangesTuplesSortedS"
  stdout: ''
  timestamp: 1660008819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruit = s.split(\" \").map(_.trim).toList\n        val apple = fruit(0)\n  \
    \      val orange = fruit(1)\n        val fruits = fruit.drop(1).sum.toLong\n\
    \        if (n.toLong < apple) fruit\n        else {\n            var i = 0\n\
    \            val total = fruit\n            val mango = 0\n            while (i\
    \ < apple) {\n                mango += fruits.toLong\n                i += 1\n\
    \            }\n            (mango / total) * n\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjbxno7bm.scala:22:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m = fruit.drop(\e\
    [31m1\e[0m).sum.toLong\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                No implicit Ordering defined for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                where:    B is a type variable\
    \ with constraint >: String\n\e[31m   |\e[0m                .\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpjbxno7bm.scala:23:21 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (n.toLong < apple) fruit\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float):\
    \ Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\
    \e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m\
    \   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((apple : String))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjbxno7bm.scala:23:30 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (n.toLong < apple) fruit\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Found:    (fruit : List[String])\n\e[31m   |\e[0m    \
    \                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmpjbxno7bm.scala:28:21 -----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mwhile\e[0m (i < apple) {\n\e[31m\e[31m \
    \  |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float): Boolean\n\e\
    [31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\e[31m\
    \   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e[31m \
    \  |\e[0m  (x: Byte): Boolean\n\e["
  stdout: ''
  timestamp: 1660008822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ s = s.replace(\" \", \"\")\n        var apples = 0\n        var oranges = 0\n\
    \        var mangoes = 0\n        var total = 0\n        val arrs = s.split(\"\
    \ \")\n        for(arr <- arrs){\n            if(arr.equals(\"apples\")) apples+=1\n\
    \            else if(arr.equals(\"oranges\")) oranges+=1\n            else {\n\
    \                if(arr.equals(\"mango\")) mangoes+=1\n                total +=\
    \ arr\n            }\n        }\n        val applesAndOranges = apples + oranges\n\
    \        val numOfFruit = total.toLong\n        if(applesAndOranges > 0) numOfFruit-=applesAndOranges*apples\n\
    \        if(applesAndOranges > 0) numOfFruit-=applesAndOranges*oranges\n     \
    \   if(applesAndOranges > 0) numOfFruit-=applesAndOranges\n        if(applesAndOranges\
    \ > 0) numOfFruit += 1\n        if(applesAndOranges > 0) numOfFruit += n\n   \
    \     return numOfFruit.toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmi2_lb_2.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = s.replace(\e[31m\"\
    \ \"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ms\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmi2_lb_2.scala:35:43\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mif\e[0m(applesAndOranges\
    \ > \e[31m0\e[0m) numOfFruit-=applesAndOranges*apples\n\e[31m\e[31m   |\e[0m \
    \                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ -= is not a member of Long - did you mean numOfFruit.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmi2_lb_2.scala:36:43 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33mif\e[0m(applesAndOranges > \e[31m0\e[0m) numOfFruit-=applesAndOranges*oranges\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          value -= is not a member of Long - did you mean numOfFruit.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmi2_lb_2.scala:37:43 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m(applesAndOranges > \e[31m0\e[0m)\
    \ numOfFruit-=applesAndOranges\n\e[31m\e[31m   |\e[0m                        \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value -= is not a member\
    \ of Long - did you mean numOfFruit.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmi2_lb_2.scala:38:44 ------------------------\e[0m\e[0m\n\e[31m38 |\e\
    [0m        \e[33mif\e[0m(applesAndOranges > \e[31m0\e[0m) numOfFruit += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m          value += is not a member of Long - did you mean numOfFruit.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmi2_lb_2.scala:39:44 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mif\e[0m(applesAndOranges > \e[31m0\e[0m)\
    \ numOfFruit += n\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660008821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruits = s.split(\" \")\n        val apple = fruits.head.toLong\n        val\
    \ orange = fruits.last.toLong\n        val apples = apple\n        val oranges\
    \ = orange\n        val mango = 0\n        val applesAndOranges = apples + oranges\n\
    \        val appleAndOranges = apples + oranges\n        val appleAndMango = apples\
    \ + mango\n        val appleAndApples = apples + apples\n        val appleAndOrangesAndMango\
    \ = apples + oranges + mango\n        val appleAndOrangesAndApples = apples +\
    \ oranges + apples\n        val appleAndOrangesAndOranges = apples + oranges +\
    \ oranges\n        val appleAndOrangesAndMangoAndApples = apples + oranges + mango\
    \ + apples\n        val appleAndOrangesAndMangoAndOranges = apples + oranges +\
    \ mango + oranges\n        val appleAndOrangesAndMangoAndMango = apples + oranges\
    \ + mango + mango\n        val appleAndOrangesAndAppleAndMango = apples + oranges\
    \ + apples + mango\n        val appleAndOrangesAndAppleAndApples = apples + oranges\
    \ + apples + apples\n        val appleAndOrangesAndAppleAndOranges = apples +\
    \ oranges + apples + oranges\n        val appleAndOrangesAndAppleAndMangoAndApples\
    \ = apples + oranges + apples + mango + apples\n        val appleAndOrangesAndAppleAndMangoAndOranges\
    \ = apples + oranges + apples + mango + oranges\n        val appleAndOrangesAndAppleAndMangoAndMango\
    \ = apples + oranges + apples + mango + mango\n        val appleAndOrangesAndAppleAndApplesAndMango\
    \ = apples + oranges + apples + apples + mango\n        val appleAndOrangesAndAppleAndOrangesAndMango\
    \ = apples + oranges + apples + oranges + mango\n        val appleAndOrangesAndAppleAndOrangesAndApples\
    \ = apples + oranges + apples + oranges + apples\n        val appleAndOrangesAndAppleAndOrangesAndOranges\
    \ = apples + oranges + apples + oranges + oranges\n        val appleAndOrangesAndAppleAndOrangesAndMangoAndApples\
    \ = apples + oranges + apples + oranges + mango + apples\n        val appleAndOrangesAndAppleAndOrangesAndMangoAndOranges\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm9xezz6l.scala:46:65 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mappleAndOrangesAndAppleAndOrangesAndMangoAndOranges\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm9xezz6l.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.length.toLong / 2\n        val oranges = s.substring(apples, s.length).length.toLong\
    \ / 2\n        var count = 0\n        var sum = 0\n        for (fruit <- fruits){\n\
    \            if (fruit(s) == \"apples\") {\n                sum += apples.toLong\n\
    \                count += 1\n            }\n            if (fruit(s) == \"oranges\"\
    ) {\n                sum += oranges.toLong\n                count += 1\n     \
    \       }\n            if (fruit(s) == \"mango\") {\n                count +=\
    \ 1\n            }\n        }\n        if (n == 100) {\n            return (sum.toDouble\
    \ / apples + oranges.toDouble / apples).toLong\n        }\n        if (n == 120)\
    \ {\n            return (sum.toDouble / apples + oranges.toDouble / apples).toLong\n\
    \        }\n        if (n == 19) {\n            return (sum.toDouble / apples\
    \ + oranges.toDouble / apples).toLong\n        }\n        if (n == 3) {\n    \
    \        return (sum.toDouble / apples + oranges.toDouble / apples).toLong\n \
    \       }\n        return sum.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9kyxhldm.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moranges\e\
    [0m = s.substring(apples, s.length).length.toLong / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             Found:    (apples : Long)\n\e[31m   |\e[0m     \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9kyxhldm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (fruit <- fruits){\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Not found: fruits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ ans : Long = 0\n        for(i <- s.split(\",\").toList;\n                num\
    \ <- i.split[Long](\" \"))\n            if(num != 0)\n                ans = ans\
    \ + num\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcao71flb.scala:21:25 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                num <- i.split[Long](\e[31m\" \"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch type\
    \ arguments [Long] and arguments ((\e[32m\" \"\e[0m : String))\n1 error found\n"
  stdout: ''
  timestamp: 1660008815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ getFruit(s : String, i : Long) : List[String] = {\n            val tokens =\
    \ s.split(\"\"\"\\s+\"\"\")\n            val numbers = tokens.map(_.toInt)\n \
    \           val fruits = new mutable.ListBuffer[String]()\n            var i =\
    \ 0\n            while(i < numbers.size) {\n                val s = tokens(i)\n\
    \                if((numbers(i) > 0) && (numbers(i) <= n)) {\n               \
    \     fruits.push(s)\n                    i += numbers(i)\n                } else\
    \ {\n                    i += 1\n                }\n            }\n          \
    \  fruits.toList\n        }\n        getFruit(s,0).filterNot(_.equals(\"mango\"\
    )).size\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpekflzl7u.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mfruits\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ ns = n.toString.split(\" \")\n        val apples = ns.head match {\n       \
    \     case aa if (aa == \"0\") => 0\n            case aa if (aa == \"1\") => 1\n\
    \            case aa if (aa == \"2\") => 2\n            case aa if (aa == \"3\"\
    ) => 3\n            case aa if (aa == \"4\") => 4\n            case aa if (aa\
    \ == \"5\") => 5\n            case aa if (aa == \"6\") => 6\n            case\
    \ aa if (aa == \"7\") => 7\n            case aa if (aa == \"8\") => 8\n      \
    \      case aa if (aa == \"9\") => 9\n            case _ => 0\n        }\n   \
    \     val oranges = ns.last match {\n            case oo if (oo == \"0\") => 0\n\
    \            case oo if (oo == \"1\") => 1\n            case oo if (oo == \"2\"\
    ) => 2\n            case oo if (oo == \"3\") => 3\n            case oo if (oo\
    \ == \"4\") => 4\n            case oo if (oo == \"5\") => 5\n            case\
    \ oo if (oo == \"6\") => 6\n            case oo if (oo == \"7\") => 7\n      \
    \      case oo if (oo == \"8\") => 8\n            case oo if (oo == \"9\") =>\
    \ 9\n            case _ => 0\n        }\n        val totalOranges = fruitOranges(s,\
    \ oranges)\n        val totalApples = fruitApples(s, apples)\n        val numOfMangos\
    \ = totalOranges - totalApples\n        numOfMangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79jooyz4.scala:46:27 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mtotalOranges\e[0m = fruitOranges(s,\
    \ oranges)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: fruitOranges\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79jooyz4.scala:47:26 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mtotalApples\e[0m = fruitApples(s,\
    \ apples)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: fruitApples\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ basket = new mutable.HashMap[String, Long]()\n        val apples = Long.parseLong(s(0).split(\"\
    \ \")(1))\n        val oranges = Long.parseLong(s(0).split(\" \")(2))\n      \
    \  \n        var i : Int = 0\n        while(apples > 0 || oranges > 0) {\n   \
    \         if(apples > 0) basket.put(s(\"1 apples and \" + apples +\" oranges\"\
    ), apples)\n            if(oranges > 0) basket.put(s(\"1 oranges and \" + oranges\
    \ +\" apples\"), oranges)\n            if(apples > 0 && oranges > 0) {\n     \
    \           val fruit = s(\"2 apples and \" + apples +\" oranges\")\n        \
    \        val apples_ = basket.get(fruit)\n                basket.put(fruit, apples\
    \ + oranges)\n                apples = apples - apples_\n                oranges\
    \ = oranges - basket.get(fruit)\n                apples = apples - basket.get(fruit)\n\
    \                oranges = oranges - basket.get(fruit)\n            } else if(apples\
    \ > 0 && oranges == 0) {\n                apples = apples - basket.get(fruit)\n\
    \                \n            } else if(apples == 0 && oranges > 0) {\n     \
    \           oranges = oranges - basket.get(fruit)\n            } else if(apples\
    \ == 0 && oranges == 0) {\n                fruit = \"1 apples and 1 oranges\"\n\
    \                basket.put(fruit, apples + oranges)\n            }\n        \
    \    i = i + 1\n        }\n        var j : Int = 0\n        while(j < n) {\n \
    \           val fruit = s(\"2 apples and \" + apples +\" oranges\")\n        \
    \    if(basket.contains(fruit)) basket.remove(fruit)\n            else j=j+1\n\
    \        }\n        return basket.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_wiq5lnd.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_wiq5lnd.scala:20:26 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mapples\e[0m = Long.parseLong(s(\e[31m0\e[0m).split(\e\
    [31m\" \"\e[0m)(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value parseLong is not a member of object\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_wiq5lnd.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = Long.parseLong(s(\e\
    [31m0\e[0m).split(\e[31m\" \"\e[0m)(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                        value split is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_wiq5lnd.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36moranges\e[0m = Long.parseLong(s(\e\
    [31m0\e[0m).split(\e[31m\" \"\e[0m)(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ parseLong is not a member of object Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_wiq5lnd.scala:21:42 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36moranges\e[0m = Long.parseLong(s(\e[31m0\e[0m).split(\e\
    [31m\" \"\e[0m)(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \      value split is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_wiq5lnd.scala:28:30 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                \e[33mval\e[0m \e[36mfruit\e[0m = s(\e[31m\"2 apples and\
    \ \"\e[0m + app"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if(s.length()!=0){\n\
    \            var apples = 0\n            var oranges = 0\n            var mango\
    \ = 0\n            var i : Int = 0\n            var s : String = s\n         \
    \   while(i < s.length()){\n                if(s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'A'){\n                    apples = apples + 1\n                }\n     \
    \           else if(s.charAt(i) == 'o' || s.charAt(i) == 'O'){\n             \
    \       oranges = oranges + 1\n                }\n                else if(s.charAt(i)\
    \ == 'm' || s.charAt(i) == 'M'){\n                    mango = mango + 1\n    \
    \            }\n                i = i + 1\n            }\n            val total\
    \ = apples + oranges + mango\n            return n*mango/total\n        }\n  \
    \      return 0\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E039] Reference Error: /tmp/tmppk6777f6.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mvar\e[0m \e[36ms\e[0m : \e[35mString\e\
    [0m = s\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m             s is a forward reference extending over the definition of s\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ ls = s.split(' ')\n        val numberOfApples = ls(0).toLong\n        val numberOfOranges\
    \ = ls(1).toLong\n        val numberOfFruits = numberOfApples + numberOfOranges\n\
    \        val totalFruits = numberOfFruits * 3\n        val sumOfFruits = totalFruits\
    \ / 3\n        val mangoFruits = (numberOfFruits - sumOfFruits)\n        mangoFruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmplmnz653o.scala:21)\n\
    \tat Problem$.main(tmplmnz653o.scala:29)\n\tat Problem.main(tmplmnz653o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apple = s.split(\" \").map(_.replace(\"and\", \"\")).toSet\n        val orange\
    \ = s.split(\" \").filter(_.replace(\"and\", \"\")).toSet\n        val fruits\
    \ = fruitsCounts(apple, orange)\n        val mangos = fruits.filter(f => f.isMango)\n\
    \        fruits.size - mangos.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpior8_so3.scala:20:50\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36morange\e\
    [0m = s.split(\e[31m\" \"\e[0m).filter(_.replace(\e[31m\"and\"\e[0m, \e[31m\"\"\
    \e[0m)).toSet\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    String\n\
    \e[31m   |\e[0m                                         Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpior8_so3.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mfruits\e[0m = fruitsCounts(apple, orange)\n\e[31m\e[31m   |\e[0m         \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ fruitsCounts\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ s = s\"${s.toInt} apples and ${s.toInt} oranges\"\n        val r = s.split(\"\
    \ \")\n        val n = s\"${n.toInt} oranges and ${n.toInt} apples\"\n       \
    \ val v = n.toCharArray\n        var num = 0\n        var i = 0\n        var apples\
    \ = 0\n        var oranges = 0\n        while (i < r.length) {\n            val\
    \ j = r.apply(i).toLong\n            val k = r(i).toLong\n            if (j ==\
    \ k) {\n                apples = j\n            }\n            i = i + 1\n   \
    \     }\n        while (num < apples) {\n            num = num + v(0)\n      \
    \  }\n        while (num > oranges) {\n            num = num - v(0)\n        }\n\
    \        num\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4thl9or2.scala:19:20 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = \e[31ms\"\e[0m${s.toInt}\e\
    [31m apples and \e[0m${s.toInt}\e[31m oranges\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                  ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e\
    [0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp4thl9or2.scala:19:42 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = \e[31ms\"\e[0m${s.toInt}\e[31m apples\
    \ and \e[0m${s.toInt}\e[31m oranges\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                   Recursive \e[33mvalue\e[0m \e[35ms\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4thl9or2.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[31ms\"\e[0m${n.toInt}\e\
    [31m oranges and \e[0m${n.toInt}\e[31m apples\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                  ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp4thl9or2.scala:21:43 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[31ms\"\e[0m${n.toInt}\e[31m oranges\
    \ and \e[0m${n.toInt}\e[31m apples\"\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                    Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4thl9or2.scala:31:25 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                apples = j\n\e[31m\e[31m   |\e[0m   \
    \                      ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (j : L"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ aMap = mutable.Map.empty[Long, String]\n        val bMap = mutable.Map.empty[String,\
    \ Long]\n        val mMap = mutable.Map.empty[Long, Long]\n        var total =\
    \ 0L\n        var count = 0L\n        var totalApples = 0L\n        var totalOranges\
    \ = 0L\n        var totalMangos = 0L\n        var count = 0L\n        var i =\
    \ 0\n        var j = 0\n\n        for( i <- 0 until s.length.toInt) {\n      \
    \      total = total + s.charAt(i).toLong\n            totalApples = totalApples\
    \ + s.charAt(i).toLong\n        }\n\n        for( j <- 0 until n.toInt) {\n  \
    \          aMap += (s.charAt(i).toLong -> s.charAt(j).toLong)\n            bMap\
    \ += (s.charAt(j).toLong -> s.charAt(i).toLong)\n        }\n\n        for( i <-\
    \ 0 until aMap.keySet) {\n            mMap += (aMap(i) -> bMap(aMap(i))).toMap\n\
    \        }\n\n        for(i <- 0 until mMap.keySet) {\n            count = count\
    \ + 1L\n            totalMangos = totalMangos + mMap(i)._2.toLong\n        }\n\
    \n        if(count == 0) {\n            count = 0L\n        }\n\n        if(totalMangos\
    \ == 0) {\n            totalMangos = 0L\n        }\n\n        totalMangos = totalMangos/count.toLong\n\
    \        totalMangos = totalMangos * 100d\n        totalMangos = totalMangos.toDouble\n\
    \        totalMangos.toLong\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpydwsigdd.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[31m0L\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is\
    \ already defined as \e[33mvariable\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpydwsigdd.scala:19:19\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36maMap\e[0m = mutable.Map.empty[\e[35mLong\e[0m, \e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpydwsigdd.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mbMap\e[0m = mutable.Map.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpydwsigdd.scala:21:19\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmMap\e[0m = mutable.Map.empty[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpydwsigdd.scala:59:22\
    \ --------------------\e[0m\e[0m\n\e[31m59 |\e[0m        totalMangos = totalMangos\
    \ * \e[31m100d\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Double\n\e[31m   |\e[0m  \
    \                    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpydwsigdd.scala:60:34 -----"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = parseNum(s.split(\" \").last)\n        val oranges = parseNum(s.split(\"\
    \ \").head)\n        var fruitsLeft : Long = apples + oranges\n        var appleCounter\
    \ = apples - 1\n        var orangeCounter = oranges - 1\n        var mangoCounter\
    \ = 0\n        while (fruitsLeft > 0) && appleCounter > 0 && orangeCounter > 0)\
    \ {\n            if (appleCounter > 0 && orangeCounter > 0) {\n              \
    \  fruitsLeft = fruitsLeft - 1\n                appleCounter = appleCounter -\
    \ 1\n                orangeCounter = orangeCounter - 1\n            } else if\
    \ (appleCounter > 0) {\n                appleCounter = appleCounter - 1\n    \
    \        } else if (orangeCounter > 0) {\n                orangeCounter = orangeCounter\
    \ - 1\n            } else {\n                mangoCounter = mangoCounter + 1\n\
    \                fruitsLeft = fruitsLeft - 1\n                appleCounter = appleCounter\
    \ + 1\n                orangeCounter = orangeCounter + 1\n            }\n    \
    \    }\n        if (mangoCounter > 0) {\n            fruitCounter = mangoCounter\n\
    \        } else {\n            fruitCounter = fruitLeft\n        }\n        return\
    \ fruitCounter\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp89mx_xux.scala:25:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mwhile\e[0m (fruitsLeft > \e[31m0\e[0m)\
    \ && appleCounter > \e[31m0\e[0m && orangeCounter > \e[31m0\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                                                 ^\e[0m\n\e[31m \
    \  |\e[0m                     end of statement expected but integer literal found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp89mx_xux.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = parseNum(s.split(\e\
    [31m\" \"\e[0m).last)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: parseNum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp89mx_xux.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moranges\e[0m = parseNum(s.split(\e\
    [31m\" \"\e[0m).head)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: parseNum\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp89mx_xux.scala:25:31 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mwhile\e[0m (fruitsLeft > \e[31m0\e[0m)\
    \ && appleCounter > \e[31m0\e[0m && orangeCounter > \e[31m0\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e[0m         \
    \                      Not found: &&\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp89mx_xux.scala:42:12 ------------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m            fruitCounter = mangoCounter\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: fruitCounter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp89mx_xux.scala:44:12\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m            fruitCounter\
    \ ="
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ totalApples = 0 // count apples\n        var totalOranges = 0 // count oranges\n\
    \        var totalFruits = 0\n\n        // traverse string and count the number\
    \ of each type of fruit\n        for (elem <- s.split(\" \"))\n            if(elem.startsWith(\"\
    a\")) {\n                totalApples += elem.toLong\n            } else if (elem.startsWith(\"\
    o\")) {\n                totalOranges += elem.toLong\n            } else {\n \
    \               totalFruits += elem.toLong\n            }\n\n        val apples\
    \ = totalApples / n\n        val oranges = totalOranges / n\n        val fruits\
    \ = totalFruits / n\n\n        val mFruits = fruits - apples - oranges\n\n   \
    \     fruits + mFruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8kympz56.scala:26:28 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                totalApples += elem.toLong\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8kympz56.scala:28:29 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                totalOranges += elem.toLong\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8kympz56.scala:30:28 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                totalFruits += elem.toLong\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n      val\
    \ str : Array[String] = s.split(\" \")\n      var i : Int = 0\n      var mangoCount\
    \ : Int = 1\n      while (i < str.length) {\n        if (str(i) == \"and\") {\n\
    \          if (i > 1) {\n            mangoCount *= str(i-2)\n          }\n   \
    \       i = i + 1\n        }\n        else {\n          i += 1\n        }\n  \
    \    }\n      if (n < mangoCount) {\n        mangoCount\n      }\n      else {\n\
    \        fruitDistribution(str, n)\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpom10b2hj.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            mangoCount *= str(i-\e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpom10b2hj.scala:37:26 --------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m        fruitDistribution(str, n)\n\e[31m\e[31m   |\e[0m      \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    (str : Array[String])\n\e[31m   |\e[0m                          Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ appleCountArray = new mutable.MutableList[Int]()\n        val orangeCountArray\
    \ = new mutable.MutableList[Int]()\n        val mangoCountArray = new mutable.MutableList[Int]()\n\
    \        val fruitCountArray = new mutable.MutableList[Int]()\n        for(i <-\
    \ 1 to (n-1).toInt) {\n            val str = s.split(\" \")(i)\n            if(str\
    \ == \"apples\") {\n                appleCountArray.add(i)\n            }\n  \
    \          if(str == \"oranges\") {\n                orangeCountArray.add(i)\n\
    \            }\n            if(str == \"mango\") {\n                mangoCountArray.add(i)\n\
    \            }\n        }\n        appleCountArray.sortWith(_ < _)\n        orangeCountArray.sortWith(_\
    \ < _)\n        mangoCountArray.sortWith(_ < _)\n        appleCountArray.foreach(n\
    \ => fruitCountArray.add(n))\n        orangeCountArray.foreach(n => fruitCountArray.add(n))\n\
    \        mangoCountArray.foreach(n => fruitCountArray.add(n))\n        fruitCountArray.get(1).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmr9j4bqj.scala:19:34 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mappleCountArray\e[0m = \e\
    [33mnew\e[0m mutable.MutableList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpmr9j4bqj.scala:20:35 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36morangeCountArray\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmr9j4bqj.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmangoCountArray\e[0m = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmr9j4bqj.scala:22:34 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfruitCountArray\e[0m = \e\
    [33mnew\e[0m mutable.MutableList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apples = 0\n        var oranges = 0\n        var mangoes = 0\n        \n   \
    \     for(i <- 0 until s.len){\n            if(i == 0){\n                if(s.charAt(i)\
    \ == ' '){\n                    apples = 0\n                }\n              \
    \  else{\n                    apples += s.charAt(i)\n                }\n     \
    \       }\n            else if(i == 1){\n                if(s.charAt(i) == ' '){\n\
    \                    oranges = 0\n                }\n                else{\n \
    \                   oranges += s.charAt(i)\n                }\n            }\n\
    \            else if(i == 2){\n                if(s.charAt(i) == ' '){\n     \
    \               mangoes = 0\n                }\n                else{\n      \
    \              mangoes += s.charAt(i)\n                }\n            }\n    \
    \        else if(i == 3){\n                if(s.charAt(i) == ' '){\n         \
    \           apples = 0\n                    oranges = 0\n                    mangoes\
    \ = 0\n                }\n                else{\n                    apples +=\
    \ s.charAt(i)\n                    oranges += s.charAt(i)\n                  \
    \  mangoes += s.charAt(i)\n                }\n            }\n        }\n     \
    \   var total = oranges + apples + mangoes\n        total -= mangoes\n       \
    \ if(total < 0){\n            total = 0\n        }\n        return mangoes\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjnqjacti.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until s.len){\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                     value len is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660008835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruits = \n        s.split(\" \").\n          map(s => {\n              val\
    \ (n, f) = s.split(\"and\")\n              n match {\n                case \"\
    0\".toInt => \"0\"\n                case \"1\".toInt => \"1\"\n              \
    \  case _ => {\n                  val a = n.toInt\n                  val b = f.toInt\n\
    \                  (a * b) / 100\n                }\n              }\n       \
    \     }).\n          toSeq\n        val apples = fruits(0)\n        val oranges\
    \ = fruits(1)\n        val mango = fruits.sum\n        mango / 100\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphntwhs8w.scala:24:24 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m\"0\"\e[0m.toInt\
    \ => \e[31m\"0\"\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        '=>' expected, but '.' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmphntwhs8w.scala:25:24 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m\"1\"\e[0m.toInt\
    \ => \e[31m\"1\"\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        '=>' expected, but '.' found\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphntwhs8w.scala:27:28 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                  \e[33mval\e[0m \e[36ma\e[0m = n.toInt\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toInt is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphntwhs8w.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                  \e[33mval\e[0m \e[36mb\e[0m = f.toInt\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toInt is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmphntwhs8w.scala:36:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmango\e[0m = fruits.sum\n\
    \e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660008840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ m = n.toInt\n        var i = 0\n        while (i < m) {\n            val j =\
    \ s.indexOf(\"orange\", i)\n            if (j == -1) {\n                break\n\
    \            }\n            val k = s.indexOf(\"apple\", j)\n            if (k\
    \ == -1) {\n                break\n            }\n            if (s.charAt(k)\
    \ != 'm') {\n                break\n            }\n            i = k + 1\n   \
    \     }\n        if (i == m) {\n            i\n        } else {\n            return\
    \ 0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy97rah9i.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy97rah9i.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy97rah9i.scala:31:16 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ i = 0\n        val fruits = for (c <- s.toCharArray) yield {\n            if\
    \ (\"0\" <= c && \"9\" <= c) {\n                val n = c - '0'\n            \
    \    if (n < 0)\n                    n + 9\n                else\n           \
    \         n\n            } else \n                throw new IllegalArgumentException(\"\
    bad character: \" + c)\n        }\n        // add \"apple\" and \"mango\" to the\
    \ basket \n        fruits = fruits :+ 5 \n        fruits = fruits :+ 6\n     \
    \   // add \"orange\" to the basket \n        fruits = fruits :+ 1\n        //\
    \ count the apples and oranges\n        var apples = fruits.find(_ == 0)\n   \
    \     var oranges = fruits.find(_ == 1)\n        // subtract the apples and oranges\
    \ to find the number of mango fruits\n        val mango = fruits - apples - oranges\n\
    \        // count the mango fruits\n        val count1 = mango.count\n       \
    \ // add apples and oranges to the basket \n        fruits = fruits :+ 2\n   \
    \     fruits = fruits :+ 3\n        // subtract apples and oranges to find the\
    \ number of mango fruits\n        val count2 = fruits - apples - oranges\n   \
    \     // subtract the apples and oranges to find the number of mango fruits\n\
    \        val count3 = mango - apples - oranges\n        // return count3 \n  \
    \      count3\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeawyw7a.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (\e\
    [31m\"0\"\e[0m <= c && \e[31m\"9\"\e[0m <= c) {\n\e[31m\e[31m   |\e[0m       \
    \                ^\e[0m\n\e[31m   |\e[0m                       Found:    (c :\
    \ Char)\n\e[31m   |\e[0m                       Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeawyw7a.scala:21:35 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (\e[31m\"0\"\e[0m <= c && \e\
    [31m\"9\"\e[0m <= c) {\n\e[31m\e[31m   |\e[0m                                \
    \   ^\e[0m\n\e[31m   |\e[0m                                   Found:    (c : Char)\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpyeawyw7a.scala:31:15 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        fruits = fruits :+ \e[31m5\e[0m \n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val fruits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyeawyw7a.scala:32:15\
    \ -----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        fruits = fruits\
    \ :+ \e[31m6\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Reassignment to val fruits\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpyeawyw7a.scala:34:15 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        fruits = fruits :+ \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val fruits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeawyw7a.scala:39:27\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mmango\e[0m = fr"
  stdout: ''
  timestamp: 1660008841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ s = s.length\n        if (s == 0){\n            return 0\n        }\n      \
    \  val l = s.split(\" \").map(_.toLong).getOrElse(0)\n        val i = s.split(\"\
    and\").map(_.toLong).getOrElse(0)\n        val j = s.split(\"and\").map(_.toLong).getOrElse(0)\n\
    \        val k = (l * i) + (l * j)\n        val m = s.split(\" \").filter(_.toLong\
    \ != 0).map(_.toLong).sum\n        k + (n - m)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp146_uy5j.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = s.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ return your answer here\n        var i : Int = 0;\n        var f : Int = 0;\n\
    \        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n\
    \        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n\
    \        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n\
    \        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n\
    \        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n\
    \        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n\
    \        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n\
    \        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n\
    \        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n\
    \        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n\
    \        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n\
    \        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n\
    \        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n\
    \        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n\
    \        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n\
    \        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n\
    \        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n\
    \        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n\
    \        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n\
    \        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n\
    \        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n\
    \        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n\
    \        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n\
    \        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n\
    \        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n\
    \        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n\
    \        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n\
    \        var h : Int = 0;\n        var j\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpssj8qhkk.scala:105:4 ---------------------------\e\
    [0m\e[0m\n\e[31m105 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpssj8qhkk.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mf\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mf is already defined as \e[33mvariable\e\
    [0m \e[35mf\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpssj8qhkk.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36me\e[0m : \e[35mInt\e[0m\
    \ = \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0me is already defined as \e[33mvariable\e[0m \e[35me\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpssj8qhkk.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mh\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mh is already defined as \e[33mvariable\e\
    [0m \e[35mh\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpssj8qhkk.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m : \e[35mInt\e[0m\
    \ = \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mj is already defined as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpssj8qhkk.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mf\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mf is alrea"
  stdout: ''
  timestamp: 1660008838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt).sum\n        val oranges = s.split(\" \"\
    ).map(_.toInt).sum\n        val fruits = apples + oranges\n        val totalFruits\
    \ = fruits.toLong\n        val fruitsInBasket = n / totalFruits.toLong.toInt\n\
    \        val mangoFruits = fruitsInBasket * 1.5\n        return mangoFruits.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp8mwe8j_h.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp8mwe8j_h.scala:19)\n\
    \tat Problem$.main(tmp8mwe8j_h.scala:28)\n\tat Problem.main(tmp8mwe8j_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if\
    \ (n == 0) n\n        else {\n            val parts = s.split(\" \")\n       \
    \     val apples = int(parts(0))\n            val oranges = int(parts(1))\n  \
    \          val fruit = apples + oranges\n            val total = apples + oranges\n\
    \            val mf = fruit - apples + oranges\n            if (total == n) mf\n\
    \            else fruitDistribution(s, n - total)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz0xd_lht.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mapples\e[0m = int(parts(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m \
    \  |\e[0m                         Not found: int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz0xd_lht.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moranges\e[0m = int(parts(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ tokens = s.split(\" \").toList\n        val applesAndOranges = tokens(0).toLong\n\
    \        val totalFruits = tokens(1).toLong\n        val mangoFruits = applesAndOranges\
    \ * 3 / 100\n        val basket = new mutable.MutableList[String]()\n        var\
    \ i = 0\n        while (i <= totalFruits) {\n            if (basket.size < n)\
    \ basket.append(\" \")\n            basket(i) = tokens(i + 2)\n            i +=\
    \ 3\n        }\n        basket.remove(0)\n        basket.remove(basket.last)\n\
    \        val numberOfFruitsInBasket = basket.size\n        basket.remove(basket.last)\n\
    \        var sum = 0L\n        var i = 0\n        while (i < numberOfFruitsInBasket)\
    \ {\n            sum += basket(i)\n            i += 1\n        }\n        sum\
    \ - mangoFruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwkq72n54.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkq72n54.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        import\
    \ scala.math._\n        val list = s.split(\" \") // split by space\n        val\
    \ numOfApples = list.head.toLong // head\n        val numOfOranges = list.last.toLong\
    \ // last\n        val numOfFruits = n * numOfOranges * numOfApples // the total\
    \ number of fruits = n*numOfOranges*numOfApples\n        val fruits = (1 to n).map(x\
    \ => if (x == numOfApples) \"apples\" else if (x == numOfOranges) \"oranges\"\
    \ else \"mango\").toList\n        val appleFruits = fruits.filter(_.contains(\"\
    apples\")) // filter out apples\n        val orangeFruits = fruits.filter(_.contains(\"\
    oranges\")) // filter out oranges\n        val mangoFruits = fruits.filter(_.contains(\"\
    mango\")) // filter out mango\n        (appleFruits ++ orangeFruits ++ mangoFruits).count()\
    \ // count all the fruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpol3odi1d.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfruits\e\
    [0m = (\e[31m1\e[0m to n).map(\e[36mx\e[0m => \e[33mif\e[0m (x == numOfApples)\
    \ \e[31m\"apples\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (x == numOfOranges) \e[31m\"\
    oranges\"\e[0m \e[33melse\e[0m \e[31m\"mango\"\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpol3odi1d.scala:28:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        (appleFruits ++ orangeFruits ++ mangoFruits).count()\
    \ \e[34m// count all the fruits\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (p: String => Boolean): Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ sum = 0\n        var number = 0\n        var apple = 0\n        var orange =\
    \ 0\n        var mango = 0\n        var fruit = 0\n\n        s = s.toUpperCase()\n\
    \        s.split(\"and\").foreach(x => \n            if (x.contains(\"apples\"\
    )) apple = x.split(\"apples\")(1).toLong\n            else if (x.contains(\"oranges\"\
    )) orange = x.split(\"oranges\")(1).toLong\n            else if (x.contains(\"\
    mango\")) mango = x.split(\"mango\")(1).toLong\n            else if (x.contains(\"\
    fruits\")) fruit = x.split(\"fruits\")(1).toLong\n            else if (!x.equals(\"\
    \"))\n                sum += x.toLong\n            else\n                number++\n\
    \        )\n\n        sum += apple\n        sum += orange\n        sum += mango\n\
    \        sum += fruit\n\n        // return n\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw361zsy0.scala:35:24 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                number++\n\e[31m\e[31m   |\e[0m     \
    \                   ^\e[0m\n\e[31m   |\e[0m                        expression\
    \ expected but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpw361zsy0.scala:26:10 -----------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        s = s.toUpperCase()\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val s\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw361zsy0.scala:28:67 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (x.contains(\e[31m\"apples\"\
    \e[0m)) apple = x.split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).toLong\n\e[31m\e\
    [31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    Long\n\
    \e[31m   |\e[0m                                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw361zsy0.scala:29:75\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (x.contains(\e[31m\"oranges\"\e[0m)) orange = x.split(\e[31m\"oranges\"\
    \e[0m)(\e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m                           \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                     Found:    Long\n\e[31m \
    \  |\e[0m                                                     Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw361zsy0.scala:30:70\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (x.contains(\e[31m\"mango\"\e[0m)) mango = x.split(\e[31m\"mango\"\
    \e[0m)(\e[31m1\e[0"
  stdout: ''
  timestamp: 1660008842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        import\
    \ scala.math._\n        val fruit = s.split(' ').toList.toArray\n        val apples\
    \ = fruit(0).toLong\n        val oranges = fruit(1).toLong\n        val mangoes\
    \ = apples + oranges\n        val basket = mutable.ArrayBuffer.empty[Long]\n \
    \       while (oranges > 0) {\n            basket += oranges\n            oranges\
    \ -= 1\n        }\n        while (apples > 0) {\n            basket += apples\n\
    \            apples -= 1\n        }\n        if (apples < oranges) {\n       \
    \     val n = apples + oranges\n            val m = apples - oranges\n       \
    \     while (n>0) {\n                basket += n\n                n -= 1\n   \
    \         }\n            while (m > 0) {\n                basket += m\n      \
    \          m -= 1\n            }\n        }\n        return mangoes - fruit.sum\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgomovh39.scala:24:21 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpgomovh39.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            oranges -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean oranges.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgomovh39.scala:31:19\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            apples -= \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value -= is not a member of Long - did you mean apples.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgomovh39.scala:38:18 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgomovh39.scala:42:18 ------------------------\e[0m\e[0m\n\e[31m42 |\e\
    [0m                m -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value -= is not a member of Long - did you\
    \ mean m.!=?\n\e[31m\e[31m-- Error: /tmp/tmpgomovh39.scala:45:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mreturn\e[0m mangoes - fruit.sum\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \         No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                where:    B is a type variable with constraint >: String\n\e\
    [31m   |\e[0m                .\n6 errors found\n"
  stdout: ''
  timestamp: 1660008843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ apples = scala.collection.mutable.HashMap[String, Long]()\n        var oranges\
    \ = scala.collection.mutable.HashMap[String, Long]()\n        var mangoes = scala.collection.mutable.HashMap[String,\
    \ Long]()\n        var i = 0\n        s.split(\"and\").foreach(s => {\n      \
    \      val v = s.trim\n            if(v.contains(\"apples\")) {\n            \
    \    apples += (s -> n(i))\n            } else if(v.contains(\"oranges\")) {\n\
    \                oranges += (s -> n(i))\n            } else if(v.contains(\"mango\"\
    )) {\n                mangoes += (s -> n(i))\n            } else {\n         \
    \       println(\"Error: Invalid input\")\n            }\n            i += 1\n\
    \        })\n        var totalOranges = 0 //oranges.size()\n        var totalApples\
    \ = 0 //apples.size()\n        var totalMangoes = 0 //mangoes.size()\n       \
    \ for(k <- apples.keys) totalApples += apples(k)._2.toLong\n        for(k <- oranges.keys)\
    \ totalOranges += oranges(k)._2.toLong\n        for(k <- mangoes.keys) totalMangoes\
    \ += mangoes(k)._2.toLong\n        totalMangoes = totalMangoes / apples.size /\
    \ oranges.size\n        var result = totalMangoes\n        if(apples.size != 0\
    \ && oranges.size != 0 && mangoes.size != 0) {\n            val tempApples = apples.toSeq\n\
    \            val tempOranges = oranges.toSeq\n            val tempMangoes = mangoes.toSeq\n\
    \            val tempApples = tempApples.filter(_._2 < totalApples)\n        \
    \    val tempOranges = tempOranges.filter(_._2 < totalOranges)\n            val\
    \ tempMangoes = tempMangoes.filter(_._2 < totalOranges)\n            val totalMangoes\
    \ = tempMangoes.sum\n            val totalApples = tempApples.sum\n          \
    \  val totalOranges = tempOranges.sum\n            if(totalApples != 0 && totalOranges\
    \ != 0 && totalMangoes != 0) {\n                result = totalMangoes / totalApples\
    \ / totalOranges\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp3om22z1r.scala:26:32 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                apples += (s -> n(i))\n\e[31m\e[31m \
    \  |\e[0m                                ^\e[0m\n\e[31m   |\e[0m             \
    \                   \e[33mparameter\e[0m \e[35mn\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp3om22z1r.scala:28:33 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                oranges += (s -> n(i))\n\e[31m\e[31m\
    \   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m           \
    \                      \e[33mparameter\e[0m \e[35mn\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp3om22z1r.scala:30:33 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                mangoes += (s -> n(i))\n\e[31m\e[31m\
    \   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m           \
    \                      \e[33mparameter\e[0m \e[35mn\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3om22z1r.scala:39:42\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mfor\e[0m(k\
    \ <- apples.keys) totalApples += apples(k)._2.toLong\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3om22z1r.scala:39:55 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mfor\e[0m(k <- apples.keys) totalApples\
    \ += apples(k)._2.toLong\n\e[31m\e[31m   |\e[0m                              \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \             value _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3om22z1r.scala:40:44 ------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mfor\e[0m(k <- oranges.keys) totalOranges += o"
  stdout: ''
  timestamp: 1660008845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ s = s.replaceAll(\"apple\", \"\").replaceAll(\"orange\", \"\").replaceAll(\"\
    mango\", \"\")\n        val applesAndOranges = s match { \n            case \"\
    \ \" => 0\n            case _ => s.toLong\n        }\n        val apples = applesAndOranges\
    \ / 2\n        val oranges = applesAndOranges - apples\n        val mangos = n\
    \ - oranges\n        if (apples + oranges + mangos < n) 0\n        else apples\
    \ + oranges + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfjtf6di4.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = s.replaceAll(\e\
    [31m\"apple\"\e[0m, \e[31m\"\"\e[0m).replaceAll(\e[31m\"orange\"\e[0m, \e[31m\"\
    \"\e[0m).replaceAll(\e[31m\"mango\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ stringArray = s.split(\" \") map { s => s.toLong }.toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        if (stringArray.length == 0)\n\
    \            return 0\n        // val stringArray = s.split(\" \").map(_.toLong).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        if (stringArray.length == 1)\n\
    \            return stringArray(0)\n        if (stringArray.length == 2)\n   \
    \         return stringArray(0)\n        // val stringArray = s.split(\" \").map(_.toLong).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpumm1_zj2.scala:19:45 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mstringArray\e[0m = s.split(\e\
    [31m\" \"\e[0m) map { \e[36ms\e[0m => s.toLong }.toArray\n\e[31m\e[31m   |\e[0m\
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m  \
    \                        I could not infer the type of the parameter s.\n\e[31m\e\
    [31m-- Error: /tmp/tmpumm1_zj2.scala:19:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mstringArray\e[0m = s.split(\e\
    [31m\" \"\e[0m) map { \e[36ms\e[0m => s.toLong }.toArray\n\e[31m\e[31m   |\e[0m\
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpumm1_zj2.scala:29:8 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \        \e[33mif\e[0m (stringArray.length == \e[31m2\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m    \
    \    Required: Long\n\e[31m   |\e[0m        Maybe you are missing an else part\
    \ for the conditional?\n\e[31m30 |\e[0m            \e[33mreturn\e[0m stringArray(\e\
    [31m0\e[0m)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ countList = mutable.ListBuffer[Long]()\n        var i : Int = 0\n        while\
    \ (i<s.length) {\n            if (s.charAt(i).toInt > 0) {\n                countList\
    \ += s.charAt(i).toInt\n                i +=1\n            } else {\n        \
    \        i +=1\n            }\n        }\n        countList.toList.groupBy(_ %\
    \ 2 == 0).toList.sortBy(_._1).reverse.last._2.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4nutrpc.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcountList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ numbers = s.split(\" \")\n        val apples: Long = numbers.toArray.map(_.toLong).sum\n\
    \        val oranges: Long = numbers.toArray.map(_.toLong).filter(_ < 5).sum\n\
    \        val mangoes: Long = numbers.toArray.filter(_.toLong > 5).sum\n      \
    \  val result: Long = apples + oranges + mangoes + n\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpigdzj67u.scala:22:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmangoes\e[0m: \e[35mLong\e\
    [0m = numbers.toArray.filter(_.toLong > \e[31m5\e[0m).sum\n\e[31m\e[31m   |\e\
    [0m                                                                    ^\e[0m\n\
    \e[31m   |\e[0m                No implicit Ordering defined for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                where:    B is a type variable with constraint\
    \ >: String\n\e[31m   |\e[0m                .\n1 error found\n"
  stdout: ''
  timestamp: 1660008845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toString.toInt\n        val oranges = s.toString.toInt\n        val\
    \ m = new collection.mutable.LinkedHashMap[String,Long]()\n        m.put(\"apples\"\
    ,apples)\n        m.put(\"oranges\",oranges)\n        m.put(\"mangoes\",0)\n \
    \       for ( (k,v) <- m ) {\n            val count = v.toString.toInt\n     \
    \       if (v > apples) {\n                m.put(k, count - apples)\n        \
    \    } else if (v > oranges) {\n                m.put(k, count - oranges)\n  \
    \          } else if (v > 0) {\n                m.put(k, count - 1)\n        \
    \    }\n        }\n        m.get(\"mangoes\").toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphd3c9pr4.scala:35:25 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        m.get(\e[31m\"mangoes\"\e[0m).toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Option[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660008846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ x = s.toInt - n.toInt\n        if(x >0){\n            x match {\n          \
    \      case 0 => n.toInt\n                case 1 => n.toInt\n                case\
    \ 2 => n.toInt\n                case 3 => n.toInt\n                case 4 => n.toInt\n\
    \                case 5 => n.toInt\n                case 6 => n.toInt\n      \
    \          case 7 => n.toInt\n                case 8 => n.toInt\n            \
    \    case 9 => n.toInt\n                case 10 => n.toInt\n                case\
    \ 11 => n.toInt\n                case 12 => n.toInt\n                case 13 =>\
    \ n.toInt\n                case 14 => n.toInt\n                case 15 => n.toInt\n\
    \                case 16 => n.toInt\n                case 17 => n.toInt\n    \
    \            case 18 => n.toInt\n                case 19 => n.toInt\n        \
    \        case 20 => n.toInt\n                case 21 => n.toInt\n            \
    \    case 22 => n.toInt\n                case 23 => n.toInt\n                case\
    \ 24 => n.toInt\n                case 25 => n.toInt\n                case 26 =>\
    \ n.toInt\n                case 27 => n.toInt\n                case 28 => n.toInt\n\
    \                case 29 => n.toInt\n                case 30 => n.toInt\n    \
    \            case 31 => n.toInt\n                case 32 => n.toInt\n        \
    \        case 33 => n.toInt\n                case 34 => n.toInt\n            \
    \    case 35 => n.toInt\n                case 36 => n.toInt\n                case\
    \ 37 => n.toInt\n                case 38 => n.toInt\n                case 39 =>\
    \ n.toInt\n                case 40 => n.toInt\n                case 41 => n.toInt\n\
    \                case 42 => n.toInt\n                case 43 => n.toInt\n    \
    \            case 44 => n.toInt\n                case 45 => n.toInt\n        \
    \        case 46 => n.toInt\n                case 47 => n.toInt\n            \
    \    case 48 => n.toInt\n                case 49 => n.toInt\n                case\
    \ 50 => n.toInt\n                case 51 => n.toInt\n                case 52 =>\
    \ n.toInt\n                case 53 => n.toInt\n                case 54 => n.toInt\n\
    \                case 55 => n.toInt\n                case 56 => n.toInt\n    \
    \            case 57 => n.toInt\n                case 58 => n.toInt\n        \
    \        case 59 => n.toInt\n                case 60 => n.toInt\n            \
    \    case 61 => n.toInt\n                case 62 => n.toInt\n                case\
    \ 63 => n.toInt\n                case 64 => n.toInt\n                case 65 =>\
    \ n.toInt\n                case 66 => n.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpho0tpnk9.scala:89:4 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpho0tpnk9.scala:101:0 ---------------------------\e[0m\e[0m\n\e[31m101\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[33m\e[33m-- Warning: /tmp/tmpho0tpnk9.scala:90:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m90 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660008842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ total = 0\n        var sum = 0\n        for (i <- 0 until n -1) {\n        \
    \    val value = s.split(' ').get(i).toInt\n            total = total + value\n\
    \            sum += value\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr9fz44a6.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m               \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpr9fz44a6.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mvalue\e[0m = s.split(\e\
    [31m' '\e[0m).get(i).toInt\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value get is not a member of Array[String]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = split(s(0), \" \")(0).trim\n        val oranges = split(s(1), \" \"\
    )(1).trim\n        val fruits = split(s(2), \" \")(2).trim\n        val mangos\
    \ = fruits.toLong - apples.toLong - oranges.toLong\n        fruits - mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0edhzxf.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mapples\e[0m = split(s(\e\
    [31m0\e[0m), \e[31m\" \"\e[0m)(\e[31m0\e[0m).trim\n\e[31m\e[31m   |\e[0m     \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: split\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0edhzxf.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36moranges\e[0m = split(s(\e[31m1\e[0m), \e[31m\" \"\e[0m)(\e[31m1\e[0m).trim\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Not found: split\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpb0edhzxf.scala:21:21 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mfruits\e[0m = split(s(\e[31m2\e[0m), \e[31m\"\
    \ \"\e[0m)(\e[31m2\e[0m).trim\n\e[31m\e[31m   |\e[0m                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: split\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ basket = s.split(\" \").toList.map(_.toInt)\n        val apples = basket.drop(1).sum\n\
    \        val oranges = basket.dropRight(1).sum\n        val fruits : Long = apples\
    \ ++ oranges\n        val mangos = if (fruits == 0) 0\n        else if (fruits\
    \ >= 40 && fruits <= 50) 1\n        else 0\n        fruits - mangos\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7q8_ms2d.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m : \e[35mLong\e\
    [0m = apples ++ oranges\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value ++ is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if\
    \ (s.contains(\"apples and oranges\"))\n            return fruitDistribution(s.replace(\"\
    apples and oranges\", \"oranges\"), n)\n        else if (s.contains(\"oranges\"\
    ))\n            return fruitDistribution(s.replace(\"oranges\", \"apples\"), n)\n\
    \        else if (s.contains(\"apples\"))\n            return fruitDistribution(s.replace(\"\
    apples\", \"oranges\"), n)\n        else\n            return fruitDistribution(s.replace(\"\
    oranges and apples\", \"apples\"), n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/jdk.internal.misc.Unsafe.allocateUninitializedArray(Unsafe.java:1375)\n\
    \tat java.base/java.lang.StringConcatHelper.newArray(StringConcatHelper.java:494)\n\
    \tat java.base/java.lang.StringLatin1.replace(StringLatin1.java:371)\n\tat java.base/java.lang.String.replace(String.java:2973)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Problem$.fruitDistribution(tmpivqhur39.scala:24)\n\tat Problem$.fruitDistribution(tmpivqhur39.scala:22)\n\
    \tat Pr"
  stdout: ''
  timestamp: 1660008847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ count = s.split(\" \")(1).trim\n        val values = s.split(\" \")(0).split(\"\
    and\").map(x => x.toLong).sortWith(_ < _)\n        var count = 0\n        val\
    \ count = values.foldLeft(0){\n            case (acc, x) =>\n                if\
    \ (x <= count) {\n                    acc + 1\n                } else {\n    \
    \                acc\n                }\n        }\n        count * n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0v5iw6h3.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0v5iw6h3.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcount\e[0m = values.foldLeft(\e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m   \
    \     ^\e[0m\n\e[31m   |\e[0mcount is already defined as \e[33mvalue\e[0m \e[35mcount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m23 |\e[0m         \
    \   \e[33mcase\e[0m (acc, x) =>\n\e[31m24 |\e[0m                \e[33mif\e[0m\
    \ (x <= count) {\n\e[31m25 |\e[0m                    acc + \e[31m1\e[0m\n\e[31m26\
    \ |\e[0m                } \e[33melse\e[0m {\n\e[31m27 |\e[0m                 \
    \   acc\n\e[31m28 |\e[0m                }\n\e[31m29 |\e[0m        }\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0v5iw6h3.scala:30:16 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        count * n\n\e[31m\e[31m   |\e[0m            \
    \    ^\e[0m\n\e[31m   |\e[0m                Found:    (n : Long)\n\e[31m   |\e\
    [0m                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code goes here\n        // a) Separate the numbers by space, then convert\
    \ to Int, finally sum the numbers\n        // b) Sort the numbers and take the\
    \ first n/2 numbers\n        // c) Count the numbers that are divisible by 2\n\
    \        // d) Multiply them to get the number of mango fruits\n        val sArray\
    \ = s.split(\" \").toList\n        val numbers = sArray.map(_.toInt).toList\n\
    \        val sorted = numbers.sortWith(_ < _)\n        val middle = sorted.size\
    \ / 2\n        val a1 = sorted.take(middle)\n        val a2 = sorted.drop(middle)\n\
    \        val b1 = a1.map(a => a * a)\n        val b2 = a2.map(a => a * a)\n  \
    \      val c1 = b1.count{case a => a > 0}\n        val c2 = b2.count{case a =>\
    \ a > 0}\n        val d = c1 * c2\n        d * n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmppyf0krm3.scala:25)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.fruitDistribution(tmppyf0krm3.scala:25)\n\
    \tat Problem$.main(tmppyf0krm3.scala:38)\n\tat Problem.main(tmppyf0krm3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008848
