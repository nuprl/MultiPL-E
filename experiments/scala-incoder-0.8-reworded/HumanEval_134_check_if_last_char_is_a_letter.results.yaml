language: scala
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ < 1) return false\n        var word = txt.split(\" \")\n        word.reverse\n\
    \        var result = false\n        word.reverse.foreach(t => { \n          \
    \  if (t.last == t.init) result = true\n        })\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz8sid9se.scala:23:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (t.last == t.init) result =\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ > 0) {\n            var lastChar = txt.last\n            var hasALetter = false\n\
    \            // if the last char is not a space char and it is an alphabetic char\n\
    \            if (lastChar != '\\0' && lastChar >= 'a' && lastChar <= 'z') {\n\
    \                hasALetter = true\n            }\n            return !hasALetter\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpifnlghf1.scala:22:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (lastChar != \e[31m'\\0'\e\
    [0m && lastChar >= \e[31m'a'\e[0m && lastChar <= \e[31m'z'\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               octal\
    \ escape literals are unsupported: use \\u0000 instead\n1 error found\n"
  stdout: ''
  timestamp: 1659978768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.isLetter) {\n            val split = txt.split(\"\
    \ \").map(_+lastChar)\n            val firstPart = split.head\n            val\
    \ secondPart = split.tail\n            if(secondPart.forall(_.isLetter)) {\n \
    \               return false\n            }\n            else {\n            \
    \    return true\n            }\n        }\n        else {\n            return\
    \ true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp72lx6m_2.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(secondPart.forall(_.isLetter))\
    \ {\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                value isLetter is not a member of\
    \ String\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val strArr\
    \ = txt.split(\" \").map(_.toUpperCase)\n        val last = strArr.last\n    \
    \    if (txt.length > 0 && strArr.exists(last.endsWith(_))) {\n            return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvj1bqcg4.scala:27)\n\tat Problem.main(tmpvj1bqcg4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        def findLastChar(s\
    \ : String) : Option[String] = {\n            val index = s.lastIndexOf(' ', s.length-1)\n\
    \            index match {\n                case -1 => None\n                case\
    \ i => Some(s.substring(index+1, s.length))\n            }\n        }\n      \
    \  val words = mutable.ListBuffer.empty[String]\n        findLastChar(txt).foreach{\
    \ x => words.append(x.toString) }\n        words.foldLeft(false){ case (acc, x)\
    \ => acc && x.toUpperCase.isLetter }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnlsr2kx6.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n         val arr\
    \ = txt.toCharArray\n         val lastChar = arr(arr.length - 1)\n         if\
    \ (!lastChar.matches(\"[a-zA-Z]+\")) false\n         else true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwdlih82v.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m         \e[33mif\e[0m (!lastChar.matches(\e[31m\"[a-zA-Z]+\"\
    \e[0m)) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value matches is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ < 1) {\n            println(\"txt.length < 1\")\n            return false\n\
    \        }\n        var charList = txt.split(\"\")\n        var lastChar = charList(txt.length-1)\n\
    \        var lastCharIsAlpha = true\n        charList.foreach(char => {\n    \
    \        if (char.isLetter) {\n                lastCharIsAlpha = true\n      \
    \          return\n            } else {\n                lastCharIsAlpha = false\n\
    \            }\n        })\n        return lastCharIsAlpha\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcf4z_nu9.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (char.isLetter) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value isLetter is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcf4z_nu9.scala:28:16 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m   |\e[0m\
    \                Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ == 0 || txt.charAt(txt.length-1) == ' '){\n            false\n        }else{\n\
    \            if (txt.charAt(txt.length-1) == 'a' ||\n                txt.charAt(txt.length-1)\
    \ == 'e' ||\n                txt.charAt(txt.length-1) == 'i' ||\n            \
    \    txt.charAt(txt.length-1) == 'o' ||\n                txt.charAt(txt.length-1)\
    \ == 'u'){\n                false\n            }else{\n                true\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplm13bkne.scala:34)\n\tat Problem.main(tmplm13bkne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Find\
    \ the last character and check if it's an alphabetic character\n        val lastChar\
    \ = txt.last\n        if(!lastChar.isLetter) {\n            false\n        } else\
    \ {\n            var charCounter = 1\n            for(word <- txt.split){\n  \
    \              if(charCounter == txt.length){\n                    return true\n\
    \                } else {\n                    charCounter += word.last.length\n\
    \                }\n            }\n            false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmprw7xqe23.scala:24:28 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(word <- txt.split){\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch expected\
    \ type ?{ foreach: ? }\n1 error found\n"
  stdout: ''
  timestamp: 1659978768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt.last.forall(Character.isLetter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk6dqjhgo.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        txt.last.forall(Character.isLetter)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value forall\
    \ is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n         if(txt.nonEmpty)\
    \ txt match {\n             case s @ s.last if (s.last >= 'a' && s.last <= 'z')\
    \ => true\n             case _ => false\n         }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplm7e9cyk.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m             \e[33mcase\e[0m s @ s.last \e[33mif\e[0m\
    \ (s.last >= \e[31m'a'\e[0m && s.last <= \e[31m'z'\e[0m) => \e[31mtrue\e[0m\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmplm7e9cyk.scala:19:68 ----------------\e[0m\e[0m\n\e[33m19 |\e[0m   \
    \          \e[33mcase\e[0m s @ s.last \e[33mif\e[0m (s.last >= \e[31m'a'\e[0m\
    \ && s.last <= \e[31m'z'\e[0m) => \e[31mtrue\e[0m\n\e[33m\e[33m   |\e[0m     \
    \                                                               ^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmplm7e9cyk.scala:20:23 ----------------\e[0m\e[0m\n\e[33m20 |\e\
    [0m             \e[33mcase\e[0m _ => \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m \
    \                      ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 warnings found\n1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt.last.isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8w54dpt.scala:21)\n\tat Problem.main(tmpq8w54dpt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val txtSplit\
    \ = txt.split(\" \")\n        val firstWord = txtSplit(0).reverse\n        if(firstWord.last.exists(ch\
    \ => ('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z'))) {\n            return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3nh_p_6p.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(firstWord.last.exists(\e[36mch\e\
    [0m => (\e[31m'A'\e[0m <= ch && ch <= \e[31m'Z'\e[0m) || (\e[31m'a'\e[0m <= ch\
    \ && ch <= \e[31m'z'\e[0m))) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value exists is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        while (!lastChar.matches(\"[a-zA-Z]\"))\n            lastChar\
    \ = txt.dropRight(1).last\n        !lastChar.matches(\"[a-zA-Z]\")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3c_lg4rc.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mwhile\e[0m (!lastChar.matches(\e[31m\"\
    [a-zA-Z]\"\e[0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value matches is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3c_lg4rc.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        !lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value\
    \ matches is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      val newTxt\
    \ = txt.dropRight(1)\n      val words = newTxt.split(\" \").filter(_ != \"\")\n\
    \      words.last.isLetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk1wesbgl.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      words.last.isLetter\n\e[31m\e[31m   |\e[0m    \
    \  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1ls36d3.scala:17:59\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m    \e[33mdef\e[0m \e[36mcheckIfLastCharIsALetter\e\
    [0m(\e[36mtxt\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m\
    \   |\e[0m                                                           ^\e[0m\n\e\
    [31m   |\e[0m                                                       Found:   \
    \ Unit\n\e[31m   |\e[0m                                                      \
    \ Required: Boolean\n\e[31m18 |\e[0m        \e[34m// Your code here\e[0m\n\e[31m19\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      val lastChar\
    \ = txt.last\n      if(lastChar.isLetter) {\n        if(txt.lastSeparateChar().isEmpty)\
    \ {\n          return true\n        } else {\n          return false\n       \
    \ }\n      } else {\n        return true\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi5jimuho.scala:20:15 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(txt.lastSeparateChar().isEmpty)\
    \ {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           value lastSeparateChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val letters\
    \ = txt.last.trim.toList\n        letters.filter(_.isLetter).size != letters.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7f5xh_q.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = txt.last.trim.toList\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      value trim is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var isALetter\
    \ = false\n        val regex = \"\"\"[a-z]\"\"\".r\n        var lastChar = txt(txt.length\
    \ - 1)\n        while (lastChar != regex.findFirstIn(txt).get) {\n           \
    \ lastChar = txt(txt.length - 2)\n        }\n        lastChar.toLowerCase match\
    \ {\n            case \"\" => false\n            case c => c.isLetter\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi_ofqtuu.scala:21:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mwhile\e[0m (lastChar != regex.findFirstIn(txt).get)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_ofqtuu.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        lastChar.toLowerCase\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        return\
    \ !checkIfLastCharIsALetterWord(txt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jh5ytg3.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m !checkIfLastCharIsALetterWord(txt)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: checkIfLastCharIsALetterWord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Use\
    \ scala.collection.mutable.StringBuilder to get the last character\n        //\
    \ of a string\n        val sb = new StringBuilder(txt)\n        // Get the last\
    \ character of the StringBuilder\n        val lastChar = sb.last\n        // Return\
    \ true if the last character is a letter or not\n        lastChar match {\n  \
    \          // If last character is a letter\n            case letter if letter.toString.isLetter()\
    \ => true\n            // If last character is not a letter\n            case\
    \ letter => false\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3321t_fj.scala:26:43 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m letter \e[33mif\e[0m letter.toString.isLetter()\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val txtLastChar\
    \ = txt.last\n        val txtLastCharIsAlpha = txtLastChar != null && !txtLastChar.equals(\"\
    \ \")\n        val txtLastCharIsALetter = txtLastChar != null && !txtLastChar.equals(\"\
    \ \") && !(txtLastChar.isLetter)\n        txtLastCharIsAlpha && txtLastCharIsALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2ym1vhgf.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtxtLastCharIsAlpha\e[0m\
    \ = txtLastChar != \e[31mnull\e[0m && !txtLastChar.equals(\e[31m\" \"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m          Values of types Char and Null cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2ym1vhgf.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtxtLastCharIsALetter\e[0m\
    \ = txtLastChar != \e[31mnull\e[0m && !txtLastChar.equals(\e[31m\" \"\e[0m) &&\
    \ !(txtLastChar.isLetter)\n\e[31m\e[31m   |\e[0m                             \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Values of types Char\
    \ and Null cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val last\
    \ = txt.length-1\n        val words = txt.split(\" \").toSet\n        val lastChar\
    \ = txt(last)\n        if (lastChar != \" \")\n            return words.contains(lastChar)\n\
    \        else\n            return words.size > 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp26v95dl2.scala:21:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (lastChar != \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp26v95dl2.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mreturn\e[0m words.contains(lastChar)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                  Found:    (lastChar : Char)\n\e[31m\
    \   |\e[0m                                  Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.last\
    \ == ' ' || txt.last == '.') true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2b06ypr.scala:23)\n\tat Problem.main(tmpr2b06ypr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ == 0) return false\n        var lastChar = txt.last\n        if (lastChar.isLetter)\
    \ lastChar = lastChar.dropRight(1)\n        val words = txt.split(\"\\\\s+\")\
    \ // split on whitespace\n        if (words.length == 0) return false\n      \
    \  var lastWord = words.last\n        if (lastWord.isLetter) lastWord = lastWord.dropRight(1)\n\
    \        if (lastChar != lastWord) return false\n        if (lastChar.isLower)\
    \ lastChar = lastChar.toUpperCase\n        val lastChars = lastWord.split('')\n\
    \        if (lastChars.last != lastChar) return false\n        return true\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps_wk7jw5.scala:27:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlastChars\e[0m = lastWord.split('')\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       empty character literal\n\e[31m\e[31m--\
    \ Error: /tmp/tmps_wk7jw5.scala:28:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m (lastChars.last != lastChar) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                            end\
    \ of statement expected but 'return' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps_wk7jw5.scala:20:51 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mif\e[0m (lastChar.isLetter) lastChar = lastChar.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value dropRight is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps_wk7jw5.scala:24:21\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (lastWord.isLetter)\
    \ lastWord = lastWord.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value isLetter is not a\
    \ member of String\n\e[31m\e[31m-- Error: /tmp/tmps_wk7jw5.scala:25:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (lastChar != lastWord) \e[33mreturn\e\
    [0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps_wk7jw5.scala:26:50\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (lastChar.isLower)\
    \ lastChar = lastChar.toUpperCase\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                 value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E006]\
    \ Not Found Erro"
  stdout: ''
  timestamp: 1659978780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val s =\
    \ txt.length()\n        val last = txt.charAt(s.length-1)\n        val w = txt.substring(0,s.length-1)\n\
    \        val count = w.split(\" \").length\n        // If there are no spaces\n\
    \        // then the last character is also alphabetical\n        if (count ==\
    \ 0) {\n            true\n            // If the last character is alphabetical\n\
    \            // and the word is not empty\n        } else if (last.isLetter &&\
    \ count > 0) {\n            false\n            // If the last character is not\
    \ alphabetical\n            // and the word is not empty\n        } else {\n \
    \           true\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp9wcisii.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlast\e[0m = txt.charAt(s.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              value length is not a member of Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp9wcisii.scala:20:34 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = txt.substring(\e\
    [31m0\e[0m,s.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ length is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659978779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val re\
    \ = \"\"\"(\\S)$\"\"\".r\n        txt match {\n            case re(a) => a.toString\
    \ == txt.last.charAt(txt.length - 1)\n            case _ => false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptsl_zqo_.scala:20:49 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m re(a) => a.toString == txt.last.charAt(txt.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    value\
    \ charAt is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      txt match\
    \ {\n          case \"\" => false\n          case x => x.toString.last == x.toString.last\
    \ && !x.toString.exists(_ == '-') && !x.toString.exists(_ == '_')\n      }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7g1geyr9.scala:24)\n\tat Problem.main(tmp7g1geyr9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ < 1) return false\n        val charArray = txt.toCharArray\n        val lastChar\
    \ = charArray.length-1\n        var flag = false\n        for (c<-charArray){\n\
    \            if (c.toString == lastChar.toString.toUpperCase()) {\n          \
    \      flag = true\n            }\n        }\n        return flag\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_q71nsf.scala:31)\n\tat Problem.main(tmp1_q71nsf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val str\
    \ = txt.toLowerCase\n        val lastChar = str.last\n        if(lastChar <= 'z'\
    \ || lastChar >= 'a'){\n            false\n        }else{\n            if(str.length\
    \ == 1){\n                false\n            }else{\n                var lastOne\
    \ = str.tail.last\n                if(lastOne.matches(\"[a-zA-Z]+\")){\n     \
    \               return true\n                }else{\n                    return\
    \ false\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdz6toj6t.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m(lastOne.matches(\e[31m\"\
    [a-zA-Z]+\"\e[0m)){\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var result\
    \ = false\n        var lastChar = txt(txt.length - 1)\n        var isLetter =\
    \ false\n        for (letter <- \"abcdefghijklmnopqrstuvwxyz\") {\n          \
    \  if (lastChar == letter) {\n                isLetter = true\n              \
    \  break\n            } else {\n                isLetter = false\n           \
    \ }\n        }\n        if (isLetter) {\n            for (letter <- \" \") {\n\
    \                if (lastChar == letter) {\n                    result = true\n\
    \                    break\n                }\n            }\n        }\n    \
    \    return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp06hkbj9q.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp06hkbj9q.scala:33:20 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ < 2 ) throw new Exception((\"String too short\"))\n        var lastChar = txt.last\n\
    \        if (lastChar.equals(\" \") || lastChar.isLetter) throw new Exception((\"\
    Last character is a space\"))\n        var lastCharIsLetter = false\n        for\
    \ (c <- txt.init)\n        {\n            if (c.isLetter) lastCharIsLetter = true\n\
    \        }\n        return !lastCharIsLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.Exception: Last character is a space\n\tat Problem$.checkIfLastCharIsALetter(tmpno9x184d.scala:20)\n\
    \tat Problem$.main(tmpno9x184d.scala:29)\n\tat Problem.main(tmpno9x184d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val chars = txt.split(\" \").last\n        chars.contains(lastChar)\
    \ && chars.lastIndexOf(lastChar) == chars.length - 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpipr7w2n1.scala:23)\n\tat Problem.main(tmpipr7w2n1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase)\n        val firstChar = txt.substring(0,\
    \ txt.length-1)\n        val lastChar = txt.substring(txt.length-1)\n        val\
    \ isFirstCharALetter = (firstChar.toLowerCase == firstChar)\n        val lastCharIsALetter\
    \ = (lastChar.toLowerCase == lastChar)\n        val allAlphabetical = (words.map(_.toLowerCase).forall(_.toLowerCase\
    \ == _))\n        return isFirstCharALetter && !lastCharIsALetter && allAlphabetical\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbst42rl9.scala:23:63 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mallAlphabetical\e[0m = (words.map(_.toLowerCase).forall(_.toLowerCase\
    \ == _))\n\e[31m\e[31m   |\e[0m                                              \
    \                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659978780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ <= 0) return false\n        if (txt.length == 1) return true\n        val last\
    \ = txt.last\n        if (last == ' ') return true\n        val lastChar = last.toChar\n\
    \        if (lastChar < 'a' || lastChar > 'z') return false\n        var prevIdx\
    \ = 0\n        for (idx <- 0 until txt.length) {\n            if (txt(idx) !=\
    \ ' ') return false\n            prevIdx = idx\n        }\n        val firstChar\
    \ = txt.first\n        if (firstChar < 'a' || firstChar > 'z') return false\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5w55v3m7.scala:29:28 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mfirstChar\e[0m = txt.first\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       value first is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val txtArr\
    \ = txt.split(\" \").toArray\n        txtArr.reverse.head.toString.toCharArray.last\
    \ match {\n            case c if c.isLetterOrDigit => true\n            case c\
    \ if !c.isLetterOrDigit => false\n            case _ => false\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7wj22o0.scala:26)\n\tat Problem.main(tmpb7wj22o0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar < Character.MAX_VALUE &&\n      \
    \                  lastChar >= Character.MIN_VALUE &&\n                      \
    \  Character.isLetter(lastChar)\n        val isNotAlpha = !isAlpha\n        isNotAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_xsebc0z.scala:27)\n\tat Problem.main(tmp_xsebc0z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Code\
    \ Here\n        var re = scala.util.matching.Regex(\"[^a-zA-Z]\")\n        val\
    \ newString = txt filter { c => !re.findFirstIn(c).get.isEmpty }\n        txt\
    \ = newString.length == txt.length && newString.last == txt.last\n        return\
    \ txt\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndpnntg2.scala:20:58\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewString\e\
    [0m = txt filter { \e[36mc\e[0m => !re.findFirstIn(c).get.isEmpty }\n\e[31m\e\
    [31m   |\e[0m                                                          ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (c\
    \ : Char)\n\e[31m   |\e[0m                                                  Required:\
    \ CharSequence\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndpnntg2.scala:21:14\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        txt = newString.length\
    \ == txt.length && newString.last == txt.last\n\e[31m\e[31m   |\e[0m         \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              Found:    Boolean\n\e[31m   |\e[0m              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndpnntg2.scala:22:15\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mreturn\e[0m txt\n\
    \e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (txt : String)\n\e[31m   |\e[0m               Required: Boolean\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val txtArray\
    \ = txt.toArray\n        if (txt.length < 2) {\n            return false\n   \
    \     }\n        var lastChar = txtArray(-1)\n        var charsCount = txtArray.length\
    \ - 2\n        var inWord = true\n        for (i <- 0 until txtArray.length -\
    \ 1) {\n            var currentChar = txtArray(i)\n            if (currentChar\
    \ == \" \" && charsCount > 1) {\n                inWord = false\n            \
    \    break\n            }\n            if (currentChar == \" \") {\n         \
    \       charsCount -= 1\n            } else {\n                lastChar = currentChar\n\
    \            }\n        }\n        return !inWord && lastChar.toUpperCase != \"\
    \ \"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0al4low7.scala:27:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (currentChar == \e[31m\" \"\
    \e[0m && charsCount > \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0al4low7.scala:29:16\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp0al4low7.scala:31:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m31 |\e[0m       \
    \     \e[33mif\e[0m (currentChar == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0al4low7.scala:37:35 ------------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m        \e[33mreturn\e[0m !inWord && lastChar.toUpperCase != \e\
    [31m\" \"\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value toUpperCase is not a member\
    \ of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Complete\
    \ the function\n        if (txt.length == 0)\n            return false\n     \
    \   val lastChar = txt.last\n        if (lastChar.isLetter && !(lastChar.isLetter\
    \ || lastChar.isDigit))\n            return true\n        else\n            return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbj7ultrg.scala:29)\n\tat Problem.main(tmpbj7ultrg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val s =\
    \ txt\n        val words = mutable.Set[String]()\n        for( x <- s.length )\
    \ {\n            if( s.charAt(x) != ' ' ) {\n                words += s.substring(0,x)\n\
    \            }\n        }\n        words.forall(x => char.IsLetter(x))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp2octkvk.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp2octkvk.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( x <- s.length ) {\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659978782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var result\
    \ : Boolean = false\n        var lastChar : String = \"\"\n\n        for(i <-\
    \ 0 until txt.length) {\n            lastChar = txt(i)\n            if (lastChar\
    \ >= 'a' && lastChar <= 'z')\n                return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplm20muem.scala:22:26\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            lastChar = txt(i)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                  Found:    Char\n\e[31m   |\e[0m                       Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplm20muem.scala:23:28\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (lastChar\
    \ >= \e[31m'a'\e[0m && lastChar <= \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \ Found:    (\e[31m'a'\e[0m : Char)\n\e[31m   |\e[0m                         \
    \   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplm20muem.scala:23:47\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (lastChar\
    \ >= \e[31m'a'\e[0m && lastChar <= \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                           ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                       Found:    (\e[31m'z'\e[0m : Char)\n\e\
    [31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        for (x\
    \ <- txt.lastChar){\n            if (x.isLetter){\n                return false\n\
    \            }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ntmdvfg.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (x <- txt.lastChar){\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      value lastChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.isEmpty\
    \ || txt.length <= 1)\n            return false\n        val lastChar = txt.last\n\
    \        if (lastChar.equals('_') || lastChar.isLetter)\n            return false\n\
    \        val words = txt.split(\" \")\n        for (word <- words)\n        {\n\
    \            val wordArray = word.split(' ')\n            if (wordArray.last ==\
    \ lastChar)\n                return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8j_q05g6.scala:27:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (wordArray.last == lastChar)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (!txt.isEmpty)\
    \ {\n            var isLastCharANumber = false\n            if (txt.charAt(txt.length\
    \ - 1) == ' ') {\n                txt = txt.slice(0, txt.length - 1)\n       \
    \     }\n            val words = txt.split(\" \").toList\n            var isLastCharAWord\
    \ = false\n            words.foreach(word => {\n                val wordAsCharArray\
    \ = word.toCharArray\n                isLastCharANumber =\n                  \
    \  isLastCharANumber || (wordAsCharArray(wordAsCharArray.length - 1) >= 65 &&\
    \ wordAsCharArray(wordAsCharArray.length - 1) <= 90 || wordAsCharArray(wordAsCharArray.length\
    \ - 1) >= 97 && wordAsCharArray(wordAsCharArray.length - 1) <= 122)\n        \
    \        if (wordAsCharArray.length > 1 && word.charAt(word.length - 1) == ' ')\
    \ {\n                    isLastCharAWord = true\n                }\n         \
    \   })\n            isLastCharANumber && !isLastCharAWord\n        } else {\n\
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbo24evoe.scala:21:20 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                txt = txt.slice(\e[31m0\e[0m, txt.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val txt\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Create\
    \ empty array for checking\n        var charArray = new Array[Char](txt.length)\n\
    \        // Go through each character in text and put in array\n        for (\
    \ i <- 0 until txt.length ) {\n            charArray(i)  = txt(i)\n        }\n\
    \        // Check if last character is in array\n        if ( charArray.length\
    \ == 1 ) {\n            return false\n        }\n        else {\n            var\
    \ lastChar = charArray.length - 1\n            var lastChar = charArray.length\n\
    \            // Check char at last position and check if it is an alphabet\n \
    \           if ( charArray(lastChar).isLetter ) {\n                return false\n\
    \            }\n            else {\n                return true\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_5g2d6ld.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mvar\e[0m \e[36mlastChar\e[0m = charArray.length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mlastChar is already defined as \e[33mvariable\e[0m \e[35mlastChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt.tail.forall(_.isLetter)\
    \ && !txt.contains(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxqhqspf3.scala:21)\n\tat Problem.main(tmpxqhqspf3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt(txt.length-1)\n        val spaceSeparated = txt.split(\" \").last\n\n\
    \        if ((lastChar != spaceSeparated) && (lastChar != \" \") )\n         \
    \   true\n        else\n            false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgswa4p2l.scala:21:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m ((lastChar != spaceSeparated) &&\
    \ (lastChar != \e[31m\" \"\e[0m) )\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpgswa4p2l.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m ((lastChar != spaceSeparated) &&\
    \ (lastChar != \e[31m\" \"\e[0m) )\n\e[31m\e[31m   |\e[0m                    \
    \                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt.length\
    \ != txt.last.length && \n        (txt.last.forall(x => x.isLetter) && \n    \
    \    !txt.last.contains(\" \"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmfuknsb7.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        txt.length != txt.last.length && \n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \              value length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val arr\
    \ = txt.split(\" \").toArray\n        arr(arr.length - 1) == txt.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkaal7mb0.scala:19:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        arr(arr.length - \e[31m1\e[0m) == txt.last\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val firstChar\
    \ = txt(0)\n        val lastChar = txt(txt.length - 1)\n        val charSet =\
    \ txt.substring(1,txt.length-1).toCharArray\n        val containsAlphabet = charSet.contains(firstChar)\
    \ && charSet.contains(lastChar)\n        val containsWord = charSet.takeWhile(_.isLetter).isEmpty\
    \ \n        return !containsAlphabet && !containsWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7yohevl1.scala:26)\n\tat Problem.main(tmp7yohevl1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val alphabet = Set('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z')\n        val noLetterWords = Set(\"apple\", \"pi\", \"i\", \"pie \"\
    )\n        val isLetter : Boolean = alphabet(lastChar) || noLetterWords.contains(lastChar)\n\
    \        return isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wekn3y1.scala:21:78\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLetter\e\
    [0m : \e[35mBoolean\e[0m = alphabet(lastChar) || noLetterWords.contains(lastChar)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                     Found:    (lastChar : Char)\n\e[31m   |\e[0m           \
    \                                  Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        return\
    \ (txt != null && txt.last.isLetter) && (txt.last != \" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdxfxvh4j.scala:18:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m (txt != \e[31mnull\e[0m &&\
    \ txt.last.isLetter) && (txt.last != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                      ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ < 2) return false\n        else if (!txt.last.isLetter) return true\n      \
    \  else if (!txt.last.equalsIgnoreCase(\"e\") && !txt.last.equalsIgnoreCase(\"\
    i\") && !txt.last.equalsIgnoreCase(\"u\")) return true\n        else return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt8isg8j6.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (!txt.last.equalsIgnoreCase(\e\
    [31m\"e\"\e[0m) && !txt.last.equalsIgnoreCase(\e[31m\"i\"\e[0m) && !txt.last.equalsIgnoreCase(\e\
    [31m\"u\"\e[0m)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \   value equalsIgnoreCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        def charLastIsALetter(c:Char):\
    \ Boolean = {\n            (c == 'a') || \n            (c == 'b') || \n      \
    \      (c == 'c') || \n            (c == 'd') || \n            (c == 'e') || \n\
    \            (c == 'f') || \n            (c == 'g') || \n            (c == 'h')\
    \ || \n            (c == 'i') || \n            (c == 'j') || \n            (c\
    \ == 'k') || \n            (c == 'l') || \n            (c == 'm') || \n      \
    \      (c == 'n') || \n            (c == 'o') || \n            (c == 'p') || \n\
    \            (c == 'q') || \n            (c == 'r') || \n            (c == 's')\
    \ || \n            (c == 't') || \n            (c == 'u') || \n            (c\
    \ == 'v') || \n            (c == 'w') || \n            (c == 'x') || \n      \
    \      (c == 'y') || \n            (c == 'z')\n        }\n        txt.charAt(txt.length-1)(0\
    \ until txt.length-1) foreach (c => {\n            if (!charLastIsALetter(c))\
    \ {\n                return false\n            }\n        })\n        true\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpp7gvh2j1.scala:46:18 -----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        txt.charAt(txt.length-\e[31m1\e[0m)(\e[31m0\e\
    [0m until txt.length-\e[31m1\e[0m) foreach (\e[36mc\e[0m => {\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e\
    [0m \e[35mcharAt\e[0m in \e[33mclass\e[0m \e[35mString\e[0m does not take more\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Your\
    \ code here\n        var lastChar = txt(txt.length - 1)\n        for(x <- txt.drop(txt.length\
    \ - 1).split(\" \")){\n            if(x.last.isLetter){\n                lastChar\
    \ = x.last\n            }\n        }\n        txt.last.isLetter && !lastChar.contains(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzz95vp1a.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        txt.last.isLetter && !lastChar.contains(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.charAt(txt.length-1)\n        var isLastCharAlpha = lastChar.toUpper ==\
    \ lastChar\n        var isLastCharNotAlpha = lastChar.matches(\"\\\\W\")\n   \
    \     return isLastCharAlpha && !isLastCharNotAlpha\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyyd22uxg.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var isLastCharAlpha:\
    \ Boolean = false\n        var isLastCharAlphaWord: Boolean = false\n        var\
    \ currentChar: String = txt.last\n        var currentWord: String = txt.dropRight(1).mkString(\"\
    \ \")\n        var currentWordList: mutable.Set[String] = mutable.Set()\n    \
    \    currentWordList.add(currentWord)\n        for(x <- 0 to txt.length - 2) {\n\
    \            currentChar = txt.charAt(x)\n            currentWord = currentWord.dropRight(1)\n\
    \            currentWordList.add(currentWord)\n            if(isLastCharAlpha\
    \ && currentChar == currentWord.last) isLastCharAlphaWord = true\n           \
    \ if(!currentWordList.contains(currentWord)) isLastCharAlpha = false\n       \
    \ }\n        isLastCharAlpha\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuaj36en2.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mcurrentChar\e\
    [0m: \e[35mString\e[0m = txt.last\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ Found:    Char\n\e[31m   |\e[0m                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuaj36en2.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e\
    [36mcurrentWordList\e[0m: mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuaj36en2.scala:22:51 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mcurrentWordList\e[0m: mutable.Set[\e\
    [35mString\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                      \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpuaj36en2.scala:25:36 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            currentChar = txt.charAt(x)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                    Found:    Char\n\e[31m   |\e[0m                         \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpuaj36en2.scala:28:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \     \e[33mif\e[0m(isLastCharAlpha && currentChar == currentWord.last) isLastCharAlphaWord\
    \ = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659978793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Your\
    \ code here\n        var count = 0\n        for (i <- 0 to txt.length-1) {\n \
    \           if (txt(i) == txt(i+1))\n                count = count + 1\n     \
    \   }\n        if (count > 0)\n            return false\n        else\n      \
    \      return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 5\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.checkIfLastCharIsALetter$$anonfun$1(tmp5vwsq7br.scala:21)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.checkIfLastCharIsALetter(tmp5vwsq7br.scala:23)\n\
    \tat Problem$.main(tmp5vwsq7br.scala:30)\n\tat Problem.main(tmp5vwsq7br.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt.last.isLetter\n\
    \        // return false if lastChar is not a letter\n        if (!txt.last.isLetter)\
    \ false\n        else txt.last.isLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyx_28umn.scala:24)\n\tat Problem.main(tmpyx_28umn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var isALetter\
    \ = true\n        txt.last match {\n            case c if c != ' ' =>\n      \
    \          if (txt.indexOf(c) == txt.length-1)\n                    isALetter\
    \ = true\n                else\n                    isALetter = false\n      \
    \      case _ =>\n        }\n        return isALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsfi0frzg.scala:30)\n\tat Problem.main(tmpsfi0frzg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ > 0) {\n            if (txt.charAt(txt.length - 1) == ' ') {\n             \
    \   val word = \"abcdefghijklmnopqrstuvwxyz\".toList\n                var lastChar\
    \ = txt.charAt(txt.length - 1);\n                val words = txt.split(\" \");\n\
    \                for (word <- words) {\n                    lastChar = word.charAt(word.length\
    \ - 1);\n                    if (word.contains(lastChar)) {\n                \
    \        return false\n                    }\n                }\n            \
    \    return true\n            } else {\n                return false\n       \
    \     }\n        } else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpht3c62ae.scala:39)\n\tat Problem.main(tmpht3c62ae.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val list\
    \ = txt.split(' ')\n        var last = txt.last\n        for ( n <- list ) {\n\
    \            if ( last.charAt( txt.length - 1 ) == n.charAt( 0 ) ) {\n       \
    \         last = n\n            } else {\n                return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9bv5idky.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m ( last.charAt( txt.length -\
    \ \e[31m1\e[0m ) == n.charAt( \e[31m0\e[0m ) ) {\n\e[31m\e[31m   |\e[0m      \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value charAt is\
    \ not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9bv5idky.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                last = n\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : String)\n\e[31m   |\e[0m                       Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Split\
    \ the text by space\n        val words = txt.split(\" \")\n        var lastChar:\
    \ Char = ' '\n        // Iterate through the words and check the last character\n\
    \        for (wd <- words) {\n            lastChar = wd.last\n            if (lastChar\
    \ == ' ' || lastChar == '.' || lastChar == '!' || lastChar == '?' || lastChar\
    \ == '-' || lastChar == '/' || lastChar == '(' || lastChar == ')' || lastChar\
    \ == '-' || lastChar == '_' || lastChar == '=' || lastChar == '^' || lastChar\
    \ == '#' || lastChar == '@' || lastChar == '&' || lastChar == '*' || lastChar\
    \ == '~' || lastChar == '\\'' || lastChar == '?' || lastChar == '-' || lastChar\
    \ == '_' || lastChar == '=' || lastChar == '^' || lastChar == '#' || lastChar\
    \ == '@' || lastChar == '&' || lastChar == '*' || lastChar == '~' || lastChar\
    \ == '\\'' || lastChar == '?' || lastChar == '-' || lastChar == '_' || lastChar\
    \ == '=' || lastChar == '^' || lastChar == '#' || lastChar == '@' || lastChar\
    \ == '&' || lastChar == '*' || lastChar == '~' || lastChar == '\\'' || lastChar\
    \ == '?' || lastChar == '-' || lastChar == '_' || lastChar == '=' || lastChar\
    \ == '^' || lastChar == '#' || lastChar == '@' || lastChar == '&' || lastChar\
    \ == '*' || lastChar == '~' || lastChar == '\\'')\n                return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ktfebcr.scala:30)\n\tat Problem.main(tmp8ktfebcr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Write\
    \ your code here\n        var isLastCharAlphabetic= false\n        var count=0\n\
    \        for(word <- txt.split(\"\\\\s+\")) {\n            // Write your code\
    \ here\n            for(letter <- word) {\n                // Write your code\
    \ here\n                if(!isLastCharAlphabetic) {\n                    isLastCharAlphabetic\
    \ = isLetter(letter)\n                }\n            }\n        }\n        if(!isLastCharAlphabetic)\
    \ {\n            count++\n        }\n        return isLastCharAlphabetic && !count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdc2l2xdd.scala:31:19 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            count++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdc2l2xdd.scala:26:43\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    isLastCharAlphabetic\
    \ = isLetter(letter)\n\e[31m\e[31m   |\e[0m                                  \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \      Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdc2l2xdd.scala:33:39 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m        \e[33mreturn\e[0m isLastCharAlphabetic && !count\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value unary_! is not a member of Int - did you mean Int.unary_+?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        return\
    \ txt.last.isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeg0f5569.scala:21)\n\tat Problem.main(tmpeg0f5569.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if(txt.length()\
    \ > 1 && txt.charAt(txt.length() - 1) < 'a' || 'z' < txt.charAt(txt.length() -\
    \ 1))\n            return true\n        else\n            return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxbdtpdzn.scala:25)\n\tat Problem.main(tmpxbdtpdzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt match\
    \ {\n            case x if(txt.length >= 1) => \n                if((txt last\
    \ == x.toLowerCase && !(txt.contains(x.toLowerCase))))\n                    true\n\
    \                else\n                    false\n            case x => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfnistsie.scala:20:33 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m((txt last == x.toLowerCase\
    \ && !(txt.contains(x.toLowerCase))))\n\e[31m\e[31m   |\e[0m                 \
    \                ^\e[0m\n\e[31m   |\e[0m                                 expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpfnistsie.scala:20:24 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                \e[33mif\e[0m((txt last == x.toLowerCase && !(txt.contains(x.toLowerCase))))\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \           \e[33mmethod\e[0m \e[35mlast\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      val lastChar\
    \ = txt.last\n      val isAlphaNumeric = lastChar.matches(\"[a-zA-Z0-9]+\")\n\
    \      if(!isAlphaNumeric)\n        false\n      else {\n        var lastCharIndex\
    \ = txt.length - 1;\n        var lastChar = txt.last\n        var foundWord =\
    \ false\n        while (lastCharIndex >= 0) {\n          if (lastChar.isLetterOrDigit())\
    \ {\n            foundWord = true\n            break\n          } else if (lastChar.isWhitespace)\
    \ {\n            lastCharIndex = txt.length\n            break\n          }\n\
    \          lastCharIndex -= 1\n        }\n        if(foundWord)\n          false\n\
    \        else\n          true\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxa4ui5ei.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36misAlphaNumeric\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z0-9]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value matches is not a member of\
    \ Char\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpxa4ui5ei.scala:27:23 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m          \e[33mif\e[0m (lastChar.isLetterOrDigit())\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m       \e[33mmethod\e[0m \e[35misLetterOrDigit\e[0m in \e[33mclass\e\
    [0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxa4ui5ei.scala:29:12 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            break\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxa4ui5ei.scala:32:12 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            break\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n    \tif (txt.length\
    \ < 1) return false\n    \tval words = txt.split(\" \")\n    \tval word = words(words.length\
    \ - 1)\n    \tval chars = word.substring(1)\n    \tchars.forall(isLetter(_.toUpperCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr2kywwfj.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    \tchars.forall(isLetter(_.toUpperCase))\n\e[31m\e\
    [31m   |\e[0m    \t             ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \t         \
    \    Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        def lastChar(txt\
    \ : String) : Char = {\n            txt(txt .length-1)\n        }\n\n        val\
    \ words = txt.split(\" \")\n        var count = 0\n\n        for(word <- words)\
    \ {\n            val currentChar = lastChar(word)\n\n            if(currentChar\
    \ != 'a' && currentChar != 'e' && currentChar != 'i' && currentChar != 'o' &&\
    \ currentChar != 'u' && currentChar != 'A' && currentChar != 'E' && currentChar\
    \ != 'I' && currentChar != 'O' && currentChar != 'U') {\n                count\
    \ = count + 1\n            }\n        }\n\n        if(count < words.length) {\n\
    \            return false\n        } else {\n            return true\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd30laldn.scala:41)\n\tat Problem.main(tmpd30laldn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if(txt.length\
    \ <= 1) return false\n        var firstChar = txt.charAt(txt.length-1)\n     \
    \   var foundWord = false\n        for(word <- txt.split(\" \")) {\n         \
    \   if(firstChar.equals(word.charAt(0)) && firstChar.equals(word.charAt(word.length-1)))\
    \ {\n                foundWord = true\n            }\n        }\n        val result\
    \ = foundWord\n        val correct = txt.length > 2\n        val trueOrFalse =\
    \ if (result) correct else \"Wrong input!\"\n        println(trueOrFalse)\n  \
    \      return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3k0fp9i.scala:35)\n\tat Problem.main(tmpx3k0fp9i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'Wrong input!

    true

    true

    '
  timestamp: 1659978801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n    \tif (txt.length\
    \ != 0) {\n    \tval lastChar = txt(txt.length - 1);\n    \tval notWord = txt.lastIndexOf(\"\
    \ \")\n    \tval isWord = notWord != -1\n    \tval isALetter = lastChar.isLetter\n\
    \    \tif (isALetter && !isWord) {\n    \treturn true\n    \t} else {\n    \t\
    return false\n    \t}\n    \t}\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyawffum.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \t\e[33mif\e[0m (txt.length\
    \ != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m    \t^\e[0m\n\e[31m   |\e[0m    \t\
    Found:    Unit\n\e[31m   |\e[0m    \tRequired: Boolean\n\e[31m   |\e[0m    \t\
    Maybe you are missing an else part for the conditional?\n\e[31m19 |\e[0m    \t\
    \e[33mval\e[0m \e[36mlastChar\e[0m = txt(txt.length - \e[31m1\e[0m);\n\e[31m20\
    \ |\e[0m    \t\e[33mval\e[0m \e[36mnotWord\e[0m = txt.lastIndexOf(\e[31m\" \"\e\
    [0m)\n\e[31m21 |\e[0m    \t\e[33mval\e[0m \e[36misWord\e[0m = notWord != -\e[31m1\e\
    [0m\n\e[31m22 |\e[0m    \t\e[33mval\e[0m \e[36misALetter\e[0m = lastChar.isLetter\n\
    \e[31m23 |\e[0m    \t\e[33mif\e[0m (isALetter && !isWord) {\n\e[31m24 |\e[0m \
    \   \t\e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m25 |\e[0m    \t} \e[33melse\e[0m\
    \ {\n\e[31m26 |\e[0m    \t\e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m27 |\e[0m\
    \    \t}\n\e[31m28 |\e[0m    \t}\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978797
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      if (txt.length\
    \ < 1) return false\n      var isLastChar = txt.length-1\n      while (isLastChar\
    \ >= 0) {\n        if (txt(isLastChar).isLetter)\n          isLastChar = txt.length-1\n\
    \        else\n          return false\n      }\n      return true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val txtLength\
    \ = txt.length\n        // The last character is alphabetic\n        if(txtLength\
    \ > 0 && txt(txtLength - 1) == txt(txtLength - 1).toUpperCase()) {\n         \
    \   // No word is found\n            if(txtLength == 0 || txt(txtLength - 1) ==\
    \ \" \") {\n                return false\n            }\n            // The last\
    \ character is not part of a word\n            else {\n                var lastCharIndex\
    \ = 0\n                var word = \"\"\n                var charsToCheck = txt\n\
    \                // Loop through each character in charsToCheck\n            \
    \    // If it is not a space, last char is part of the word\n                for(\
    \ i <- 0 until charsToCheck.length ) {\n                    if(charsToCheck(i)\
    \ == \" \") {\n                        lastCharIndex = i\n                   \
    \     word += \"<space>\"\n                    }\n                    else {\n\
    \                        // Get the current character and compare it to word\n\
    \                        word += charsToCheck(i)\n                        if(word.endsWith(\"\
    <space>\")) {\n                            word += \"<space>\"\n             \
    \           }\n                    }\n                    // If the current character\
    \ is alphabetic\n                    // and was not the last character of the\
    \ word\n                    if(word.endsWith(\"<space>\") && word.length > 1)\
    \ {\n                        // Return false\n                        return false\n\
    \                    }\n                }\n                // If the last character\
    \ is alphabetic and is not part of a word\n                // Return true\n  \
    \              return (lastCharIndex == txtLength - 1)\n            }\n      \
    \  }\n        // If the last character is not a alphabetic character or is part\
    \ of a word\n        // Return false\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwit7s7f4.scala:20:69 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(txtLength > \e[31m0\e[0m && txt(txtLength\
    \ - \e[31m1\e[0m) == txt(txtLength - \e[31m1\e[0m).toUpperCase()) {\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpwit7s7f4.scala:22:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(txtLength == \e[31m0\e[0m ||\
    \ txt(txtLength - \e[31m1\e[0m) == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpwit7s7f4.scala:33:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mif\e[0m(charsToCheck(i) ==\
    \ \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659978803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Create\
    \ a Set of all the letters in the text\n        val letterSet = mutable.Set[Char](txt.last)\n\
    \        // Create a Set of all the letters in the text\n        // and remove\
    \ the last letter from the set of letters\n        letterSet.remove(txt.last)\n\
    \        // Return false if the set is empty\n        if(letterSet.isEmpty) false\n\
    \        // Otherwise, return true if the last letter is not in the set\n    \
    \    else !letterSet.contains(txt.last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpee55tmbd.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mletterSet\e[0m = mutable.Set[\e\
    [35mChar\e[0m](txt.last)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        for (elem\
    \ <- txt.split(\" \")) if (elem.last.isLetter) false\n        else true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5uq_8f.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (elem\
    \ <- txt.split(\e[31m\" \"\e[0m)) \e[33mif\e[0m (elem.last.isLetter) \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: Boolean\n\e[31m19 |\e[0m        \e[33melse\e\
    [0m \e[31mtrue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n\n        // return true if the last character is an alphabetic\
    \ character \n        // and not a part of a word\n        if(lastChar.isAlphabetic){\n\
    \            return !txt.contains(lastChar)\n        }\n        // otherwise return\
    \ false\n        else{\n            return false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazo6rmmk.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m(lastChar.isAlphabetic){\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \ value isAlphabetic is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val a =\
    \ txt.length\n        if(a <= 0 || a == 1){\n            return false\n      \
    \  }\n        val txtArray = txt.split(\" \")\n        val b = txtArray.length\n\
    \        if(a < b){\n            return false\n        }\n        return txtArray(b\
    \ - 1)(b.length - 1) == txtArray(b)(b.length - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_nb6j5q4.scala:27:33 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mreturn\e[0m txtArray(b - \e[31m1\e[0m)(b.length\
    \ - \e[31m1\e[0m) == txtArray(b)(b.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value length is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_nb6j5q4.scala:27:62 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mreturn\e[0m txtArray(b - \e[31m1\e[0m)(b.length\
    \ - \e[31m1\e[0m) == txtArray(b)(b.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                            ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value length is not a member\
    \ of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659978803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val len\
    \ = txt.length\n        if(len < 1) true\n        if(txt.last == ' ') false\n\
    \        val word = txt.substring(len - 1, 1)\n        if(word.matches(\"[a-zA-Z]\"\
    ))\n            true\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 4, end 1, length 5\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmp0u8utf_4.scala:21)\n\tat Problem$.main(tmp0u8utf_4.scala:27)\n\
    \tat Problem.main(tmp0u8utf_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var isALetter\
    \ = false\n        if (txt.length > 0){\n            if (txt.last.isLetter){\n\
    \                isALetter = true\n            }\n        }\n        return isALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpogxbcb3j.scala:27)\n\tat Problem.main(tmpogxbcb3j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt match\
    \ {\n        case \"\" => false\n        case x if(x.toCharArray.length == 1)\
    \ => x.toCharArray.last.toString.toUpperCase().equals(\"A\")\n        case _ =>\
    \ true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoibxrdxo.scala:25)\n\tat Problem.main(tmpoibxrdxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length()\
    \ == 0) return false\n        val chars = txt.substring(0,txt.length()-1).split(\"\
    \ \").map(_.toUpperCase)\n        val lastChar = txt.substring(txt.length()-1)\n\
    \        chars.contains(lastChar) && lastChar.matches(\"[a-z]+\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9cscp0ut.scala:25)\n\tat Problem.main(tmp9cscp0ut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val a =\
    \ txt.last\n        val words = txt.split\n        val b = (words.last.equals(\"\
    \")) || (words.last.equals(a))\n        val c = words.last.forall(_.matches(\"\
    [a-zA-Z]*\"))\n        val d = words.last.forall(x => x.equals(a))\n        val\
    \ e = words.last.forall(x => x.equals(\"\"))\n        return b || c || d || e\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpdvwrbwte.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = txt.split\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String):\
    \ Array[String]\n\e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m\
    \   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var isLastCharALetter\
    \ = true\n        if (txt.length == 0){\n            isLastCharALetter = false\n\
    \        }\n        else{\n            val lastChar = txt.last\n            if\
    \ (lastChar == \" \" || lastChar == \"\\n\"){\n                isLastCharALetter\
    \ = false\n            }\n            else{\n                val lastCharUpper\
    \ = lastChar.toUpperCase()\n                val wordList = List(\"A\", \"E\",\
    \ \"I\", \"O\", \"U\")\n                for (word <- wordList){\n            \
    \        if (lastCharUpper.contains(word)){\n                        isLastCharALetter\
    \ = false\n                        break\n                    }\n            \
    \    }\n            }\n        }\n        return isLastCharALetter\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1qz3dbmq.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (lastChar == \e[31m\" \"\e\
    [0m || lastChar == \e[31m\"\\n\"\e[0m){\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp1qz3dbmq.scala:24:35\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     \e[33mif\e[0m (lastChar == \e[31m\" \"\e[0m || lastChar == \e[31m\"\\n\"\
    \e[0m){\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1qz3dbmq.scala:28:45\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e\
    [0m \e[36mlastCharUpper\e[0m = lastChar.toUpperCase()\n\e[31m\e[31m   |\e[0m \
    \                                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qz3dbmq.scala:33:24 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978806
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ == 0){\n            return false\n        }\n        var word = \"\"\n     \
    \   for(i <- 0 until txt.length){\n            word += txt(i)\n        }\n   \
    \     if (word.last.isLetter){\n            return false\n        }\n        val\
    \ words = txt.split(\" \")\n        for (word <- words) {\n            if (word.length\
    \ <= word.length){\n                return false\n            }\n        }\n \
    \       return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp0prgo6v.scala:38)\n\tat Problem.main(tmpp0prgo6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        def checkLastChar(last\
    \ : String, ch : Char): Boolean = {\n            if (last != \"\" && last.lastChar.isUpperCase\
    \ && !last.contains(ch))\n                return true\n            return false\n\
    \        }\n        var last = \"\"\n        var foundWord = false\n        var\
    \ words = txt.split(\" \").toList\n        words.foreach{ word =>\n          \
    \  val l = word.length\n            if (last != \"\") {\n                val lastWord\
    \ = last.split(\" \")\n                if (lastWord.last.length == l)\n      \
    \              foundWord = checkLastChar(lastWord, word.lastChar)\n          \
    \  }\n            foundWord = foundWord || checkLastChar(last, word.lastChar)\n\
    \            last = word.lastChar\n        }\n        foundWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsr9lwdhl.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (last != \e[31m\"\"\e[0m &&\
    \ last.lastChar.isUpperCase && !last.contains(ch))\n\e[31m\e[31m   |\e[0m    \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               value lastChar is not a member of String\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsr9lwdhl.scala:31:46 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                    foundWord = checkLastChar(lastWord, word.lastChar)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (lastWord :\
    \ Array[String])\n\e[31m   |\e[0m                                    Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsr9lwdhl.scala:31:61\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    foundWord\
    \ = checkLastChar(lastWord, word.lastChar)\n\e[31m\e[31m   |\e[0m            \
    \                                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value lastChar is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsr9lwdhl.scala:33:62 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            foundWord = foundWord || checkLastChar(last,\
    \ word.lastChar)\n\e[31m\e[31m   |\e[0m                                      \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value lastChar is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpsr9lwdhl.scala:34:24 ------------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m            last = word.lastChar\n\e[31m\e[31m   |\e[0m       \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value lastChar\
    \ is not a member of String\n5 errors found\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      val lastChar\
    \ = txt.last\n      val result = lastChar.matches(\"[a-zA-Z]+\") && !lastChar.startsWith(\"\
    _\")\n      result\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp57qy2sk_.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m) && !lastChar.startsWith(\e[31m\"_\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var chars\
    \ = txt.split(\" \").toList.tail\n        if (chars.isEmpty) false\n        else\
    \ chars.last match {\n        case c if Character.isLetter(c) && !Character.isLetter(c(txt.length-1))\
    \ => true\n        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5f9ul1z7.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mcase\e[0m c \e[33mif\e[0m Character.isLetter(c)\
    \ && !Character.isLetter(c(txt.length-\e[31m1\e[0m)) => \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35misLetter\e[0m in \e[33mobject\e\
    [0m \e[35mCharacter\e[0m with types\n\e[31m   |\e[0m (x$0: Int): Boolean\n\e[31m\
    \   |\e[0m (x$0: Char): Boolean\n\e[31m   |\e[0mmatch arguments ((c : String))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val charsAfterLastChar = txt.init\n        val charsAfterLastCharStr\
    \ = charsAfterLastChar.toString.trim\n        val isLastCharALetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        !charsAfterLastCharStr.contains(charsAfterLastCharStr.trim)\
    \ && !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm_7do6c5.scala:26)\n\tat Problem.main(tmpm_7do6c5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastWord = words(words.length-1)\n  \
    \      val lastChar = lastWord.charAt(lastWord.length-1)\n        val isLetter\
    \ = Character.isLetter(lastChar)\n        !isLetter && lastWord.length>0\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfb2l5oa.scala:26)\n\tat Problem.main(tmpjfb2l5oa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ : String = \"\"\n        txt.zipWithIndex.foreach{\n            case (char,\
    \ idx) => {\n                if (idx > 0 && char != txt.charAt(idx-1)) {\n   \
    \                 lastChar = char\n                }\n            }\n        }\n\
    \        if (lastChar.isEmpty) {\n            return false\n        }\n      \
    \  if (lastChar.toLowerCase != \"a\") {\n            return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpainq6gf4.scala:22:31\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    lastChar\
    \ = char\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    (char : Char)\n\e[31m   |\e\
    [0m                               Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      // First\
    \ create a list of chars to check.\n      val charsToCheck = txt.toCharArray.dropRight(1).filter{\n\
    \        case c => c != ' '\n      }\n\n      // If there is at least one character\
    \ that is not alphabetical\n      // then return false.\n      if (charsToCheck.isEmpty)\
    \ false\n      // If there is at least one alphabetical character then return\
    \ true.\n      else if (charsToCheck.exists(c => c.isLetter)) true\n      else\
    \ checkIfLastCharIsALetter(txt.dropRight(1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnmy9nkzs.scala:31)\n\tat Problem.main(tmpnmy9nkzs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(words.length-1)\n  \
    \      val wordChars = lastChar.split(\"\")\n        val alphabet = wordChars.toList\n\
    \        if (alphabet.forall(_.isLetter)) {\n            if (!words.last.contains(\"\
    #\")) {\n                return false\n            } else {\n                return\
    \ true\n            }\n        } else {\n            return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26njy83c.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (alphabet.forall(_.isLetter)) {\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value isLetter is not a member of String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ : String = \"\"\n        for(ch <- txt.last) lastChar += ch\n        // Check\
    \ last character for alphanumeric characters.\n        // Return true if it is,\
    \ false otherwise.\n        val isALetter = lastChar.toSet.subsetOf(\"abcdefghijklmnopqrstuvwxyz\"\
    .toSet)\n        return !isALetter\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_htzz6d.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(ch <- txt.last) lastChar += ch\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \          value foreach is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Complete\
    \ this line\n        // YOUR CODE HERE\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwd71khka.scala:17:59\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m    \e[33mdef\e[0m \e[36mcheckIfLastCharIsALetter\e\
    [0m(\e[36mtxt\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m\
    \   |\e[0m                                                           ^\e[0m\n\e\
    [31m   |\e[0m                                                       Found:   \
    \ Unit\n\e[31m   |\e[0m                                                      \
    \ Required: Boolean\n\e[31m18 |\e[0m        \e[34m// Complete this line\e[0m\n\
    \e[31m19 |\e[0m        \e[34m// YOUR CODE HERE\e[0m\n\e[31m20 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val chars\
    \ = txt.tail\n        val last = chars.last\n        val word = txt.substring(0,\
    \ txt.length-1)\n        val charsWord = word.split(\"\\\\s+\")\n        // If\
    \ the last character is a letter but not part of a word\n        // return false\n\
    \        if(last.isLetter) {\n            if(charsWord.size > 0) {\n         \
    \       charsWord.foreach(el => {\n                    if (el != last) {\n   \
    \                     return false\n                    }\n                })\n\
    \            } else {\n                return false\n            }\n        }\
    \ else {\n            return true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcef3hzma.scala:27:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mif\e[0m (el != last) {\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types String and Char cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        for (x\
    \ <- txt) {\n            if (x != txt.last.charAt(txt.last.length-1)) {\n    \
    \            return false\n            }\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv7rndjf0.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (x != txt.last.charAt(txt.last.length-\e\
    [31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     value charAt is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpv7rndjf0.scala:19:46 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (x != txt.last.charAt(txt.last.length-\e\
    [31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        def lastCharIsALetter(char\
    \ : String): Boolean =\n            char.length == 1 || ('A' <= char.head && char.head\
    \ <= 'Z')\n        def isLastCharALetter(char : String): Boolean =\n         \
    \   char.length == 1 || ('A' <= char && char <= 'Z')\n        txt.tail.forall(lastCharIsALetter)\n\
    \        && !txt.init.init.forall(isLastCharALetter)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvhdvlimt.scala:21:37 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            char.length == \e[31m1\e[0m || (\e[31m'A'\e\
    [0m <= char && char <= \e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m<=\e[0m in \e[33mclass\e[0m \e[35mChar\e[0m with\
    \ types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\
    \e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m\
    \   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((char : String))\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvhdvlimt.scala:22:24 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        txt.tail.forall(lastCharIsALetter)\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Found:    (char : Char)\n\e[31m   |\e[0m                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvhdvlimt.scala:23:33\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        && !txt.init.init.forall(isLastCharALetter)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (char : Char)\n\e[31m   |\e[0m   \
    \                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978814
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var result\
    \ = false\n        var lastChar = txt.last\n        for (letter <- 'a' to 'z')\
    \ {\n            if (lastChar == letter) {\n                result = true\n  \
    \          } else {\n                result = false\n            }\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzz0a58sw.scala:31)\n\tat Problem.main(tmpzz0a58sw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      txt.last.isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpklr862ff.scala:21)\n\tat Problem.main(tmpklr862ff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      // TODO:\
    \ Write your solution here\n      txt.last == txt.last.charAt && txt.last.matches(\"\
    [a-zA-Z]+\")\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyqitctr0.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      txt.last == txt.last.charAt && txt.last.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value charAt is not a member of Char\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659978814
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      txt match\
    \ {\n        case \"\" => false\n        case _ => {\n          txt.length-1 match\
    \ {\n            case 0 => false\n            case n => {\n              if (txt.charAt(n)\
    \ == 'a' || txt.charAt(n) == 'e' || txt.charAt(n) == 'i' || txt.charAt(n) == 'o'\
    \ || txt.charAt(n) == 'u') {\n                false\n              } else {\n\
    \                true\n              }\n            }\n          }\n        }\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vhnjh1s.scala:36)\n\tat Problem.main(tmp9vhnjh1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Your\
    \ code goes here\n        val list = txt.toList\n        val lastChar = list.last\n\
    \        var isLastCharAlpha: Boolean = true\n\n        // Iterate over each char\
    \ in the string\n        for (char <- list.tail) {\n            if (char.isLetter)\
    \ {\n                isLastCharAlpha = false\n            } else {\n         \
    \       isLastCharAlpha = true\n            }\n        }\n\n        // Return\
    \ true if the last char is a letter\n        // and is not part of a word.\n \
    \       // Examples:\n        // >>> checkIfLastCharIsALetter((\"apple pie\"))\n\
    \        // (false)\n        // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n\
    \        // (true)\n        // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \        // (false)\n        // >>> checkIfLastCharIsALetter((\"\"))\n       \
    \ // (false)\n        isLastCharAlpha\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxn1d1s3s.scala:47)\n\tat Problem.main(tmpxn1d1s3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        while (!lastChar.isLetter){\n            lastChar = txt.last\n\
    \        }\n        return lastChar.isLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptgla21th.scala:25)\n\tat Problem.main(tmptgla21th.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        return\
    \ txt.last.matches(\"[a-zA-Z]+\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6l0k34ok.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m txt.last.matches(\e[31m\"[a-zA-Z]+\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var bRet\
    \ : Boolean = true\n        if (txt.length < 1 )\n            return false\n \
    \       var bFirstCharIsUpper = true // this should hold the state of each character\
    \ in the string\n        var bFirstCharIsLower = true\n        var bFirstCharIsCap\
    \ = true // this should hold the state of each character in the string\n     \
    \   var bFirstCharIsAll = true\n        var bLastCharIsUpper = true // this should\
    \ hold the state of each character in the string\n        var bLastCharIsLower\
    \ = true\n        var bLastCharIsCap = true // this should hold the state of each\
    \ character in the string\n        var bLastCharIsAll = true\n        var bCapsOnly\
    \ = false\n        var bAllCaps = false\n        var bFirstCharIsNum = true\n\
    \        var bLastCharIsNum = true\n        var bFirstCharIsUpperNum = true\n\
    \        var bLastCharIsUpperNum = true\n        var bFirstCharIsLowerNum = true\n\
    \        var bLastCharIsLowerNum = true\n        var bFirstCharIsCapNum = true\n\
    \        var bLastCharIsCapNum = true\n        var bFirstCharIsAllNum = true\n\
    \        var bLastCharIsAllNum = true\n        var bFirstCharIsUpperAllNum = true\n\
    \        var bLastCharIsUpperAllNum = true\n        var bFirstCharIsLowerAllNum\
    \ = true\n        var bLastCharIsLowerAllNum = true\n        var bFirstCharIsCapAllNum\
    \ = true\n        var bLastCharIsCapAllNum = true\n        var bFirstCharIsAllNum\
    \ = true\n        var bLastCharIsAllNum = true\n        var bFirstCharIsUpperCapNum\
    \ = true\n        var bLastCharIsUpperCapNum = true\n        var bFirstCharIsLowerCapNum\
    \ = true\n        var bLastCharIsLowerCapNum = true\n        var bFirstCharIsCapNum\
    \ = true\n        var bLastCharIsCapNum = true\n        var bFirstCharIsAllCapNum\
    \ = true\n        var bLastCharIsAllCapNum = true\n        var bFirstCharIsUpperAllCapNum\
    \ = true\n        var bLastCharIsUpperAllCapNum = true\n        var bFirstCharIsLowerAllCapNum\
    \ = true\n        var bLastCharIsLowerAllCapNum = true\n        var bFirstCharIsCapAllCapNum\
    \ = true\n        var bLastCharIsCapAllCapNum = true\n        var bFirstCharIsAllCapNum\
    \ = true\n        var bLastCharIsAllCapNum = true\n        var bFirstCharIsUpperNum\
    \ = true\n        var bLastCharIsUpperNum = true\n        var bFirstCharIsLowerNum\
    \ = true\n        var bLastCharIsLowerNum = true\n        var bFirstChar\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqamnv3dy.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqamnv3dy.scala:47:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mbFirstCharIsAllNum\e[0m = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbFirstCharIsAllNum is already\
    \ defined as \e[33mvariable\e[0m \e[35mbFirstCharIsAllNum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqamnv3dy.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mbLastCharIsAllNum\e[0m = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbLastCharIsAllNum is already\
    \ defined as \e[33mvariable\e[0m \e[35mbLastCharIsAllNum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqamnv3dy.scala:53:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m53 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mbFirstCharIsCapNum\e[0m = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbFirstCharIsCapNum is already\
    \ defined as \e[33mvariable\e[0m \e[35mbFirstCharIsCapNum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqamnv3dy.scala:54:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mbLastCharIsCapNum\e[0m = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbLastCharIsCapNum is already\
    \ defined as \e[33mvariable\e[0m \e[35mbLastCharIsCapNum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqam"
  stdout: ''
  timestamp: 1659978816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lst\
    \ = txt.split(\" \").toList\n        lst.last.forall(_.isLetter)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi7t3ijs.scala:22)\n\tat Problem.main(tmpwi7t3ijs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt.length\
    \ == 0 ||\n        txt.last.matches(\"[a-zA-Z]+$\") || \n        txt.last.equals(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8qvx859_.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        txt.last.matches(\e[31m\"[a-zA-Z]+$\"\e[0m) ||\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if(txt.length<1\
    \ || txt.isEmpty) false\n        else (txt(txt.length-1)!='a' && (txt.lastIndexOf('\
    \ ')==txt.length-1))\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4pk8e18t.scala:23)\n\tat Problem.main(tmp4pk8e18t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var txt1\
    \ = txt\n        var flag = true\n        val lastChar = txt1.last\n        if\
    \ (lastChar == \" \"){\n            txt1 = txt1.substring(0.0,txt1.length-1)\n\
    \        }\n        txt1.toLowerCase match {\n            case \" \" => flag =\
    \ false\n            case _ => if (lastChar >= 'a' && lastChar <= 'z'){\n    \
    \            flag = false\n            }\n        }\n        return flag\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp842am85g.scala:21:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (lastChar == \e[31m\" \"\e[0m){\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp842am85g.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            txt1 = txt1.substring(\e[31m0.0\e[0m,txt1.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    (\e[31m0.0d\e[0m :\
    \ Double)\n\e[31m   |\e[0m                                  Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val last\
    \ = txt.last\n        val word = \"a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z\".split(\" \")\n        word.contains(last)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1lwkzanj.scala:20:22\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        word.contains(last)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              Found:    (last : Char)\n\e[31m   |\e[0m                      Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) !txt.contains(\" \") && !txt.contains(lastChar)\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlrtp7g0.scala:24)\n\tat Problem.main(tmpjlrtp7g0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // TODO:\
    \ Implement this function\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkstk83g2.scala:17:59\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m    \e[33mdef\e[0m \e[36mcheckIfLastCharIsALetter\e\
    [0m(\e[36mtxt\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m\
    \   |\e[0m                                                           ^\e[0m\n\e\
    [31m   |\e[0m                                                       Found:   \
    \ Unit\n\e[31m   |\e[0m                                                      \
    \ Required: Boolean\n\e[31m18 |\e[0m        \e[34m// TODO: Implement this function\e\
    [0m\n\e[31m19 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastWord = words(words.length-1)\n        val\
    \ lastChar = lastWord.last\n        val allLetters = lastWord.map(c => c to false)\n\
    \        val notInWord = allLetters.filter(_._2).filter(_._1)\n        (lastChar\
    \ != ' ' && lastChar != lastWord.last) && (notInWord.exists(_._2))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbgibh48y.scala:21:48\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mallLetters\e\
    [0m = lastWord.map(\e[36mc\e[0m => c to \e[31mfalse\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                             Found:    (\e[31mfalse\e[0m : Boolean)\n\
    \e[31m   |\e[0m                                             Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbgibh48y.scala:22:44\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mnotInWord\e[0m = allLetters.filter(_._2).filter(_._1)\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^\e[0m\n\e[31m   |\e[0mvalue _2\
    \ is not a member of scala.collection.immutable.NumericRange.Inclusive[Char]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbgibh48y.scala:22:57 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnotInWord\e[0m = allLetters.filter(_._2).filter(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue _1 is not a member of scala.collection.immutable.NumericRange.Inclusive[Char]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbgibh48y.scala:23:78 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        (lastChar != \e[31m' '\e[0m && lastChar != lastWord.last)\
    \ && (notInWord.exists(_._2))\n\e[31m\e[31m   |\e[0m                         \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ _2 is not a member of scala.collection.immutable.NumericRange.Inclusive[Char]\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        def isLastCharAlpha(txt:\
    \ String) : Boolean = {\n            var retVal = false\n            for(i <-\
    \ txt.length-1 to 0 by -1){\n                if(txt(i) != 'a' && txt(i) != 'i'\
    \ && txt(i) != 'e' && txt(i) != 'o' && txt(i) != 'p' && txt(i) != 'u' && txt(i)\
    \ != 'y' && txt(i) != 'r' && txt(i) != 'l' && txt(i) != 's'){\n              \
    \      retVal = true\n                    break\n                }\n         \
    \   }\n            retVal\n        }\n        if(txt.length < 1){\n          \
    \  false\n        }else{\n            if(txt.length > 1 && txt(txt.length-1) !=\
    \ ' '){\n                false\n            }else{\n                isLastCharAlpha(txt)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9p8we5qv.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if(txt.length\
    \ < 1) {\n            return false\n        }\n        val lastChar = txt(txt.length-1)\n\
    \        var index = 0\n        while(index+1 < txt.length) {\n            if(Character.isLetter(txt(index))\
    \ == false) {\n                return false\n            }\n            index\
    \ = index + 1\n        }\n        if(Character.isLetter(lastChar) == true && index+1\
    \ >= txt.length-1) {\n            return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwr59e1do.scala:36)\n\tat Problem.main(tmpwr59e1do.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var result\
    \ = false\n        if (txt.length > 0){\n            val lastChar = txt.last\n\
    \            if (lastChar.isLetter)\n                result = !txt.last.isLetter\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2bp8_0g.scala:28)\n\tat Problem.main(tmpi2bp8_0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        var isLastCharALetter : Boolean = false\n\
    \        val lastChar = words(txt.length - 1).charAt(0)\n        for (word <-\
    \ words)\n            if (word == word + \" \")\n                isLastCharALetter\
    \ = true\n            if (word == lastChar)\n                isLastCharALetter\
    \ = false\n            if (word != word + \" \") {\n                isLastCharALetter\
    \ = true\n                break\n            }\n        return isLastCharALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1wkxmhne.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (word == lastChar)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1wkxmhne.scala:28:16 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                break\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val pattern\
    \ = \"^[a-zA-Z]+$\"\n        val re = \"\"\"^[a-zA-Z]+$\"\"\".r\n        val result\
    \ = re.findFirstIn(txt).get.length==txt.length\n        if (!result) false\n \
    \       else true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph6ghoo9y.scala:25)\n\tat Problem.main(tmph6ghoo9y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var isLastCharALetter\
    \ = true\n        val splitWords = txt.split(\" \")\n        splitWords.foreach(word\
    \ => {\n            val lastChar = word.last\n            if(!Character.isLetter(lastChar)\
    \ && !Character.isDigit(lastChar))\n                isLastCharALetter = false\n\
    \        })\n        return isLastCharALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ieirdvz.scala:28)\n\tat Problem.main(tmp5ieirdvz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length - 2)\n  \
    \      val lastCharIsALetter = lastChar.toString.toList.toSet.isEmpty || (lastChar.toString.toList.exists(\
    \ _.isLetter))\n        return lastCharIsALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmprp1cqmfu.scala:19)\n\tat Problem$.main(tmprp1cqmfu.scala:24)\n\
    \tat Problem.main(tmprp1cqmfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val newText\
    \ = txt.init\n        for (i <- newText.length-1 until newText.length) \n    \
    \        if (newText(i) != ' ' && newText(i) != '\\n' && newText(i) != '\\t')\
    \ \n                return newText(i).toChar.isAlpha\n        return false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp60esci_j.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mreturn\e[0m newText(i).toChar.isAlpha\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value isAlpha is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val list\
    \ = mutable.ListBuffer[String]()\n        for (c <- txt.toCharArray) {\n     \
    \       if ((c != ' ') && (c != ':') && (c != '!') && (c != '?') && (c != '$')\n\
    \                    && (c != '#') && (c != '$') && (c != '%') && (c != '&') &&\
    \ (c != '*')\n                    && (c != '+') && (c != '.') && (c != '-') &&\
    \ (c != '/') && (c != '(')\n                    && (c != ')') && (c != '?') &&\
    \ (c != '@') && (c != '[') \n                    && (c != ']') && (c != '^') &&\
    \ (c != '_') && (c != '{') \n                    && (c != '}') && (c != '~') &&\
    \ (c != '|') && (c != '=') && (c != '+')\n                    && (c != ';') &&\
    \ (c != '?') && (c != '[') && (c != ']') && (c != '^')\n                    &&\
    \ (c != '_') && (c != '{') && (c != '}') && (c != '~') && (c != '|')\n       \
    \             && (c != '=') && (c != '+') && (c != ';') && (c != '?') && (c !=\
    \ '[') \n                    && (c != ']') && (c != '^') && (c != '_') && (c !=\
    \ '{') \n                    && (c != '}') && (c != '~') && (c != '|') && (c !=\
    \ '=') && (c != '+')\n                    && (c != ';') && (c != '?') && (c !=\
    \ '[') && (c != ']') && (c != '^')\n                    && (c != '_') && (c !=\
    \ '{') && (c != '}') && (c != '~') && (c != '|')\n                    && (c !=\
    \ '=') && (c != '+') && (c != ';') && (c != '?') && (c != '[') \n            \
    \        && (c != ']') && (c != '^') && (c != '_') && (c != '{') \n          \
    \          && (c != '}') && (c != '~') && (c != '|') && (c != '=') && (c != '+')\n\
    \                    && (c != ';') && (c != '?') && (c != '[') && (c != ']') &&\
    \ (c != '^')\n                    && (c != '_') && (c != '{') && (c != '}') &&\
    \ (c != '~') && (c != '|')\n                    && (c != '=') && (c != '+') &&\
    \ (c != ';') && (c != '?') && (c != '[') \n                    && (c != ']') &&\
    \ (c != '^') && (\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprpk3pkgy.scala:39:52 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                    && (c != \e[31m']'\e[0m) && (c !=\
    \ \e[31m'^'\e[0m) && (\n\e[31m\e[31m   |\e[0m                                \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmprpk3pkgy.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprpk3pkgy.scala:18:19\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprpk3pkgy.scala:54:1\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmprpk3pkgy.scala:41:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt.lastChar.forall(_.isLetter)\
    \ && txt.lastChar.forall(!_.isLetter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_318aq7.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        txt.lastChar.forall(_.isLetter) && txt.lastChar.forall(!_.isLetter)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value lastChar\
    \ is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      val words\
    \ = txt.split(\" \")\n      val lastChar = txt(txt.length - 1) //get the last\
    \ character\n      //check if last character is an alphabetical character and\n\
    \      //not part of a word\n      for (w <- words){\n        if (w.charAt(w.length\
    \ - 1) == lastChar){\n          return false\n        }\n      }\n      true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprywgzupe.scala:31)\n\tat Problem.main(tmprywgzupe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ <= 0) return false\n        // use pattern matching to find the last alphabetic\
    \ character\n        txt match {\n            case a :: b :: Nil => a!=b.toChar\n\
    \            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0_eocrti.scala:21:39 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m a :: b :: Nil => a!=b.toChar\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     value toChar is not a member of\
    \ Any\n1 error found\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar.matches(\"[A-Za-z]\")\n        !isLetter\
    \ && txt.last.length < txt.length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdl0vi3jg.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.matches(\e\
    [31m\"[A-Za-z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      val words\
    \ = txt.split(\"\\\\s+\")\n      var lastChar = txt.length - 1\n      var startIndex\
    \ = 0\n      for (word <- words) {\n        if (word.length > 0) {\n         \
    \ lastChar = word.last\n          startIndex = lastChar + 1\n          break\n\
    \        }\n      }\n      for (char <- txt.substring(startIndex, lastChar)) {\n\
    \        if (char.matches(\"[a-zA-Z]+\")) {\n          return false\n        }\n\
    \      }\n      return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpes1109ad.scala:25:10 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m          break\n\e[31m\e[31m   |\e[0m          ^^^^^\e\
    [0m\n\e[31m   |\e[0m          Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpes1109ad.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (char.matches(\e[31m\"[a-zA-Z]+\"\
    \e[0m)) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value matches is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      var char\
    \ : String = txt.last\n      char = char.toLowerCase\n      var alphabetCharSet\
    \ = Set(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'))\n      var isLetter\
    \ = alphabetCharSet.contains(char)\n      isLetter = !isLetter\n      return isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjy3vmn4q.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mvar\e[0m \e[36mchar\e\
    [0m : \e[35mString\e[0m = txt.last\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Char\n\
    \e[31m   |\e[0m                          Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjy3vmn4q.scala:21:46 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mvar\e[0m \e[36misLetter\e[0m = alphabetCharSet.contains(char)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0mFound:    (char : String)\n\e[31m   |\e[0mRequired: (Char, Char,\
    \ Char, Char, Char, Char, Char, Char, Char, Char, Char, Char, Char, \n\e[31m \
    \  |\e[0m  Char\n\e[31m   |\e[0m, Char, Char, Char, Char, Char, Char, Char, Char,\
    \ Char, Char, Char, Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var isLetter\
    \ = true\n        for(res <- txt.tail)\n            if(res !='\\''&&res !='-'\
    \ && res !='_'){\n                isLetter = false\n                break\n  \
    \          }\n        isLetter\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjq2u551n.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if(txt.size\
    \ == 0 || txt.size < 2) {\n            return false\n        }\n        if(txt.last.isLetter)\
    \ {\n            return false\n        }\n        var lastChar = txt.last\n  \
    \      for(c <- txt.init) {\n            if(c.toString.toInt == lastChar.toInt\
    \ + 1) {\n                lastChar = c\n            } else {\n               \
    \ break\n            }\n        }\n        return lastChar.toString.toInt == 26\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqu6q60a9.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.matches(\"[a-z]+\")) {\n            return true\n\
    \        }\n        else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq97l71t6.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(lastChar.matches(\e[31m\"[a-z]+\"\
    \e[0m)) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m           value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val last_char\
    \ = txt.last\n        if(last_char.toString.equals(\" \"))\n            return\
    \ false\n        val wordList = txt.split(\" \").filter(_ != last_char)\n    \
    \    if(wordList.length == 0)\n            return false\n        val lastWord\
    \ = wordList.last\n        if(lastWord.toString.equals(\" \"))\n            return\
    \ true\n        if(lastWord.toString.equals(last_char))\n            return false\n\
    \        val wordList = txt.split(\" \").filter(_ != lastWord)\n        if(wordList.length\
    \ == 0)\n            return false\n        val lastWord2 = wordList.last\n   \
    \     if(lastWord2.toString.equals(\" \"))\n            return true\n        if(lastWord2.toString.equals(last_char))\n\
    \            return false\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu96u1rfi.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = txt.split(\e\
    [31m\" \"\e[0m).filter(_ != lastWord)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordList is already defined as \e[33mvalue\e[0m \e[35mwordList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpu96u1rfi.scala:21:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mwordList\e[0m = txt.split(\e[31m\" \"\e[0m).filter(_ !=\
    \ last_char)\n\e[31m\e[31m   |\e[0m                                          \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char\
    \ cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ == 0) return false\n        else if (txt.charAt(txt.length-1) == ' ') return\
    \ true\n        else if (txt.charAt(txt.length-1) == ' ') return false\n     \
    \   else {\n            var word = \"\"\n            for(i <- 0 until txt.length-1)\n\
    \            {\n                if (txt.charAt(i) == ' ') word = word + \" \"\n\
    \                else word = word + txt.charAt(i)\n            }\n           \
    \ word = word.trim\n            if (word == \"\") word = word.toUpperCase\n  \
    \          word = word.substring(0,word.length-1)\n            val l = word.length()\n\
    \            val arr = Array('a', 'e', 'i', 'o', 'u')\n            var valid =\
    \ false\n            for(i <- 0 to l)\n            {\n                if (word.indexOf(arr(i))\
    \ != -1) valid = true\n                else valid = false\n            }\n   \
    \         return valid\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length\
    \ 5\n\tat Problem$.checkIfLastCharIsALetter$$anonfun$2(tmp16zhmwvh.scala:36)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.checkIfLastCharIsALetter(tmp16zhmwvh.scala:38)\n\
    \tat Problem$.main(tmp16zhmwvh.scala:44)\n\tat Problem.main(tmp16zhmwvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if(txt.length\
    \ > 0){\n          val lastChar = txt.last\n          if(lastChar <= 'z' || lastChar\
    \ >= 'a'){\n            return false\n          }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyb2149_h.scala:28)\n\tat Problem.main(tmpyb2149_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        lastChar match {\n            case x if x.isLetter()  =>\
    \  false\n            case x if !x.isLetter() =>  true\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpeba8sytr.scala:20:24 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.isLetter()\
    \  =>  \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              \e[33mmethod\e[0m \e[35misLetter\e[0m in \e\
    [33mclass\e[0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpeba8sytr.scala:21:25 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m !x.isLetter()\
    \ =>  \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              \e[33mmethod\e[0m \e[35misLetter\e[0m in \e\
    [33mclass\e[0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.last\n        val words = txt.split(\"\
    \ \").mkString(\"\")\n        // Replace all letters with empty string\n     \
    \   txt = txt.mkString(\"\").replaceAll(\"[^a-z]\", \"\")\n        return lastChar\
    \ == txt.last\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp9afc3w00.scala:22:12 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        txt = txt.mkString(\e[31m\"\"\e[0m).replaceAll(\e\
    [31m\"[^a-z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val txt\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val last\
    \ = txt.last\n        val arr = txt.split(\" \").map(_.toUpperCase)\n        if(arr.contains(last.toUpperCase\
    \ + last.dropRight(1))) {\n            return false\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpul5n1fj5.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(arr.contains(last.toUpperCase +\
    \ last.dropRight(\e[31m1\e[0m))) {\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value toUpperCase\
    \ is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastWord = words(words.length-1)\n        val\
    \ lastWordChar = lastWord.toChar\n        val wordChars = for (word <- words)\
    \ yield {\n            val wordChar = word.toChar\n            if (wordChar !=\
    \ lastWordChar)\n                false\n            else\n                true\n\
    \        }\n        wordChars.reduce(_ or _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbl6f_n6f.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastWordChar\e[0m = lastWord.toChar\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           value toChar is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbl6f_n6f.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mwordChar\e[0m = word.toChar\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           value toChar is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbl6f_n6f.scala:28:27 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        wordChars.reduce(_ or _)\n\e[31m\e[31m   |\e\
    [0m                         ^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  value or is not a member of Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1659978833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = txt.last\n        if(lastChar.toChar.isLetter)\n\
    \            return false\n        val lastWord = words.last\n        if(lastWord.last.toChar.isLetter)\n\
    \            return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppxrwatgb.scala:29)\n\tat Problem.main(tmppxrwatgb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ == 0) false\n        else {\n            val l = txt.length - 1\n          \
    \  if (txt(l)!='a' && txt(l)!='e' && txt(l)!='i' && txt(l)!='o' && txt(l)!='u')\
    \ false\n            else true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkavivji8.scala:26)\n\tat Problem.main(tmpkavivji8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        while (lastChar != ' ') {\n            lastChar = lastChar.last\n\
    \        }\n        return lastChar != ' ' && !(txt.contains(\" \"))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpir_crzct.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            lastChar = lastChar.last\n\e[31m\e[31m  \
    \ |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \            value last is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        lastChar match {\n            case _ if lastChar.matches(\"\
    [a-zA-Z]\") && txt.length != txt.size => true\n            case _ => false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp48b1joqn.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m _ \e[33mif\e[0m lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m) && txt.length != txt.size => \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n    \ttxt match\
    \ {\n    \t\tcase x if x.last == x.init.last && !(x.init contains x.last) => true\n\
    \    \t\tcase x if x.last == x.init.last && x.init contains x.last => true\n \
    \   \t\tcase _ => false\n    \t}\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8lrww23.scala:20:45\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \t\t\e[33mcase\e[0m x \e\
    [33mif\e[0m x.last == x.init.last && x.init contains x.last => \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m    \t\t                                   ^^^^^^\e[0m\n\e\
    [31m   |\e[0m    \t\t                                   Found:    String\n\e[31m\
    \   |\e[0m    \t\t                                   Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        def isLastCharALetter(i\
    \ : Int) : Boolean = i >= txt.length-1 && txt(i) != ' ' && txt(i) != '.' && txt(i)\
    \ != '!' && txt(i) != '?' && txt(i) != ',' && txt(i) != '&' && txt(i) != '(' &&\
    \ txt(i) != ')' && txt(i) != '[' && txt(i) != ']' && txt(i) != '-' && txt(i) !=\
    \ '/' && txt(i) != '-' && txt(i) != '~' && txt(i) != '!' && txt(i) != '?' && txt(i)\
    \ != ',' && txt(i) != '&' && txt(i) != '(' && txt(i) != ')' && txt(i) != '[' &&\
    \ txt(i) != ']'\n        isLastCharALetter(txt.length-1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqj9a3c6.scala:22)\n\tat Problem.main(tmpdqj9a3c6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt match\
    \ {\n            case x if x.last.isLetter == false => false\n            case\
    \ x if x.last.isLetter => true\n            case _ => false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ga4r9u_.scala:25)\n\tat Problem.main(tmp4ga4r9u_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val newString = txt take txt.length - 1 +: txt.dropRight(1)\n\
    \        val words = newString.split(\" \").filter(_.nonEmpty).toSet\n       \
    \ val chars = lastChar.toChar\n        val charSet = chars.toSet.subsetOf(words.toSet)\n\
    \        if (charSet.contains(lastChar)) {\n            false\n        } else\
    \ {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E041] Syntax Error: /tmp/tmp_d9862af.scala:19:46 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewString\e[0m = txt take\
    \ txt.length - \e[31m1\e[0m +: txt.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                              ^\e[0m\n\e[31m   |\e[0m- (which\
    \ is left-associative) and +: (which is right-associative) have same precedence\
    \ and may not be mixed\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_d9862af.scala:19:44\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e\
    [0m \e[36mnewString\e[0m = txt take txt.length - \e[31m1\e[0m +: txt.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m match arguments (IndexedSeq[AnyVal])\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_d9862af.scala:22:28 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mcharSet\e[0m = chars.toSet.subsetOf(words.toSet)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \        value toSet is not a member of Char - did you mean chars.toInt?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val len\
    \ = txt.length\n        val lastChar = txt.last\n        val words = txt.split(\"\
    \ \")\n        var isLastCharAPie = false\n        var isLastCharAWord = false\n\
    \        // if the last char is a letter\n        if(lastChar.matches(\"[a-zA-Z]\"\
    )) {\n            // check the words to see if it is in a word\n            for\
    \ (w <- words) {\n                if(w.contains(lastChar)) {\n               \
    \     isLastCharAWord = true\n                    break\n                }\n \
    \           }\n            // if it is a letter and it is in a word\n        \
    \    if(isLastCharAWord) {\n                // find the last character in the\
    \ word\n                val lastCharInWord = words.last.indexOf(lastChar)\n  \
    \              // if the last character is part of the word\n                if(lastCharInWord\
    \ != -1) {\n                    isLastCharAPie = true\n                }\n   \
    \         }\n        }\n        // if it is not the last char\n        if(isLastCharAPie)\
    \ {\n            val wordLen = words.length\n            // if the word has more\
    \ than one char\n            if(wordLen > 1) {\n                // find the last\
    \ character in the word\n                val lastCharInWord = words.last.indexOf(lastChar)\n\
    \                // if the last character is part of the word\n              \
    \  if(lastCharInWord != -1) {\n                    val prevLastChar = words.last.lastIndexOf(lastChar)\n\
    \                    val lastWordChar = words.last.substring(lastCharInWord, prevLastChar)\n\
    \                    if(lastWordChar.matches(\"[a-zA-Z]\")) {\n              \
    \          // return true\n                        true\n                    }\
    \ else {\n                        // return false\n                        false\n\
    \                    }\n                } else {\n                    // return\
    \ false\n                    false\n                }\n            } else {\n\
    \                // return false\n                false\n            }\n     \
    \   } else {\n            // return false\n            false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbt5yxa1.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m(lastChar.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m           value matches is not a member of Char\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdbt5yxa1.scala:29:20 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m                    break\n\e[31m\e[31m   |\e[0m              \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ < 2) return false\n        if (txt.last.isUpperCase || txt.last.isLowerCase\
    \ || txt.last.isDigit || txt.last.isSymbol) return false\n        val lastChar\
    \ = txt.last\n        val words = txt.split\n        if (words.length < 2) return\
    \ false\n        words.tail.forall {w =>\n            if (w.isEmpty) true\n  \
    \          else if (w.isEmpty) false\n            else {\n                val\
    \ first = w.head\n                if (first.isUpperCase || first.isLowerCase ||\
    \ first.isDigit || first.isSymbol) false\n                else lastChar.equals(first)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9e9c6v0y.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (txt.last.isUpperCase || txt.last.isLowerCase\
    \ || txt.last.isDigit || txt.last.isSymbol) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value isUpperCase is not a member of Char\n\e[31m\e[31m-- [E051] Reference\
    \ Error: /tmp/tmp9e9c6v0y.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = txt.split\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mboth match\
    \ expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if(txt.last\
    \ != ' ' && txt.last.isLetter){\n            return true\n        }else{\n   \
    \         return false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeen8ms5t.scala:25)\n\tat Problem.main(tmpeen8ms5t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastCharIndex\
    \ = txt.length - 1\n        // Check for last char\n        if (lastCharIndex\
    \ < 0) {\n            return false\n        }\n\n        var lastChar = txt(lastCharIndex)\n\
    \        // Check for word\n        val split = txt.split(\" \")\n        val\
    \ letters = split.map(x => x.toUpperCase())\n\n        // Check for space in middle\
    \ of word\n        if (lastChar == \" \")\n            return false\n\n      \
    \  if (letters.contains(lastChar)) {\n            return false\n        }\n\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjfnbgvrg.scala:30:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (lastChar == \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjfnbgvrg.scala:33:29 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mif\e[0m (letters.contains(lastChar)) {\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Found:    (lastChar : Char)\n\e[31m   |\e[0m \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      var flag\
    \ = false\n      for (i <- txt.length until (txt.length-1)) {\n        if (i >\
    \ 0) {\n          if (txt.charAt(i).toUpper == txt.charAt(i-1)) flag = true\n\
    \        }\n      }\n      return flag\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ty0seh9.scala:28)\n\tat Problem.main(tmp2ty0seh9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length()\
    \ == 1) return false\n        if (txt.last.matches(\"\\\\w\")) return false\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo0g8e6p8.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (txt.last.matches(\e[31m\"\\\\\
    w\"\e[0m)) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var flag\
    \ = false\n        val words = txt.split(\" \")\n        val word = words(words.length-1)\n\
    \        val wordWithoutSpace = word.trim\n        val lastLetter = wordWithoutSpace.last\n\
    \        val letter = lastLetter.charAt(0)\n        if (lastLetter.length == 1\
    \ && letter == 'a')\n            flag = true\n        return flag\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo27l7l6_.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mletter\e[0m = lastLetter.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     value charAt is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpo27l7l6_.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (lastLetter.length == \e[31m1\e\
    [0m && letter == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val wordLength\
    \ = txt.split(\" \").length\n        if(wordLength != 0) return lastChar.toUpperCase\
    \ == lastChar\n        if(wordLength == 0) return lastChar.toUpperCase == lastChar\n\
    \        val word = words.last\n        if(word == \"\") return lastChar.toUpperCase\
    \ == lastChar\n        val lastCharArray = word.split(\"\")\n        lastCharArray.last\
    \ == lastChar\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvi8i3f3x.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(wordLength != \e[31m0\e[0m) \e\
    [33mreturn\e[0m lastChar.toUpperCase == lastChar\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                          value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvi8i3f3x.scala:22:44 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m(wordLength == \e[31m0\e[0m) \e\
    [33mreturn\e[0m lastChar.toUpperCase == lastChar\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                          value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvi8i3f3x.scala:24:39 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m(word == \e[31m\"\"\e[0m) \e[33mreturn\e\
    [0m lastChar.toUpperCase == lastChar\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \        value toUpperCase is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmpvi8i3f3x.scala:26:8\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m      \
    \  lastCharArray.last == lastChar\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val l =\
    \ txt.length\n        for(i <- 0 until l)\n            if(!Character.isLetter(txt.charAt(l-1)))\n\
    \                return false\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8i5hhblv.scala:25)\n\tat Problem.main(tmp8i5hhblv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Initialize\
    \ counter variable\n        var counter = 0\n\n        // Loop through every character\
    \ in string\n        for (c <- txt.toCharArray) {\n            // If character\
    \ is not a letter, increment counter\n            if (c.isLetter == false && counter\
    \ > 0) {\n                counter += 1\n            }\n            // If counter\
    \ equals 0, last character is a letter\n            if (counter == 0) {\n    \
    \            return true\n            }\n        }\n\n        // If counter still\
    \ equals 0, last character is not a letter\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4cvnoi4r.scala:37)\n\tat Problem.main(tmp4cvnoi4r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var isAlphaChar\
    \ = true\n        var lastChar = txt.last\n        val words = txt.split\n   \
    \     for (i <- 0 until words.size) {\n            val word = words(i)\n     \
    \       if (word.startsWith(lastChar)) {\n                isAlphaChar = false\n\
    \                lastChar = word.substring(word.length - 1)\n            }\n \
    \       }\n        isAlphaChar\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpd_87nn3a.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = txt.split\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String):\
    \ Array[String]\n\e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m\
    \   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      if(txt.length\
    \ > 0) {\n        if(txt.last.matches(\"[a-zA-Z]\"))\n          return false\n\
    \        for(i <- 0 until txt.length-1)\n          if(txt(i).matches(\"[a-zA-Z]\"\
    ))\n            return false\n      }\n      true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp642vc51r.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(txt.last.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m))\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           value matches is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp642vc51r.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m          \e[33mif\e[0m(txt(i).matches(\e[31m\"[a-zA-Z]\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ matches is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        def isLastCharALetter(c\
    \ : String) : Boolean = c.toString.last.isAlpha\n        def isNotLastCharALetter(c\
    \ : String) : Boolean = !c.toString.last.isAlpha\n        txt match {\n      \
    \      case \"\" => false\n            case _ => !txt.tail.foldLeft(false) { (res,\
    \ c) => res && isLastCharALetter(c) || isNotLastCharALetter(c) }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjqj2582y.scala:18:70 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mdef\e[0m \e[36misLastCharALetter\e[0m(\e\
    [36mc\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = c.toString.last.isAlpha\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value isAlpha is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjqj2582y.scala:19:74\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e\
    [36misNotLastCharALetter\e[0m(\e[36mc\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e\
    [0m = !c.toString.last.isAlpha\n\e[31m\e[31m   |\e[0m                        \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   value isAlpha is not a member of Char\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjqj2582y.scala:22:87 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m _ => !txt.tail.foldLeft(\e\
    [31mfalse\e[0m) { (res, c) => res && isLastCharALetter(c) || isNotLastCharALetter(c)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                   Found:    (c : Char)\n\e[31m   |\e[0m    \
    \                                                Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjqj2582y.scala:22:114 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m _ => !txt.tail.foldLeft(\e\
    [31mfalse\e[0m) { (res, c) => res && isLastCharALetter(c) || isNotLastCharALetter(c)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659978843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      txt.length\
    \ >= 1 \n          && !(txt.charAt(txt.length - 1) == 'a' \n              || txt.charAt(txt.length\
    \ - 1) == 'e' \n              || txt.charAt(txt.length - 1) == 'i' \n        \
    \      || txt.charAt(txt.length - 1) == 'o' \n              || txt.charAt(txt.length\
    \ - 1) == 'u')\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbyj4bdoo.scala:27)\n\tat Problem.main(tmpbyj4bdoo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Get\
    \ the last character of the string\n        var lastChar = txt.last\n        //\
    \ Split the string into an array using the space character as delimiter.\n   \
    \     val words = txt.split(\" \").map(_.trim())\n        // For every word in\
    \ the array\n        for (word <- words) {\n            // If the last character\
    \ of the word is a letter\n            if (lastChar.matches(\"[a-zA-Z]\")) {\n\
    \                // Break the loop and return false\n                false\n \
    \           } else {\n                // Otherwise, return true\n            \
    \    true\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr4c8aa13.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (lastChar.matches(\e[31m\"\
    [a-zA-Z]\"\e[0m)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value matches is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.lastChar\n        val noLastChar\
    \ = lastChar.isAlpha\n        val isLastCharNotALetter = !noLastChar.isAlpha\n\
    \        val notInWords = words.exists(word => !word.contains(lastChar))\n   \
    \     return notInWords && isLastCharNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6_mw24iu.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastChar\e[0m = txt.lastChar\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value lastChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt match\
    \ {\n            case \"\" => false\n            case x if x.last.matches(\"\\\
    \\w\") => false\n            case x if x.last.matches(\"[a-hA-H]\") => true\n\
    \            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph21yqu5x.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.last.matches(\e\
    [31m\"\\\\w\"\e[0m) => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value matches\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph21yqu5x.scala:21:29\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e\
    [0m x \e[33mif\e[0m x.last.matches(\e[31m\"[a-hA-H]\"\e[0m) => \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      value matches is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val text\
    \ = txt.toLowerCase\n        val lastCh = text.charAt(text.length-1)\n       \
    \ for (word <- text.split(\" \") if word.contains(lastCh))\n            return\
    \ false\n        return true\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj01gkf2j.scala:26)\n\tat Problem.main(tmpj01gkf2j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Your\
    \ code here\n        var isAlpha = new mutable.HashSet[Char]()\n        for(c\
    \ <- txt.toCharArray()){\n            if(c.isLetter){\n                isAlpha\
    \ += c\n            }\n        }\n        if(isAlpha.last != txt.last){\n    \
    \        false\n        }else{\n            true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmxt76f5k.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36misAlpha\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var index\
    \ = 0\n        var lastChar = txt.charAt(txt.length-1)\n        // check if the\
    \ last character is a letter\n        if(lastChar >= 'a' && lastChar <= 'z')\n\
    \        {\n            // check if the last character is a part of a word\n \
    \           while(index <= txt.length-1){\n                if(txt.charAt(index)\
    \ == ' '){\n                    return false\n                }\n            \
    \    index+=1\n            }\n            return true\n        }\n        // otherwise\
    \ return false\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_88im0g1.scala:36)\n\tat Problem.main(tmp_88im0g1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Write\
    \ your code here\n        var isLastCharALetter = false\n        val splitString\
    \ = txt.split(\" \").length\n        var lastIndex = 0\n        for(i <- 0 to\
    \ splitString - 1) {\n            if(i == splitString - 1) {\n               \
    \ if((txt.charAt(lastIndex) != \"z\") && (txt.charAt(lastIndex) != \"Z\")) {\n\
    \                    isLastCharALetter = true\n                }\n           \
    \ }\n            lastIndex = lastIndex + 1\n        }\n        return isLastCharALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0l1zio9n.scala:24:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m((txt.charAt(lastIndex)\
    \ != \e[31m\"z\"\e[0m) && (txt.charAt(lastIndex) != \e[31m\"Z\"\e[0m)) {\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp0l1zio9n.scala:24:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m((txt.charAt(lastIndex)\
    \ != \e[31m\"z\"\e[0m) && (txt.charAt(lastIndex) != \e[31m\"Z\"\e[0m)) {\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.isEmpty)\
    \ {\n            return false\n        }\n\n        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            return false\n        }\n\n   \
    \     val words = txt.split\n        words.foreach(word => {\n            val\
    \ wordArray = word.split(\"\")\n            wordArray.reverse.foreach(char =>\
    \ {\n                if (char == lastChar) {\n                    return false\n\
    \                }\n            })\n        })\n        return true\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpxsu0n6me.scala:27:24 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = txt.split\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String):\
    \ Array[String]\n\e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m\
    \   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        return\
    \ (txt != \"\") && (txt.last.isLetter) && (!txt.last.equals(\"-\"))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2im2hnub.scala:21)\n\tat Problem.main(tmp2im2hnub.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val last = words(txt.length-1)\n        last match\
    \ {\n            case c : Char => c.isLetter\n            case _ => false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[33m\e[33m-- [E030] Match case Unreachable Warning: /tmp/tmpgau728fl.scala:21:17\
    \ ---------\e[0m\e[0m\n\e[33m21 |\e[0m            \e[33mcase\e[0m c : Char =>\
    \ c.isLetter\n\e[33m\e[33m   |\e[0m                 ^^^^^^^^\e[0m\n\e[33m   |\e\
    [0m                 Unreachable case\n\e[31m\e[31m-- Error: /tmp/tmpgau728fl.scala:21:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33mcase\e[0m c : Char => c.isLetter\n\e[31m\e[31m   |\e[0m          \
    \       ^\e[0m\n\e[31m   |\e[0mthis case is unreachable since type String is not\
    \ a subclass of \e[33mclass\e[0m \e[35mCharacter\e[0m\n1 warning found\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.last\n        if (lastChar.matches(\"\
    \\\\w\")) false\n        else true\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmofgm9h.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (lastChar.matches(\e[31m\"\\\\\
    w\"\e[0m)) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value matches is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Add\
    \ your solution here\n        val isLastCharAlpha: Boolean = txt.last.matches(\"\
    [A-Za-z]\") && !txt.last.contains(\"\\\\s\")\n        val isNotWord: Boolean =\
    \ txt.last.matches(\"[a-zA-Z]*$\")\n        val isNotLastCharAlpha : Boolean =\
    \ !isLastCharAlpha && isNotWord\n        isLastCharAlpha && isNotLastCharAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp642ud21l.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m: \e\
    [35mBoolean\e[0m = txt.last.matches(\e[31m\"[A-Za-z]\"\e[0m) && !txt.last.contains(\e\
    [31m\"\\\\s\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \ value matches is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp642ud21l.scala:20:42 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36misNotWord\e[0m: \e[35mBoolean\e[0m = txt.last.matches(\e\
    [31m\"[a-zA-Z]*$\"\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ matches is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      val lc =\
    \ txt.last\n      val isLastLetter = (lc >= 'a' && lc <= 'z')\n      val isLastWord\
    \ = txt.split(\" \").last != txt\n      val isLastChar = !isLastWord && (isLastLetter)\n\
    \      isLastChar\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pljplmn.scala:25)\n\tat Problem.main(tmp0pljplmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase)\n        words.lastOption match {\n  \
    \          case Some(word) if (txt.last.toString.isLetter && !word.toString.contains(txt.last.toString))\
    \ => true\n            case _                                         => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphoeuo682.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Some(word) \e[33mif\e[0m\
    \ (txt.last.toString.isLetter && !word.toString.contains(txt.last.toString)) =>\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val text\
    \ = txt.mkString(\"\")\n        val lastChar = text.last\n        if(lastChar.length\
    \ <= 1)\n            true\n        else\n            lastChar.matches(\"[a-zA-Z]\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmk53mon_.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(lastChar.length <= \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   value length is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmk53mon_.scala:23:21 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value matches is\
    \ not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val notALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        notALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd28e4swe.scala:23)\n\tat Problem.main(tmpd28e4swe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val c =\
    \ txt.last\n        val a = ('A' to 'Z').toSet\n        val w = (' ' to '~').toSet\n\
    \        val isALetter = (a contains c)\n        val isWord = w contains c\n \
    \       !isALetter && !isWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpemugd2h0.scala:27)\n\tat Problem.main(tmpemugd2h0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Convert\
    \ txt into a list of characters.\n        // Use a map and fold to check each\
    \ character and\n        // accumulate the return value into a new variable.\n\
    \        val txtChars = txt.split(\" \").map(_.toChar)\n        val txtCharsMap:\
    \ Map[Char,Int] = txtChars.foldLeft(Map[Char,Int]())((m,c) => (m(c) + ( m(c) <\
    \ 32 || m(c) > 126 ) ? m.updated(c,1) : m))\n        val charsNotAWord = txtCharsMap(\"\
    A\") + txtCharsMap(\"a\") + txtCharsMap(\"e\") + txtCharsMap(\"i\") + txtCharsMap(\"\
    o\") + txtCharsMap(\"u\")\n        charsNotAWord == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnhx7lex7.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mtxtChars\e[0m = txt.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \     value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpnhx7lex7.scala:21:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mtxtChars\e[0m = txt.split(\e[31m\" \"\e[0m).map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnhx7lex7.scala:23:40 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33mval\e[0m \e[36mcharsNotAWord\e[0m = txtCharsMap(\e[31m\"A\"\e[0m)\
    \ + txtCharsMap(\e[31m\"a\"\e[0m) + txtCharsMap(\e[31m\"e\"\e[0m) + txtCharsMap(\e\
    [31m\"i\"\e[0m) + txtCharsMap(\e[31m\"o\"\e[0m) + txtCharsMap(\e[31m\"u\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (\e[32m\"A\"\e[0m\
    \ : String)\n\e[31m   |\e[0m                                        Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnhx7lex7.scala:23:59\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcharsNotAWord\e\
    [0m = txtCharsMap(\e[31m\"A\"\e[0m) + txtCharsMap(\e[31m\"a\"\e[0m) + txtCharsMap(\e\
    [31m\"e\"\e[0m) + txtCharsMap(\e[31m\"i\"\e[0m) + txtCharsMap(\e[31m\"o\"\e[0m)\
    \ + txtCharsMap(\e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                                   Found:    (\e[32m\"a\"\e[0m : String)\n\e\
    [31m   |\e[0m                                                Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer e"
  stdout: ''
  timestamp: 1659978852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.charAt(txt.length-1)\n      \
    \  words.foreach(word => {\n            if(word.charAt(word.length-1) == lastChar)\
    \ {\n                return false\n            }\n        })\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzvmxbfpf.scala:29)\n\tat Problem.main(tmpzvmxbfpf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val arr\
    \ = txt.toLowerCase.split(\" \").toList\n        val lastChar = arr(arr.length-1)\n\
    \        val isAlphaNumeric = lastChar.isDigit() || lastChar.isUppercase || lastChar.isLowercase\n\
    \        isAlphaNumeric\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppwoix6wr.scala:20:38 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misAlphaNumeric\e[0m = lastChar.isDigit()\
    \ || lastChar.isUppercase || lastChar.isLowercase\n\e[31m\e[31m   |\e[0m     \
    \                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \               value isDigit is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val alphabet\
    \ = scala.collection.mutable.Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        if (txt.length\
    \ != 0){\n            val lastChar = txt.charAt(txt.length-1)\n            if\
    \ (alphabet.contains(lastChar))\n                return false\n            else\n\
    \                return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq8nlbocm.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (alphabet.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                  Found:    (lastChar : Char)\n\e[31m\
    \   |\e[0m                                  Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'A' && lastChar <= 'Z'\n     \
    \   val isAlphanumeric = lastChar >= '0' && lastChar <= '9'\n        isAlpha &&\
    \ !isAlphanumeric\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bl_lw_f.scala:25)\n\tat Problem.main(tmp4bl_lw_f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var foundOne\
    \ = false\n        var lastChar = txt.length - 1\n        for (i <- 0 to txt.length\
    \ - 1) {\n            if (txt(i) == txt(lastChar)) {\n                foundOne\
    \ = true\n            } else {\n                lastChar--\n            }\n  \
    \      }\n        return foundOne\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0zuvtrsh.scala:24:26 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                lastChar--\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharAlpha = true\n        \n        for(char <-\
    \ lastChar.toCharArray){\n            if(!Character.isLetter(char)){\n       \
    \         isLastCharAlpha = false\n            }\n        }\n        \n      \
    \  return !isLastCharAlpha\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbdxemt4g.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(char <- lastChar.toCharArray){\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toCharArray is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        lastChar = lastChar.toLowerCase\n        lastChar match\
    \ {\n            case \" \" => false\n            case c => c.isLetter\n     \
    \       case _ => false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyd7afqf3.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lastChar = lastChar.toLowerCase\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \             value toLowerCase is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpyd7afqf3.scala:21:17 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m\" \"\e[0m => \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ <= 0) {\n            return false\n        }\n        var last = txt.last\n\
    \        for ( i <- 0 until txt.length ) {\n            val c = txt(i).toChar\n\
    \            val next = txt(i + 1)\n            if ( c != next ) {\n         \
    \       last = c\n            }\n            if ( last.equals( c.toString ) )\
    \ {\n                break\n            }\n        }\n        if ( last.equals(\
    \ c.toString ) ) {\n            return false\n        } else {\n            return\
    \ true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3exs0xqe.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3exs0xqe.scala:32:26 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m ( last.equals( c.toString ) ) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt match\
    \ {\n            case \"\" | null => false\n            case _ => {\n        \
    \        txt.last.isLetter\n                txt.last.diff(\" \") match {\n   \
    \                 case Seq(\"a\",\"e\",\"i\",\"o\",\"u\") => false\n         \
    \           case Seq(\"a\", \"e\", \"i\", \"o\", \"u\") => true\n            \
    \        case Seq(\"a\", \"e\", \"i\", \"o\", \"u\") => false\n              \
    \      case _ => false\n                }\n            }\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpma7qilxr.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                txt.last.diff(\e[31m\" \"\e[0m) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value diff is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val word\
    \ = txt.split(\"\\\\s+\").last\n        if (word.length > 0 && !word.matches(\"\
    [a-z]+\"))\n          return true\n        else\n          return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcz9i453c.scala:26)\n\tat Problem.main(tmpcz9i453c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if(txt.length\
    \ <= 0) {\n            return false\n        }\n        val lastChar = txt.last\n\
    \        if(lastChar != ' ' && lastChar != '\\t') {\n            return true\n\
    \        }\n        return checkIfLastCharIsALetter(txt.dropRight(1))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6d70tv58.scala:28)\n\tat Problem.main(tmp6d70tv58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        // Extract\
    \ the last character from the string.\n        // Check if the character is an\
    \ alphabet character,\n        // and if so, return true.\n        // Otherwise,\
    \ return false.\n        txt.last.forall(_.isLetter) && !txt.last.split(\" \"\
    ).exists (_.equals(txt.last))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphpxce7fk.scala:22:17 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        txt.last.forall(_.isLetter) && !txt.last.split(\e\
    [31m\" \"\e[0m).exists (_.equals(txt.last))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value forall is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if (lastChar.equals(\"\"))\n            return false\n \
    \       else\n            return lastChar.matches(\"[A-z]\") && !txt.split(\"\
    \ \").last.contains(lastChar)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkdhpalvz.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mreturn\e[0m lastChar.matches(\e[31m\"\
    [A-z]\"\e[0m) && !txt.split(\e[31m\" \"\e[0m).last.contains(lastChar)\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \            value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val str\
    \ = txt.mkString.toLowerCase\n        str.length <= txt.length && str.last.isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbdblvm58.scala:22)\n\tat Problem.main(tmpbdblvm58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n      val txtChar\
    \ = txt.last\n      var isLastCharALetter = true\n      var isLastCharALetterWord\
    \ = true\n      var isLastCharALetterPunctuation = true\n\n      // If last char\
    \ is a word character, check all word chars\n      // for not being part of a\
    \ word.\n      if (txtChar != ' ') {\n        for (char <- txt.splitAt(txt.length\
    \ - 1))\n          if (char.equals(\" \"))\n            isLastCharALetterWord\
    \ = false\n\n        // If last char is a punctuation char, check all punctuation\n\
    \        // chars for not being part of a word.\n        if (txtChar != '.')\n\
    \          for (char <- txt.splitAt(txt.length - 1))\n            if (char.equals(\"\
    ,\")\n              || char.equals(\"!\")\n              || char.equals(\"?\"\
    )\n              || char.equals(\":\")\n              || char.equals(\";\")\n\
    \              || char.equals(\".\")\n              || char.equals(\":\"))\n \
    \             isLastCharALetterPunctuation = false\n      }\n      isLastCharALetter\
    \ = !txt.contains(\" \") && isLastCharALetterWord && isLastCharALetterPunctuation\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_kywzo47.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m (char <- txt.splitAt(txt.length\
    \ - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value foreach is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_kywzo47.scala:33:23\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m          \e[33mfor\e[0m\
    \ (char <- txt.splitAt(txt.length - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \               value foreach is not a member of (String, String)\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_kywzo47.scala:43:24 --------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m      isLastCharALetter = !txt.contains(\e[31m\" \"\e\
    [0m) && isLastCharALetterWord && isLastCharALetterPunctuation\n\e[31m\e[31m  \
    \ |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    Unit\n\e[31m   |\e[0m      Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        txt match\
    \ {\n        case head +: tail => tail match {\n            case head +: tail\
    \ if tail contains tail.toString.last => false\n            case _ => true\n \
    \       }\n        case _ => false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcre7lkdl.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcre7lkdl.scala:20:38\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m head +: tail \e[33mif\e[0m tail contains tail.toString.last => \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value contains is not a member of\
    \ Nothing\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcre7lkdl.scala:38:1\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpcre7lkdl.scala:25:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m25 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val text\
    \ = txt.map(_.toString).getOrElse(\"\")\n        val charArray = text.map(c =>\
    \ c.toChar).toArray\n        charArray.reverse.dropWhile(c => c != '\\s').reverse.dropWhile(c\
    \ => charArray.length == 1)\n            .dropRight(1)\n            .forall(c\
    \ => c > 'z' && c < 'a') // checks if the last character is alphabetic\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmyp7qxov.scala:20:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        charArray.reverse.dropWhile(\e[36mc\e[0m => c\
    \ != \e[31m'\\s'\e[0m).reverse.dropWhile(\e[36mc\e[0m => charArray.length == \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \     ^\e[0m\n\e[31m   |\e[0m                                                invalid\
    \ escape character\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmyp7qxov.scala:18:39\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mtext\e[0m = txt.map(_.toString).getOrElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value getOrElse is not a member of IndexedSeq[String]\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ != 0) txt.last.isLetter()\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpxnp15g2a.scala:18:38 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (txt.length != \e[31m0\e[0m) txt.last.isLetter()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              \e[33mmethod\e[0m \e[35misLetter\e[0m in \e[33mclass\e\
    [0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.length-1\n        for (c <- txt(lastChar))\n            if (c.isLetter)\n\
    \                return false\n            else\n                lastChar--\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd6u_ff1c.scala:23:26 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                lastChar--\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpd6u_ff1c.scala:19:18 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (c <- txt(lastChar))\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    value foreach is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length\
    \ == 0) return false\n        val lastChar = txt(txt.length-1)\n        if (lastChar.isLetter()\
    \ && lastChar.asLetter != \" \") false\n        else true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpeehtk5m0.scala:20:21 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (lastChar.isLetter() && lastChar.asLetter\
    \ != \e[31m\" \"\e[0m) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            \e[33mmethod\e[0m \e[35misLetter\e[0m in \e[33mclass\e\
    [0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978857
